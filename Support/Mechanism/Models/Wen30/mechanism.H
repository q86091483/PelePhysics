#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  H
1  O
2  N
*/

// Species
#define H2_ID 0
#define O2_ID 1
#define H_ID 2
#define O_ID 3
#define OH_ID 4
#define HO2_ID 5
#define H2O_ID 6
#define H2O2_ID 7
#define NO_ID 8
#define NH3_ID 9
#define NH2_ID 10
#define NH_ID 11
#define N_ID 12
#define NNH_ID 13
#define N2H4_ID 14
#define N2H3_ID 15
#define N2H2_ID 16
#define H2NN_ID 17
#define NH2OH_ID 18
#define H2NO_ID 19
#define HNOH_ID 20
#define HNO_ID 21
#define HON_ID 22
#define NO2_ID 23
#define HONO_ID 24
#define HNO2_ID 25
#define NO3_ID 26
#define HONO2_ID 27
#define N2O_ID 28
#define N2_ID 29

#define NUM_ELEMENTS 3
#define NUM_SPECIES 30
#define NUM_IONS 0
#define NUM_REACTIONS 210

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(const int i, int& nspec, int* ki, int* nu);
void CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 3;
  kk = 30;
  ii = 210;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_imw[30] = {
  0.4960317460317460, // H2
  0.0312519532470779, // O2
  0.9920634920634921, // H
  0.0625039064941559, // O
  0.0587993179279120, // OH
  0.0302975216627280, // HO2
  0.0555092978073827, // H2O
  0.0293996589639560, // H2O2
  0.0333266679997334, // NO
  0.0587164582232400, // NH3
  0.0624102852150034, // NH2
  0.0666000666000666, // NH
  0.0713928749910759, // N
  0.0344566191165323, // NNH
  0.0312051426075017, // N2H4
  0.0322185707842000, // N2H3
  0.0333000333000333, // N2H2
  0.0333000333000333, // H2NN
  0.0302755071147442, // NH2OH
  0.0312285303853601, // H2NO
  0.0312285303853601, // HNOH
  0.0322435029341588, // HNO
  0.0322435029341588, // HON
  0.0217367677426367, // NO2
  0.0212707123561568, // HONO
  0.0212707123561568, // HNO2
  0.0161279917424682, // NO3
  0.0158699930172031, // HONO2
  0.0227205598345943, // N2O
  0.0356964374955379, // N2
};
#endif
const amrex::Real h_global_imw[30] = {
  0.4960317460317460, // H2
  0.0312519532470779, // O2
  0.9920634920634921, // H
  0.0625039064941559, // O
  0.0587993179279120, // OH
  0.0302975216627280, // HO2
  0.0555092978073827, // H2O
  0.0293996589639560, // H2O2
  0.0333266679997334, // NO
  0.0587164582232400, // NH3
  0.0624102852150034, // NH2
  0.0666000666000666, // NH
  0.0713928749910759, // N
  0.0344566191165323, // NNH
  0.0312051426075017, // N2H4
  0.0322185707842000, // N2H3
  0.0333000333000333, // N2H2
  0.0333000333000333, // H2NN
  0.0302755071147442, // NH2OH
  0.0312285303853601, // H2NO
  0.0312285303853601, // HNOH
  0.0322435029341588, // HNO
  0.0322435029341588, // HON
  0.0217367677426367, // NO2
  0.0212707123561568, // HONO
  0.0212707123561568, // HNO2
  0.0161279917424682, // NO3
  0.0158699930172031, // HONO2
  0.0227205598345943, // N2O
  0.0356964374955379, // N2
};

//  molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_mw[30] = {
  2.016000,  // H2
  31.998000, // O2
  1.008000,  // H
  15.999000, // O
  17.007000, // OH
  33.006000, // HO2
  18.015000, // H2O
  34.014000, // H2O2
  30.006000, // NO
  17.031000, // NH3
  16.023000, // NH2
  15.015000, // NH
  14.007000, // N
  29.022000, // NNH
  32.046000, // N2H4
  31.038000, // N2H3
  30.030000, // N2H2
  30.030000, // H2NN
  33.030000, // NH2OH
  32.022000, // H2NO
  32.022000, // HNOH
  31.014000, // HNO
  31.014000, // HON
  46.005000, // NO2
  47.013000, // HONO
  47.013000, // HNO2
  62.004000, // NO3
  63.012000, // HONO2
  44.013000, // N2O
  28.014000, // N2
};
#endif
const amrex::Real h_global_mw[30] = {
  2.016000,  // H2
  31.998000, // O2
  1.008000,  // H
  15.999000, // O
  17.007000, // OH
  33.006000, // HO2
  18.015000, // H2O
  34.014000, // H2O2
  30.006000, // NO
  17.031000, // NH3
  16.023000, // NH2
  15.015000, // NH
  14.007000, // N
  29.022000, // NNH
  32.046000, // N2H4
  31.038000, // N2H3
  30.030000, // N2H2
  30.030000, // H2NN
  33.030000, // NH2OH
  32.022000, // H2NO
  32.022000, // HNOH
  31.014000, // HNO
  31.014000, // HON
  46.005000, // NO2
  47.013000, // HONO
  47.013000, // HNO2
  62.004000, // NO3
  63.012000, // HONO2
  44.013000, // N2O
  28.014000, // N2
};

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 0.4960317460317460;  // H2
  imw_new[1] = 0.0312519532470779;  // O2
  imw_new[2] = 0.9920634920634921;  // H
  imw_new[3] = 0.0625039064941559;  // O
  imw_new[4] = 0.0587993179279120;  // OH
  imw_new[5] = 0.0302975216627280;  // HO2
  imw_new[6] = 0.0555092978073827;  // H2O
  imw_new[7] = 0.0293996589639560;  // H2O2
  imw_new[8] = 0.0333266679997334;  // NO
  imw_new[9] = 0.0587164582232400;  // NH3
  imw_new[10] = 0.0624102852150034; // NH2
  imw_new[11] = 0.0666000666000666; // NH
  imw_new[12] = 0.0713928749910759; // N
  imw_new[13] = 0.0344566191165323; // NNH
  imw_new[14] = 0.0312051426075017; // N2H4
  imw_new[15] = 0.0322185707842000; // N2H3
  imw_new[16] = 0.0333000333000333; // N2H2
  imw_new[17] = 0.0333000333000333; // H2NN
  imw_new[18] = 0.0302755071147442; // NH2OH
  imw_new[19] = 0.0312285303853601; // H2NO
  imw_new[20] = 0.0312285303853601; // HNOH
  imw_new[21] = 0.0322435029341588; // HNO
  imw_new[22] = 0.0322435029341588; // HON
  imw_new[23] = 0.0217367677426367; // NO2
  imw_new[24] = 0.0212707123561568; // HONO
  imw_new[25] = 0.0212707123561568; // HNO2
  imw_new[26] = 0.0161279917424682; // NO3
  imw_new[27] = 0.0158699930172031; // HONO2
  imw_new[28] = 0.0227205598345943; // N2O
  imw_new[29] = 0.0356964374955379; // N2
}

//  inverse molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
imw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_imw[n];
#else
  return h_global_imw[n];
#endif
}
//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 2.016000;   // H2
  mw_new[1] = 31.998000;  // O2
  mw_new[2] = 1.008000;   // H
  mw_new[3] = 15.999000;  // O
  mw_new[4] = 17.007000;  // OH
  mw_new[5] = 33.006000;  // HO2
  mw_new[6] = 18.015000;  // H2O
  mw_new[7] = 34.014000;  // H2O2
  mw_new[8] = 30.006000;  // NO
  mw_new[9] = 17.031000;  // NH3
  mw_new[10] = 16.023000; // NH2
  mw_new[11] = 15.015000; // NH
  mw_new[12] = 14.007000; // N
  mw_new[13] = 29.022000; // NNH
  mw_new[14] = 32.046000; // N2H4
  mw_new[15] = 31.038000; // N2H3
  mw_new[16] = 30.030000; // N2H2
  mw_new[17] = 30.030000; // H2NN
  mw_new[18] = 33.030000; // NH2OH
  mw_new[19] = 32.022000; // H2NO
  mw_new[20] = 32.022000; // HNOH
  mw_new[21] = 31.014000; // HNO
  mw_new[22] = 31.014000; // HON
  mw_new[23] = 46.005000; // NO2
  mw_new[24] = 47.013000; // HONO
  mw_new[25] = 47.013000; // HNO2
  mw_new[26] = 62.004000; // NO3
  mw_new[27] = 63.012000; // HONO2
  mw_new[28] = 44.013000; // N2O
  mw_new[29] = 28.014000; // N2
}

//  molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
mw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_mw[n];
#else
  return h_global_mw[n];
#endif
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +1.37694204e+00 + 7.73916922e-03 * T - 1.88735073e-05 * T2 +
                 1.95517114e-08 * T3 - 7.17095663e-12 * T4;
    // species 1: O2
    species[1] = +2.78498258e+00 - 3.02002233e-03 * T + 9.92029171e-06 * T2 -
                 9.77840434e-09 * T3 + 3.28877702e-12 * T4;
    // species 2: H
    species[2] = +1.49975925e+00 + 6.73824499e-07 * T + 1.11807261e-09 * T2 -
                 3.70192126e-12 * T3 + 2.14233822e-15 * T4;
    // species 3: O
    species[3] = +2.15906526e+00 - 3.21509999e-03 * T + 6.49255543e-06 * T2 -
                 5.98755115e-09 * T3 + 2.06876117e-12 * T4;
    // species 4: OH
    species[4] = +2.97585165e+00 - 2.28555291e-03 * T + 4.33442882e-06 * T2 -
                 3.59926640e-09 * T3 + 1.26706930e-12 * T4;
    // species 5: HO2
    species[5] = +3.26251250e+00 - 4.45642032e-03 * T + 2.05164934e-05 * T2 -
                 2.35794011e-08 * T3 + 9.05614257e-12 * T4;
    // species 6: H2O
    species[6] = +3.20147551e+00 - 2.05583546e-03 * T + 6.56547207e-06 * T2 -
                 5.52906960e-09 * T3 + 1.78282605e-12 * T4;
    // species 7: H2O2
    species[7] = +3.23854160e+00 - 2.49610911e-04 * T + 1.59857901e-05 * T2 -
                 2.06919945e-08 * T3 + 8.29766320e-12 * T4;
    // species 8: NO
    species[8] = +3.08517990e+00 - 3.64693188e-03 * T + 8.49607612e-06 * T2 -
                 6.62405734e-09 * T3 + 1.77647373e-12 * T4;
    // species 9: NH3
    species[9] = +3.14027871e+00 - 3.58489142e-03 * T + 1.89475904e-05 * T2 -
                 1.98833970e-08 * T3 + 7.15267961e-12 * T4;
    // species 10: NH2
    species[10] = +3.06463329e+00 - 1.10021454e-03 * T + 4.25849068e-06 * T2 -
                  2.68223583e-09 * T3 + 5.89267407e-13 * T4;
    // species 11: NH
    species[11] = +2.45887003e+00 + 4.93904408e-04 * T - 1.87862560e-06 * T2 +
                  2.85542239e-09 * T3 - 1.16864671e-12 * T4;
    // species 12: N
    species[12] = +1.49976643e+00 + 5.02149594e-07 * T + 1.93091211e-09 * T2 -
                  4.94632629e-12 * T3 + 2.74089506e-15 * T4;
    // species 13: NNH
    species[13] = +3.25474632e+00 - 3.45098298e-03 * T + 1.37788699e-05 * T2 -
                  1.33263744e-08 * T3 + 4.41023397e-12 * T4;
    // species 14: N2H4
    species[14] = +2.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
                  5.00709182e-08 * T3 + 2.03362064e-11 * T4;
    // species 15: N2H3
    species[15] = +2.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
                  2.99727732e-08 * T3 + 1.20978970e-11 * T4;
    // species 16: N2H2
    species[16] = +3.91066031e+00 - 1.07791880e-02 * T + 3.86516489e-05 * T2 -
                  3.86501698e-08 * T3 + 1.34852134e-11 * T4;
    // species 17: H2NN
    species[17] = +3.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
                  3.04000551e-08 * T3 + 1.04700639e-11 * T4;
    // species 18: NH2OH
    species[18] = +2.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
                  1.96668262e-08 * T3 + 8.82516590e-12 * T4;
    // species 19: H2NO
    species[19] = +2.93201139e+00 - 1.64028165e-04 * T + 1.39161409e-05 * T2 -
                  1.62747853e-08 * T3 + 6.00352834e-12 * T4;
    // species 20: HNOH
    species[20] = +2.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
                  3.15645120e-08 * T3 + 1.24084574e-11 * T4;
    // species 21: HNO
    species[21] = +3.55326160e+00 - 5.84531688e-03 * T + 1.88853744e-05 * T2 -
                  1.76039893e-08 * T3 + 5.72889621e-12 * T4;
    // species 22: HON
    species[22] = +3.15272450e+00 - 3.87826402e-03 * T + 2.05476031e-05 * T2 -
                  2.49049483e-08 * T3 + 9.87365462e-12 * T4;
    // species 23: NO2
    species[23] = +2.78712696e+00 - 4.29576834e-04 * T + 1.37383818e-05 * T2 -
                  1.74264140e-08 * T3 + 6.71249644e-12 * T4;
    // species 24: HONO
    species[24] = +2.16416438e+00 + 8.50517773e-03 * T + 5.48561573e-07 * T2 -
                  8.27656474e-09 * T3 + 4.39957151e-12 * T4;
    // species 25: HNO2
    species[25] = +3.03779347e+00 - 4.46123109e-03 * T + 3.19440815e-05 * T2 -
                  3.79359490e-08 * T3 + 1.44570885e-11 * T4;
    // species 26: NO3
    species[26] = +2.35586850e+00 + 1.06545436e-02 * T - 2.86690494e-06 * T2 -
                  5.14711611e-09 * T3 + 3.08532286e-12 * T4;
    // species 27: HONO2
    species[27] = +5.59750560e-01 + 2.01502169e-02 * T - 1.15217296e-05 * T2 -
                  2.31891230e-09 * T3 + 3.17580552e-12 * T4;
    // species 28: N2O
    species[28] = +1.13942290e+00 + 1.21800874e-02 * T - 1.59189415e-05 * T2 +
                  1.20920039e-08 * T3 - 3.85125915e-12 * T4;
    // species 29: N2
    species[29] = +2.53603521e+00 - 1.58270944e-04 * T - 4.26984251e-07 * T2 +
                  2.37542590e-09 * T3 - 1.39708206e-12 * T4;
  } else {
    // species 0: H2
    species[0] = +1.90207649e+00 + 8.68992581e-04 * T - 1.65864430e-07 * T2 +
                 1.90851899e-11 * T3 - 9.31121789e-16 * T4;
    // species 1: O2
    species[1] = +2.65980488e+00 + 6.59877372e-04 * T - 1.44158172e-07 * T2 +
                 2.14656037e-11 * T3 - 1.36503784e-15 * T4;
    // species 2: H
    species[2] = +1.49985211e+00 + 2.34582548e-07 * T - 1.16171641e-10 * T2 +
                 2.25708298e-14 * T3 - 1.52992005e-18 * T4;
    // species 3: O
    species[3] = +1.55160087e+00 - 3.83085457e-05 * T + 8.43197478e-10 * T2 +
                 4.01267136e-12 * T3 - 4.17476574e-16 * T4;
    // species 4: OH
    species[4] = +1.84581721e+00 + 1.09723818e-03 * T - 2.89121101e-07 * T2 +
                 4.09099910e-11 * T3 - 2.31382258e-15 * T4;
    // species 5: HO2
    species[5] = +3.10564010e+00 + 2.04046836e-03 * T - 3.65877562e-07 * T2 +
                 1.85973044e-11 * T3 + 4.98818315e-16 * T4;
    // species 6: H2O
    species[6] = +1.73117512e+00 + 2.95136995e-03 * T - 8.35359785e-07 * T2 +
                 1.26088593e-10 * T3 - 8.40531676e-15 * T4;
    // species 7: H2O2
    species[7] = +3.54017480e+00 + 4.15970971e-03 * T - 1.30876777e-06 * T2 +
                 2.00823615e-10 * T3 - 1.15509243e-14 * T4;
    // species 8: NO
    species[8] = +2.25487317e+00 + 1.19869941e-03 * T - 4.33028500e-07 * T2 +
                 7.02943336e-11 * T3 - 4.09788575e-15 * T4;
    // species 9: NH3
    species[9] = +1.36074311e+00 + 6.31850146e-03 * T - 2.28966806e-06 * T2 +
                 4.11767411e-10 * T3 - 2.90836787e-14 * T4;
    // species 10: NH2
    species[10] = +1.62499312e+00 + 3.39841177e-03 * T - 1.01630968e-06 * T2 +
                  1.25510796e-10 * T3 - 2.66500843e-15 * T4;
    // species 11: NH
    species[11] = +1.79498941e+00 + 1.29259567e-03 * T - 3.85559094e-07 * T2 +
                  6.26027608e-11 * T3 - 3.70421913e-15 * T4;
    // species 12: N
    species[12] = +1.41604245e+00 + 1.74663766e-04 * T - 1.18864562e-07 * T2 +
                  3.01850054e-11 * T3 - 2.03260159e-15 * T4;
    // species 13: NNH
    species[13] = +2.42744423e+00 + 3.23295234e-03 * T - 1.17296299e-06 * T2 +
                  1.90508356e-10 * T3 - 1.14491506e-14 * T4;
    // species 14: N2H4
    species[14] = +3.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
                  4.67278418e-10 * T3 - 2.73068599e-14 * T4;
    // species 15: N2H3
    species[15] = +3.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
                  3.83733021e-10 * T3 - 2.23107573e-14 * T4;
    // species 16: N2H2
    species[16] = +3.11151170e-01 + 9.00187208e-03 * T - 3.14911824e-06 * T2 +
                  4.81449581e-10 * T3 - 2.71897891e-14 * T4;
    // species 17: H2NN
    species[17] = +2.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
                  3.58539206e-10 * T3 - 2.14532905e-14 * T4;
    // species 18: NH2OH
    species[18] = +2.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
                  4.37930933e-10 * T3 - 2.52724604e-14 * T4;
    // species 19: H2NO
    species[19] = +2.75555914e+00 + 5.16219354e-03 * T - 1.76387387e-06 * T2 +
                  2.75052692e-10 * T3 - 1.60643143e-14 * T4;
    // species 20: HNOH
    species[20] = +2.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
                  2.55371446e-10 * T3 - 1.48308561e-14 * T4;
    // species 21: HNO
    species[21] = +2.24129053e+00 + 2.72377193e-03 * T - 1.60633296e-07 * T2 -
                  9.79134982e-11 * T3 + 1.17103944e-14 * T4;
    // species 22: HON
    species[22] = +3.12044656e+00 + 2.28738122e-03 * T - 7.14685362e-07 * T2 +
                  1.03332384e-10 * T3 - 5.70484100e-15 * T4;
    // species 23: NO2
    species[23] = +3.90482285e+00 + 2.14474498e-03 * T - 8.12654059e-07 * T2 +
                  1.55511957e-10 * T3 - 1.04113963e-14 * T4;
    // species 24: HONO
    species[24] = +4.79144641e+00 + 3.64630732e-03 * T - 1.29112765e-06 * T2 +
                  2.06498233e-10 * T3 - 1.22138679e-14 * T4;
    // species 25: HNO2
    species[25] = +3.66358504e+00 + 4.89854351e-03 * T - 1.79694193e-06 * T2 +
                  2.94420361e-10 * T3 - 1.78235577e-14 * T4;
    // species 26: NO3
    species[26] = +6.37569146e+00 + 2.21733003e-03 * T - 5.75695789e-07 * T2 +
                  6.69775424e-11 * T3 - 2.58934700e-15 * T4;
    // species 27: HONO2
    species[27] = +7.03061257e+00 + 4.46368336e-03 * T - 1.72272779e-06 * T2 +
                  2.91611606e-10 * T3 - 1.80487362e-14 * T4;
    // species 28: N2O
    species[28] = +3.80641382e+00 + 2.65307443e-03 * T - 9.70797397e-07 * T2 +
                  1.62590150e-10 * T3 - 9.96738154e-15 * T4;
    // species 29: N2
    species[29] = +1.93802970e+00 + 1.41838030e-03 * T - 5.03281045e-07 * T2 +
                  8.07555464e-11 * T3 - 4.76064275e-15 * T4;
  }
}

// compute Cp/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.37694204e+00 + 7.73916922e-03 * T - 1.88735073e-05 * T2 +
                 1.95517114e-08 * T3 - 7.17095663e-12 * T4;
    // species 1: O2
    species[1] = +3.78498258e+00 - 3.02002233e-03 * T + 9.92029171e-06 * T2 -
                 9.77840434e-09 * T3 + 3.28877702e-12 * T4;
    // species 2: H
    species[2] = +2.49975925e+00 + 6.73824499e-07 * T + 1.11807261e-09 * T2 -
                 3.70192126e-12 * T3 + 2.14233822e-15 * T4;
    // species 3: O
    species[3] = +3.15906526e+00 - 3.21509999e-03 * T + 6.49255543e-06 * T2 -
                 5.98755115e-09 * T3 + 2.06876117e-12 * T4;
    // species 4: OH
    species[4] = +3.97585165e+00 - 2.28555291e-03 * T + 4.33442882e-06 * T2 -
                 3.59926640e-09 * T3 + 1.26706930e-12 * T4;
    // species 5: HO2
    species[5] = +4.26251250e+00 - 4.45642032e-03 * T + 2.05164934e-05 * T2 -
                 2.35794011e-08 * T3 + 9.05614257e-12 * T4;
    // species 6: H2O
    species[6] = +4.20147551e+00 - 2.05583546e-03 * T + 6.56547207e-06 * T2 -
                 5.52906960e-09 * T3 + 1.78282605e-12 * T4;
    // species 7: H2O2
    species[7] = +4.23854160e+00 - 2.49610911e-04 * T + 1.59857901e-05 * T2 -
                 2.06919945e-08 * T3 + 8.29766320e-12 * T4;
    // species 8: NO
    species[8] = +4.08517990e+00 - 3.64693188e-03 * T + 8.49607612e-06 * T2 -
                 6.62405734e-09 * T3 + 1.77647373e-12 * T4;
    // species 9: NH3
    species[9] = +4.14027871e+00 - 3.58489142e-03 * T + 1.89475904e-05 * T2 -
                 1.98833970e-08 * T3 + 7.15267961e-12 * T4;
    // species 10: NH2
    species[10] = +4.06463329e+00 - 1.10021454e-03 * T + 4.25849068e-06 * T2 -
                  2.68223583e-09 * T3 + 5.89267407e-13 * T4;
    // species 11: NH
    species[11] = +3.45887003e+00 + 4.93904408e-04 * T - 1.87862560e-06 * T2 +
                  2.85542239e-09 * T3 - 1.16864671e-12 * T4;
    // species 12: N
    species[12] = +2.49976643e+00 + 5.02149594e-07 * T + 1.93091211e-09 * T2 -
                  4.94632629e-12 * T3 + 2.74089506e-15 * T4;
    // species 13: NNH
    species[13] = +4.25474632e+00 - 3.45098298e-03 * T + 1.37788699e-05 * T2 -
                  1.33263744e-08 * T3 + 4.41023397e-12 * T4;
    // species 14: N2H4
    species[14] = +3.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
                  5.00709182e-08 * T3 + 2.03362064e-11 * T4;
    // species 15: N2H3
    species[15] = +3.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
                  2.99727732e-08 * T3 + 1.20978970e-11 * T4;
    // species 16: N2H2
    species[16] = +4.91066031e+00 - 1.07791880e-02 * T + 3.86516489e-05 * T2 -
                  3.86501698e-08 * T3 + 1.34852134e-11 * T4;
    // species 17: H2NN
    species[17] = +4.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
                  3.04000551e-08 * T3 + 1.04700639e-11 * T4;
    // species 18: NH2OH
    species[18] = +3.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
                  1.96668262e-08 * T3 + 8.82516590e-12 * T4;
    // species 19: H2NO
    species[19] = +3.93201139e+00 - 1.64028165e-04 * T + 1.39161409e-05 * T2 -
                  1.62747853e-08 * T3 + 6.00352834e-12 * T4;
    // species 20: HNOH
    species[20] = +3.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
                  3.15645120e-08 * T3 + 1.24084574e-11 * T4;
    // species 21: HNO
    species[21] = +4.55326160e+00 - 5.84531688e-03 * T + 1.88853744e-05 * T2 -
                  1.76039893e-08 * T3 + 5.72889621e-12 * T4;
    // species 22: HON
    species[22] = +4.15272450e+00 - 3.87826402e-03 * T + 2.05476031e-05 * T2 -
                  2.49049483e-08 * T3 + 9.87365462e-12 * T4;
    // species 23: NO2
    species[23] = +3.78712696e+00 - 4.29576834e-04 * T + 1.37383818e-05 * T2 -
                  1.74264140e-08 * T3 + 6.71249644e-12 * T4;
    // species 24: HONO
    species[24] = +3.16416438e+00 + 8.50517773e-03 * T + 5.48561573e-07 * T2 -
                  8.27656474e-09 * T3 + 4.39957151e-12 * T4;
    // species 25: HNO2
    species[25] = +4.03779347e+00 - 4.46123109e-03 * T + 3.19440815e-05 * T2 -
                  3.79359490e-08 * T3 + 1.44570885e-11 * T4;
    // species 26: NO3
    species[26] = +3.35586850e+00 + 1.06545436e-02 * T - 2.86690494e-06 * T2 -
                  5.14711611e-09 * T3 + 3.08532286e-12 * T4;
    // species 27: HONO2
    species[27] = +1.55975056e+00 + 2.01502169e-02 * T - 1.15217296e-05 * T2 -
                  2.31891230e-09 * T3 + 3.17580552e-12 * T4;
    // species 28: N2O
    species[28] = +2.13942290e+00 + 1.21800874e-02 * T - 1.59189415e-05 * T2 +
                  1.20920039e-08 * T3 - 3.85125915e-12 * T4;
    // species 29: N2
    species[29] = +3.53603521e+00 - 1.58270944e-04 * T - 4.26984251e-07 * T2 +
                  2.37542590e-09 * T3 - 1.39708206e-12 * T4;
  } else {
    // species 0: H2
    species[0] = +2.90207649e+00 + 8.68992581e-04 * T - 1.65864430e-07 * T2 +
                 1.90851899e-11 * T3 - 9.31121789e-16 * T4;
    // species 1: O2
    species[1] = +3.65980488e+00 + 6.59877372e-04 * T - 1.44158172e-07 * T2 +
                 2.14656037e-11 * T3 - 1.36503784e-15 * T4;
    // species 2: H
    species[2] = +2.49985211e+00 + 2.34582548e-07 * T - 1.16171641e-10 * T2 +
                 2.25708298e-14 * T3 - 1.52992005e-18 * T4;
    // species 3: O
    species[3] = +2.55160087e+00 - 3.83085457e-05 * T + 8.43197478e-10 * T2 +
                 4.01267136e-12 * T3 - 4.17476574e-16 * T4;
    // species 4: OH
    species[4] = +2.84581721e+00 + 1.09723818e-03 * T - 2.89121101e-07 * T2 +
                 4.09099910e-11 * T3 - 2.31382258e-15 * T4;
    // species 5: HO2
    species[5] = +4.10564010e+00 + 2.04046836e-03 * T - 3.65877562e-07 * T2 +
                 1.85973044e-11 * T3 + 4.98818315e-16 * T4;
    // species 6: H2O
    species[6] = +2.73117512e+00 + 2.95136995e-03 * T - 8.35359785e-07 * T2 +
                 1.26088593e-10 * T3 - 8.40531676e-15 * T4;
    // species 7: H2O2
    species[7] = +4.54017480e+00 + 4.15970971e-03 * T - 1.30876777e-06 * T2 +
                 2.00823615e-10 * T3 - 1.15509243e-14 * T4;
    // species 8: NO
    species[8] = +3.25487317e+00 + 1.19869941e-03 * T - 4.33028500e-07 * T2 +
                 7.02943336e-11 * T3 - 4.09788575e-15 * T4;
    // species 9: NH3
    species[9] = +2.36074311e+00 + 6.31850146e-03 * T - 2.28966806e-06 * T2 +
                 4.11767411e-10 * T3 - 2.90836787e-14 * T4;
    // species 10: NH2
    species[10] = +2.62499312e+00 + 3.39841177e-03 * T - 1.01630968e-06 * T2 +
                  1.25510796e-10 * T3 - 2.66500843e-15 * T4;
    // species 11: NH
    species[11] = +2.79498941e+00 + 1.29259567e-03 * T - 3.85559094e-07 * T2 +
                  6.26027608e-11 * T3 - 3.70421913e-15 * T4;
    // species 12: N
    species[12] = +2.41604245e+00 + 1.74663766e-04 * T - 1.18864562e-07 * T2 +
                  3.01850054e-11 * T3 - 2.03260159e-15 * T4;
    // species 13: NNH
    species[13] = +3.42744423e+00 + 3.23295234e-03 * T - 1.17296299e-06 * T2 +
                  1.90508356e-10 * T3 - 1.14491506e-14 * T4;
    // species 14: N2H4
    species[14] = +4.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
                  4.67278418e-10 * T3 - 2.73068599e-14 * T4;
    // species 15: N2H3
    species[15] = +4.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
                  3.83733021e-10 * T3 - 2.23107573e-14 * T4;
    // species 16: N2H2
    species[16] = +1.31115117e+00 + 9.00187208e-03 * T - 3.14911824e-06 * T2 +
                  4.81449581e-10 * T3 - 2.71897891e-14 * T4;
    // species 17: H2NN
    species[17] = +3.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
                  3.58539206e-10 * T3 - 2.14532905e-14 * T4;
    // species 18: NH2OH
    species[18] = +3.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
                  4.37930933e-10 * T3 - 2.52724604e-14 * T4;
    // species 19: H2NO
    species[19] = +3.75555914e+00 + 5.16219354e-03 * T - 1.76387387e-06 * T2 +
                  2.75052692e-10 * T3 - 1.60643143e-14 * T4;
    // species 20: HNOH
    species[20] = +3.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
                  2.55371446e-10 * T3 - 1.48308561e-14 * T4;
    // species 21: HNO
    species[21] = +3.24129053e+00 + 2.72377193e-03 * T - 1.60633296e-07 * T2 -
                  9.79134982e-11 * T3 + 1.17103944e-14 * T4;
    // species 22: HON
    species[22] = +4.12044656e+00 + 2.28738122e-03 * T - 7.14685362e-07 * T2 +
                  1.03332384e-10 * T3 - 5.70484100e-15 * T4;
    // species 23: NO2
    species[23] = +4.90482285e+00 + 2.14474498e-03 * T - 8.12654059e-07 * T2 +
                  1.55511957e-10 * T3 - 1.04113963e-14 * T4;
    // species 24: HONO
    species[24] = +5.79144641e+00 + 3.64630732e-03 * T - 1.29112765e-06 * T2 +
                  2.06498233e-10 * T3 - 1.22138679e-14 * T4;
    // species 25: HNO2
    species[25] = +4.66358504e+00 + 4.89854351e-03 * T - 1.79694193e-06 * T2 +
                  2.94420361e-10 * T3 - 1.78235577e-14 * T4;
    // species 26: NO3
    species[26] = +7.37569146e+00 + 2.21733003e-03 * T - 5.75695789e-07 * T2 +
                  6.69775424e-11 * T3 - 2.58934700e-15 * T4;
    // species 27: HONO2
    species[27] = +8.03061257e+00 + 4.46368336e-03 * T - 1.72272779e-06 * T2 +
                  2.91611606e-10 * T3 - 1.80487362e-14 * T4;
    // species 28: N2O
    species[28] = +4.80641382e+00 + 2.65307443e-03 * T - 9.70797397e-07 * T2 +
                  1.62590150e-10 * T3 - 9.96738154e-15 * T4;
    // species 29: N2
    species[29] = +2.93802970e+00 + 1.41838030e-03 * T - 5.03281045e-07 * T2 +
                  8.07555464e-11 * T3 - 4.76064275e-15 * T4;
  }
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = -9.211730810000000e+02 * invT + 1.829757304000000e+00 -
                 2.376942040000000e+00 * logT - 3.869584610000000e-03 * T +
                 3.145584550000000e-06 * T2 - 1.629309283333333e-09 * T3 +
                 3.585478315000000e-13 * T4;
    // species 1: O2
    species[1] = -1.064135890000000e+03 * invT + 1.371754899999997e-01 -
                 3.784982580000000e+00 * logT + 1.510011165000000e-03 * T -
                 1.653381951666667e-06 * T2 + 8.148670283333334e-10 * T3 -
                 1.644388510000000e-13 * T4;
    // species 2: H
    species[2] = +2.547376650000000e+04 * invT + 2.945333259000000e+00 -
                 2.499759250000000e+00 * logT - 3.369122495000000e-07 * T -
                 1.863454350000000e-10 * T2 + 3.084934383333333e-13 * T3 -
                 1.071169110000000e-16 * T4;
    // species 3: O
    species[3] = +2.912984530000000e+04 * invT + 1.068281820000000e+00 -
                 3.159065260000000e+00 * logT + 1.607549995000000e-03 * T -
                 1.082092571666667e-06 * T2 + 4.989625958333333e-10 * T3 -
                 1.034380585000000e-13 * T4;
    // species 4: OH
    species[4] = +3.393411370000000e+03 * invT + 4.011391376200000e+00 -
                 3.975851650000000e+00 * logT + 1.142776455000000e-03 * T -
                 7.224048033333334e-07 * T2 + 2.999388666666666e-10 * T3 -
                 6.335346500000000e-14 * T4;
    // species 5: HO2
    species[5] = +2.624423560000000e+02 * invT + 3.802756599999997e-01 -
                 4.262512500000000e+00 * logT + 2.228210160000000e-03 * T -
                 3.419415566666667e-06 * T2 + 1.964950091666666e-09 * T3 -
                 4.528071285000000e-13 * T4;
    // species 6: H2O
    species[6] = -3.029500660000000e+04 * invT + 5.062086416000000e+00 -
                 4.201475510000000e+00 * logT + 1.027917730000000e-03 * T -
                 1.094245345000000e-06 * T2 + 4.607558000000000e-10 * T3 -
                 8.914130250000000e-14 * T4;
    // species 7: H2O2
    species[7] = -1.764860030000000e+04 * invT + 6.500406299999995e-01 -
                 4.238541600000000e+00 * logT + 1.248054555000000e-04 * T -
                 2.664298350000000e-06 * T2 + 1.724332875000000e-09 * T3 -
                 4.148831600000000e-13 * T4;
    // species 8: NO
    species[8] = +9.840612670000000e+03 * invT + 1.249397540000000e+00 -
                 4.085179900000000e+00 * logT + 1.823465940000000e-03 * T -
                 1.416012686666667e-06 * T2 + 5.520047783333333e-10 * T3 -
                 8.882368650000000e-14 * T4;
    // species 9: NH3
    species[9] = -6.685451580000000e+03 * invT + 4.156954198299999e+00 -
                 4.140278710000000e+00 * logT + 1.792445710000000e-03 * T -
                 3.157931733333333e-06 * T2 + 1.656949750000000e-09 * T3 -
                 3.576339805000000e-13 * T4;
    // species 10: NH2
    species[10] = +2.117686680000000e+04 * invT + 3.624782520000000e+00 -
                  4.064633290000000e+00 * logT + 5.501072700000000e-04 * T -
                  7.097484466666666e-07 * T2 + 2.235196525000000e-10 * T3 -
                  2.946337035000000e-14 * T4;
    // species 11: NH
    species[11] = +4.210883720000000e+04 * invT + 1.455137110000000e+00 -
                  3.458870030000000e+00 * logT - 2.469522040000000e-04 * T +
                  3.131042666666667e-07 * T2 - 2.379518658333334e-10 * T3 +
                  5.843233550000001e-14 * T4;
    // species 12: N
    species[12] = +5.607607100000000e+04 * invT - 1.695226830000000e+00 -
                  2.499766430000000e+00 * logT - 2.510747970000000e-07 * T -
                  3.218186850000000e-10 * T2 + 4.121938575000000e-13 * T3 -
                  1.370447530000000e-16 * T4;
    // species 13: NNH
    species[13] = +2.883237930000000e+04 * invT + 9.692286999999999e-01 -
                  4.254746320000000e+00 * logT + 1.725491490000000e-03 * T -
                  2.296478316666667e-06 * T2 + 1.110531200000000e-09 * T3 -
                  2.205116985000000e-13 * T4;
    // species 14: N2H4
    species[14] = +1.008939250000000e+04 * invT - 1.917998810000000e+00 -
                  3.834721490000000e+00 * logT + 3.245647775000000e-04 * T -
                  6.280807716666667e-06 * T2 + 4.172576516666667e-09 * T3 -
                  1.016810320000000e-12 * T4;
    // species 15: N2H3
    species[15] = +2.581989560000000e+04 * invT - 4.410508040000000e+00 -
                  3.421255050000000e+00 * logT - 6.745079500000000e-04 * T -
                  3.724317850000000e-06 * T2 + 2.497731100000000e-09 * T3 -
                  6.048948500000000e-13 * T4;
    // species 16: N2H2
    species[16] = +2.282419010000000e+04 * invT + 4.819632970400000e+00 -
                  4.910660310000000e+00 * logT + 5.389594000000000e-03 * T -
                  6.441941483333333e-06 * T2 + 3.220847483333334e-09 * T3 -
                  6.742606699999999e-13 * T4;
    // species 17: H2NN
    species[17] = +3.495800030000000e+04 * invT + 3.021298060000000e+00 -
                  4.532040010000000e+00 * logT + 3.662092890000000e-03 * T -
                  5.013395216666666e-06 * T2 + 2.533337925000000e-09 * T3 -
                  5.235031950000000e-13 * T4;
    // species 18: NH2OH
    species[18] = -6.581484810000000e+03 * invT - 4.722774790000000e+00 -
                  3.210160920000000e+00 * logT - 3.098358380000000e-03 * T -
                  1.843249133333333e-06 * T2 + 1.638902183333333e-09 * T3 -
                  4.412582950000000e-13 * T4;
    // species 19: H2NO
    species[19] = +6.711789750000000e+03 * invT - 6.563589899999998e-01 -
                  3.932011390000000e+00 * logT + 8.201408250000000e-05 * T -
                  2.319356816666666e-06 * T2 + 1.356232108333334e-09 * T3 -
                  3.001764170000000e-13 * T4;
    // species 20: HNOH
    species[20] = +1.091997900000000e+04 * invT - 1.603427350000000e+00 -
                  3.956082480000000e+00 * logT + 1.513055100000000e-03 * T -
                  4.281239933333333e-06 * T2 + 2.630376000000000e-09 * T3 -
                  6.204228700000000e-13 * T4;
    // species 21: HNO
    species[21] = +1.163156030000000e+04 * invT + 2.884753190000000e+00 -
                  4.553261600000000e+00 * logT + 2.922658440000000e-03 * T -
                  3.147562400000000e-06 * T2 + 1.466999108333333e-09 * T3 -
                  2.864448105000000e-13 * T4;
    // species 22: HON
    species[22] = +2.460370980000000e+04 * invT - 4.136387099999999e-01 -
                  4.152724500000000e+00 * logT + 1.939132010000000e-03 * T -
                  3.424600516666667e-06 * T2 + 2.075412358333333e-09 * T3 -
                  4.936827309999999e-13 * T4;
    // species 23: NO2
    species[23] = +2.895001240000000e+03 * invT - 3.178794659999999e+00 -
                  3.787126960000000e+00 * logT + 2.147884170000000e-04 * T -
                  2.289730300000000e-06 * T2 + 1.452201166666667e-09 * T3 -
                  3.356248220000000e-13 * T4;
    // species 24: HONO
    species[24] = -1.077440860000000e+04 * invT - 6.859029720000000e+00 -
                  3.164164380000000e+00 * logT - 4.252588865000000e-03 * T -
                  9.142692883333333e-08 * T2 + 6.897137283333333e-10 * T3 -
                  2.199785755000000e-13 * T4;
    // species 25: HNO2
    species[25] = -6.530882360000000e+03 * invT - 1.868407500000000e+00 -
                  4.037793470000000e+00 * logT + 2.230615545000000e-03 * T -
                  5.324013583333333e-06 * T2 + 3.161329083333333e-09 * T3 -
                  7.228544250000000e-13 * T4;
    // species 26: NO3
    species[26] = +7.475349310000000e+03 * invT - 5.591996660000000e+00 -
                  3.355868500000000e+00 * logT - 5.327271800000000e-03 * T +
                  4.778174900000000e-07 * T2 + 4.289263425000000e-10 * T3 -
                  1.542661430000000e-13 * T4;
    // species 27: HONO2
    species[27] = -1.739558710000000e+04 * invT - 1.616971714000000e+01 -
                  1.559750560000000e+00 * logT - 1.007510845000000e-02 * T +
                  1.920288266666667e-06 * T2 + 1.932426916666667e-10 * T3 -
                  1.587902760000000e-13 * T4;
    // species 28: N2O
    species[28] = +8.870086219999999e+03 * invT - 9.108330500000001e+00 -
                  2.139422900000000e+00 * logT - 6.090043700000000e-03 * T +
                  2.653156916666667e-06 * T2 - 1.007666991666667e-09 * T3 +
                  1.925629575000000e-13 * T4;
    // species 29: N2
    species[29] = -1.047496450000000e+03 * invT + 5.899979700000002e-01 -
                  3.536035210000000e+00 * logT + 7.913547200000000e-05 * T +
                  7.116404183333333e-08 * T2 - 1.979521583333333e-10 * T3 +
                  6.985410300000000e-14 * T4;
  } else {
    // species 0: H2
    species[0] = -7.979487260000000e+02 * invT + 3.747667810000000e+00 -
                 2.902076490000000e+00 * logT - 4.344962905000000e-04 * T +
                 2.764407166666667e-08 * T2 - 1.590432491666667e-12 * T3 +
                 4.655608945000000e-17 * T4;
    // species 1: O2
    species[1] = -1.216030480000000e+03 * invT + 2.390634000000000e-01 -
                 3.659804880000000e+00 * logT - 3.299386860000000e-04 * T +
                 2.402636200000000e-08 * T2 - 1.788800308333333e-12 * T3 +
                 6.825189199999999e-17 * T4;
    // species 2: H
    species[2] = +2.547380240000000e+04 * invT + 2.945716755000000e+00 -
                 2.499852110000000e+00 * logT - 1.172912740000000e-07 * T +
                 1.936194016666667e-11 * T2 - 1.880902483333334e-15 * T3 +
                 7.649600250000000e-20 * T4;
    // species 3: O
    species[3] = +2.922876280000000e+04 * invT - 2.324569270000000e+00 -
                 2.551600870000000e+00 * logT + 1.915427285000000e-05 * T -
                 1.405329130000000e-10 * T2 - 3.343892800000000e-13 * T3 +
                 2.087382870000000e-17 * T4;
    // species 4: OH
    species[4] = +3.717066100000000e+03 * invT - 2.957581940000000e+00 -
                 2.845817210000000e+00 * logT - 5.486190900000000e-04 * T +
                 4.818685016666667e-08 * T2 - 3.409165916666666e-12 * T3 +
                 1.156911290000000e-16 * T4;
    // species 5: HO2
    species[5] = +4.328987690000000e+01 * invT + 7.975588399999998e-01 -
                 4.105640100000000e+00 * logT - 1.020234180000000e-03 * T +
                 6.097959366666666e-08 * T2 - 1.549775366666667e-12 * T3 -
                 2.494091575000000e-17 * T4;
    // species 6: H2O
    species[6] = -2.991690820000000e+04 * invT - 3.820654880000000e+00 -
                 2.731175120000000e+00 * logT - 1.475684975000000e-03 * T +
                 1.392266308333333e-07 * T2 - 1.050738275000000e-11 * T3 +
                 4.202658380000000e-16 * T4;
    // species 7: H2O2
    species[7] = -1.795140290000000e+04 * invT + 3.684293055000000e+00 -
                 4.540174800000000e+00 * logT - 2.079854855000000e-03 * T +
                 2.181279616666667e-07 * T2 - 1.673530125000000e-11 * T3 +
                 5.775462150000000e-16 * T4;
    // species 8: NO
    species[8] = +9.906998360000000e+03 * invT - 3.149078230000000e+00 -
                 3.254873170000000e+00 * logT - 5.993497050000000e-04 * T +
                 7.217141666666667e-08 * T2 - 5.857861133333333e-12 * T3 +
                 2.048942875000000e-16 * T4;
    // species 9: NH3
    species[9] = -6.415964730000000e+03 * invT - 5.660800180000001e+00 -
                 2.360743110000000e+00 * logT - 3.159250730000000e-03 * T +
                 3.816113433333333e-07 * T2 - 3.431395091666667e-11 * T3 +
                 1.454183935000000e-15 * T4;
    // species 10: NH2
    species[10] = +2.154191040000000e+04 * invT - 5.110381040000000e+00 -
                  2.624993120000000e+00 * logT - 1.699205885000000e-03 * T +
                  1.693849466666667e-07 * T2 - 1.045923300000000e-11 * T3 +
                  1.332504215000000e-16 * T4;
    // species 11: NH
    species[11] = +4.234089980000000e+04 * invT - 2.889148110000000e+00 -
                  2.794989410000000e+00 * logT - 6.462978350000000e-04 * T +
                  6.425984900000000e-08 * T2 - 5.216896733333334e-12 * T3 +
                  1.852109565000000e-16 * T4;
    // species 12: N
    species[12] = +5.610515120000000e+04 * invT - 2.233014610000000e+00 -
                  2.416042450000000e+00 * logT - 8.733188300000000e-05 * T +
                  1.981076033333333e-08 * T2 - 2.515417116666667e-12 * T3 +
                  1.016300795000000e-16 * T4;
    // species 13: NNH
    species[13] = +2.880677400000000e+04 * invT - 2.964648100000000e+00 -
                  3.427444230000000e+00 * logT - 1.616476170000000e-03 * T +
                  1.954938316666667e-07 * T2 - 1.587569633333333e-11 * T3 +
                  5.724575300000000e-16 * T4;
    // species 14: N2H4
    species[14] = +9.282655479999999e+03 * invT + 7.633971290000000e+00 -
                  4.939573570000000e+00 * logT - 4.375085935000000e-03 * T +
                  4.989984300000000e-07 * T2 - 3.893986816666666e-11 * T3 +
                  1.365342995000000e-15 * T4;
    // species 15: N2H3
    species[15] = +2.532414200000000e+04 * invT + 1.160601740000001e+00 -
                  4.044835660000000e+00 * logT - 3.655650930000000e-03 * T +
                  4.127096650000000e-07 * T2 - 3.197775175000000e-11 * T3 +
                  1.115537865000000e-15 * T4;
    // species 16: N2H2
    species[16] = +2.338633410000000e+04 * invT - 1.509795553000000e+01 -
                  1.311151170000000e+00 * logT - 4.500936040000000e-03 * T +
                  5.248530400000001e-07 * T2 - 4.012079841666666e-11 * T3 +
                  1.359489455000000e-15 * T4;
    // species 17: H2NN
    species[17] = +3.485301490000000e+04 * invT - 3.639898450000000e+00 -
                  3.059036700000000e+00 * logT - 3.091911735000000e-03 * T +
                  3.702852750000000e-07 * T2 - 2.987826716666667e-11 * T3 +
                  1.072664525000000e-15 * T4;
    // species 18: NH2OH
    species[18] = -6.860184190000000e+03 * invT + 8.956365999999960e-02 -
                  3.881125020000000e+00 * logT - 4.078542240000000e-03 * T +
                  4.710259600000000e-07 * T2 - 3.649424441666666e-11 * T3 +
                  1.263623020000000e-15 * T4;
    // species 19: H2NO
    species[19] = +6.518261770000000e+03 * invT - 5.537713900000005e-01 -
                  3.755559140000000e+00 * logT - 2.581096770000000e-03 * T +
                  2.939789783333333e-07 * T2 - 2.292105766666667e-11 * T3 +
                  8.032157149999999e-16 * T4;
    // species 20: HNOH
    species[20] = +1.057801060000000e+04 * invT + 3.573909499999997e-01 -
                  3.983219330000000e+00 * logT - 2.444231870000000e-03 * T +
                  2.751443950000000e-07 * T2 - 2.128095383333333e-11 * T3 +
                  7.415428049999999e-16 * T4;
    // species 21: HNO
    species[21] = +1.177457440000000e+04 * invT - 4.037845839999999e+00 -
                  3.241290530000000e+00 * logT - 1.361885965000000e-03 * T +
                  2.677221600000000e-08 * T2 + 8.159458183333333e-12 * T3 -
                  5.855197199999999e-16 * T4;
    // species 22: HON
    species[22] = +2.436439630000000e+04 * invT + 7.318699100000003e-01 -
                  4.120446560000000e+00 * logT - 1.143690610000000e-03 * T +
                  1.191142270000000e-07 * T2 - 8.611031999999999e-12 * T3 +
                  2.852420500000000e-16 * T4;
    // species 23: NO2
    species[23] = +2.289589790000000e+03 * invT + 5.138389868000000e+00 -
                  4.904822850000000e+00 * logT - 1.072372490000000e-03 * T +
                  1.354423431666667e-07 * T2 - 1.295932975000000e-11 * T3 +
                  5.205698149999999e-16 * T4;
    // species 24: HONO
    species[24] = -1.159743430000000e+04 * invT + 9.862899899999999e+00 -
                  5.791446410000000e+00 * logT - 1.823153660000000e-03 * T +
                  2.151879416666667e-07 * T2 - 1.720818608333333e-11 * T3 +
                  6.106933950000000e-16 * T4;
    // species 25: HNO2
    species[25] = -7.252163340000000e+03 * invT + 4.694190404000000e+00 -
                  4.663585040000000e+00 * logT - 2.449271755000000e-03 * T +
                  2.994903216666666e-07 * T2 - 2.453503008333333e-11 * T3 +
                  8.911778850000000e-16 * T4;
    // species 26: NO3
    species[26] = +6.224455770000000e+03 * invT + 1.987022376000000e+01 -
                  7.375691460000000e+00 * logT - 1.108665015000000e-03 * T +
                  9.594929816666667e-08 * T2 - 5.581461866666666e-12 * T3 +
                  1.294673500000000e-16 * T4;
    // species 27: HONO2
    species[27] = -1.930337640000000e+04 * invT + 2.428495467000000e+01 -
                  8.030612570000001e+00 * logT - 2.231841680000000e-03 * T +
                  2.871212983333333e-07 * T2 - 2.430096716666667e-11 * T3 +
                  9.024368099999999e-16 * T4;
    // species 28: N2O
    species[28] = +8.197982190000001e+03 * invT + 6.912491830000000e+00 -
                  4.806413820000000e+00 * logT - 1.326537215000000e-03 * T +
                  1.617995661666667e-07 * T2 - 1.354917916666667e-11 * T3 +
                  4.983690770000001e-16 * T4;
    // species 29: N2
    species[29] = -9.171809900000000e+02 * invT - 3.017190150000000e+00 -
                  2.938029700000000e+00 * logT - 7.091901500000000e-04 * T +
                  8.388017416666667e-08 * T2 - 6.729628866666667e-12 * T3 +
                  2.380321375000000e-16 * T4;
  }
}

// compute the a/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = -9.21173081e+02 * invT + 8.29757304e-01 -
                 2.37694204e+00 * logT - 3.86958461e-03 * T +
                 3.14558455e-06 * T2 - 1.62930928e-09 * T3 +
                 3.58547831e-13 * T4;
    // species 1: O2
    species[1] = -1.06413589e+03 * invT - 8.62824510e-01 -
                 3.78498258e+00 * logT + 1.51001116e-03 * T -
                 1.65338195e-06 * T2 + 8.14867028e-10 * T3 -
                 1.64438851e-13 * T4;
    // species 2: H
    species[2] = +2.54737665e+04 * invT + 1.94533326e+00 -
                 2.49975925e+00 * logT - 3.36912250e-07 * T -
                 1.86345435e-10 * T2 + 3.08493438e-13 * T3 -
                 1.07116911e-16 * T4;
    // species 3: O
    species[3] = +2.91298453e+04 * invT + 6.82818200e-02 -
                 3.15906526e+00 * logT + 1.60754999e-03 * T -
                 1.08209257e-06 * T2 + 4.98962596e-10 * T3 -
                 1.03438059e-13 * T4;
    // species 4: OH
    species[4] = +3.39341137e+03 * invT + 3.01139138e+00 -
                 3.97585165e+00 * logT + 1.14277645e-03 * T -
                 7.22404803e-07 * T2 + 2.99938867e-10 * T3 -
                 6.33534650e-14 * T4;
    // species 5: HO2
    species[5] = +2.62442356e+02 * invT - 6.19724340e-01 -
                 4.26251250e+00 * logT + 2.22821016e-03 * T -
                 3.41941557e-06 * T2 + 1.96495009e-09 * T3 -
                 4.52807128e-13 * T4;
    // species 6: H2O
    species[6] = -3.02950066e+04 * invT + 4.06208642e+00 -
                 4.20147551e+00 * logT + 1.02791773e-03 * T -
                 1.09424534e-06 * T2 + 4.60755800e-10 * T3 -
                 8.91413025e-14 * T4;
    // species 7: H2O2
    species[7] = -1.76486003e+04 * invT - 3.49959370e-01 -
                 4.23854160e+00 * logT + 1.24805455e-04 * T -
                 2.66429835e-06 * T2 + 1.72433288e-09 * T3 -
                 4.14883160e-13 * T4;
    // species 8: NO
    species[8] = +9.84061267e+03 * invT + 2.49397540e-01 -
                 4.08517990e+00 * logT + 1.82346594e-03 * T -
                 1.41601269e-06 * T2 + 5.52004778e-10 * T3 -
                 8.88236865e-14 * T4;
    // species 9: NH3
    species[9] = -6.68545158e+03 * invT + 3.15695420e+00 -
                 4.14027871e+00 * logT + 1.79244571e-03 * T -
                 3.15793173e-06 * T2 + 1.65694975e-09 * T3 -
                 3.57633980e-13 * T4;
    // species 10: NH2
    species[10] = +2.11768668e+04 * invT + 2.62478252e+00 -
                  4.06463329e+00 * logT + 5.50107270e-04 * T -
                  7.09748447e-07 * T2 + 2.23519652e-10 * T3 -
                  2.94633703e-14 * T4;
    // species 11: NH
    species[11] = +4.21088372e+04 * invT + 4.55137110e-01 -
                  3.45887003e+00 * logT - 2.46952204e-04 * T +
                  3.13104267e-07 * T2 - 2.37951866e-10 * T3 +
                  5.84323355e-14 * T4;
    // species 12: N
    species[12] = +5.60760710e+04 * invT - 2.69522683e+00 -
                  2.49976643e+00 * logT - 2.51074797e-07 * T -
                  3.21818685e-10 * T2 + 4.12193857e-13 * T3 -
                  1.37044753e-16 * T4;
    // species 13: NNH
    species[13] = +2.88323793e+04 * invT - 3.07713000e-02 -
                  4.25474632e+00 * logT + 1.72549149e-03 * T -
                  2.29647832e-06 * T2 + 1.11053120e-09 * T3 -
                  2.20511699e-13 * T4;
    // species 14: N2H4
    species[14] = +1.00893925e+04 * invT - 2.91799881e+00 -
                  3.83472149e+00 * logT + 3.24564777e-04 * T -
                  6.28080772e-06 * T2 + 4.17257652e-09 * T3 -
                  1.01681032e-12 * T4;
    // species 15: N2H3
    species[15] = +2.58198956e+04 * invT - 5.41050804e+00 -
                  3.42125505e+00 * logT - 6.74507950e-04 * T -
                  3.72431785e-06 * T2 + 2.49773110e-09 * T3 -
                  6.04894850e-13 * T4;
    // species 16: N2H2
    species[16] = +2.28241901e+04 * invT + 3.81963297e+00 -
                  4.91066031e+00 * logT + 5.38959400e-03 * T -
                  6.44194148e-06 * T2 + 3.22084748e-09 * T3 -
                  6.74260670e-13 * T4;
    // species 17: H2NN
    species[17] = +3.49580003e+04 * invT + 2.02129806e+00 -
                  4.53204001e+00 * logT + 3.66209289e-03 * T -
                  5.01339522e-06 * T2 + 2.53333792e-09 * T3 -
                  5.23503195e-13 * T4;
    // species 18: NH2OH
    species[18] = -6.58148481e+03 * invT - 5.72277479e+00 -
                  3.21016092e+00 * logT - 3.09835838e-03 * T -
                  1.84324913e-06 * T2 + 1.63890218e-09 * T3 -
                  4.41258295e-13 * T4;
    // species 19: H2NO
    species[19] = +6.71178975e+03 * invT - 1.65635899e+00 -
                  3.93201139e+00 * logT + 8.20140825e-05 * T -
                  2.31935682e-06 * T2 + 1.35623211e-09 * T3 -
                  3.00176417e-13 * T4;
    // species 20: HNOH
    species[20] = +1.09199790e+04 * invT - 2.60342735e+00 -
                  3.95608248e+00 * logT + 1.51305510e-03 * T -
                  4.28123993e-06 * T2 + 2.63037600e-09 * T3 -
                  6.20422870e-13 * T4;
    // species 21: HNO
    species[21] = +1.16315603e+04 * invT + 1.88475319e+00 -
                  4.55326160e+00 * logT + 2.92265844e-03 * T -
                  3.14756240e-06 * T2 + 1.46699911e-09 * T3 -
                  2.86444811e-13 * T4;
    // species 22: HON
    species[22] = +2.46037098e+04 * invT - 1.41363871e+00 -
                  4.15272450e+00 * logT + 1.93913201e-03 * T -
                  3.42460052e-06 * T2 + 2.07541236e-09 * T3 -
                  4.93682731e-13 * T4;
    // species 23: NO2
    species[23] = +2.89500124e+03 * invT - 4.17879466e+00 -
                  3.78712696e+00 * logT + 2.14788417e-04 * T -
                  2.28973030e-06 * T2 + 1.45220117e-09 * T3 -
                  3.35624822e-13 * T4;
    // species 24: HONO
    species[24] = -1.07744086e+04 * invT - 7.85902972e+00 -
                  3.16416438e+00 * logT - 4.25258887e-03 * T -
                  9.14269288e-08 * T2 + 6.89713728e-10 * T3 -
                  2.19978576e-13 * T4;
    // species 25: HNO2
    species[25] = -6.53088236e+03 * invT - 2.86840750e+00 -
                  4.03779347e+00 * logT + 2.23061555e-03 * T -
                  5.32401358e-06 * T2 + 3.16132908e-09 * T3 -
                  7.22854425e-13 * T4;
    // species 26: NO3
    species[26] = +7.47534931e+03 * invT - 6.59199666e+00 -
                  3.35586850e+00 * logT - 5.32727180e-03 * T +
                  4.77817490e-07 * T2 + 4.28926343e-10 * T3 -
                  1.54266143e-13 * T4;
    // species 27: HONO2
    species[27] = -1.73955871e+04 * invT - 1.71697171e+01 -
                  1.55975056e+00 * logT - 1.00751085e-02 * T +
                  1.92028827e-06 * T2 + 1.93242692e-10 * T3 -
                  1.58790276e-13 * T4;
    // species 28: N2O
    species[28] = +8.87008622e+03 * invT - 1.01083305e+01 -
                  2.13942290e+00 * logT - 6.09004370e-03 * T +
                  2.65315692e-06 * T2 - 1.00766699e-09 * T3 +
                  1.92562957e-13 * T4;
    // species 29: N2
    species[29] = -1.04749645e+03 * invT - 4.10002030e-01 -
                  3.53603521e+00 * logT + 7.91354720e-05 * T +
                  7.11640418e-08 * T2 - 1.97952158e-10 * T3 +
                  6.98541030e-14 * T4;
  } else {
    // species 0: H2
    species[0] = -7.97948726e+02 * invT + 2.74766781e+00 -
                 2.90207649e+00 * logT - 4.34496291e-04 * T +
                 2.76440717e-08 * T2 - 1.59043249e-12 * T3 +
                 4.65560895e-17 * T4;
    // species 1: O2
    species[1] = -1.21603048e+03 * invT - 7.60936600e-01 -
                 3.65980488e+00 * logT - 3.29938686e-04 * T +
                 2.40263620e-08 * T2 - 1.78880031e-12 * T3 +
                 6.82518920e-17 * T4;
    // species 2: H
    species[2] = +2.54738024e+04 * invT + 1.94571675e+00 -
                 2.49985211e+00 * logT - 1.17291274e-07 * T +
                 1.93619402e-11 * T2 - 1.88090248e-15 * T3 +
                 7.64960025e-20 * T4;
    // species 3: O
    species[3] = +2.92287628e+04 * invT - 3.32456927e+00 -
                 2.55160087e+00 * logT + 1.91542728e-05 * T -
                 1.40532913e-10 * T2 - 3.34389280e-13 * T3 +
                 2.08738287e-17 * T4;
    // species 4: OH
    species[4] = +3.71706610e+03 * invT - 3.95758194e+00 -
                 2.84581721e+00 * logT - 5.48619090e-04 * T +
                 4.81868502e-08 * T2 - 3.40916592e-12 * T3 +
                 1.15691129e-16 * T4;
    // species 5: HO2
    species[5] = +4.32898769e+01 * invT - 2.02441160e-01 -
                 4.10564010e+00 * logT - 1.02023418e-03 * T +
                 6.09795937e-08 * T2 - 1.54977537e-12 * T3 -
                 2.49409157e-17 * T4;
    // species 6: H2O
    species[6] = -2.99169082e+04 * invT - 4.82065488e+00 -
                 2.73117512e+00 * logT - 1.47568497e-03 * T +
                 1.39226631e-07 * T2 - 1.05073828e-11 * T3 +
                 4.20265838e-16 * T4;
    // species 7: H2O2
    species[7] = -1.79514029e+04 * invT + 2.68429305e+00 -
                 4.54017480e+00 * logT - 2.07985485e-03 * T +
                 2.18127962e-07 * T2 - 1.67353013e-11 * T3 +
                 5.77546215e-16 * T4;
    // species 8: NO
    species[8] = +9.90699836e+03 * invT - 4.14907823e+00 -
                 3.25487317e+00 * logT - 5.99349705e-04 * T +
                 7.21714167e-08 * T2 - 5.85786113e-12 * T3 +
                 2.04894288e-16 * T4;
    // species 9: NH3
    species[9] = -6.41596473e+03 * invT - 6.66080018e+00 -
                 2.36074311e+00 * logT - 3.15925073e-03 * T +
                 3.81611343e-07 * T2 - 3.43139509e-11 * T3 +
                 1.45418393e-15 * T4;
    // species 10: NH2
    species[10] = +2.15419104e+04 * invT - 6.11038104e+00 -
                  2.62499312e+00 * logT - 1.69920589e-03 * T +
                  1.69384947e-07 * T2 - 1.04592330e-11 * T3 +
                  1.33250421e-16 * T4;
    // species 11: NH
    species[11] = +4.23408998e+04 * invT - 3.88914811e+00 -
                  2.79498941e+00 * logT - 6.46297835e-04 * T +
                  6.42598490e-08 * T2 - 5.21689673e-12 * T3 +
                  1.85210957e-16 * T4;
    // species 12: N
    species[12] = +5.61051512e+04 * invT - 3.23301461e+00 -
                  2.41604245e+00 * logT - 8.73318830e-05 * T +
                  1.98107603e-08 * T2 - 2.51541712e-12 * T3 +
                  1.01630079e-16 * T4;
    // species 13: NNH
    species[13] = +2.88067740e+04 * invT - 3.96464810e+00 -
                  3.42744423e+00 * logT - 1.61647617e-03 * T +
                  1.95493832e-07 * T2 - 1.58756963e-11 * T3 +
                  5.72457530e-16 * T4;
    // species 14: N2H4
    species[14] = +9.28265548e+03 * invT + 6.63397129e+00 -
                  4.93957357e+00 * logT - 4.37508594e-03 * T +
                  4.98998430e-07 * T2 - 3.89398682e-11 * T3 +
                  1.36534300e-15 * T4;
    // species 15: N2H3
    species[15] = +2.53241420e+04 * invT + 1.60601740e-01 -
                  4.04483566e+00 * logT - 3.65565093e-03 * T +
                  4.12709665e-07 * T2 - 3.19777517e-11 * T3 +
                  1.11553786e-15 * T4;
    // species 16: N2H2
    species[16] = +2.33863341e+04 * invT - 1.60979555e+01 -
                  1.31115117e+00 * logT - 4.50093604e-03 * T +
                  5.24853040e-07 * T2 - 4.01207984e-11 * T3 +
                  1.35948946e-15 * T4;
    // species 17: H2NN
    species[17] = +3.48530149e+04 * invT - 4.63989845e+00 -
                  3.05903670e+00 * logT - 3.09191173e-03 * T +
                  3.70285275e-07 * T2 - 2.98782672e-11 * T3 +
                  1.07266452e-15 * T4;
    // species 18: NH2OH
    species[18] = -6.86018419e+03 * invT - 9.10436340e-01 -
                  3.88112502e+00 * logT - 4.07854224e-03 * T +
                  4.71025960e-07 * T2 - 3.64942444e-11 * T3 +
                  1.26362302e-15 * T4;
    // species 19: H2NO
    species[19] = +6.51826177e+03 * invT - 1.55377139e+00 -
                  3.75555914e+00 * logT - 2.58109677e-03 * T +
                  2.93978978e-07 * T2 - 2.29210577e-11 * T3 +
                  8.03215715e-16 * T4;
    // species 20: HNOH
    species[20] = +1.05780106e+04 * invT - 6.42609050e-01 -
                  3.98321933e+00 * logT - 2.44423187e-03 * T +
                  2.75144395e-07 * T2 - 2.12809538e-11 * T3 +
                  7.41542805e-16 * T4;
    // species 21: HNO
    species[21] = +1.17745744e+04 * invT - 5.03784584e+00 -
                  3.24129053e+00 * logT - 1.36188597e-03 * T +
                  2.67722160e-08 * T2 + 8.15945818e-12 * T3 -
                  5.85519720e-16 * T4;
    // species 22: HON
    species[22] = +2.43643963e+04 * invT - 2.68130090e-01 -
                  4.12044656e+00 * logT - 1.14369061e-03 * T +
                  1.19114227e-07 * T2 - 8.61103200e-12 * T3 +
                  2.85242050e-16 * T4;
    // species 23: NO2
    species[23] = +2.28958979e+03 * invT + 4.13838987e+00 -
                  4.90482285e+00 * logT - 1.07237249e-03 * T +
                  1.35442343e-07 * T2 - 1.29593298e-11 * T3 +
                  5.20569815e-16 * T4;
    // species 24: HONO
    species[24] = -1.15974343e+04 * invT + 8.86289990e+00 -
                  5.79144641e+00 * logT - 1.82315366e-03 * T +
                  2.15187942e-07 * T2 - 1.72081861e-11 * T3 +
                  6.10693395e-16 * T4;
    // species 25: HNO2
    species[25] = -7.25216334e+03 * invT + 3.69419040e+00 -
                  4.66358504e+00 * logT - 2.44927175e-03 * T +
                  2.99490322e-07 * T2 - 2.45350301e-11 * T3 +
                  8.91177885e-16 * T4;
    // species 26: NO3
    species[26] = +6.22445577e+03 * invT + 1.88702238e+01 -
                  7.37569146e+00 * logT - 1.10866501e-03 * T +
                  9.59492982e-08 * T2 - 5.58146187e-12 * T3 +
                  1.29467350e-16 * T4;
    // species 27: HONO2
    species[27] = -1.93033764e+04 * invT + 2.32849547e+01 -
                  8.03061257e+00 * logT - 2.23184168e-03 * T +
                  2.87121298e-07 * T2 - 2.43009672e-11 * T3 +
                  9.02436810e-16 * T4;
    // species 28: N2O
    species[28] = +8.19798219e+03 * invT + 5.91249183e+00 -
                  4.80641382e+00 * logT - 1.32653722e-03 * T +
                  1.61799566e-07 * T2 - 1.35491792e-11 * T3 +
                  4.98369077e-16 * T4;
    // species 29: N2
    species[29] = -9.17180990e+02 * invT - 4.01719015e+00 -
                  2.93802970e+00 * logT - 7.09190150e-04 * T +
                  8.38801742e-08 * T2 - 6.72962887e-12 * T3 +
                  2.38032138e-16 * T4;
  }
}

// compute the e/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +1.37694204e+00 + 3.86958461e-03 * T - 6.29116910e-06 * T2 +
                 4.88792785e-09 * T3 - 1.43419133e-12 * T4 -
                 9.21173081e+02 * invT;
    // species 1: O2
    species[1] = +2.78498258e+00 - 1.51001116e-03 * T + 3.30676390e-06 * T2 -
                 2.44460109e-09 * T3 + 6.57755404e-13 * T4 -
                 1.06413589e+03 * invT;
    // species 2: H
    species[2] = +1.49975925e+00 + 3.36912250e-07 * T + 3.72690870e-10 * T2 -
                 9.25480315e-13 * T3 + 4.28467644e-16 * T4 +
                 2.54737665e+04 * invT;
    // species 3: O
    species[3] = +2.15906526e+00 - 1.60754999e-03 * T + 2.16418514e-06 * T2 -
                 1.49688779e-09 * T3 + 4.13752234e-13 * T4 +
                 2.91298453e+04 * invT;
    // species 4: OH
    species[4] = +2.97585165e+00 - 1.14277645e-03 * T + 1.44480961e-06 * T2 -
                 8.99816600e-10 * T3 + 2.53413860e-13 * T4 +
                 3.39341137e+03 * invT;
    // species 5: HO2
    species[5] = +3.26251250e+00 - 2.22821016e-03 * T + 6.83883113e-06 * T2 -
                 5.89485027e-09 * T3 + 1.81122851e-12 * T4 +
                 2.62442356e+02 * invT;
    // species 6: H2O
    species[6] = +3.20147551e+00 - 1.02791773e-03 * T + 2.18849069e-06 * T2 -
                 1.38226740e-09 * T3 + 3.56565210e-13 * T4 -
                 3.02950066e+04 * invT;
    // species 7: H2O2
    species[7] = +3.23854160e+00 - 1.24805455e-04 * T + 5.32859670e-06 * T2 -
                 5.17299863e-09 * T3 + 1.65953264e-12 * T4 -
                 1.76486003e+04 * invT;
    // species 8: NO
    species[8] = +3.08517990e+00 - 1.82346594e-03 * T + 2.83202537e-06 * T2 -
                 1.65601433e-09 * T3 + 3.55294746e-13 * T4 +
                 9.84061267e+03 * invT;
    // species 9: NH3
    species[9] = +3.14027871e+00 - 1.79244571e-03 * T + 6.31586347e-06 * T2 -
                 4.97084925e-09 * T3 + 1.43053592e-12 * T4 -
                 6.68545158e+03 * invT;
    // species 10: NH2
    species[10] = +3.06463329e+00 - 5.50107270e-04 * T + 1.41949689e-06 * T2 -
                  6.70558957e-10 * T3 + 1.17853481e-13 * T4 +
                  2.11768668e+04 * invT;
    // species 11: NH
    species[11] = +2.45887003e+00 + 2.46952204e-04 * T - 6.26208533e-07 * T2 +
                  7.13855598e-10 * T3 - 2.33729342e-13 * T4 +
                  4.21088372e+04 * invT;
    // species 12: N
    species[12] = +1.49976643e+00 + 2.51074797e-07 * T + 6.43637370e-10 * T2 -
                  1.23658157e-12 * T3 + 5.48179012e-16 * T4 +
                  5.60760710e+04 * invT;
    // species 13: NNH
    species[13] = +3.25474632e+00 - 1.72549149e-03 * T + 4.59295663e-06 * T2 -
                  3.33159360e-09 * T3 + 8.82046794e-13 * T4 +
                  2.88323793e+04 * invT;
    // species 14: N2H4
    species[14] = +2.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
                  1.25177296e-08 * T3 + 4.06724128e-12 * T4 +
                  1.00893925e+04 * invT;
    // species 15: N2H3
    species[15] = +2.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
                  7.49319330e-09 * T3 + 2.41957940e-12 * T4 +
                  2.58198956e+04 * invT;
    // species 16: N2H2
    species[16] = +3.91066031e+00 - 5.38959400e-03 * T + 1.28838830e-05 * T2 -
                  9.66254245e-09 * T3 + 2.69704268e-12 * T4 +
                  2.28241901e+04 * invT;
    // species 17: H2NN
    species[17] = +3.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
                  7.60001377e-09 * T3 + 2.09401278e-12 * T4 +
                  3.49580003e+04 * invT;
    // species 18: NH2OH
    species[18] = +2.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
                  4.91670655e-09 * T3 + 1.76503318e-12 * T4 -
                  6.58148481e+03 * invT;
    // species 19: H2NO
    species[19] = +2.93201139e+00 - 8.20140825e-05 * T + 4.63871363e-06 * T2 -
                  4.06869633e-09 * T3 + 1.20070567e-12 * T4 +
                  6.71178975e+03 * invT;
    // species 20: HNOH
    species[20] = +2.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
                  7.89112800e-09 * T3 + 2.48169148e-12 * T4 +
                  1.09199790e+04 * invT;
    // species 21: HNO
    species[21] = +3.55326160e+00 - 2.92265844e-03 * T + 6.29512480e-06 * T2 -
                  4.40099733e-09 * T3 + 1.14577924e-12 * T4 +
                  1.16315603e+04 * invT;
    // species 22: HON
    species[22] = +3.15272450e+00 - 1.93913201e-03 * T + 6.84920103e-06 * T2 -
                  6.22623707e-09 * T3 + 1.97473092e-12 * T4 +
                  2.46037098e+04 * invT;
    // species 23: NO2
    species[23] = +2.78712696e+00 - 2.14788417e-04 * T + 4.57946060e-06 * T2 -
                  4.35660350e-09 * T3 + 1.34249929e-12 * T4 +
                  2.89500124e+03 * invT;
    // species 24: HONO
    species[24] = +2.16416438e+00 + 4.25258887e-03 * T + 1.82853858e-07 * T2 -
                  2.06914118e-09 * T3 + 8.79914302e-13 * T4 -
                  1.07744086e+04 * invT;
    // species 25: HNO2
    species[25] = +3.03779347e+00 - 2.23061555e-03 * T + 1.06480272e-05 * T2 -
                  9.48398725e-09 * T3 + 2.89141770e-12 * T4 -
                  6.53088236e+03 * invT;
    // species 26: NO3
    species[26] = +2.35586850e+00 + 5.32727180e-03 * T - 9.55634980e-07 * T2 -
                  1.28677903e-09 * T3 + 6.17064572e-13 * T4 +
                  7.47534931e+03 * invT;
    // species 27: HONO2
    species[27] = +5.59750560e-01 + 1.00751085e-02 * T - 3.84057653e-06 * T2 -
                  5.79728075e-10 * T3 + 6.35161104e-13 * T4 -
                  1.73955871e+04 * invT;
    // species 28: N2O
    species[28] = +1.13942290e+00 + 6.09004370e-03 * T - 5.30631383e-06 * T2 +
                  3.02300097e-09 * T3 - 7.70251830e-13 * T4 +
                  8.87008622e+03 * invT;
    // species 29: N2
    species[29] = +2.53603521e+00 - 7.91354720e-05 * T - 1.42328084e-07 * T2 +
                  5.93856475e-10 * T3 - 2.79416412e-13 * T4 -
                  1.04749645e+03 * invT;
  } else {
    // species 0: H2
    species[0] = +1.90207649e+00 + 4.34496291e-04 * T - 5.52881433e-08 * T2 +
                 4.77129748e-12 * T3 - 1.86224358e-16 * T4 -
                 7.97948726e+02 * invT;
    // species 1: O2
    species[1] = +2.65980488e+00 + 3.29938686e-04 * T - 4.80527240e-08 * T2 +
                 5.36640092e-12 * T3 - 2.73007568e-16 * T4 -
                 1.21603048e+03 * invT;
    // species 2: H
    species[2] = +1.49985211e+00 + 1.17291274e-07 * T - 3.87238803e-11 * T2 +
                 5.64270745e-15 * T3 - 3.05984010e-19 * T4 +
                 2.54738024e+04 * invT;
    // species 3: O
    species[3] = +1.55160087e+00 - 1.91542728e-05 * T + 2.81065826e-10 * T2 +
                 1.00316784e-12 * T3 - 8.34953148e-17 * T4 +
                 2.92287628e+04 * invT;
    // species 4: OH
    species[4] = +1.84581721e+00 + 5.48619090e-04 * T - 9.63737003e-08 * T2 +
                 1.02274977e-11 * T3 - 4.62764516e-16 * T4 +
                 3.71706610e+03 * invT;
    // species 5: HO2
    species[5] = +3.10564010e+00 + 1.02023418e-03 * T - 1.21959187e-07 * T2 +
                 4.64932610e-12 * T3 + 9.97636630e-17 * T4 +
                 4.32898769e+01 * invT;
    // species 6: H2O
    species[6] = +1.73117512e+00 + 1.47568497e-03 * T - 2.78453262e-07 * T2 +
                 3.15221483e-11 * T3 - 1.68106335e-15 * T4 -
                 2.99169082e+04 * invT;
    // species 7: H2O2
    species[7] = +3.54017480e+00 + 2.07985485e-03 * T - 4.36255923e-07 * T2 +
                 5.02059038e-11 * T3 - 2.31018486e-15 * T4 -
                 1.79514029e+04 * invT;
    // species 8: NO
    species[8] = +2.25487317e+00 + 5.99349705e-04 * T - 1.44342833e-07 * T2 +
                 1.75735834e-11 * T3 - 8.19577150e-16 * T4 +
                 9.90699836e+03 * invT;
    // species 9: NH3
    species[9] = +1.36074311e+00 + 3.15925073e-03 * T - 7.63222687e-07 * T2 +
                 1.02941853e-10 * T3 - 5.81673574e-15 * T4 -
                 6.41596473e+03 * invT;
    // species 10: NH2
    species[10] = +1.62499312e+00 + 1.69920589e-03 * T - 3.38769893e-07 * T2 +
                  3.13776990e-11 * T3 - 5.33001686e-16 * T4 +
                  2.15419104e+04 * invT;
    // species 11: NH
    species[11] = +1.79498941e+00 + 6.46297835e-04 * T - 1.28519698e-07 * T2 +
                  1.56506902e-11 * T3 - 7.40843826e-16 * T4 +
                  4.23408998e+04 * invT;
    // species 12: N
    species[12] = +1.41604245e+00 + 8.73318830e-05 * T - 3.96215207e-08 * T2 +
                  7.54625135e-12 * T3 - 4.06520318e-16 * T4 +
                  5.61051512e+04 * invT;
    // species 13: NNH
    species[13] = +2.42744423e+00 + 1.61647617e-03 * T - 3.90987663e-07 * T2 +
                  4.76270890e-11 * T3 - 2.28983012e-15 * T4 +
                  2.88067740e+04 * invT;
    // species 14: N2H4
    species[14] = +3.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
                  1.16819604e-10 * T3 - 5.46137198e-15 * T4 +
                  9.28265548e+03 * invT;
    // species 15: N2H3
    species[15] = +3.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
                  9.59332552e-11 * T3 - 4.46215146e-15 * T4 +
                  2.53241420e+04 * invT;
    // species 16: N2H2
    species[16] = +3.11151170e-01 + 4.50093604e-03 * T - 1.04970608e-06 * T2 +
                  1.20362395e-10 * T3 - 5.43795782e-15 * T4 +
                  2.33863341e+04 * invT;
    // species 17: H2NN
    species[17] = +2.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
                  8.96348015e-11 * T3 - 4.29065810e-15 * T4 +
                  3.48530149e+04 * invT;
    // species 18: NH2OH
    species[18] = +2.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
                  1.09482733e-10 * T3 - 5.05449208e-15 * T4 -
                  6.86018419e+03 * invT;
    // species 19: H2NO
    species[19] = +2.75555914e+00 + 2.58109677e-03 * T - 5.87957957e-07 * T2 +
                  6.87631730e-11 * T3 - 3.21286286e-15 * T4 +
                  6.51826177e+03 * invT;
    // species 20: HNOH
    species[20] = +2.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
                  6.38428615e-11 * T3 - 2.96617122e-15 * T4 +
                  1.05780106e+04 * invT;
    // species 21: HNO
    species[21] = +2.24129053e+00 + 1.36188597e-03 * T - 5.35444320e-08 * T2 -
                  2.44783745e-11 * T3 + 2.34207888e-15 * T4 +
                  1.17745744e+04 * invT;
    // species 22: HON
    species[22] = +3.12044656e+00 + 1.14369061e-03 * T - 2.38228454e-07 * T2 +
                  2.58330960e-11 * T3 - 1.14096820e-15 * T4 +
                  2.43643963e+04 * invT;
    // species 23: NO2
    species[23] = +3.90482285e+00 + 1.07237249e-03 * T - 2.70884686e-07 * T2 +
                  3.88779892e-11 * T3 - 2.08227926e-15 * T4 +
                  2.28958979e+03 * invT;
    // species 24: HONO
    species[24] = +4.79144641e+00 + 1.82315366e-03 * T - 4.30375883e-07 * T2 +
                  5.16245582e-11 * T3 - 2.44277358e-15 * T4 -
                  1.15974343e+04 * invT;
    // species 25: HNO2
    species[25] = +3.66358504e+00 + 2.44927175e-03 * T - 5.98980643e-07 * T2 +
                  7.36050902e-11 * T3 - 3.56471154e-15 * T4 -
                  7.25216334e+03 * invT;
    // species 26: NO3
    species[26] = +6.37569146e+00 + 1.10866501e-03 * T - 1.91898596e-07 * T2 +
                  1.67443856e-11 * T3 - 5.17869400e-16 * T4 +
                  6.22445577e+03 * invT;
    // species 27: HONO2
    species[27] = +7.03061257e+00 + 2.23184168e-03 * T - 5.74242597e-07 * T2 +
                  7.29029015e-11 * T3 - 3.60974724e-15 * T4 -
                  1.93033764e+04 * invT;
    // species 28: N2O
    species[28] = +3.80641382e+00 + 1.32653722e-03 * T - 3.23599132e-07 * T2 +
                  4.06475375e-11 * T3 - 1.99347631e-15 * T4 +
                  8.19798219e+03 * invT;
    // species 29: N2
    species[29] = +1.93802970e+00 + 7.09190150e-04 * T - 1.67760348e-07 * T2 +
                  2.01888866e-11 * T3 - 9.52128550e-16 * T4 -
                  9.17180990e+02 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.37694204e+00 + 3.86958461e-03 * T - 6.29116910e-06 * T2 +
                 4.88792785e-09 * T3 - 1.43419133e-12 * T4 -
                 9.21173081e+02 * invT;
    // species 1: O2
    species[1] = +3.78498258e+00 - 1.51001116e-03 * T + 3.30676390e-06 * T2 -
                 2.44460109e-09 * T3 + 6.57755404e-13 * T4 -
                 1.06413589e+03 * invT;
    // species 2: H
    species[2] = +2.49975925e+00 + 3.36912250e-07 * T + 3.72690870e-10 * T2 -
                 9.25480315e-13 * T3 + 4.28467644e-16 * T4 +
                 2.54737665e+04 * invT;
    // species 3: O
    species[3] = +3.15906526e+00 - 1.60754999e-03 * T + 2.16418514e-06 * T2 -
                 1.49688779e-09 * T3 + 4.13752234e-13 * T4 +
                 2.91298453e+04 * invT;
    // species 4: OH
    species[4] = +3.97585165e+00 - 1.14277645e-03 * T + 1.44480961e-06 * T2 -
                 8.99816600e-10 * T3 + 2.53413860e-13 * T4 +
                 3.39341137e+03 * invT;
    // species 5: HO2
    species[5] = +4.26251250e+00 - 2.22821016e-03 * T + 6.83883113e-06 * T2 -
                 5.89485027e-09 * T3 + 1.81122851e-12 * T4 +
                 2.62442356e+02 * invT;
    // species 6: H2O
    species[6] = +4.20147551e+00 - 1.02791773e-03 * T + 2.18849069e-06 * T2 -
                 1.38226740e-09 * T3 + 3.56565210e-13 * T4 -
                 3.02950066e+04 * invT;
    // species 7: H2O2
    species[7] = +4.23854160e+00 - 1.24805455e-04 * T + 5.32859670e-06 * T2 -
                 5.17299863e-09 * T3 + 1.65953264e-12 * T4 -
                 1.76486003e+04 * invT;
    // species 8: NO
    species[8] = +4.08517990e+00 - 1.82346594e-03 * T + 2.83202537e-06 * T2 -
                 1.65601433e-09 * T3 + 3.55294746e-13 * T4 +
                 9.84061267e+03 * invT;
    // species 9: NH3
    species[9] = +4.14027871e+00 - 1.79244571e-03 * T + 6.31586347e-06 * T2 -
                 4.97084925e-09 * T3 + 1.43053592e-12 * T4 -
                 6.68545158e+03 * invT;
    // species 10: NH2
    species[10] = +4.06463329e+00 - 5.50107270e-04 * T + 1.41949689e-06 * T2 -
                  6.70558957e-10 * T3 + 1.17853481e-13 * T4 +
                  2.11768668e+04 * invT;
    // species 11: NH
    species[11] = +3.45887003e+00 + 2.46952204e-04 * T - 6.26208533e-07 * T2 +
                  7.13855598e-10 * T3 - 2.33729342e-13 * T4 +
                  4.21088372e+04 * invT;
    // species 12: N
    species[12] = +2.49976643e+00 + 2.51074797e-07 * T + 6.43637370e-10 * T2 -
                  1.23658157e-12 * T3 + 5.48179012e-16 * T4 +
                  5.60760710e+04 * invT;
    // species 13: NNH
    species[13] = +4.25474632e+00 - 1.72549149e-03 * T + 4.59295663e-06 * T2 -
                  3.33159360e-09 * T3 + 8.82046794e-13 * T4 +
                  2.88323793e+04 * invT;
    // species 14: N2H4
    species[14] = +3.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
                  1.25177296e-08 * T3 + 4.06724128e-12 * T4 +
                  1.00893925e+04 * invT;
    // species 15: N2H3
    species[15] = +3.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
                  7.49319330e-09 * T3 + 2.41957940e-12 * T4 +
                  2.58198956e+04 * invT;
    // species 16: N2H2
    species[16] = +4.91066031e+00 - 5.38959400e-03 * T + 1.28838830e-05 * T2 -
                  9.66254245e-09 * T3 + 2.69704268e-12 * T4 +
                  2.28241901e+04 * invT;
    // species 17: H2NN
    species[17] = +4.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
                  7.60001377e-09 * T3 + 2.09401278e-12 * T4 +
                  3.49580003e+04 * invT;
    // species 18: NH2OH
    species[18] = +3.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
                  4.91670655e-09 * T3 + 1.76503318e-12 * T4 -
                  6.58148481e+03 * invT;
    // species 19: H2NO
    species[19] = +3.93201139e+00 - 8.20140825e-05 * T + 4.63871363e-06 * T2 -
                  4.06869633e-09 * T3 + 1.20070567e-12 * T4 +
                  6.71178975e+03 * invT;
    // species 20: HNOH
    species[20] = +3.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
                  7.89112800e-09 * T3 + 2.48169148e-12 * T4 +
                  1.09199790e+04 * invT;
    // species 21: HNO
    species[21] = +4.55326160e+00 - 2.92265844e-03 * T + 6.29512480e-06 * T2 -
                  4.40099733e-09 * T3 + 1.14577924e-12 * T4 +
                  1.16315603e+04 * invT;
    // species 22: HON
    species[22] = +4.15272450e+00 - 1.93913201e-03 * T + 6.84920103e-06 * T2 -
                  6.22623707e-09 * T3 + 1.97473092e-12 * T4 +
                  2.46037098e+04 * invT;
    // species 23: NO2
    species[23] = +3.78712696e+00 - 2.14788417e-04 * T + 4.57946060e-06 * T2 -
                  4.35660350e-09 * T3 + 1.34249929e-12 * T4 +
                  2.89500124e+03 * invT;
    // species 24: HONO
    species[24] = +3.16416438e+00 + 4.25258887e-03 * T + 1.82853858e-07 * T2 -
                  2.06914118e-09 * T3 + 8.79914302e-13 * T4 -
                  1.07744086e+04 * invT;
    // species 25: HNO2
    species[25] = +4.03779347e+00 - 2.23061555e-03 * T + 1.06480272e-05 * T2 -
                  9.48398725e-09 * T3 + 2.89141770e-12 * T4 -
                  6.53088236e+03 * invT;
    // species 26: NO3
    species[26] = +3.35586850e+00 + 5.32727180e-03 * T - 9.55634980e-07 * T2 -
                  1.28677903e-09 * T3 + 6.17064572e-13 * T4 +
                  7.47534931e+03 * invT;
    // species 27: HONO2
    species[27] = +1.55975056e+00 + 1.00751085e-02 * T - 3.84057653e-06 * T2 -
                  5.79728075e-10 * T3 + 6.35161104e-13 * T4 -
                  1.73955871e+04 * invT;
    // species 28: N2O
    species[28] = +2.13942290e+00 + 6.09004370e-03 * T - 5.30631383e-06 * T2 +
                  3.02300097e-09 * T3 - 7.70251830e-13 * T4 +
                  8.87008622e+03 * invT;
    // species 29: N2
    species[29] = +3.53603521e+00 - 7.91354720e-05 * T - 1.42328084e-07 * T2 +
                  5.93856475e-10 * T3 - 2.79416412e-13 * T4 -
                  1.04749645e+03 * invT;
  } else {
    // species 0: H2
    species[0] = +2.90207649e+00 + 4.34496291e-04 * T - 5.52881433e-08 * T2 +
                 4.77129748e-12 * T3 - 1.86224358e-16 * T4 -
                 7.97948726e+02 * invT;
    // species 1: O2
    species[1] = +3.65980488e+00 + 3.29938686e-04 * T - 4.80527240e-08 * T2 +
                 5.36640092e-12 * T3 - 2.73007568e-16 * T4 -
                 1.21603048e+03 * invT;
    // species 2: H
    species[2] = +2.49985211e+00 + 1.17291274e-07 * T - 3.87238803e-11 * T2 +
                 5.64270745e-15 * T3 - 3.05984010e-19 * T4 +
                 2.54738024e+04 * invT;
    // species 3: O
    species[3] = +2.55160087e+00 - 1.91542728e-05 * T + 2.81065826e-10 * T2 +
                 1.00316784e-12 * T3 - 8.34953148e-17 * T4 +
                 2.92287628e+04 * invT;
    // species 4: OH
    species[4] = +2.84581721e+00 + 5.48619090e-04 * T - 9.63737003e-08 * T2 +
                 1.02274977e-11 * T3 - 4.62764516e-16 * T4 +
                 3.71706610e+03 * invT;
    // species 5: HO2
    species[5] = +4.10564010e+00 + 1.02023418e-03 * T - 1.21959187e-07 * T2 +
                 4.64932610e-12 * T3 + 9.97636630e-17 * T4 +
                 4.32898769e+01 * invT;
    // species 6: H2O
    species[6] = +2.73117512e+00 + 1.47568497e-03 * T - 2.78453262e-07 * T2 +
                 3.15221483e-11 * T3 - 1.68106335e-15 * T4 -
                 2.99169082e+04 * invT;
    // species 7: H2O2
    species[7] = +4.54017480e+00 + 2.07985485e-03 * T - 4.36255923e-07 * T2 +
                 5.02059038e-11 * T3 - 2.31018486e-15 * T4 -
                 1.79514029e+04 * invT;
    // species 8: NO
    species[8] = +3.25487317e+00 + 5.99349705e-04 * T - 1.44342833e-07 * T2 +
                 1.75735834e-11 * T3 - 8.19577150e-16 * T4 +
                 9.90699836e+03 * invT;
    // species 9: NH3
    species[9] = +2.36074311e+00 + 3.15925073e-03 * T - 7.63222687e-07 * T2 +
                 1.02941853e-10 * T3 - 5.81673574e-15 * T4 -
                 6.41596473e+03 * invT;
    // species 10: NH2
    species[10] = +2.62499312e+00 + 1.69920589e-03 * T - 3.38769893e-07 * T2 +
                  3.13776990e-11 * T3 - 5.33001686e-16 * T4 +
                  2.15419104e+04 * invT;
    // species 11: NH
    species[11] = +2.79498941e+00 + 6.46297835e-04 * T - 1.28519698e-07 * T2 +
                  1.56506902e-11 * T3 - 7.40843826e-16 * T4 +
                  4.23408998e+04 * invT;
    // species 12: N
    species[12] = +2.41604245e+00 + 8.73318830e-05 * T - 3.96215207e-08 * T2 +
                  7.54625135e-12 * T3 - 4.06520318e-16 * T4 +
                  5.61051512e+04 * invT;
    // species 13: NNH
    species[13] = +3.42744423e+00 + 1.61647617e-03 * T - 3.90987663e-07 * T2 +
                  4.76270890e-11 * T3 - 2.28983012e-15 * T4 +
                  2.88067740e+04 * invT;
    // species 14: N2H4
    species[14] = +4.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
                  1.16819604e-10 * T3 - 5.46137198e-15 * T4 +
                  9.28265548e+03 * invT;
    // species 15: N2H3
    species[15] = +4.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
                  9.59332552e-11 * T3 - 4.46215146e-15 * T4 +
                  2.53241420e+04 * invT;
    // species 16: N2H2
    species[16] = +1.31115117e+00 + 4.50093604e-03 * T - 1.04970608e-06 * T2 +
                  1.20362395e-10 * T3 - 5.43795782e-15 * T4 +
                  2.33863341e+04 * invT;
    // species 17: H2NN
    species[17] = +3.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
                  8.96348015e-11 * T3 - 4.29065810e-15 * T4 +
                  3.48530149e+04 * invT;
    // species 18: NH2OH
    species[18] = +3.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
                  1.09482733e-10 * T3 - 5.05449208e-15 * T4 -
                  6.86018419e+03 * invT;
    // species 19: H2NO
    species[19] = +3.75555914e+00 + 2.58109677e-03 * T - 5.87957957e-07 * T2 +
                  6.87631730e-11 * T3 - 3.21286286e-15 * T4 +
                  6.51826177e+03 * invT;
    // species 20: HNOH
    species[20] = +3.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
                  6.38428615e-11 * T3 - 2.96617122e-15 * T4 +
                  1.05780106e+04 * invT;
    // species 21: HNO
    species[21] = +3.24129053e+00 + 1.36188597e-03 * T - 5.35444320e-08 * T2 -
                  2.44783745e-11 * T3 + 2.34207888e-15 * T4 +
                  1.17745744e+04 * invT;
    // species 22: HON
    species[22] = +4.12044656e+00 + 1.14369061e-03 * T - 2.38228454e-07 * T2 +
                  2.58330960e-11 * T3 - 1.14096820e-15 * T4 +
                  2.43643963e+04 * invT;
    // species 23: NO2
    species[23] = +4.90482285e+00 + 1.07237249e-03 * T - 2.70884686e-07 * T2 +
                  3.88779892e-11 * T3 - 2.08227926e-15 * T4 +
                  2.28958979e+03 * invT;
    // species 24: HONO
    species[24] = +5.79144641e+00 + 1.82315366e-03 * T - 4.30375883e-07 * T2 +
                  5.16245582e-11 * T3 - 2.44277358e-15 * T4 -
                  1.15974343e+04 * invT;
    // species 25: HNO2
    species[25] = +4.66358504e+00 + 2.44927175e-03 * T - 5.98980643e-07 * T2 +
                  7.36050902e-11 * T3 - 3.56471154e-15 * T4 -
                  7.25216334e+03 * invT;
    // species 26: NO3
    species[26] = +7.37569146e+00 + 1.10866501e-03 * T - 1.91898596e-07 * T2 +
                  1.67443856e-11 * T3 - 5.17869400e-16 * T4 +
                  6.22445577e+03 * invT;
    // species 27: HONO2
    species[27] = +8.03061257e+00 + 2.23184168e-03 * T - 5.74242597e-07 * T2 +
                  7.29029015e-11 * T3 - 3.60974724e-15 * T4 -
                  1.93033764e+04 * invT;
    // species 28: N2O
    species[28] = +4.80641382e+00 + 1.32653722e-03 * T - 3.23599132e-07 * T2 +
                  4.06475375e-11 * T3 - 1.99347631e-15 * T4 +
                  8.19798219e+03 * invT;
    // species 29: N2
    species[29] = +2.93802970e+00 + 7.09190150e-04 * T - 1.67760348e-07 * T2 +
                  2.01888866e-11 * T3 - 9.52128550e-16 * T4 -
                  9.17180990e+02 * invT;
  }
}

// compute the S/R at the given temperature (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.37694204e+00 * logT + 7.73916922e-03 * T -
                 9.43675365e-06 * T2 + 6.51723713e-09 * T3 -
                 1.79273916e-12 * T4 + 5.47184736e-01;
    // species 1: O2
    species[1] = +3.78498258e+00 * logT - 3.02002233e-03 * T +
                 4.96014586e-06 * T2 - 3.25946811e-09 * T3 +
                 8.22194255e-13 * T4 + 3.64780709e+00;
    // species 2: H
    species[2] = +2.49975925e+00 * logT + 6.73824499e-07 * T +
                 5.59036305e-10 * T2 - 1.23397375e-12 * T3 +
                 5.35584555e-16 * T4 - 4.45574009e-01;
    // species 3: O
    species[3] = +3.15906526e+00 * logT - 3.21509999e-03 * T +
                 3.24627771e-06 * T2 - 1.99585038e-09 * T3 +
                 5.17190293e-13 * T4 + 2.09078344e+00;
    // species 4: OH
    species[4] = +3.97585165e+00 * logT - 2.28555291e-03 * T +
                 2.16721441e-06 * T2 - 1.19975547e-09 * T3 +
                 3.16767325e-13 * T4 - 3.55397262e-02;
    // species 5: HO2
    species[5] = +4.26251250e+00 * logT - 4.45642032e-03 * T +
                 1.02582467e-05 * T2 - 7.85980037e-09 * T3 +
                 2.26403564e-12 * T4 + 3.88223684e+00;
    // species 6: H2O
    species[6] = +4.20147551e+00 * logT - 2.05583546e-03 * T +
                 3.28273603e-06 * T2 - 1.84302320e-09 * T3 +
                 4.45706512e-13 * T4 - 8.60610906e-01;
    // species 7: H2O2
    species[7] = +4.23854160e+00 * logT - 2.49610911e-04 * T +
                 7.99289505e-06 * T2 - 6.89733150e-09 * T3 +
                 2.07441580e-12 * T4 + 3.58850097e+00;
    // species 8: NO
    species[8] = +4.08517990e+00 * logT - 3.64693188e-03 * T +
                 4.24803806e-06 * T2 - 2.20801911e-09 * T3 +
                 4.44118432e-13 * T4 + 2.83578236e+00;
    // species 9: NH3
    species[9] = +4.14027871e+00 * logT - 3.58489142e-03 * T +
                 9.47379520e-06 * T2 - 6.62779900e-09 * T3 +
                 1.78816990e-12 * T4 - 1.66754883e-02;
    // species 10: NH2
    species[10] = +4.06463329e+00 * logT - 1.10021454e-03 * T +
                  2.12924534e-06 * T2 - 8.94078610e-10 * T3 +
                  1.47316852e-13 * T4 + 4.39850770e-01;
    // species 11: NH
    species[11] = +3.45887003e+00 * logT + 4.93904408e-04 * T -
                  9.39312800e-07 * T2 + 9.51807463e-10 * T3 -
                  2.92161678e-13 * T4 + 2.00373292e+00;
    // species 12: N
    species[12] = +2.49976643e+00 * logT + 5.02149594e-07 * T +
                  9.65456055e-10 * T2 - 1.64877543e-12 * T3 +
                  6.85223765e-16 * T4 + 4.19499326e+00;
    // species 13: NNH
    species[13] = +4.25474632e+00 * logT - 3.45098298e-03 * T +
                  6.88943495e-06 * T2 - 4.44212480e-09 * T3 +
                  1.10255849e-12 * T4 + 3.28551762e+00;
    // species 14: N2H4
    species[14] = +3.83472149e+00 * logT - 6.49129555e-04 * T +
                  1.88424232e-05 * T2 - 1.66903061e-08 * T3 +
                  5.08405160e-12 * T4 + 5.75272030e+00;
    // species 15: N2H3
    species[15] = +3.42125505e+00 * logT + 1.34901590e-03 * T +
                  1.11729535e-05 * T2 - 9.99092440e-09 * T3 +
                  3.02447425e-12 * T4 + 7.83176309e+00;
    // species 16: N2H2
    species[16] = +4.91066031e+00 * logT - 1.07791880e-02 * T +
                  1.93258244e-05 * T2 - 1.28833899e-08 * T3 +
                  3.37130335e-12 * T4 + 9.10273396e-02;
    // species 17: H2NN
    species[17] = +4.53204001e+00 * logT - 7.32418578e-03 * T +
                  1.50401856e-05 * T2 - 1.01333517e-08 * T3 +
                  2.61751598e-12 * T4 + 1.51074195e+00;
    // species 18: NH2OH
    species[18] = +3.21016092e+00 * logT + 6.19671676e-03 * T +
                  5.52974740e-06 * T2 - 6.55560873e-09 * T3 +
                  2.20629147e-12 * T4 + 7.93293571e+00;
    // species 19: H2NO
    species[19] = +3.93201139e+00 * logT - 1.64028165e-04 * T +
                  6.95807045e-06 * T2 - 5.42492843e-09 * T3 +
                  1.50088209e-12 * T4 + 4.58837038e+00;
    // species 20: HNOH
    species[20] = +3.95608248e+00 * logT - 3.02611020e-03 * T +
                  1.28437198e-05 * T2 - 1.05215040e-08 * T3 +
                  3.10211435e-12 * T4 + 5.55950983e+00;
    // species 21: HNO
    species[21] = +4.55326160e+00 * logT - 5.84531688e-03 * T +
                  9.44268720e-06 * T2 - 5.86799643e-09 * T3 +
                  1.43222405e-12 * T4 + 1.66850841e+00;
    // species 22: HON
    species[22] = +4.15272450e+00 * logT - 3.87826402e-03 * T +
                  1.02738015e-05 * T2 - 8.30164943e-09 * T3 +
                  2.46841365e-12 * T4 + 4.56636321e+00;
    // species 23: NO2
    species[23] = +3.78712696e+00 * logT - 4.29576834e-04 * T +
                  6.86919090e-06 * T2 - 5.80880467e-09 * T3 +
                  1.67812411e-12 * T4 + 6.96592162e+00;
    // species 24: HONO
    species[24] = +3.16416438e+00 * logT + 8.50517773e-03 * T +
                  2.74280786e-07 * T2 - 2.75885491e-09 * T3 +
                  1.09989288e-12 * T4 + 1.00231941e+01;
    // species 25: HNO2
    species[25] = +4.03779347e+00 * logT - 4.46123109e-03 * T +
                  1.59720407e-05 * T2 - 1.26453163e-08 * T3 +
                  3.61427213e-12 * T4 + 5.90620097e+00;
    // species 26: NO3
    species[26] = +3.35586850e+00 * logT + 1.06545436e-02 * T -
                  1.43345247e-06 * T2 - 1.71570537e-09 * T3 +
                  7.71330715e-13 * T4 + 8.94786516e+00;
    // species 27: HONO2
    species[27] = +1.55975056e+00 * logT + 2.01502169e-02 * T -
                  5.76086480e-06 * T2 - 7.72970767e-10 * T3 +
                  7.93951380e-13 * T4 + 1.77294677e+01;
    // species 28: N2O
    species[28] = +2.13942290e+00 * logT + 1.21800874e-02 * T -
                  7.95947075e-06 * T2 + 4.03066797e-09 * T3 -
                  9.62814787e-13 * T4 + 1.12477534e+01;
    // species 29: N2
    species[29] = +3.53603521e+00 * logT - 1.58270944e-04 * T -
                  2.13492125e-07 * T2 + 7.91808633e-10 * T3 -
                  3.49270515e-13 * T4 + 2.94603724e+00;
  } else {
    // species 0: H2
    species[0] = +2.90207649e+00 * logT + 8.68992581e-04 * T -
                 8.29322150e-08 * T2 + 6.36172997e-12 * T3 -
                 2.32780447e-16 * T4 - 8.45591320e-01;
    // species 1: O2
    species[1] = +3.65980488e+00 * logT + 6.59877372e-04 * T -
                 7.20790860e-08 * T2 + 7.15520123e-12 * T3 -
                 3.41259460e-16 * T4 + 3.42074148e+00;
    // species 2: H
    species[2] = +2.49985211e+00 * logT + 2.34582548e-07 * T -
                 5.80858205e-11 * T2 + 7.52360993e-15 * T3 -
                 3.82480012e-19 * T4 - 4.45864645e-01;
    // species 3: O
    species[3] = +2.55160087e+00 * logT - 3.83085457e-05 * T +
                 4.21598739e-10 * T2 + 1.33755712e-12 * T3 -
                 1.04369143e-16 * T4 + 4.87617014e+00;
    // species 4: OH
    species[4] = +2.84581721e+00 * logT + 1.09723818e-03 * T -
                 1.44560551e-07 * T2 + 1.36366637e-11 * T3 -
                 5.78455645e-16 * T4 + 5.80339915e+00;
    // species 5: HO2
    species[5] = +4.10564010e+00 * logT + 2.04046836e-03 * T -
                 1.82938781e-07 * T2 + 6.19910147e-12 * T3 +
                 1.24704579e-16 * T4 + 3.30808126e+00;
    // species 6: H2O
    species[6] = +2.73117512e+00 * logT + 2.95136995e-03 * T -
                 4.17679892e-07 * T2 + 4.20295310e-11 * T3 -
                 2.10132919e-15 * T4 + 6.55183000e+00;
    // species 7: H2O2
    species[7] = +4.54017480e+00 * logT + 4.15970971e-03 * T -
                 6.54383885e-07 * T2 + 6.69412050e-11 * T3 -
                 2.88773107e-15 * T4 + 8.55881745e-01;
    // species 8: NO
    species[8] = +3.25487317e+00 * logT + 1.19869941e-03 * T -
                 2.16514250e-07 * T2 + 2.34314445e-11 * T3 -
                 1.02447144e-15 * T4 + 6.40395140e+00;
    // species 9: NH3
    species[9] = +2.36074311e+00 * logT + 6.31850146e-03 * T -
                 1.14483403e-06 * T2 + 1.37255804e-10 * T3 -
                 7.27091967e-15 * T4 + 8.02154329e+00;
    // species 10: NH2
    species[10] = +2.62499312e+00 * logT + 3.39841177e-03 * T -
                  5.08154840e-07 * T2 + 4.18369320e-11 * T3 -
                  6.66252108e-16 * T4 + 7.73537416e+00;
    // species 11: NH
    species[11] = +2.79498941e+00 * logT + 1.29259567e-03 * T -
                  1.92779547e-07 * T2 + 2.08675869e-11 * T3 -
                  9.26054783e-16 * T4 + 5.68413752e+00;
    // species 12: N
    species[12] = +2.41604245e+00 * logT + 1.74663766e-04 * T -
                  5.94322810e-08 * T2 + 1.00616685e-11 * T3 -
                  5.08150398e-16 * T4 + 4.64905706e+00;
    // species 13: NNH
    species[13] = +3.42744423e+00 * logT + 3.23295234e-03 * T -
                  5.86481495e-07 * T2 + 6.35027853e-11 * T3 -
                  2.86228765e-15 * T4 + 6.39209233e+00;
    // species 14: N2H4
    species[14] = +4.93957357e+00 * logT + 8.75017187e-03 * T -
                  1.49699529e-06 * T2 + 1.55759473e-10 * T3 -
                  6.82671497e-15 * T4 - 2.69439772e+00;
    // species 15: N2H3
    species[15] = +4.04483566e+00 * logT + 7.31130186e-03 * T -
                  1.23812900e-06 * T2 + 1.27911007e-10 * T3 -
                  5.57768933e-15 * T4 + 2.88423392e+00;
    // species 16: N2H2
    species[16] = +1.31115117e+00 * logT + 9.00187208e-03 * T -
                  1.57455912e-06 * T2 + 1.60483194e-10 * T3 -
                  6.79744727e-15 * T4 + 1.64091067e+01;
    // species 17: H2NN
    species[17] = +3.05903670e+00 * logT + 6.18382347e-03 * T -
                  1.11085582e-06 * T2 + 1.19513069e-10 * T3 -
                  5.36332263e-15 * T4 + 6.69893515e+00;
    // species 18: NH2OH
    species[18] = +3.88112502e+00 * logT + 8.15708448e-03 * T -
                  1.41307788e-06 * T2 + 1.45976978e-10 * T3 -
                  6.31811510e-15 * T4 + 3.79156136e+00;
    // species 19: H2NO
    species[19] = +3.75555914e+00 * logT + 5.16219354e-03 * T -
                  8.81936935e-07 * T2 + 9.16842307e-11 * T3 -
                  4.01607857e-15 * T4 + 4.30933053e+00;
    // species 20: HNOH
    species[20] = +3.98321933e+00 * logT + 4.88846374e-03 * T -
                  8.25433185e-07 * T2 + 8.51238153e-11 * T3 -
                  3.70771402e-15 * T4 + 3.62582838e+00;
    // species 21: HNO
    species[21] = +3.24129053e+00 * logT + 2.72377193e-03 * T -
                  8.03166480e-08 * T2 - 3.26378327e-11 * T3 +
                  2.92759860e-15 * T4 + 7.27913637e+00;
    // species 22: HON
    species[22] = +4.12044656e+00 * logT + 2.28738122e-03 * T -
                  3.57342681e-07 * T2 + 3.44441280e-11 * T3 -
                  1.42621025e-15 * T4 + 3.38857665e+00;
    // species 23: NO2
    species[23] = +4.90482285e+00 * logT + 2.14474498e-03 * T -
                  4.06327029e-07 * T2 + 5.18373190e-11 * T3 -
                  2.60284907e-15 * T4 - 2.33567018e-01;
    // species 24: HONO
    species[24] = +5.79144641e+00 * logT + 3.64630732e-03 * T -
                  6.45563825e-07 * T2 + 6.88327443e-11 * T3 -
                  3.05346698e-15 * T4 - 4.07145349e+00;
    // species 25: HNO2
    species[25] = +4.66358504e+00 * logT + 4.89854351e-03 * T -
                  8.98470965e-07 * T2 + 9.81401203e-11 * T3 -
                  4.45588943e-15 * T4 - 3.06053640e-02;
    // species 26: NO3
    species[26] = +7.37569146e+00 * logT + 2.21733003e-03 * T -
                  2.87847895e-07 * T2 + 2.23258475e-11 * T3 -
                  6.47336750e-16 * T4 - 1.24945323e+01;
    // species 27: HONO2
    species[27] = +8.03061257e+00 * logT + 4.46368336e-03 * T -
                  8.61363895e-07 * T2 + 9.72038687e-11 * T3 -
                  4.51218405e-15 * T4 - 1.62543421e+01;
    // species 28: N2O
    species[28] = +4.80641382e+00 * logT + 2.65307443e-03 * T -
                  4.85398699e-07 * T2 + 5.41967167e-11 * T3 -
                  2.49184539e-15 * T4 - 2.10607801e+00;
    // species 29: N2
    species[29] = +2.93802970e+00 * logT + 1.41838030e-03 * T -
                  2.51640522e-07 * T2 + 2.69185155e-11 * T3 -
                  1.19016069e-15 * T4 + 5.95521985e+00;
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +7.73916922e-03 - 3.77470146e-05 * T + 5.86551342e-08 * T2 -
                 2.86838265e-11 * T3;
    // species 1: O2
    species[1] = -3.02002233e-03 + 1.98405834e-05 * T - 2.93352130e-08 * T2 +
                 1.31551081e-11 * T3;
    // species 2: H
    species[2] = +6.73824499e-07 + 2.23614522e-09 * T - 1.11057638e-11 * T2 +
                 8.56935288e-15 * T3;
    // species 3: O
    species[3] = -3.21509999e-03 + 1.29851109e-05 * T - 1.79626534e-08 * T2 +
                 8.27504468e-12 * T3;
    // species 4: OH
    species[4] = -2.28555291e-03 + 8.66885764e-06 * T - 1.07977992e-08 * T2 +
                 5.06827720e-12 * T3;
    // species 5: HO2
    species[5] = -4.45642032e-03 + 4.10329868e-05 * T - 7.07382033e-08 * T2 +
                 3.62245703e-11 * T3;
    // species 6: H2O
    species[6] = -2.05583546e-03 + 1.31309441e-05 * T - 1.65872088e-08 * T2 +
                 7.13130420e-12 * T3;
    // species 7: H2O2
    species[7] = -2.49610911e-04 + 3.19715802e-05 * T - 6.20759835e-08 * T2 +
                 3.31906528e-11 * T3;
    // species 8: NO
    species[8] = -3.64693188e-03 + 1.69921522e-05 * T - 1.98721720e-08 * T2 +
                 7.10589492e-12 * T3;
    // species 9: NH3
    species[9] = -3.58489142e-03 + 3.78951808e-05 * T - 5.96501910e-08 * T2 +
                 2.86107184e-11 * T3;
    // species 10: NH2
    species[10] = -1.10021454e-03 + 8.51698136e-06 * T - 8.04670749e-09 * T2 +
                  2.35706963e-12 * T3;
    // species 11: NH
    species[11] = +4.93904408e-04 - 3.75725120e-06 * T + 8.56626717e-09 * T2 -
                  4.67458684e-12 * T3;
    // species 12: N
    species[12] = +5.02149594e-07 + 3.86182422e-09 * T - 1.48389789e-11 * T2 +
                  1.09635802e-14 * T3;
    // species 13: NNH
    species[13] = -3.45098298e-03 + 2.75577398e-05 * T - 3.99791232e-08 * T2 +
                  1.76409359e-11 * T3;
    // species 14: N2H4
    species[14] = -6.49129555e-04 + 7.53696926e-05 * T - 1.50212755e-07 * T2 +
                  8.13448256e-11 * T3;
    // species 15: N2H3
    species[15] = +1.34901590e-03 + 4.46918142e-05 * T - 8.99183196e-08 * T2 +
                  4.83915880e-11 * T3;
    // species 16: N2H2
    species[16] = -1.07791880e-02 + 7.73032978e-05 * T - 1.15950509e-07 * T2 +
                  5.39408536e-11 * T3;
    // species 17: H2NN
    species[17] = -7.32418578e-03 + 6.01607426e-05 * T - 9.12001653e-08 * T2 +
                  4.18802556e-11 * T3;
    // species 18: NH2OH
    species[18] = +6.19671676e-03 + 2.21189896e-05 * T - 5.90004786e-08 * T2 +
                  3.53006636e-11 * T3;
    // species 19: H2NO
    species[19] = -1.64028165e-04 + 2.78322818e-05 * T - 4.88243559e-08 * T2 +
                  2.40141134e-11 * T3;
    // species 20: HNOH
    species[20] = -3.02611020e-03 + 5.13748792e-05 * T - 9.46935360e-08 * T2 +
                  4.96338296e-11 * T3;
    // species 21: HNO
    species[21] = -5.84531688e-03 + 3.77707488e-05 * T - 5.28119679e-08 * T2 +
                  2.29155848e-11 * T3;
    // species 22: HON
    species[22] = -3.87826402e-03 + 4.10952062e-05 * T - 7.47148449e-08 * T2 +
                  3.94946185e-11 * T3;
    // species 23: NO2
    species[23] = -4.29576834e-04 + 2.74767636e-05 * T - 5.22792420e-08 * T2 +
                  2.68499858e-11 * T3;
    // species 24: HONO
    species[24] = +8.50517773e-03 + 1.09712315e-06 * T - 2.48296942e-08 * T2 +
                  1.75982860e-11 * T3;
    // species 25: HNO2
    species[25] = -4.46123109e-03 + 6.38881630e-05 * T - 1.13807847e-07 * T2 +
                  5.78283540e-11 * T3;
    // species 26: NO3
    species[26] = +1.06545436e-02 - 5.73380988e-06 * T - 1.54413483e-08 * T2 +
                  1.23412914e-11 * T3;
    // species 27: HONO2
    species[27] = +2.01502169e-02 - 2.30434592e-05 * T - 6.95673690e-09 * T2 +
                  1.27032221e-11 * T3;
    // species 28: N2O
    species[28] = +1.21800874e-02 - 3.18378830e-05 * T + 3.62760117e-08 * T2 -
                  1.54050366e-11 * T3;
    // species 29: N2
    species[29] = -1.58270944e-04 - 8.53968502e-07 * T + 7.12627770e-09 * T2 -
                  5.58832824e-12 * T3;
  } else {
    // species 0: H2
    species[0] = +8.68992581e-04 - 3.31728860e-07 * T + 5.72555697e-11 * T2 -
                 3.72448716e-15 * T3;
    // species 1: O2
    species[1] = +6.59877372e-04 - 2.88316344e-07 * T + 6.43968111e-11 * T2 -
                 5.46015136e-15 * T3;
    // species 2: H
    species[2] = +2.34582548e-07 - 2.32343282e-10 * T + 6.77124894e-14 * T2 -
                 6.11968020e-18 * T3;
    // species 3: O
    species[3] = -3.83085457e-05 + 1.68639496e-09 * T + 1.20380141e-11 * T2 -
                 1.66990630e-15 * T3;
    // species 4: OH
    species[4] = +1.09723818e-03 - 5.78242202e-07 * T + 1.22729973e-10 * T2 -
                 9.25529032e-15 * T3;
    // species 5: HO2
    species[5] = +2.04046836e-03 - 7.31755124e-07 * T + 5.57919132e-11 * T2 +
                 1.99527326e-15 * T3;
    // species 6: H2O
    species[6] = +2.95136995e-03 - 1.67071957e-06 * T + 3.78265779e-10 * T2 -
                 3.36212670e-14 * T3;
    // species 7: H2O2
    species[7] = +4.15970971e-03 - 2.61753554e-06 * T + 6.02470845e-10 * T2 -
                 4.62036972e-14 * T3;
    // species 8: NO
    species[8] = +1.19869941e-03 - 8.66057000e-07 * T + 2.10883001e-10 * T2 -
                 1.63915430e-14 * T3;
    // species 9: NH3
    species[9] = +6.31850146e-03 - 4.57933612e-06 * T + 1.23530223e-09 * T2 -
                 1.16334715e-13 * T3;
    // species 10: NH2
    species[10] = +3.39841177e-03 - 2.03261936e-06 * T + 3.76532388e-10 * T2 -
                  1.06600337e-14 * T3;
    // species 11: NH
    species[11] = +1.29259567e-03 - 7.71118188e-07 * T + 1.87808282e-10 * T2 -
                  1.48168765e-14 * T3;
    // species 12: N
    species[12] = +1.74663766e-04 - 2.37729124e-07 * T + 9.05550162e-11 * T2 -
                  8.13040636e-15 * T3;
    // species 13: NNH
    species[13] = +3.23295234e-03 - 2.34592598e-06 * T + 5.71525068e-10 * T2 -
                  4.57966024e-14 * T3;
    // species 14: N2H4
    species[14] = +8.75017187e-03 - 5.98798116e-06 * T + 1.40183525e-09 * T2 -
                  1.09227440e-13 * T3;
    // species 15: N2H3
    species[15] = +7.31130186e-03 - 4.95251598e-06 * T + 1.15119906e-09 * T2 -
                  8.92430292e-14 * T3;
    // species 16: N2H2
    species[16] = +9.00187208e-03 - 6.29823648e-06 * T + 1.44434874e-09 * T2 -
                  1.08759156e-13 * T3;
    // species 17: H2NN
    species[17] = +6.18382347e-03 - 4.44342330e-06 * T + 1.07561762e-09 * T2 -
                  8.58131620e-14 * T3;
    // species 18: NH2OH
    species[18] = +8.15708448e-03 - 5.65231152e-06 * T + 1.31379280e-09 * T2 -
                  1.01089842e-13 * T3;
    // species 19: H2NO
    species[19] = +5.16219354e-03 - 3.52774774e-06 * T + 8.25158076e-10 * T2 -
                  6.42572572e-14 * T3;
    // species 20: HNOH
    species[20] = +4.88846374e-03 - 3.30173274e-06 * T + 7.66114338e-10 * T2 -
                  5.93234244e-14 * T3;
    // species 21: HNO
    species[21] = +2.72377193e-03 - 3.21266592e-07 * T - 2.93740495e-10 * T2 +
                  4.68415776e-14 * T3;
    // species 22: HON
    species[22] = +2.28738122e-03 - 1.42937072e-06 * T + 3.09997152e-10 * T2 -
                  2.28193640e-14 * T3;
    // species 23: NO2
    species[23] = +2.14474498e-03 - 1.62530812e-06 * T + 4.66535871e-10 * T2 -
                  4.16455852e-14 * T3;
    // species 24: HONO
    species[24] = +3.64630732e-03 - 2.58225530e-06 * T + 6.19494699e-10 * T2 -
                  4.88554716e-14 * T3;
    // species 25: HNO2
    species[25] = +4.89854351e-03 - 3.59388386e-06 * T + 8.83261083e-10 * T2 -
                  7.12942308e-14 * T3;
    // species 26: NO3
    species[26] = +2.21733003e-03 - 1.15139158e-06 * T + 2.00932627e-10 * T2 -
                  1.03573880e-14 * T3;
    // species 27: HONO2
    species[27] = +4.46368336e-03 - 3.44545558e-06 * T + 8.74834818e-10 * T2 -
                  7.21949448e-14 * T3;
    // species 28: N2O
    species[28] = +2.65307443e-03 - 1.94159479e-06 * T + 4.87770450e-10 * T2 -
                  3.98695262e-14 * T3;
    // species 29: N2
    species[29] = +1.41838030e-03 - 1.00656209e-06 * T + 2.42266639e-10 * T2 -
                  1.90425710e-14 * T3;
  }
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  amrex::Real result = 0;
  amrex::Real cpor[30]; //  temporary storage
  cp_R(cpor, T);

  // perform dot product
  for (int id = 0; id < 30; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0.0;

  // compute Cp/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    result += y[0] *
              (+2.37694204e+00 + 7.73916922e-03 * T - 1.88735073e-05 * T2 +
               1.95517114e-08 * T3 - 7.17095663e-12 * T4) *
              0.4960317460317460;
    // species 1: O2
    result += y[1] *
              (+3.78498258e+00 - 3.02002233e-03 * T + 9.92029171e-06 * T2 -
               9.77840434e-09 * T3 + 3.28877702e-12 * T4) *
              0.0312519532470779;
    // species 2: H
    result += y[2] *
              (+2.49975925e+00 + 6.73824499e-07 * T + 1.11807261e-09 * T2 -
               3.70192126e-12 * T3 + 2.14233822e-15 * T4) *
              0.9920634920634921;
    // species 3: O
    result += y[3] *
              (+3.15906526e+00 - 3.21509999e-03 * T + 6.49255543e-06 * T2 -
               5.98755115e-09 * T3 + 2.06876117e-12 * T4) *
              0.0625039064941559;
    // species 4: OH
    result += y[4] *
              (+3.97585165e+00 - 2.28555291e-03 * T + 4.33442882e-06 * T2 -
               3.59926640e-09 * T3 + 1.26706930e-12 * T4) *
              0.0587993179279120;
    // species 5: HO2
    result += y[5] *
              (+4.26251250e+00 - 4.45642032e-03 * T + 2.05164934e-05 * T2 -
               2.35794011e-08 * T3 + 9.05614257e-12 * T4) *
              0.0302975216627280;
    // species 6: H2O
    result += y[6] *
              (+4.20147551e+00 - 2.05583546e-03 * T + 6.56547207e-06 * T2 -
               5.52906960e-09 * T3 + 1.78282605e-12 * T4) *
              0.0555092978073827;
    // species 7: H2O2
    result += y[7] *
              (+4.23854160e+00 - 2.49610911e-04 * T + 1.59857901e-05 * T2 -
               2.06919945e-08 * T3 + 8.29766320e-12 * T4) *
              0.0293996589639560;
    // species 8: NO
    result += y[8] *
              (+4.08517990e+00 - 3.64693188e-03 * T + 8.49607612e-06 * T2 -
               6.62405734e-09 * T3 + 1.77647373e-12 * T4) *
              0.0333266679997334;
    // species 9: NH3
    result += y[9] *
              (+4.14027871e+00 - 3.58489142e-03 * T + 1.89475904e-05 * T2 -
               1.98833970e-08 * T3 + 7.15267961e-12 * T4) *
              0.0587164582232400;
    // species 10: NH2
    result += y[10] *
              (+4.06463329e+00 - 1.10021454e-03 * T + 4.25849068e-06 * T2 -
               2.68223583e-09 * T3 + 5.89267407e-13 * T4) *
              0.0624102852150034;
    // species 11: NH
    result += y[11] *
              (+3.45887003e+00 + 4.93904408e-04 * T - 1.87862560e-06 * T2 +
               2.85542239e-09 * T3 - 1.16864671e-12 * T4) *
              0.0666000666000666;
    // species 12: N
    result += y[12] *
              (+2.49976643e+00 + 5.02149594e-07 * T + 1.93091211e-09 * T2 -
               4.94632629e-12 * T3 + 2.74089506e-15 * T4) *
              0.0713928749910759;
    // species 13: NNH
    result += y[13] *
              (+4.25474632e+00 - 3.45098298e-03 * T + 1.37788699e-05 * T2 -
               1.33263744e-08 * T3 + 4.41023397e-12 * T4) *
              0.0344566191165323;
    // species 14: N2H4
    result += y[14] *
              (+3.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
               5.00709182e-08 * T3 + 2.03362064e-11 * T4) *
              0.0312051426075017;
    // species 15: N2H3
    result += y[15] *
              (+3.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
               2.99727732e-08 * T3 + 1.20978970e-11 * T4) *
              0.0322185707842000;
    // species 16: N2H2
    result += y[16] *
              (+4.91066031e+00 - 1.07791880e-02 * T + 3.86516489e-05 * T2 -
               3.86501698e-08 * T3 + 1.34852134e-11 * T4) *
              0.0333000333000333;
    // species 17: H2NN
    result += y[17] *
              (+4.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
               3.04000551e-08 * T3 + 1.04700639e-11 * T4) *
              0.0333000333000333;
    // species 18: NH2OH
    result += y[18] *
              (+3.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
               1.96668262e-08 * T3 + 8.82516590e-12 * T4) *
              0.0302755071147442;
    // species 19: H2NO
    result += y[19] *
              (+3.93201139e+00 - 1.64028165e-04 * T + 1.39161409e-05 * T2 -
               1.62747853e-08 * T3 + 6.00352834e-12 * T4) *
              0.0312285303853601;
    // species 20: HNOH
    result += y[20] *
              (+3.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
               3.15645120e-08 * T3 + 1.24084574e-11 * T4) *
              0.0312285303853601;
    // species 21: HNO
    result += y[21] *
              (+4.55326160e+00 - 5.84531688e-03 * T + 1.88853744e-05 * T2 -
               1.76039893e-08 * T3 + 5.72889621e-12 * T4) *
              0.0322435029341588;
    // species 22: HON
    result += y[22] *
              (+4.15272450e+00 - 3.87826402e-03 * T + 2.05476031e-05 * T2 -
               2.49049483e-08 * T3 + 9.87365462e-12 * T4) *
              0.0322435029341588;
    // species 23: NO2
    result += y[23] *
              (+3.78712696e+00 - 4.29576834e-04 * T + 1.37383818e-05 * T2 -
               1.74264140e-08 * T3 + 6.71249644e-12 * T4) *
              0.0217367677426367;
    // species 24: HONO
    result += y[24] *
              (+3.16416438e+00 + 8.50517773e-03 * T + 5.48561573e-07 * T2 -
               8.27656474e-09 * T3 + 4.39957151e-12 * T4) *
              0.0212707123561568;
    // species 25: HNO2
    result += y[25] *
              (+4.03779347e+00 - 4.46123109e-03 * T + 3.19440815e-05 * T2 -
               3.79359490e-08 * T3 + 1.44570885e-11 * T4) *
              0.0212707123561568;
    // species 26: NO3
    result += y[26] *
              (+3.35586850e+00 + 1.06545436e-02 * T - 2.86690494e-06 * T2 -
               5.14711611e-09 * T3 + 3.08532286e-12 * T4) *
              0.0161279917424682;
    // species 27: HONO2
    result += y[27] *
              (+1.55975056e+00 + 2.01502169e-02 * T - 1.15217296e-05 * T2 -
               2.31891230e-09 * T3 + 3.17580552e-12 * T4) *
              0.0158699930172031;
    // species 28: N2O
    result += y[28] *
              (+2.13942290e+00 + 1.21800874e-02 * T - 1.59189415e-05 * T2 +
               1.20920039e-08 * T3 - 3.85125915e-12 * T4) *
              0.0227205598345943;
    // species 29: N2
    result += y[29] *
              (+3.53603521e+00 - 1.58270944e-04 * T - 4.26984251e-07 * T2 +
               2.37542590e-09 * T3 - 1.39708206e-12 * T4) *
              0.0356964374955379;
  } else {
    // species 0: H2
    result += y[0] *
              (+2.90207649e+00 + 8.68992581e-04 * T - 1.65864430e-07 * T2 +
               1.90851899e-11 * T3 - 9.31121789e-16 * T4) *
              0.4960317460317460;
    // species 1: O2
    result += y[1] *
              (+3.65980488e+00 + 6.59877372e-04 * T - 1.44158172e-07 * T2 +
               2.14656037e-11 * T3 - 1.36503784e-15 * T4) *
              0.0312519532470779;
    // species 2: H
    result += y[2] *
              (+2.49985211e+00 + 2.34582548e-07 * T - 1.16171641e-10 * T2 +
               2.25708298e-14 * T3 - 1.52992005e-18 * T4) *
              0.9920634920634921;
    // species 3: O
    result += y[3] *
              (+2.55160087e+00 - 3.83085457e-05 * T + 8.43197478e-10 * T2 +
               4.01267136e-12 * T3 - 4.17476574e-16 * T4) *
              0.0625039064941559;
    // species 4: OH
    result += y[4] *
              (+2.84581721e+00 + 1.09723818e-03 * T - 2.89121101e-07 * T2 +
               4.09099910e-11 * T3 - 2.31382258e-15 * T4) *
              0.0587993179279120;
    // species 5: HO2
    result += y[5] *
              (+4.10564010e+00 + 2.04046836e-03 * T - 3.65877562e-07 * T2 +
               1.85973044e-11 * T3 + 4.98818315e-16 * T4) *
              0.0302975216627280;
    // species 6: H2O
    result += y[6] *
              (+2.73117512e+00 + 2.95136995e-03 * T - 8.35359785e-07 * T2 +
               1.26088593e-10 * T3 - 8.40531676e-15 * T4) *
              0.0555092978073827;
    // species 7: H2O2
    result += y[7] *
              (+4.54017480e+00 + 4.15970971e-03 * T - 1.30876777e-06 * T2 +
               2.00823615e-10 * T3 - 1.15509243e-14 * T4) *
              0.0293996589639560;
    // species 8: NO
    result += y[8] *
              (+3.25487317e+00 + 1.19869941e-03 * T - 4.33028500e-07 * T2 +
               7.02943336e-11 * T3 - 4.09788575e-15 * T4) *
              0.0333266679997334;
    // species 9: NH3
    result += y[9] *
              (+2.36074311e+00 + 6.31850146e-03 * T - 2.28966806e-06 * T2 +
               4.11767411e-10 * T3 - 2.90836787e-14 * T4) *
              0.0587164582232400;
    // species 10: NH2
    result += y[10] *
              (+2.62499312e+00 + 3.39841177e-03 * T - 1.01630968e-06 * T2 +
               1.25510796e-10 * T3 - 2.66500843e-15 * T4) *
              0.0624102852150034;
    // species 11: NH
    result += y[11] *
              (+2.79498941e+00 + 1.29259567e-03 * T - 3.85559094e-07 * T2 +
               6.26027608e-11 * T3 - 3.70421913e-15 * T4) *
              0.0666000666000666;
    // species 12: N
    result += y[12] *
              (+2.41604245e+00 + 1.74663766e-04 * T - 1.18864562e-07 * T2 +
               3.01850054e-11 * T3 - 2.03260159e-15 * T4) *
              0.0713928749910759;
    // species 13: NNH
    result += y[13] *
              (+3.42744423e+00 + 3.23295234e-03 * T - 1.17296299e-06 * T2 +
               1.90508356e-10 * T3 - 1.14491506e-14 * T4) *
              0.0344566191165323;
    // species 14: N2H4
    result += y[14] *
              (+4.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
               4.67278418e-10 * T3 - 2.73068599e-14 * T4) *
              0.0312051426075017;
    // species 15: N2H3
    result += y[15] *
              (+4.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
               3.83733021e-10 * T3 - 2.23107573e-14 * T4) *
              0.0322185707842000;
    // species 16: N2H2
    result += y[16] *
              (+1.31115117e+00 + 9.00187208e-03 * T - 3.14911824e-06 * T2 +
               4.81449581e-10 * T3 - 2.71897891e-14 * T4) *
              0.0333000333000333;
    // species 17: H2NN
    result += y[17] *
              (+3.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
               3.58539206e-10 * T3 - 2.14532905e-14 * T4) *
              0.0333000333000333;
    // species 18: NH2OH
    result += y[18] *
              (+3.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
               4.37930933e-10 * T3 - 2.52724604e-14 * T4) *
              0.0302755071147442;
    // species 19: H2NO
    result += y[19] *
              (+3.75555914e+00 + 5.16219354e-03 * T - 1.76387387e-06 * T2 +
               2.75052692e-10 * T3 - 1.60643143e-14 * T4) *
              0.0312285303853601;
    // species 20: HNOH
    result += y[20] *
              (+3.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
               2.55371446e-10 * T3 - 1.48308561e-14 * T4) *
              0.0312285303853601;
    // species 21: HNO
    result += y[21] *
              (+3.24129053e+00 + 2.72377193e-03 * T - 1.60633296e-07 * T2 -
               9.79134982e-11 * T3 + 1.17103944e-14 * T4) *
              0.0322435029341588;
    // species 22: HON
    result += y[22] *
              (+4.12044656e+00 + 2.28738122e-03 * T - 7.14685362e-07 * T2 +
               1.03332384e-10 * T3 - 5.70484100e-15 * T4) *
              0.0322435029341588;
    // species 23: NO2
    result += y[23] *
              (+4.90482285e+00 + 2.14474498e-03 * T - 8.12654059e-07 * T2 +
               1.55511957e-10 * T3 - 1.04113963e-14 * T4) *
              0.0217367677426367;
    // species 24: HONO
    result += y[24] *
              (+5.79144641e+00 + 3.64630732e-03 * T - 1.29112765e-06 * T2 +
               2.06498233e-10 * T3 - 1.22138679e-14 * T4) *
              0.0212707123561568;
    // species 25: HNO2
    result += y[25] *
              (+4.66358504e+00 + 4.89854351e-03 * T - 1.79694193e-06 * T2 +
               2.94420361e-10 * T3 - 1.78235577e-14 * T4) *
              0.0212707123561568;
    // species 26: NO3
    result += y[26] *
              (+7.37569146e+00 + 2.21733003e-03 * T - 5.75695789e-07 * T2 +
               6.69775424e-11 * T3 - 2.58934700e-15 * T4) *
              0.0161279917424682;
    // species 27: HONO2
    result += y[27] *
              (+8.03061257e+00 + 4.46368336e-03 * T - 1.72272779e-06 * T2 +
               2.91611606e-10 * T3 - 1.80487362e-14 * T4) *
              0.0158699930172031;
    // species 28: N2O
    result += y[28] *
              (+4.80641382e+00 + 2.65307443e-03 * T - 9.70797397e-07 * T2 +
               1.62590150e-10 * T3 - 9.96738154e-15 * T4) *
              0.0227205598345943;
    // species 29: N2
    result += y[29] *
              (+2.93802970e+00 + 1.41838030e-03 * T - 5.03281045e-07 * T2 +
               8.07555464e-11 * T3 - 4.76064275e-15 * T4) *
              0.0356964374955379;
  }

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  amrex::Real result = 0;
  amrex::Real cvor[30]; //  temporary storage
  cv_R(cvor, T);

  // perform dot product
  for (int id = 0; id < 30; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0.0;
  // compute Cv/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    result += y[0] *
              (+1.37694204e+00 + 7.73916922e-03 * T - 1.88735073e-05 * T2 +
               1.95517114e-08 * T3 - 7.17095663e-12 * T4) *
              0.4960317460317460;
    // species 1: O2
    result += y[1] *
              (+2.78498258e+00 - 3.02002233e-03 * T + 9.92029171e-06 * T2 -
               9.77840434e-09 * T3 + 3.28877702e-12 * T4) *
              0.0312519532470779;
    // species 2: H
    result += y[2] *
              (+1.49975925e+00 + 6.73824499e-07 * T + 1.11807261e-09 * T2 -
               3.70192126e-12 * T3 + 2.14233822e-15 * T4) *
              0.9920634920634921;
    // species 3: O
    result += y[3] *
              (+2.15906526e+00 - 3.21509999e-03 * T + 6.49255543e-06 * T2 -
               5.98755115e-09 * T3 + 2.06876117e-12 * T4) *
              0.0625039064941559;
    // species 4: OH
    result += y[4] *
              (+2.97585165e+00 - 2.28555291e-03 * T + 4.33442882e-06 * T2 -
               3.59926640e-09 * T3 + 1.26706930e-12 * T4) *
              0.0587993179279120;
    // species 5: HO2
    result += y[5] *
              (+3.26251250e+00 - 4.45642032e-03 * T + 2.05164934e-05 * T2 -
               2.35794011e-08 * T3 + 9.05614257e-12 * T4) *
              0.0302975216627280;
    // species 6: H2O
    result += y[6] *
              (+3.20147551e+00 - 2.05583546e-03 * T + 6.56547207e-06 * T2 -
               5.52906960e-09 * T3 + 1.78282605e-12 * T4) *
              0.0555092978073827;
    // species 7: H2O2
    result += y[7] *
              (+3.23854160e+00 - 2.49610911e-04 * T + 1.59857901e-05 * T2 -
               2.06919945e-08 * T3 + 8.29766320e-12 * T4) *
              0.0293996589639560;
    // species 8: NO
    result += y[8] *
              (+3.08517990e+00 - 3.64693188e-03 * T + 8.49607612e-06 * T2 -
               6.62405734e-09 * T3 + 1.77647373e-12 * T4) *
              0.0333266679997334;
    // species 9: NH3
    result += y[9] *
              (+3.14027871e+00 - 3.58489142e-03 * T + 1.89475904e-05 * T2 -
               1.98833970e-08 * T3 + 7.15267961e-12 * T4) *
              0.0587164582232400;
    // species 10: NH2
    result += y[10] *
              (+3.06463329e+00 - 1.10021454e-03 * T + 4.25849068e-06 * T2 -
               2.68223583e-09 * T3 + 5.89267407e-13 * T4) *
              0.0624102852150034;
    // species 11: NH
    result += y[11] *
              (+2.45887003e+00 + 4.93904408e-04 * T - 1.87862560e-06 * T2 +
               2.85542239e-09 * T3 - 1.16864671e-12 * T4) *
              0.0666000666000666;
    // species 12: N
    result += y[12] *
              (+1.49976643e+00 + 5.02149594e-07 * T + 1.93091211e-09 * T2 -
               4.94632629e-12 * T3 + 2.74089506e-15 * T4) *
              0.0713928749910759;
    // species 13: NNH
    result += y[13] *
              (+3.25474632e+00 - 3.45098298e-03 * T + 1.37788699e-05 * T2 -
               1.33263744e-08 * T3 + 4.41023397e-12 * T4) *
              0.0344566191165323;
    // species 14: N2H4
    result += y[14] *
              (+2.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
               5.00709182e-08 * T3 + 2.03362064e-11 * T4) *
              0.0312051426075017;
    // species 15: N2H3
    result += y[15] *
              (+2.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
               2.99727732e-08 * T3 + 1.20978970e-11 * T4) *
              0.0322185707842000;
    // species 16: N2H2
    result += y[16] *
              (+3.91066031e+00 - 1.07791880e-02 * T + 3.86516489e-05 * T2 -
               3.86501698e-08 * T3 + 1.34852134e-11 * T4) *
              0.0333000333000333;
    // species 17: H2NN
    result += y[17] *
              (+3.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
               3.04000551e-08 * T3 + 1.04700639e-11 * T4) *
              0.0333000333000333;
    // species 18: NH2OH
    result += y[18] *
              (+2.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
               1.96668262e-08 * T3 + 8.82516590e-12 * T4) *
              0.0302755071147442;
    // species 19: H2NO
    result += y[19] *
              (+2.93201139e+00 - 1.64028165e-04 * T + 1.39161409e-05 * T2 -
               1.62747853e-08 * T3 + 6.00352834e-12 * T4) *
              0.0312285303853601;
    // species 20: HNOH
    result += y[20] *
              (+2.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
               3.15645120e-08 * T3 + 1.24084574e-11 * T4) *
              0.0312285303853601;
    // species 21: HNO
    result += y[21] *
              (+3.55326160e+00 - 5.84531688e-03 * T + 1.88853744e-05 * T2 -
               1.76039893e-08 * T3 + 5.72889621e-12 * T4) *
              0.0322435029341588;
    // species 22: HON
    result += y[22] *
              (+3.15272450e+00 - 3.87826402e-03 * T + 2.05476031e-05 * T2 -
               2.49049483e-08 * T3 + 9.87365462e-12 * T4) *
              0.0322435029341588;
    // species 23: NO2
    result += y[23] *
              (+2.78712696e+00 - 4.29576834e-04 * T + 1.37383818e-05 * T2 -
               1.74264140e-08 * T3 + 6.71249644e-12 * T4) *
              0.0217367677426367;
    // species 24: HONO
    result += y[24] *
              (+2.16416438e+00 + 8.50517773e-03 * T + 5.48561573e-07 * T2 -
               8.27656474e-09 * T3 + 4.39957151e-12 * T4) *
              0.0212707123561568;
    // species 25: HNO2
    result += y[25] *
              (+3.03779347e+00 - 4.46123109e-03 * T + 3.19440815e-05 * T2 -
               3.79359490e-08 * T3 + 1.44570885e-11 * T4) *
              0.0212707123561568;
    // species 26: NO3
    result += y[26] *
              (+2.35586850e+00 + 1.06545436e-02 * T - 2.86690494e-06 * T2 -
               5.14711611e-09 * T3 + 3.08532286e-12 * T4) *
              0.0161279917424682;
    // species 27: HONO2
    result += y[27] *
              (+5.59750560e-01 + 2.01502169e-02 * T - 1.15217296e-05 * T2 -
               2.31891230e-09 * T3 + 3.17580552e-12 * T4) *
              0.0158699930172031;
    // species 28: N2O
    result += y[28] *
              (+1.13942290e+00 + 1.21800874e-02 * T - 1.59189415e-05 * T2 +
               1.20920039e-08 * T3 - 3.85125915e-12 * T4) *
              0.0227205598345943;
    // species 29: N2
    result += y[29] *
              (+2.53603521e+00 - 1.58270944e-04 * T - 4.26984251e-07 * T2 +
               2.37542590e-09 * T3 - 1.39708206e-12 * T4) *
              0.0356964374955379;
  } else {
    // species 0: H2
    result += y[0] *
              (+1.90207649e+00 + 8.68992581e-04 * T - 1.65864430e-07 * T2 +
               1.90851899e-11 * T3 - 9.31121789e-16 * T4) *
              0.4960317460317460;
    // species 1: O2
    result += y[1] *
              (+2.65980488e+00 + 6.59877372e-04 * T - 1.44158172e-07 * T2 +
               2.14656037e-11 * T3 - 1.36503784e-15 * T4) *
              0.0312519532470779;
    // species 2: H
    result += y[2] *
              (+1.49985211e+00 + 2.34582548e-07 * T - 1.16171641e-10 * T2 +
               2.25708298e-14 * T3 - 1.52992005e-18 * T4) *
              0.9920634920634921;
    // species 3: O
    result += y[3] *
              (+1.55160087e+00 - 3.83085457e-05 * T + 8.43197478e-10 * T2 +
               4.01267136e-12 * T3 - 4.17476574e-16 * T4) *
              0.0625039064941559;
    // species 4: OH
    result += y[4] *
              (+1.84581721e+00 + 1.09723818e-03 * T - 2.89121101e-07 * T2 +
               4.09099910e-11 * T3 - 2.31382258e-15 * T4) *
              0.0587993179279120;
    // species 5: HO2
    result += y[5] *
              (+3.10564010e+00 + 2.04046836e-03 * T - 3.65877562e-07 * T2 +
               1.85973044e-11 * T3 + 4.98818315e-16 * T4) *
              0.0302975216627280;
    // species 6: H2O
    result += y[6] *
              (+1.73117512e+00 + 2.95136995e-03 * T - 8.35359785e-07 * T2 +
               1.26088593e-10 * T3 - 8.40531676e-15 * T4) *
              0.0555092978073827;
    // species 7: H2O2
    result += y[7] *
              (+3.54017480e+00 + 4.15970971e-03 * T - 1.30876777e-06 * T2 +
               2.00823615e-10 * T3 - 1.15509243e-14 * T4) *
              0.0293996589639560;
    // species 8: NO
    result += y[8] *
              (+2.25487317e+00 + 1.19869941e-03 * T - 4.33028500e-07 * T2 +
               7.02943336e-11 * T3 - 4.09788575e-15 * T4) *
              0.0333266679997334;
    // species 9: NH3
    result += y[9] *
              (+1.36074311e+00 + 6.31850146e-03 * T - 2.28966806e-06 * T2 +
               4.11767411e-10 * T3 - 2.90836787e-14 * T4) *
              0.0587164582232400;
    // species 10: NH2
    result += y[10] *
              (+1.62499312e+00 + 3.39841177e-03 * T - 1.01630968e-06 * T2 +
               1.25510796e-10 * T3 - 2.66500843e-15 * T4) *
              0.0624102852150034;
    // species 11: NH
    result += y[11] *
              (+1.79498941e+00 + 1.29259567e-03 * T - 3.85559094e-07 * T2 +
               6.26027608e-11 * T3 - 3.70421913e-15 * T4) *
              0.0666000666000666;
    // species 12: N
    result += y[12] *
              (+1.41604245e+00 + 1.74663766e-04 * T - 1.18864562e-07 * T2 +
               3.01850054e-11 * T3 - 2.03260159e-15 * T4) *
              0.0713928749910759;
    // species 13: NNH
    result += y[13] *
              (+2.42744423e+00 + 3.23295234e-03 * T - 1.17296299e-06 * T2 +
               1.90508356e-10 * T3 - 1.14491506e-14 * T4) *
              0.0344566191165323;
    // species 14: N2H4
    result += y[14] *
              (+3.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
               4.67278418e-10 * T3 - 2.73068599e-14 * T4) *
              0.0312051426075017;
    // species 15: N2H3
    result += y[15] *
              (+3.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
               3.83733021e-10 * T3 - 2.23107573e-14 * T4) *
              0.0322185707842000;
    // species 16: N2H2
    result += y[16] *
              (+3.11151170e-01 + 9.00187208e-03 * T - 3.14911824e-06 * T2 +
               4.81449581e-10 * T3 - 2.71897891e-14 * T4) *
              0.0333000333000333;
    // species 17: H2NN
    result += y[17] *
              (+2.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
               3.58539206e-10 * T3 - 2.14532905e-14 * T4) *
              0.0333000333000333;
    // species 18: NH2OH
    result += y[18] *
              (+2.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
               4.37930933e-10 * T3 - 2.52724604e-14 * T4) *
              0.0302755071147442;
    // species 19: H2NO
    result += y[19] *
              (+2.75555914e+00 + 5.16219354e-03 * T - 1.76387387e-06 * T2 +
               2.75052692e-10 * T3 - 1.60643143e-14 * T4) *
              0.0312285303853601;
    // species 20: HNOH
    result += y[20] *
              (+2.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
               2.55371446e-10 * T3 - 1.48308561e-14 * T4) *
              0.0312285303853601;
    // species 21: HNO
    result += y[21] *
              (+2.24129053e+00 + 2.72377193e-03 * T - 1.60633296e-07 * T2 -
               9.79134982e-11 * T3 + 1.17103944e-14 * T4) *
              0.0322435029341588;
    // species 22: HON
    result += y[22] *
              (+3.12044656e+00 + 2.28738122e-03 * T - 7.14685362e-07 * T2 +
               1.03332384e-10 * T3 - 5.70484100e-15 * T4) *
              0.0322435029341588;
    // species 23: NO2
    result += y[23] *
              (+3.90482285e+00 + 2.14474498e-03 * T - 8.12654059e-07 * T2 +
               1.55511957e-10 * T3 - 1.04113963e-14 * T4) *
              0.0217367677426367;
    // species 24: HONO
    result += y[24] *
              (+4.79144641e+00 + 3.64630732e-03 * T - 1.29112765e-06 * T2 +
               2.06498233e-10 * T3 - 1.22138679e-14 * T4) *
              0.0212707123561568;
    // species 25: HNO2
    result += y[25] *
              (+3.66358504e+00 + 4.89854351e-03 * T - 1.79694193e-06 * T2 +
               2.94420361e-10 * T3 - 1.78235577e-14 * T4) *
              0.0212707123561568;
    // species 26: NO3
    result += y[26] *
              (+6.37569146e+00 + 2.21733003e-03 * T - 5.75695789e-07 * T2 +
               6.69775424e-11 * T3 - 2.58934700e-15 * T4) *
              0.0161279917424682;
    // species 27: HONO2
    result += y[27] *
              (+7.03061257e+00 + 4.46368336e-03 * T - 1.72272779e-06 * T2 +
               2.91611606e-10 * T3 - 1.80487362e-14 * T4) *
              0.0158699930172031;
    // species 28: N2O
    result += y[28] *
              (+3.80641382e+00 + 2.65307443e-03 * T - 9.70797397e-07 * T2 +
               1.62590150e-10 * T3 - 9.96738154e-15 * T4) *
              0.0227205598345943;
    // species 29: N2
    result += y[29] *
              (+1.93802970e+00 + 1.41838030e-03 * T - 5.03281045e-07 * T2 +
               8.07555464e-11 * T3 - 4.76064275e-15 * T4) *
              0.0356964374955379;
  }

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  amrex::Real result = 0;
  amrex::Real hml[30];                       //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // perform dot product
  for (int id = 0; id < 30; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    result +=
      y[0] *
      (+2.37694204e+00 + 3.86958461e-03 * T - 6.29116910e-06 * T2 +
       4.88792785e-09 * T3 - 1.43419133e-12 * T4 - 9.21173081e+02 * invT) *
      0.4960317460317460;
    // species 1: O2
    result +=
      y[1] *
      (+3.78498258e+00 - 1.51001116e-03 * T + 3.30676390e-06 * T2 -
       2.44460109e-09 * T3 + 6.57755404e-13 * T4 - 1.06413589e+03 * invT) *
      0.0312519532470779;
    // species 2: H
    result +=
      y[2] *
      (+2.49975925e+00 + 3.36912250e-07 * T + 3.72690870e-10 * T2 -
       9.25480315e-13 * T3 + 4.28467644e-16 * T4 + 2.54737665e+04 * invT) *
      0.9920634920634921;
    // species 3: O
    result +=
      y[3] *
      (+3.15906526e+00 - 1.60754999e-03 * T + 2.16418514e-06 * T2 -
       1.49688779e-09 * T3 + 4.13752234e-13 * T4 + 2.91298453e+04 * invT) *
      0.0625039064941559;
    // species 4: OH
    result +=
      y[4] *
      (+3.97585165e+00 - 1.14277645e-03 * T + 1.44480961e-06 * T2 -
       8.99816600e-10 * T3 + 2.53413860e-13 * T4 + 3.39341137e+03 * invT) *
      0.0587993179279120;
    // species 5: HO2
    result +=
      y[5] *
      (+4.26251250e+00 - 2.22821016e-03 * T + 6.83883113e-06 * T2 -
       5.89485027e-09 * T3 + 1.81122851e-12 * T4 + 2.62442356e+02 * invT) *
      0.0302975216627280;
    // species 6: H2O
    result +=
      y[6] *
      (+4.20147551e+00 - 1.02791773e-03 * T + 2.18849069e-06 * T2 -
       1.38226740e-09 * T3 + 3.56565210e-13 * T4 - 3.02950066e+04 * invT) *
      0.0555092978073827;
    // species 7: H2O2
    result +=
      y[7] *
      (+4.23854160e+00 - 1.24805455e-04 * T + 5.32859670e-06 * T2 -
       5.17299863e-09 * T3 + 1.65953264e-12 * T4 - 1.76486003e+04 * invT) *
      0.0293996589639560;
    // species 8: NO
    result +=
      y[8] *
      (+4.08517990e+00 - 1.82346594e-03 * T + 2.83202537e-06 * T2 -
       1.65601433e-09 * T3 + 3.55294746e-13 * T4 + 9.84061267e+03 * invT) *
      0.0333266679997334;
    // species 9: NH3
    result +=
      y[9] *
      (+4.14027871e+00 - 1.79244571e-03 * T + 6.31586347e-06 * T2 -
       4.97084925e-09 * T3 + 1.43053592e-12 * T4 - 6.68545158e+03 * invT) *
      0.0587164582232400;
    // species 10: NH2
    result +=
      y[10] *
      (+4.06463329e+00 - 5.50107270e-04 * T + 1.41949689e-06 * T2 -
       6.70558957e-10 * T3 + 1.17853481e-13 * T4 + 2.11768668e+04 * invT) *
      0.0624102852150034;
    // species 11: NH
    result +=
      y[11] *
      (+3.45887003e+00 + 2.46952204e-04 * T - 6.26208533e-07 * T2 +
       7.13855598e-10 * T3 - 2.33729342e-13 * T4 + 4.21088372e+04 * invT) *
      0.0666000666000666;
    // species 12: N
    result +=
      y[12] *
      (+2.49976643e+00 + 2.51074797e-07 * T + 6.43637370e-10 * T2 -
       1.23658157e-12 * T3 + 5.48179012e-16 * T4 + 5.60760710e+04 * invT) *
      0.0713928749910759;
    // species 13: NNH
    result +=
      y[13] *
      (+4.25474632e+00 - 1.72549149e-03 * T + 4.59295663e-06 * T2 -
       3.33159360e-09 * T3 + 8.82046794e-13 * T4 + 2.88323793e+04 * invT) *
      0.0344566191165323;
    // species 14: N2H4
    result +=
      y[14] *
      (+3.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
       1.25177296e-08 * T3 + 4.06724128e-12 * T4 + 1.00893925e+04 * invT) *
      0.0312051426075017;
    // species 15: N2H3
    result +=
      y[15] *
      (+3.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
       7.49319330e-09 * T3 + 2.41957940e-12 * T4 + 2.58198956e+04 * invT) *
      0.0322185707842000;
    // species 16: N2H2
    result +=
      y[16] *
      (+4.91066031e+00 - 5.38959400e-03 * T + 1.28838830e-05 * T2 -
       9.66254245e-09 * T3 + 2.69704268e-12 * T4 + 2.28241901e+04 * invT) *
      0.0333000333000333;
    // species 17: H2NN
    result +=
      y[17] *
      (+4.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
       7.60001377e-09 * T3 + 2.09401278e-12 * T4 + 3.49580003e+04 * invT) *
      0.0333000333000333;
    // species 18: NH2OH
    result +=
      y[18] *
      (+3.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
       4.91670655e-09 * T3 + 1.76503318e-12 * T4 - 6.58148481e+03 * invT) *
      0.0302755071147442;
    // species 19: H2NO
    result +=
      y[19] *
      (+3.93201139e+00 - 8.20140825e-05 * T + 4.63871363e-06 * T2 -
       4.06869633e-09 * T3 + 1.20070567e-12 * T4 + 6.71178975e+03 * invT) *
      0.0312285303853601;
    // species 20: HNOH
    result +=
      y[20] *
      (+3.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
       7.89112800e-09 * T3 + 2.48169148e-12 * T4 + 1.09199790e+04 * invT) *
      0.0312285303853601;
    // species 21: HNO
    result +=
      y[21] *
      (+4.55326160e+00 - 2.92265844e-03 * T + 6.29512480e-06 * T2 -
       4.40099733e-09 * T3 + 1.14577924e-12 * T4 + 1.16315603e+04 * invT) *
      0.0322435029341588;
    // species 22: HON
    result +=
      y[22] *
      (+4.15272450e+00 - 1.93913201e-03 * T + 6.84920103e-06 * T2 -
       6.22623707e-09 * T3 + 1.97473092e-12 * T4 + 2.46037098e+04 * invT) *
      0.0322435029341588;
    // species 23: NO2
    result +=
      y[23] *
      (+3.78712696e+00 - 2.14788417e-04 * T + 4.57946060e-06 * T2 -
       4.35660350e-09 * T3 + 1.34249929e-12 * T4 + 2.89500124e+03 * invT) *
      0.0217367677426367;
    // species 24: HONO
    result +=
      y[24] *
      (+3.16416438e+00 + 4.25258887e-03 * T + 1.82853858e-07 * T2 -
       2.06914118e-09 * T3 + 8.79914302e-13 * T4 - 1.07744086e+04 * invT) *
      0.0212707123561568;
    // species 25: HNO2
    result +=
      y[25] *
      (+4.03779347e+00 - 2.23061555e-03 * T + 1.06480272e-05 * T2 -
       9.48398725e-09 * T3 + 2.89141770e-12 * T4 - 6.53088236e+03 * invT) *
      0.0212707123561568;
    // species 26: NO3
    result +=
      y[26] *
      (+3.35586850e+00 + 5.32727180e-03 * T - 9.55634980e-07 * T2 -
       1.28677903e-09 * T3 + 6.17064572e-13 * T4 + 7.47534931e+03 * invT) *
      0.0161279917424682;
    // species 27: HONO2
    result +=
      y[27] *
      (+1.55975056e+00 + 1.00751085e-02 * T - 3.84057653e-06 * T2 -
       5.79728075e-10 * T3 + 6.35161104e-13 * T4 - 1.73955871e+04 * invT) *
      0.0158699930172031;
    // species 28: N2O
    result +=
      y[28] *
      (+2.13942290e+00 + 6.09004370e-03 * T - 5.30631383e-06 * T2 +
       3.02300097e-09 * T3 - 7.70251830e-13 * T4 + 8.87008622e+03 * invT) *
      0.0227205598345943;
    // species 29: N2
    result +=
      y[29] *
      (+3.53603521e+00 - 7.91354720e-05 * T - 1.42328084e-07 * T2 +
       5.93856475e-10 * T3 - 2.79416412e-13 * T4 - 1.04749645e+03 * invT) *
      0.0356964374955379;
  } else {
    // species 0: H2
    result +=
      y[0] *
      (+2.90207649e+00 + 4.34496291e-04 * T - 5.52881433e-08 * T2 +
       4.77129748e-12 * T3 - 1.86224358e-16 * T4 - 7.97948726e+02 * invT) *
      0.4960317460317460;
    // species 1: O2
    result +=
      y[1] *
      (+3.65980488e+00 + 3.29938686e-04 * T - 4.80527240e-08 * T2 +
       5.36640092e-12 * T3 - 2.73007568e-16 * T4 - 1.21603048e+03 * invT) *
      0.0312519532470779;
    // species 2: H
    result +=
      y[2] *
      (+2.49985211e+00 + 1.17291274e-07 * T - 3.87238803e-11 * T2 +
       5.64270745e-15 * T3 - 3.05984010e-19 * T4 + 2.54738024e+04 * invT) *
      0.9920634920634921;
    // species 3: O
    result +=
      y[3] *
      (+2.55160087e+00 - 1.91542728e-05 * T + 2.81065826e-10 * T2 +
       1.00316784e-12 * T3 - 8.34953148e-17 * T4 + 2.92287628e+04 * invT) *
      0.0625039064941559;
    // species 4: OH
    result +=
      y[4] *
      (+2.84581721e+00 + 5.48619090e-04 * T - 9.63737003e-08 * T2 +
       1.02274977e-11 * T3 - 4.62764516e-16 * T4 + 3.71706610e+03 * invT) *
      0.0587993179279120;
    // species 5: HO2
    result +=
      y[5] *
      (+4.10564010e+00 + 1.02023418e-03 * T - 1.21959187e-07 * T2 +
       4.64932610e-12 * T3 + 9.97636630e-17 * T4 + 4.32898769e+01 * invT) *
      0.0302975216627280;
    // species 6: H2O
    result +=
      y[6] *
      (+2.73117512e+00 + 1.47568497e-03 * T - 2.78453262e-07 * T2 +
       3.15221483e-11 * T3 - 1.68106335e-15 * T4 - 2.99169082e+04 * invT) *
      0.0555092978073827;
    // species 7: H2O2
    result +=
      y[7] *
      (+4.54017480e+00 + 2.07985485e-03 * T - 4.36255923e-07 * T2 +
       5.02059038e-11 * T3 - 2.31018486e-15 * T4 - 1.79514029e+04 * invT) *
      0.0293996589639560;
    // species 8: NO
    result +=
      y[8] *
      (+3.25487317e+00 + 5.99349705e-04 * T - 1.44342833e-07 * T2 +
       1.75735834e-11 * T3 - 8.19577150e-16 * T4 + 9.90699836e+03 * invT) *
      0.0333266679997334;
    // species 9: NH3
    result +=
      y[9] *
      (+2.36074311e+00 + 3.15925073e-03 * T - 7.63222687e-07 * T2 +
       1.02941853e-10 * T3 - 5.81673574e-15 * T4 - 6.41596473e+03 * invT) *
      0.0587164582232400;
    // species 10: NH2
    result +=
      y[10] *
      (+2.62499312e+00 + 1.69920589e-03 * T - 3.38769893e-07 * T2 +
       3.13776990e-11 * T3 - 5.33001686e-16 * T4 + 2.15419104e+04 * invT) *
      0.0624102852150034;
    // species 11: NH
    result +=
      y[11] *
      (+2.79498941e+00 + 6.46297835e-04 * T - 1.28519698e-07 * T2 +
       1.56506902e-11 * T3 - 7.40843826e-16 * T4 + 4.23408998e+04 * invT) *
      0.0666000666000666;
    // species 12: N
    result +=
      y[12] *
      (+2.41604245e+00 + 8.73318830e-05 * T - 3.96215207e-08 * T2 +
       7.54625135e-12 * T3 - 4.06520318e-16 * T4 + 5.61051512e+04 * invT) *
      0.0713928749910759;
    // species 13: NNH
    result +=
      y[13] *
      (+3.42744423e+00 + 1.61647617e-03 * T - 3.90987663e-07 * T2 +
       4.76270890e-11 * T3 - 2.28983012e-15 * T4 + 2.88067740e+04 * invT) *
      0.0344566191165323;
    // species 14: N2H4
    result +=
      y[14] *
      (+4.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
       1.16819604e-10 * T3 - 5.46137198e-15 * T4 + 9.28265548e+03 * invT) *
      0.0312051426075017;
    // species 15: N2H3
    result +=
      y[15] *
      (+4.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
       9.59332552e-11 * T3 - 4.46215146e-15 * T4 + 2.53241420e+04 * invT) *
      0.0322185707842000;
    // species 16: N2H2
    result +=
      y[16] *
      (+1.31115117e+00 + 4.50093604e-03 * T - 1.04970608e-06 * T2 +
       1.20362395e-10 * T3 - 5.43795782e-15 * T4 + 2.33863341e+04 * invT) *
      0.0333000333000333;
    // species 17: H2NN
    result +=
      y[17] *
      (+3.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
       8.96348015e-11 * T3 - 4.29065810e-15 * T4 + 3.48530149e+04 * invT) *
      0.0333000333000333;
    // species 18: NH2OH
    result +=
      y[18] *
      (+3.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
       1.09482733e-10 * T3 - 5.05449208e-15 * T4 - 6.86018419e+03 * invT) *
      0.0302755071147442;
    // species 19: H2NO
    result +=
      y[19] *
      (+3.75555914e+00 + 2.58109677e-03 * T - 5.87957957e-07 * T2 +
       6.87631730e-11 * T3 - 3.21286286e-15 * T4 + 6.51826177e+03 * invT) *
      0.0312285303853601;
    // species 20: HNOH
    result +=
      y[20] *
      (+3.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
       6.38428615e-11 * T3 - 2.96617122e-15 * T4 + 1.05780106e+04 * invT) *
      0.0312285303853601;
    // species 21: HNO
    result +=
      y[21] *
      (+3.24129053e+00 + 1.36188597e-03 * T - 5.35444320e-08 * T2 -
       2.44783745e-11 * T3 + 2.34207888e-15 * T4 + 1.17745744e+04 * invT) *
      0.0322435029341588;
    // species 22: HON
    result +=
      y[22] *
      (+4.12044656e+00 + 1.14369061e-03 * T - 2.38228454e-07 * T2 +
       2.58330960e-11 * T3 - 1.14096820e-15 * T4 + 2.43643963e+04 * invT) *
      0.0322435029341588;
    // species 23: NO2
    result +=
      y[23] *
      (+4.90482285e+00 + 1.07237249e-03 * T - 2.70884686e-07 * T2 +
       3.88779892e-11 * T3 - 2.08227926e-15 * T4 + 2.28958979e+03 * invT) *
      0.0217367677426367;
    // species 24: HONO
    result +=
      y[24] *
      (+5.79144641e+00 + 1.82315366e-03 * T - 4.30375883e-07 * T2 +
       5.16245582e-11 * T3 - 2.44277358e-15 * T4 - 1.15974343e+04 * invT) *
      0.0212707123561568;
    // species 25: HNO2
    result +=
      y[25] *
      (+4.66358504e+00 + 2.44927175e-03 * T - 5.98980643e-07 * T2 +
       7.36050902e-11 * T3 - 3.56471154e-15 * T4 - 7.25216334e+03 * invT) *
      0.0212707123561568;
    // species 26: NO3
    result +=
      y[26] *
      (+7.37569146e+00 + 1.10866501e-03 * T - 1.91898596e-07 * T2 +
       1.67443856e-11 * T3 - 5.17869400e-16 * T4 + 6.22445577e+03 * invT) *
      0.0161279917424682;
    // species 27: HONO2
    result +=
      y[27] *
      (+8.03061257e+00 + 2.23184168e-03 * T - 5.74242597e-07 * T2 +
       7.29029015e-11 * T3 - 3.60974724e-15 * T4 - 1.93033764e+04 * invT) *
      0.0158699930172031;
    // species 28: N2O
    result +=
      y[28] *
      (+4.80641382e+00 + 1.32653722e-03 * T - 3.23599132e-07 * T2 +
       4.06475375e-11 * T3 - 1.99347631e-15 * T4 + 8.19798219e+03 * invT) *
      0.0227205598345943;
    // species 29: N2
    result +=
      y[29] *
      (+2.93802970e+00 + 7.09190150e-04 * T - 1.67760348e-07 * T2 +
       2.01888866e-11 * T3 - 9.52128550e-16 * T4 - 9.17180990e+02 * invT) *
      0.0356964374955379;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  amrex::Real result = 0;
  amrex::Real uml[30];                       //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // perform dot product
  for (int id = 0; id < 30; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    result +=
      y[0] *
      (+1.37694204e+00 + 3.86958461e-03 * T - 6.29116910e-06 * T2 +
       4.88792785e-09 * T3 - 1.43419133e-12 * T4 - 9.21173081e+02 * invT) *
      0.4960317460317460;
    // species 1: O2
    result +=
      y[1] *
      (+2.78498258e+00 - 1.51001116e-03 * T + 3.30676390e-06 * T2 -
       2.44460109e-09 * T3 + 6.57755404e-13 * T4 - 1.06413589e+03 * invT) *
      0.0312519532470779;
    // species 2: H
    result +=
      y[2] *
      (+1.49975925e+00 + 3.36912250e-07 * T + 3.72690870e-10 * T2 -
       9.25480315e-13 * T3 + 4.28467644e-16 * T4 + 2.54737665e+04 * invT) *
      0.9920634920634921;
    // species 3: O
    result +=
      y[3] *
      (+2.15906526e+00 - 1.60754999e-03 * T + 2.16418514e-06 * T2 -
       1.49688779e-09 * T3 + 4.13752234e-13 * T4 + 2.91298453e+04 * invT) *
      0.0625039064941559;
    // species 4: OH
    result +=
      y[4] *
      (+2.97585165e+00 - 1.14277645e-03 * T + 1.44480961e-06 * T2 -
       8.99816600e-10 * T3 + 2.53413860e-13 * T4 + 3.39341137e+03 * invT) *
      0.0587993179279120;
    // species 5: HO2
    result +=
      y[5] *
      (+3.26251250e+00 - 2.22821016e-03 * T + 6.83883113e-06 * T2 -
       5.89485027e-09 * T3 + 1.81122851e-12 * T4 + 2.62442356e+02 * invT) *
      0.0302975216627280;
    // species 6: H2O
    result +=
      y[6] *
      (+3.20147551e+00 - 1.02791773e-03 * T + 2.18849069e-06 * T2 -
       1.38226740e-09 * T3 + 3.56565210e-13 * T4 - 3.02950066e+04 * invT) *
      0.0555092978073827;
    // species 7: H2O2
    result +=
      y[7] *
      (+3.23854160e+00 - 1.24805455e-04 * T + 5.32859670e-06 * T2 -
       5.17299863e-09 * T3 + 1.65953264e-12 * T4 - 1.76486003e+04 * invT) *
      0.0293996589639560;
    // species 8: NO
    result +=
      y[8] *
      (+3.08517990e+00 - 1.82346594e-03 * T + 2.83202537e-06 * T2 -
       1.65601433e-09 * T3 + 3.55294746e-13 * T4 + 9.84061267e+03 * invT) *
      0.0333266679997334;
    // species 9: NH3
    result +=
      y[9] *
      (+3.14027871e+00 - 1.79244571e-03 * T + 6.31586347e-06 * T2 -
       4.97084925e-09 * T3 + 1.43053592e-12 * T4 - 6.68545158e+03 * invT) *
      0.0587164582232400;
    // species 10: NH2
    result +=
      y[10] *
      (+3.06463329e+00 - 5.50107270e-04 * T + 1.41949689e-06 * T2 -
       6.70558957e-10 * T3 + 1.17853481e-13 * T4 + 2.11768668e+04 * invT) *
      0.0624102852150034;
    // species 11: NH
    result +=
      y[11] *
      (+2.45887003e+00 + 2.46952204e-04 * T - 6.26208533e-07 * T2 +
       7.13855598e-10 * T3 - 2.33729342e-13 * T4 + 4.21088372e+04 * invT) *
      0.0666000666000666;
    // species 12: N
    result +=
      y[12] *
      (+1.49976643e+00 + 2.51074797e-07 * T + 6.43637370e-10 * T2 -
       1.23658157e-12 * T3 + 5.48179012e-16 * T4 + 5.60760710e+04 * invT) *
      0.0713928749910759;
    // species 13: NNH
    result +=
      y[13] *
      (+3.25474632e+00 - 1.72549149e-03 * T + 4.59295663e-06 * T2 -
       3.33159360e-09 * T3 + 8.82046794e-13 * T4 + 2.88323793e+04 * invT) *
      0.0344566191165323;
    // species 14: N2H4
    result +=
      y[14] *
      (+2.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
       1.25177296e-08 * T3 + 4.06724128e-12 * T4 + 1.00893925e+04 * invT) *
      0.0312051426075017;
    // species 15: N2H3
    result +=
      y[15] *
      (+2.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
       7.49319330e-09 * T3 + 2.41957940e-12 * T4 + 2.58198956e+04 * invT) *
      0.0322185707842000;
    // species 16: N2H2
    result +=
      y[16] *
      (+3.91066031e+00 - 5.38959400e-03 * T + 1.28838830e-05 * T2 -
       9.66254245e-09 * T3 + 2.69704268e-12 * T4 + 2.28241901e+04 * invT) *
      0.0333000333000333;
    // species 17: H2NN
    result +=
      y[17] *
      (+3.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
       7.60001377e-09 * T3 + 2.09401278e-12 * T4 + 3.49580003e+04 * invT) *
      0.0333000333000333;
    // species 18: NH2OH
    result +=
      y[18] *
      (+2.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
       4.91670655e-09 * T3 + 1.76503318e-12 * T4 - 6.58148481e+03 * invT) *
      0.0302755071147442;
    // species 19: H2NO
    result +=
      y[19] *
      (+2.93201139e+00 - 8.20140825e-05 * T + 4.63871363e-06 * T2 -
       4.06869633e-09 * T3 + 1.20070567e-12 * T4 + 6.71178975e+03 * invT) *
      0.0312285303853601;
    // species 20: HNOH
    result +=
      y[20] *
      (+2.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
       7.89112800e-09 * T3 + 2.48169148e-12 * T4 + 1.09199790e+04 * invT) *
      0.0312285303853601;
    // species 21: HNO
    result +=
      y[21] *
      (+3.55326160e+00 - 2.92265844e-03 * T + 6.29512480e-06 * T2 -
       4.40099733e-09 * T3 + 1.14577924e-12 * T4 + 1.16315603e+04 * invT) *
      0.0322435029341588;
    // species 22: HON
    result +=
      y[22] *
      (+3.15272450e+00 - 1.93913201e-03 * T + 6.84920103e-06 * T2 -
       6.22623707e-09 * T3 + 1.97473092e-12 * T4 + 2.46037098e+04 * invT) *
      0.0322435029341588;
    // species 23: NO2
    result +=
      y[23] *
      (+2.78712696e+00 - 2.14788417e-04 * T + 4.57946060e-06 * T2 -
       4.35660350e-09 * T3 + 1.34249929e-12 * T4 + 2.89500124e+03 * invT) *
      0.0217367677426367;
    // species 24: HONO
    result +=
      y[24] *
      (+2.16416438e+00 + 4.25258887e-03 * T + 1.82853858e-07 * T2 -
       2.06914118e-09 * T3 + 8.79914302e-13 * T4 - 1.07744086e+04 * invT) *
      0.0212707123561568;
    // species 25: HNO2
    result +=
      y[25] *
      (+3.03779347e+00 - 2.23061555e-03 * T + 1.06480272e-05 * T2 -
       9.48398725e-09 * T3 + 2.89141770e-12 * T4 - 6.53088236e+03 * invT) *
      0.0212707123561568;
    // species 26: NO3
    result +=
      y[26] *
      (+2.35586850e+00 + 5.32727180e-03 * T - 9.55634980e-07 * T2 -
       1.28677903e-09 * T3 + 6.17064572e-13 * T4 + 7.47534931e+03 * invT) *
      0.0161279917424682;
    // species 27: HONO2
    result +=
      y[27] *
      (+5.59750560e-01 + 1.00751085e-02 * T - 3.84057653e-06 * T2 -
       5.79728075e-10 * T3 + 6.35161104e-13 * T4 - 1.73955871e+04 * invT) *
      0.0158699930172031;
    // species 28: N2O
    result +=
      y[28] *
      (+1.13942290e+00 + 6.09004370e-03 * T - 5.30631383e-06 * T2 +
       3.02300097e-09 * T3 - 7.70251830e-13 * T4 + 8.87008622e+03 * invT) *
      0.0227205598345943;
    // species 29: N2
    result +=
      y[29] *
      (+2.53603521e+00 - 7.91354720e-05 * T - 1.42328084e-07 * T2 +
       5.93856475e-10 * T3 - 2.79416412e-13 * T4 - 1.04749645e+03 * invT) *
      0.0356964374955379;
  } else {
    // species 0: H2
    result +=
      y[0] *
      (+1.90207649e+00 + 4.34496291e-04 * T - 5.52881433e-08 * T2 +
       4.77129748e-12 * T3 - 1.86224358e-16 * T4 - 7.97948726e+02 * invT) *
      0.4960317460317460;
    // species 1: O2
    result +=
      y[1] *
      (+2.65980488e+00 + 3.29938686e-04 * T - 4.80527240e-08 * T2 +
       5.36640092e-12 * T3 - 2.73007568e-16 * T4 - 1.21603048e+03 * invT) *
      0.0312519532470779;
    // species 2: H
    result +=
      y[2] *
      (+1.49985211e+00 + 1.17291274e-07 * T - 3.87238803e-11 * T2 +
       5.64270745e-15 * T3 - 3.05984010e-19 * T4 + 2.54738024e+04 * invT) *
      0.9920634920634921;
    // species 3: O
    result +=
      y[3] *
      (+1.55160087e+00 - 1.91542728e-05 * T + 2.81065826e-10 * T2 +
       1.00316784e-12 * T3 - 8.34953148e-17 * T4 + 2.92287628e+04 * invT) *
      0.0625039064941559;
    // species 4: OH
    result +=
      y[4] *
      (+1.84581721e+00 + 5.48619090e-04 * T - 9.63737003e-08 * T2 +
       1.02274977e-11 * T3 - 4.62764516e-16 * T4 + 3.71706610e+03 * invT) *
      0.0587993179279120;
    // species 5: HO2
    result +=
      y[5] *
      (+3.10564010e+00 + 1.02023418e-03 * T - 1.21959187e-07 * T2 +
       4.64932610e-12 * T3 + 9.97636630e-17 * T4 + 4.32898769e+01 * invT) *
      0.0302975216627280;
    // species 6: H2O
    result +=
      y[6] *
      (+1.73117512e+00 + 1.47568497e-03 * T - 2.78453262e-07 * T2 +
       3.15221483e-11 * T3 - 1.68106335e-15 * T4 - 2.99169082e+04 * invT) *
      0.0555092978073827;
    // species 7: H2O2
    result +=
      y[7] *
      (+3.54017480e+00 + 2.07985485e-03 * T - 4.36255923e-07 * T2 +
       5.02059038e-11 * T3 - 2.31018486e-15 * T4 - 1.79514029e+04 * invT) *
      0.0293996589639560;
    // species 8: NO
    result +=
      y[8] *
      (+2.25487317e+00 + 5.99349705e-04 * T - 1.44342833e-07 * T2 +
       1.75735834e-11 * T3 - 8.19577150e-16 * T4 + 9.90699836e+03 * invT) *
      0.0333266679997334;
    // species 9: NH3
    result +=
      y[9] *
      (+1.36074311e+00 + 3.15925073e-03 * T - 7.63222687e-07 * T2 +
       1.02941853e-10 * T3 - 5.81673574e-15 * T4 - 6.41596473e+03 * invT) *
      0.0587164582232400;
    // species 10: NH2
    result +=
      y[10] *
      (+1.62499312e+00 + 1.69920589e-03 * T - 3.38769893e-07 * T2 +
       3.13776990e-11 * T3 - 5.33001686e-16 * T4 + 2.15419104e+04 * invT) *
      0.0624102852150034;
    // species 11: NH
    result +=
      y[11] *
      (+1.79498941e+00 + 6.46297835e-04 * T - 1.28519698e-07 * T2 +
       1.56506902e-11 * T3 - 7.40843826e-16 * T4 + 4.23408998e+04 * invT) *
      0.0666000666000666;
    // species 12: N
    result +=
      y[12] *
      (+1.41604245e+00 + 8.73318830e-05 * T - 3.96215207e-08 * T2 +
       7.54625135e-12 * T3 - 4.06520318e-16 * T4 + 5.61051512e+04 * invT) *
      0.0713928749910759;
    // species 13: NNH
    result +=
      y[13] *
      (+2.42744423e+00 + 1.61647617e-03 * T - 3.90987663e-07 * T2 +
       4.76270890e-11 * T3 - 2.28983012e-15 * T4 + 2.88067740e+04 * invT) *
      0.0344566191165323;
    // species 14: N2H4
    result +=
      y[14] *
      (+3.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
       1.16819604e-10 * T3 - 5.46137198e-15 * T4 + 9.28265548e+03 * invT) *
      0.0312051426075017;
    // species 15: N2H3
    result +=
      y[15] *
      (+3.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
       9.59332552e-11 * T3 - 4.46215146e-15 * T4 + 2.53241420e+04 * invT) *
      0.0322185707842000;
    // species 16: N2H2
    result +=
      y[16] *
      (+3.11151170e-01 + 4.50093604e-03 * T - 1.04970608e-06 * T2 +
       1.20362395e-10 * T3 - 5.43795782e-15 * T4 + 2.33863341e+04 * invT) *
      0.0333000333000333;
    // species 17: H2NN
    result +=
      y[17] *
      (+2.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
       8.96348015e-11 * T3 - 4.29065810e-15 * T4 + 3.48530149e+04 * invT) *
      0.0333000333000333;
    // species 18: NH2OH
    result +=
      y[18] *
      (+2.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
       1.09482733e-10 * T3 - 5.05449208e-15 * T4 - 6.86018419e+03 * invT) *
      0.0302755071147442;
    // species 19: H2NO
    result +=
      y[19] *
      (+2.75555914e+00 + 2.58109677e-03 * T - 5.87957957e-07 * T2 +
       6.87631730e-11 * T3 - 3.21286286e-15 * T4 + 6.51826177e+03 * invT) *
      0.0312285303853601;
    // species 20: HNOH
    result +=
      y[20] *
      (+2.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
       6.38428615e-11 * T3 - 2.96617122e-15 * T4 + 1.05780106e+04 * invT) *
      0.0312285303853601;
    // species 21: HNO
    result +=
      y[21] *
      (+2.24129053e+00 + 1.36188597e-03 * T - 5.35444320e-08 * T2 -
       2.44783745e-11 * T3 + 2.34207888e-15 * T4 + 1.17745744e+04 * invT) *
      0.0322435029341588;
    // species 22: HON
    result +=
      y[22] *
      (+3.12044656e+00 + 1.14369061e-03 * T - 2.38228454e-07 * T2 +
       2.58330960e-11 * T3 - 1.14096820e-15 * T4 + 2.43643963e+04 * invT) *
      0.0322435029341588;
    // species 23: NO2
    result +=
      y[23] *
      (+3.90482285e+00 + 1.07237249e-03 * T - 2.70884686e-07 * T2 +
       3.88779892e-11 * T3 - 2.08227926e-15 * T4 + 2.28958979e+03 * invT) *
      0.0217367677426367;
    // species 24: HONO
    result +=
      y[24] *
      (+4.79144641e+00 + 1.82315366e-03 * T - 4.30375883e-07 * T2 +
       5.16245582e-11 * T3 - 2.44277358e-15 * T4 - 1.15974343e+04 * invT) *
      0.0212707123561568;
    // species 25: HNO2
    result +=
      y[25] *
      (+3.66358504e+00 + 2.44927175e-03 * T - 5.98980643e-07 * T2 +
       7.36050902e-11 * T3 - 3.56471154e-15 * T4 - 7.25216334e+03 * invT) *
      0.0212707123561568;
    // species 26: NO3
    result +=
      y[26] *
      (+6.37569146e+00 + 1.10866501e-03 * T - 1.91898596e-07 * T2 +
       1.67443856e-11 * T3 - 5.17869400e-16 * T4 + 6.22445577e+03 * invT) *
      0.0161279917424682;
    // species 27: HONO2
    result +=
      y[27] *
      (+7.03061257e+00 + 2.23184168e-03 * T - 5.74242597e-07 * T2 +
       7.29029015e-11 * T3 - 3.60974724e-15 * T4 - 1.93033764e+04 * invT) *
      0.0158699930172031;
    // species 28: N2O
    result +=
      y[28] *
      (+3.80641382e+00 + 1.32653722e-03 * T - 3.23599132e-07 * T2 +
       4.06475375e-11 * T3 - 1.99347631e-15 * T4 + 8.19798219e+03 * invT) *
      0.0227205598345943;
    // species 29: N2
    result +=
      y[29] *
      (+1.93802970e+00 + 7.09190150e-04 * T - 1.67760348e-07 * T2 +
       2.01888866e-11 * T3 - 9.52128550e-16 * T4 - 9.17180990e+02 * invT) *
      0.0356964374955379;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[30]; //  temporary storage
  speciesEntropy(sor, T);

  // Compute Eq 42
  for (int id = 0; id < 30; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[30]; //  temporary storage
  amrex::Real x[30];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }
  // Now compute y to x conversion
  x[0] = y[0] / (2.016000 * YOW);
  x[1] = y[1] / (31.998000 * YOW);
  x[2] = y[2] / (1.008000 * YOW);
  x[3] = y[3] / (15.999000 * YOW);
  x[4] = y[4] / (17.007000 * YOW);
  x[5] = y[5] / (33.006000 * YOW);
  x[6] = y[6] / (18.015000 * YOW);
  x[7] = y[7] / (34.014000 * YOW);
  x[8] = y[8] / (30.006000 * YOW);
  x[9] = y[9] / (17.031000 * YOW);
  x[10] = y[10] / (16.023000 * YOW);
  x[11] = y[11] / (15.015000 * YOW);
  x[12] = y[12] / (14.007000 * YOW);
  x[13] = y[13] / (29.022000 * YOW);
  x[14] = y[14] / (32.046000 * YOW);
  x[15] = y[15] / (31.038000 * YOW);
  x[16] = y[16] / (30.030000 * YOW);
  x[17] = y[17] / (30.030000 * YOW);
  x[18] = y[18] / (33.030000 * YOW);
  x[19] = y[19] / (32.022000 * YOW);
  x[20] = y[20] / (32.022000 * YOW);
  x[21] = y[21] / (31.014000 * YOW);
  x[22] = y[22] / (31.014000 * YOW);
  x[23] = y[23] / (46.005000 * YOW);
  x[24] = y[24] / (47.013000 * YOW);
  x[25] = y[25] / (47.013000 * YOW);
  x[26] = y[26] / (62.004000 * YOW);
  x[27] = y[27] / (63.012000 * YOW);
  x[28] = y[28] / (44.013000 * YOW);
  x[29] = y[29] / (28.014000 * YOW);
  speciesEntropy(sor, T);
  // Perform computation in Eq 42 and 43
  for (int i = 0; i < 30; i++) {
    result += x[i] * (sor[i] - log((x[i] + 1e-100)) - logPratio);
  }
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 2.016000;                   // H2
  XW += x[1] * 31.998000;                  // O2
  XW += x[2] * 1.008000;                   // H
  XW += x[3] * 15.999000;                  // O
  XW += x[4] * 17.007000;                  // OH
  XW += x[5] * 33.006000;                  // HO2
  XW += x[6] * 18.015000;                  // H2O
  XW += x[7] * 34.014000;                  // H2O2
  XW += x[8] * 30.006000;                  // NO
  XW += x[9] * 17.031000;                  // NH3
  XW += x[10] * 16.023000;                 // NH2
  XW += x[11] * 15.015000;                 // NH
  XW += x[12] * 14.007000;                 // N
  XW += x[13] * 29.022000;                 // NNH
  XW += x[14] * 32.046000;                 // N2H4
  XW += x[15] * 31.038000;                 // N2H3
  XW += x[16] * 30.030000;                 // N2H2
  XW += x[17] * 30.030000;                 // H2NN
  XW += x[18] * 33.030000;                 // NH2OH
  XW += x[19] * 32.022000;                 // H2NO
  XW += x[20] * 32.022000;                 // HNOH
  XW += x[21] * 31.014000;                 // HNO
  XW += x[22] * 31.014000;                 // HON
  XW += x[23] * 46.005000;                 // NO2
  XW += x[24] * 47.013000;                 // HONO
  XW += x[25] * 47.013000;                 // HNO2
  XW += x[26] * 62.004000;                 // NO3
  XW += x[27] * 63.012000;                 // HONO2
  XW += x[28] * 44.013000;                 // N2O
  XW += x[29] * 28.014000;                 // N2
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW

  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 31.998000;  // O2
  W += c[2] * 1.008000;   // H
  W += c[3] * 15.999000;  // O
  W += c[4] * 17.007000;  // OH
  W += c[5] * 33.006000;  // HO2
  W += c[6] * 18.015000;  // H2O
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 30.006000;  // NO
  W += c[9] * 17.031000;  // NH3
  W += c[10] * 16.023000; // NH2
  W += c[11] * 15.015000; // NH
  W += c[12] * 14.007000; // N
  W += c[13] * 29.022000; // NNH
  W += c[14] * 32.046000; // N2H4
  W += c[15] * 31.038000; // N2H3
  W += c[16] * 30.030000; // N2H2
  W += c[17] * 30.030000; // H2NN
  W += c[18] * 33.030000; // NH2OH
  W += c[19] * 32.022000; // H2NO
  W += c[20] * 32.022000; // HNOH
  W += c[21] * 31.014000; // HNO
  W += c[22] * 31.014000; // HON
  W += c[23] * 46.005000; // NO2
  W += c[24] * 47.013000; // HONO
  W += c[25] * 47.013000; // HNO2
  W += c[26] * 62.004000; // NO3
  W += c[27] * 63.012000; // HONO2
  W += c[28] * 44.013000; // N2O
  W += c[29] * 28.014000; // N2

  for (int id = 0; id < 30; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 2.016000;                     // H2
  XW += x[1] * 31.998000;                    // O2
  XW += x[2] * 1.008000;                     // H
  XW += x[3] * 15.999000;                    // O
  XW += x[4] * 17.007000;                    // OH
  XW += x[5] * 33.006000;                    // HO2
  XW += x[6] * 18.015000;                    // H2O
  XW += x[7] * 34.014000;                    // H2O2
  XW += x[8] * 30.006000;                    // NO
  XW += x[9] * 17.031000;                    // NH3
  XW += x[10] * 16.023000;                   // NH2
  XW += x[11] * 15.015000;                   // NH
  XW += x[12] * 14.007000;                   // N
  XW += x[13] * 29.022000;                   // NNH
  XW += x[14] * 32.046000;                   // N2H4
  XW += x[15] * 31.038000;                   // N2H3
  XW += x[16] * 30.030000;                   // N2H2
  XW += x[17] * 30.030000;                   // H2NN
  XW += x[18] * 33.030000;                   // NH2OH
  XW += x[19] * 32.022000;                   // H2NO
  XW += x[20] * 32.022000;                   // HNOH
  XW += x[21] * 31.014000;                   // HNO
  XW += x[22] * 31.014000;                   // HON
  XW += x[23] * 46.005000;                   // NO2
  XW += x[24] * 47.013000;                   // HONO
  XW += x[25] * 47.013000;                   // HNO2
  XW += x[26] * 62.004000;                   // NO3
  XW += x[27] * 63.012000;                   // HONO2
  XW += x[28] * 44.013000;                   // N2O
  XW += x[29] * 28.014000;                   // N2
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 31.998000;  // O2
  W += c[2] * 1.008000;   // H
  W += c[3] * 15.999000;  // O
  W += c[4] * 17.007000;  // OH
  W += c[5] * 33.006000;  // HO2
  W += c[6] * 18.015000;  // H2O
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 30.006000;  // NO
  W += c[9] * 17.031000;  // NH3
  W += c[10] * 16.023000; // NH2
  W += c[11] * 15.015000; // NH
  W += c[12] * 14.007000; // N
  W += c[13] * 29.022000; // NNH
  W += c[14] * 32.046000; // N2H4
  W += c[15] * 31.038000; // N2H3
  W += c[16] * 30.030000; // N2H2
  W += c[17] * 30.030000; // H2NN
  W += c[18] * 33.030000; // NH2OH
  W += c[19] * 32.022000; // H2NO
  W += c[20] * 32.022000; // HNOH
  W += c[21] * 31.014000; // HNO
  W += c[22] * 31.014000; // HON
  W += c[23] * 46.005000; // NO2
  W += c[24] * 47.013000; // HONO
  W += c[25] * 47.013000; // HNO2
  W += c[26] * 62.004000; // NO3
  W += c[27] * 63.012000; // HONO2
  W += c[28] * 44.013000; // N2O
  W += c[29] * 28.014000; // N2

  for (int id = 0; id < 30; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;      //  see Eq 4 in CK Manual
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 31.998000;  // O2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 33.006000;  // HO2
  XW += x[6] * 18.015000;  // H2O
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 30.006000;  // NO
  XW += x[9] * 17.031000;  // NH3
  XW += x[10] * 16.023000; // NH2
  XW += x[11] * 15.015000; // NH
  XW += x[12] * 14.007000; // N
  XW += x[13] * 29.022000; // NNH
  XW += x[14] * 32.046000; // N2H4
  XW += x[15] * 31.038000; // N2H3
  XW += x[16] * 30.030000; // N2H2
  XW += x[17] * 30.030000; // H2NN
  XW += x[18] * 33.030000; // NH2OH
  XW += x[19] * 32.022000; // H2NO
  XW += x[20] * 32.022000; // HNOH
  XW += x[21] * 31.014000; // HNO
  XW += x[22] * 31.014000; // HON
  XW += x[23] * 46.005000; // NO2
  XW += x[24] * 47.013000; // HONO
  XW += x[25] * 47.013000; // HNO2
  XW += x[26] * 62.004000; // NO3
  XW += x[27] * 63.012000; // HONO2
  XW += x[28] * 44.013000; // N2O
  XW += x[29] * 28.014000; // N2
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 31.998000;  // O2
  W += c[2] * 1.008000;   // H
  W += c[3] * 15.999000;  // O
  W += c[4] * 17.007000;  // OH
  W += c[5] * 33.006000;  // HO2
  W += c[6] * 18.015000;  // H2O
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 30.006000;  // NO
  W += c[9] * 17.031000;  // NH3
  W += c[10] * 16.023000; // NH2
  W += c[11] * 15.015000; // NH
  W += c[12] * 14.007000; // N
  W += c[13] * 29.022000; // NNH
  W += c[14] * 32.046000; // N2H4
  W += c[15] * 31.038000; // N2H3
  W += c[16] * 30.030000; // N2H2
  W += c[17] * 30.030000; // H2NN
  W += c[18] * 33.030000; // NH2OH
  W += c[19] * 32.022000; // H2NO
  W += c[20] * 32.022000; // HNOH
  W += c[21] * 31.014000; // HNO
  W += c[22] * 31.014000; // HON
  W += c[23] * 46.005000; // NO2
  W += c[24] * 47.013000; // HONO
  W += c[25] * 47.013000; // HNO2
  W += c[26] * 62.004000; // NO3
  W += c[27] * 63.012000; // HONO2
  W += c[28] * 44.013000; // N2O
  W += c[29] * 28.014000; // N2

  for (int id = 0; id < 30; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against division by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  cp_R(cpor, T);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  speciesEnthalpy(hort, T);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  speciesEntropy(sor, T);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 30; i++) {
    x[i] = y[i] * imw(i) * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 30; i++) {
    c[i] = y[i] * imw(i);
  }
  for (int i = 0; i < 30; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 30; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{

  for (int i = 0; i < 30; i++) {
    c[i] = rho * y[i] * imw(i);
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 31.998000;  // O2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 33.006000;  // HO2
  XW += x[6] * 18.015000;  // H2O
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 30.006000;  // NO
  XW += x[9] * 17.031000;  // NH3
  XW += x[10] * 16.023000; // NH2
  XW += x[11] * 15.015000; // NH
  XW += x[12] * 14.007000; // N
  XW += x[13] * 29.022000; // NNH
  XW += x[14] * 32.046000; // N2H4
  XW += x[15] * 31.038000; // N2H3
  XW += x[16] * 30.030000; // N2H2
  XW += x[17] * 30.030000; // H2NN
  XW += x[18] * 33.030000; // NH2OH
  XW += x[19] * 32.022000; // H2NO
  XW += x[20] * 32.022000; // HNOH
  XW += x[21] * 31.014000; // HNO
  XW += x[22] * 31.014000; // HON
  XW += x[23] * 46.005000; // NO2
  XW += x[24] * 47.013000; // HONO
  XW += x[25] * 47.013000; // HNO2
  XW += x[26] * 62.004000; // NO3
  XW += x[27] * 63.012000; // HONO2
  XW += x[28] * 44.013000; // N2O
  XW += x[29] * 28.014000; // N2
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 2.016000 * XWinv;
  y[1] = x[1] * 31.998000 * XWinv;
  y[2] = x[2] * 1.008000 * XWinv;
  y[3] = x[3] * 15.999000 * XWinv;
  y[4] = x[4] * 17.007000 * XWinv;
  y[5] = x[5] * 33.006000 * XWinv;
  y[6] = x[6] * 18.015000 * XWinv;
  y[7] = x[7] * 34.014000 * XWinv;
  y[8] = x[8] * 30.006000 * XWinv;
  y[9] = x[9] * 17.031000 * XWinv;
  y[10] = x[10] * 16.023000 * XWinv;
  y[11] = x[11] * 15.015000 * XWinv;
  y[12] = x[12] * 14.007000 * XWinv;
  y[13] = x[13] * 29.022000 * XWinv;
  y[14] = x[14] * 32.046000 * XWinv;
  y[15] = x[15] * 31.038000 * XWinv;
  y[16] = x[16] * 30.030000 * XWinv;
  y[17] = x[17] * 30.030000 * XWinv;
  y[18] = x[18] * 33.030000 * XWinv;
  y[19] = x[19] * 32.022000 * XWinv;
  y[20] = x[20] * 32.022000 * XWinv;
  y[21] = x[21] * 31.014000 * XWinv;
  y[22] = x[22] * 31.014000 * XWinv;
  y[23] = x[23] * 46.005000 * XWinv;
  y[24] = x[24] * 47.013000 * XWinv;
  y[25] = x[25] * 47.013000 * XWinv;
  y[26] = x[26] * 62.004000 * XWinv;
  y[27] = x[27] * 63.012000 * XWinv;
  y[28] = x[28] * 44.013000 * XWinv;
  y[29] = x[29] * 28.014000 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (int id = 0; id < 30; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 31.998000;  // O2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 33.006000;  // HO2
  XW += x[6] * 18.015000;  // H2O
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 30.006000;  // NO
  XW += x[9] * 17.031000;  // NH3
  XW += x[10] * 16.023000; // NH2
  XW += x[11] * 15.015000; // NH
  XW += x[12] * 14.007000; // N
  XW += x[13] * 29.022000; // NNH
  XW += x[14] * 32.046000; // N2H4
  XW += x[15] * 31.038000; // N2H3
  XW += x[16] * 30.030000; // N2H2
  XW += x[17] * 30.030000; // H2NN
  XW += x[18] * 33.030000; // NH2OH
  XW += x[19] * 32.022000; // H2NO
  XW += x[20] * 32.022000; // HNOH
  XW += x[21] * 31.014000; // HNO
  XW += x[22] * 31.014000; // HON
  XW += x[23] * 46.005000; // NO2
  XW += x[24] * 47.013000; // HONO
  XW += x[25] * 47.013000; // HNO2
  XW += x[26] * 62.004000; // NO3
  XW += x[27] * 63.012000; // HONO2
  XW += x[28] * 44.013000; // N2O
  XW += x[29] * 28.014000; // N2
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 30; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  amrex::Real sumC = 0;

  // compute sum of c
  for (int id = 0; id < 30; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (int id = 0; id < 30; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 2.016000;   // H2
  CW += c[1] * 31.998000;  // O2
  CW += c[2] * 1.008000;   // H
  CW += c[3] * 15.999000;  // O
  CW += c[4] * 17.007000;  // OH
  CW += c[5] * 33.006000;  // HO2
  CW += c[6] * 18.015000;  // H2O
  CW += c[7] * 34.014000;  // H2O2
  CW += c[8] * 30.006000;  // NO
  CW += c[9] * 17.031000;  // NH3
  CW += c[10] * 16.023000; // NH2
  CW += c[11] * 15.015000; // NH
  CW += c[12] * 14.007000; // N
  CW += c[13] * 29.022000; // NNH
  CW += c[14] * 32.046000; // N2H4
  CW += c[15] * 31.038000; // N2H3
  CW += c[16] * 30.030000; // N2H2
  CW += c[17] * 30.030000; // H2NN
  CW += c[18] * 33.030000; // NH2OH
  CW += c[19] * 32.022000; // H2NO
  CW += c[20] * 32.022000; // HNOH
  CW += c[21] * 31.014000; // HNO
  CW += c[22] * 31.014000; // HON
  CW += c[23] * 46.005000; // NO2
  CW += c[24] * 47.013000; // HONO
  CW += c[25] * 47.013000; // HNO2
  CW += c[26] * 62.004000; // NO3
  CW += c[27] * 63.012000; // HONO2
  CW += c[28] * 44.013000; // N2O
  CW += c[29] * 28.014000; // N2
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 2.016000 * CWinv;
  y[1] = c[1] * 31.998000 * CWinv;
  y[2] = c[2] * 1.008000 * CWinv;
  y[3] = c[3] * 15.999000 * CWinv;
  y[4] = c[4] * 17.007000 * CWinv;
  y[5] = c[5] * 33.006000 * CWinv;
  y[6] = c[6] * 18.015000 * CWinv;
  y[7] = c[7] * 34.014000 * CWinv;
  y[8] = c[8] * 30.006000 * CWinv;
  y[9] = c[9] * 17.031000 * CWinv;
  y[10] = c[10] * 16.023000 * CWinv;
  y[11] = c[11] * 15.015000 * CWinv;
  y[12] = c[12] * 14.007000 * CWinv;
  y[13] = c[13] * 29.022000 * CWinv;
  y[14] = c[14] * 32.046000 * CWinv;
  y[15] = c[15] * 31.038000 * CWinv;
  y[16] = c[16] * 30.030000 * CWinv;
  y[17] = c[17] * 30.030000 * CWinv;
  y[18] = c[18] * 33.030000 * CWinv;
  y[19] = c[19] * 32.022000 * CWinv;
  y[20] = c[20] * 32.022000 * CWinv;
  y[21] = c[21] * 31.014000 * CWinv;
  y[22] = c[22] * 31.014000 * CWinv;
  y[23] = c[23] * 46.005000 * CWinv;
  y[24] = c[24] * 47.013000 * CWinv;
  y[25] = c[25] * 47.013000 * CWinv;
  y[26] = c[26] * 62.004000 * CWinv;
  y[27] = c[27] * 63.012000 * CWinv;
  y[28] = c[28] * 44.013000 * CWinv;
  y[29] = c[29] * 28.014000 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  cv_R(cvml, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  cp_R(cpml, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  speciesEntropy(sml, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  cv_R(cvms, T);
  // multiply by R/molecularweight
  cvms[0] *= 4.124237409798234e+07;  // H2
  cvms[1] *= 2.598431970171023e+06;  // O2
  cvms[2] *= 8.248474819596468e+07;  // H
  cvms[3] *= 5.196863940342046e+06;  // O
  cvms[4] *= 4.888847308845322e+06;  // OH
  cvms[5] *= 2.519076112874398e+06;  // HO2
  cvms[6] *= 4.615299815794193e+06;  // H2O
  cvms[7] *= 2.444423654422661e+06;  // H2O2
  cvms[8] *= 2.770933352713870e+06;  // NO
  cvms[9] *= 4.881957969674852e+06;  // NH3
  cvms[10] *= 5.189079834084279e+06; // NH2
  cvms[11] *= 5.537437641127699e+06; // NH
  cvms[12] *= 5.935933903157878e+06; // N
  cvms[13] *= 2.864882715923520e+06; // NNH
  cvms[14] *= 2.594539917042139e+06; // N2H4
  cvms[15] *= 2.678801023955551e+06; // N2H3
  cvms[16] *= 2.768718820563850e+06; // N2H2
  cvms[17] *= 2.768718820563850e+06; // H2NN
  cvms[18] *= 2.517245721511729e+06; // NH2OH
  cvms[19] *= 2.596484485089389e+06; // H2NO
  cvms[20] *= 2.596484485089389e+06; // HNOH
  cvms[21] *= 2.680873998243773e+06; // HNO
  cvms[22] *= 2.680873998243773e+06; // HON
  cvms[23] *= 1.807295428356318e+06; // NO2
  cvms[24] *= 1.768545427467560e+06; // HONO
  cvms[25] *= 1.768545427467560e+06; // HNO2
  cvms[26] *= 1.340955844486362e+06; // NO3
  cvms[27] *= 1.319504636918879e+06; // HONO2
  cvms[28] *= 1.889092454082485e+06; // N2O
  cvms[29] *= 2.967966951578939e+06; // N2
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  cp_R(cpms, T);
  // multiply by R/molecularweight
  cpms[0] *= 4.124237409798234e+07;  // H2
  cpms[1] *= 2.598431970171023e+06;  // O2
  cpms[2] *= 8.248474819596468e+07;  // H
  cpms[3] *= 5.196863940342046e+06;  // O
  cpms[4] *= 4.888847308845322e+06;  // OH
  cpms[5] *= 2.519076112874398e+06;  // HO2
  cpms[6] *= 4.615299815794193e+06;  // H2O
  cpms[7] *= 2.444423654422661e+06;  // H2O2
  cpms[8] *= 2.770933352713870e+06;  // NO
  cpms[9] *= 4.881957969674852e+06;  // NH3
  cpms[10] *= 5.189079834084279e+06; // NH2
  cpms[11] *= 5.537437641127699e+06; // NH
  cpms[12] *= 5.935933903157878e+06; // N
  cpms[13] *= 2.864882715923520e+06; // NNH
  cpms[14] *= 2.594539917042139e+06; // N2H4
  cpms[15] *= 2.678801023955551e+06; // N2H3
  cpms[16] *= 2.768718820563850e+06; // N2H2
  cpms[17] *= 2.768718820563850e+06; // H2NN
  cpms[18] *= 2.517245721511729e+06; // NH2OH
  cpms[19] *= 2.596484485089389e+06; // H2NO
  cpms[20] *= 2.596484485089389e+06; // HNOH
  cpms[21] *= 2.680873998243773e+06; // HNO
  cpms[22] *= 2.680873998243773e+06; // HON
  cpms[23] *= 1.807295428356318e+06; // NO2
  cpms[24] *= 1.768545427467560e+06; // HONO
  cpms[25] *= 1.768545427467560e+06; // HNO2
  cpms[26] *= 1.340955844486362e+06; // NO3
  cpms[27] *= 1.319504636918879e+06; // HONO2
  cpms[28] *= 1.889092454082485e+06; // N2O
  cpms[29] *= 2.967966951578939e+06; // N2
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesInternalEnergy(ums, T);

  for (int i = 0; i < 30; i++) {
    ums[i] *= RT * imw(i);
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesEnthalpy(hms, T);

  for (int i = 0; i < 30; i++) {
    hms[i] *= RT * imw(i);
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  speciesEntropy(sms, T);
  // multiply by R/molecularweight
  sms[0] *= 4.124237409798234e+07;  // H2
  sms[1] *= 2.598431970171023e+06;  // O2
  sms[2] *= 8.248474819596468e+07;  // H
  sms[3] *= 5.196863940342046e+06;  // O
  sms[4] *= 4.888847308845322e+06;  // OH
  sms[5] *= 2.519076112874398e+06;  // HO2
  sms[6] *= 4.615299815794193e+06;  // H2O
  sms[7] *= 2.444423654422661e+06;  // H2O2
  sms[8] *= 2.770933352713870e+06;  // NO
  sms[9] *= 4.881957969674852e+06;  // NH3
  sms[10] *= 5.189079834084279e+06; // NH2
  sms[11] *= 5.537437641127699e+06; // NH
  sms[12] *= 5.935933903157878e+06; // N
  sms[13] *= 2.864882715923520e+06; // NNH
  sms[14] *= 2.594539917042139e+06; // N2H4
  sms[15] *= 2.678801023955551e+06; // N2H3
  sms[16] *= 2.768718820563850e+06; // N2H2
  sms[17] *= 2.768718820563850e+06; // H2NN
  sms[18] *= 2.517245721511729e+06; // NH2OH
  sms[19] *= 2.596484485089389e+06; // H2NO
  sms[20] *= 2.596484485089389e+06; // HNOH
  sms[21] *= 2.680873998243773e+06; // HNO
  sms[22] *= 2.680873998243773e+06; // HON
  sms[23] *= 1.807295428356318e+06; // NO2
  sms[24] *= 1.768545427467560e+06; // HONO
  sms[25] *= 1.768545427467560e+06; // HNO2
  sms[26] *= 1.340955844486362e+06; // NO3
  sms[27] *= 1.319504636918879e+06; // HONO2
  sms[28] *= 1.889092454082485e+06; // N2O
  sms[29] *= 2.967966951578939e+06; // N2
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* /*sc_qss*/,
  const amrex::Real T,
  const amrex::Real invT,
  const amrex::Real logT)
{

  // reaction 11: H + O2 (+M) <=> HO2 (+M)
  qf[0] = sc[1] * sc[2];
  qr[0] = sc[5];

  // reaction 20: H2O2 (+M) <=> 2 OH (+M)
  qf[1] = sc[7];
  qr[1] = (sc[4] * sc[4]);

  // reaction 26: H + NH2 (+M) <=> NH3 (+M)
  qf[2] = sc[2] * sc[10];
  qr[2] = sc[9];

  // reaction 78: NH2OH (+M) <=> NH2 + OH (+M)
  qf[3] = sc[18];
  qr[3] = sc[4] * sc[10];

  // reaction 113: H + NO (+M) <=> HNO (+M)
  qf[4] = sc[2] * sc[8];
  qr[4] = sc[21];

  // reaction 122: NO + O (+M) <=> NO2 (+M)
  qf[5] = sc[3] * sc[8];
  qr[5] = sc[23];

  // reaction 129: NO + OH (+M) <=> HONO (+M)
  qf[6] = sc[4] * sc[8];
  qr[6] = sc[24];

  // reaction 138: HNO2 (+M) <=> HONO (+M)
  qf[7] = sc[25];
  qr[7] = sc[24];

  // reaction 142: NO2 + O (+M) <=> NO3 (+M)
  qf[8] = sc[3] * sc[23];
  qr[8] = sc[26];

  // reaction 148: NO2 + OH (+M) <=> HONO2 (+M)
  qf[9] = sc[4] * sc[23];
  qr[9] = sc[27];

  // reaction 153: N2O (+M) <=> N2 + O (+M)
  qf[10] = sc[28];
  qr[10] = sc[3] * sc[29];

  // reaction 165: 2 NH2 (+M) <=> N2H4 (+M)
  qf[11] = (sc[10] * sc[10]);
  qr[11] = sc[14];

  // reaction 6: H2 + M <=> 2 H + M
  qf[12] = sc[0];
  qr[12] = (sc[2] * sc[2]);

  // reaction 7: H + O + M <=> OH + M
  qf[13] = sc[2] * sc[3];
  qr[13] = sc[4];

  // reaction 8: 2 O + M <=> O2 + M
  qf[14] = (sc[3] * sc[3]);
  qr[14] = sc[1];

  // reaction 9: H2O + M <=> H + OH + M
  qf[15] = sc[6];
  qr[15] = sc[2] * sc[4];

  // reaction 10: H2O + H2O <=> H + OH + H2O
  qf[16] = (sc[6] * sc[6]);
  qr[16] = sc[2] * sc[4] * sc[6];

  // reaction 91: H2NO + M <=> H + HNO + M
  qf[17] = sc[19];
  qr[17] = sc[2] * sc[21];

  // reaction 92: H2NO + M <=> HNOH + M
  qf[18] = sc[19];
  qr[18] = sc[20];

  // reaction 102: HNOH + M <=> H + HNO + M
  qf[19] = sc[20];
  qr[19] = sc[2] * sc[21];

  // reaction 147: NO3 + NO2 <=> NO + O2 + NO2
  qf[20] = sc[23] * sc[26];
  qr[20] = sc[1] * sc[8] * sc[23];

  // reaction 189: N2H2 + M <=> H + NNH + M
  qf[21] = sc[16];
  qr[21] = sc[2] * sc[13];

  // reaction 0: H + O2 <=> O + OH
  qf[22] = sc[1] * sc[2];
  qr[22] = sc[3] * sc[4];

  // reaction 1: H2 + O <=> H + OH
  qf[23] = sc[0] * sc[3];
  qr[23] = sc[2] * sc[4];

  // reaction 2: H2 + O <=> H + OH
  qf[24] = sc[0] * sc[3];
  qr[24] = sc[2] * sc[4];

  // reaction 3: H2 + OH <=> H + H2O
  qf[25] = sc[0] * sc[4];
  qr[25] = sc[2] * sc[6];

  // reaction 4: 2 OH <=> H2O + O
  qf[26] = (sc[4] * sc[4]);
  qr[26] = sc[3] * sc[6];

  // reaction 5: 2 OH <=> H2O + O
  qf[27] = (sc[4] * sc[4]);
  qr[27] = sc[3] * sc[6];

  // reaction 12: H + HO2 <=> H2 + O2
  qf[28] = sc[2] * sc[5];
  qr[28] = sc[0] * sc[1];

  // reaction 13: H + HO2 <=> 2 OH
  qf[29] = sc[2] * sc[5];
  qr[29] = (sc[4] * sc[4]);

  // reaction 14: H + HO2 <=> H2O + O
  qf[30] = sc[2] * sc[5];
  qr[30] = sc[3] * sc[6];

  // reaction 15: HO2 + O <=> O2 + OH
  qf[31] = sc[3] * sc[5];
  qr[31] = sc[1] * sc[4];

  // reaction 16: HO2 + OH <=> H2O + O2
  qf[32] = sc[4] * sc[5];
  qr[32] = sc[1] * sc[6];

  // reaction 17: HO2 + OH <=> H2O + O2
  qf[33] = sc[4] * sc[5];
  qr[33] = sc[1] * sc[6];

  // reaction 18: 2 HO2 <=> H2O2 + O2
  qf[34] = (sc[5] * sc[5]);
  qr[34] = sc[1] * sc[7];

  // reaction 19: 2 HO2 <=> H2O2 + O2
  qf[35] = (sc[5] * sc[5]);
  qr[35] = sc[1] * sc[7];

  // reaction 21: H + H2O2 <=> H2O + OH
  qf[36] = sc[2] * sc[7];
  qr[36] = sc[4] * sc[6];

  // reaction 22: H + H2O2 <=> H2 + HO2
  qf[37] = sc[2] * sc[7];
  qr[37] = sc[0] * sc[5];

  // reaction 23: H2O2 + O <=> HO2 + OH
  qf[38] = sc[3] * sc[7];
  qr[38] = sc[4] * sc[5];

  // reaction 24: H2O2 + OH <=> H2O + HO2
  qf[39] = sc[4] * sc[7];
  qr[39] = sc[5] * sc[6];

  // reaction 25: H2O2 + OH <=> H2O + HO2
  qf[40] = sc[4] * sc[7];
  qr[40] = sc[5] * sc[6];

  // reaction 27: H + NH3 <=> H2 + NH2
  qf[41] = sc[2] * sc[9];
  qr[41] = sc[0] * sc[10];

  // reaction 28: NH3 + O <=> NH2 + OH
  qf[42] = sc[3] * sc[9];
  qr[42] = sc[4] * sc[10];

  // reaction 29: NH3 + OH <=> H2O + NH2
  qf[43] = sc[4] * sc[9];
  qr[43] = sc[6] * sc[10];

  // reaction 30: HO2 + NH3 <=> H2O2 + NH2
  qf[44] = sc[5] * sc[9];
  qr[44] = sc[7] * sc[10];

  // reaction 31: H2 + NH <=> H + NH2
  qf[45] = sc[0] * sc[11];
  qr[45] = sc[2] * sc[10];

  // reaction 32: NH2 + O <=> H + HNO
  qf[46] = sc[3] * sc[10];
  qr[46] = sc[2] * sc[21];

  // reaction 33: NH2 + O <=> NH + OH
  qf[47] = sc[3] * sc[10];
  qr[47] = sc[4] * sc[11];

  // reaction 34: NH2 + O <=> NH + OH
  qf[48] = sc[3] * sc[10];
  qr[48] = sc[4] * sc[11];

  // reaction 35: NH2 + OH <=> H2O + NH
  qf[49] = sc[4] * sc[10];
  qr[49] = sc[6] * sc[11];

  // reaction 36: HO2 + NH2 <=> NH3 + O2
  qf[50] = sc[5] * sc[10];
  qr[50] = sc[1] * sc[9];

  // reaction 37: HO2 + NH2 <=> H2NO + OH
  qf[51] = sc[5] * sc[10];
  qr[51] = sc[4] * sc[19];

  // reaction 38: HO2 + NH2 <=> H2O + HNO
  qf[52] = sc[5] * sc[10];
  qr[52] = sc[6] * sc[21];

  // reaction 39: HO2 + NH2 <=> H2O + HNO
  qf[53] = sc[5] * sc[10];
  qr[53] = sc[6] * sc[21];

  // reaction 40: HO2 + NH2 <=> H2O + HON
  qf[54] = sc[5] * sc[10];
  qr[54] = sc[6] * sc[22];

  // reaction 41: NH2 + O2 <=> H2NO + O
  qf[55] = sc[1] * sc[10];
  qr[55] = sc[3] * sc[19];

  // reaction 42: NH2 + O2 <=> HNO + OH
  qf[56] = sc[1] * sc[10];
  qr[56] = sc[4] * sc[21];

  // reaction 43: 2 NH2 <=> NH + NH3
  qf[57] = (sc[10] * sc[10]);
  qr[57] = sc[9] * sc[11];

  // reaction 44: NH + NH2 <=> N + NH3
  qf[58] = sc[10] * sc[11];
  qr[58] = sc[9] * sc[12];

  // reaction 45: N + NH2 <=> 2 H + N2
  qf[59] = sc[10] * sc[12];
  qr[59] = (sc[2] * sc[2]) * sc[29];

  // reaction 46: HNO + NH2 <=> NH3 + NO
  qf[60] = sc[10] * sc[21];
  qr[60] = sc[8] * sc[9];

  // reaction 47: NH2 + NO <=> H2O + N2
  qf[61] = sc[8] * sc[10];
  qr[61] = sc[6] * sc[29];

  // reaction 48: NH2 + NO <=> NNH + OH
  qf[62] = sc[8] * sc[10];
  qr[62] = sc[4] * sc[13];

  // reaction 49: HONO + NH2 <=> NH3 + NO2
  qf[63] = sc[10] * sc[24];
  qr[63] = sc[9] * sc[23];

  // reaction 50: NH2 + NO2 <=> H2NO + NO
  qf[64] = sc[10] * sc[23];
  qr[64] = sc[8] * sc[19];

  // reaction 51: NH2 + NO2 <=> H2O + N2O
  qf[65] = sc[10] * sc[23];
  qr[65] = sc[6] * sc[28];

  // reaction 52: H + NH <=> H2 + N
  qf[66] = sc[2] * sc[11];
  qr[66] = sc[0] * sc[12];

  // reaction 53: NH + O <=> H + NO
  qf[67] = sc[3] * sc[11];
  qr[67] = sc[2] * sc[8];

  // reaction 54: NH + OH <=> H + HNO
  qf[68] = sc[4] * sc[11];
  qr[68] = sc[2] * sc[21];

  // reaction 55: NH + OH <=> H2O + N
  qf[69] = sc[4] * sc[11];
  qr[69] = sc[6] * sc[12];

  // reaction 56: NH + O2 <=> HNO + O
  qf[70] = sc[1] * sc[11];
  qr[70] = sc[3] * sc[21];

  // reaction 57: NH + O2 <=> NO + OH
  qf[71] = sc[1] * sc[11];
  qr[71] = sc[4] * sc[8];

  // reaction 58: 2 NH <=> N + NH2
  qf[72] = (sc[11] * sc[11]);
  qr[72] = sc[10] * sc[12];

  // reaction 59: N + NH <=> H + N2
  qf[73] = sc[11] * sc[12];
  qr[73] = sc[2] * sc[29];

  // reaction 60: NH + NO <=> H + N2O
  qf[74] = sc[8] * sc[11];
  qr[74] = sc[2] * sc[28];

  // reaction 61: NH + NO <=> N2 + OH
  qf[75] = sc[8] * sc[11];
  qr[75] = sc[4] * sc[29];

  // reaction 62: HONO + NH <=> NH2 + NO2
  qf[76] = sc[11] * sc[24];
  qr[76] = sc[10] * sc[23];

  // reaction 63: NH + NO2 <=> N2O + OH
  qf[77] = sc[11] * sc[23];
  qr[77] = sc[4] * sc[28];

  // reaction 64: NH + NO2 <=> HNO + NO
  qf[78] = sc[11] * sc[23];
  qr[78] = sc[8] * sc[21];

  // reaction 65: N + OH <=> H + NO
  qf[79] = sc[4] * sc[12];
  qr[79] = sc[2] * sc[8];

  // reaction 66: N + O2 <=> NO + O
  qf[80] = sc[1] * sc[12];
  qr[80] = sc[3] * sc[8];

  // reaction 67: N + NO <=> N2 + O
  qf[81] = sc[8] * sc[12];
  qr[81] = sc[3] * sc[29];

  // reaction 68: NNH <=> H + N2
  qf[82] = sc[13];
  qr[82] = sc[2] * sc[29];

  // reaction 69: H + NNH <=> H2 + N2
  qf[83] = sc[2] * sc[13];
  qr[83] = sc[0] * sc[29];

  // reaction 70: NNH + O <=> H + N2O
  qf[84] = sc[3] * sc[13];
  qr[84] = sc[2] * sc[28];

  // reaction 71: NNH + O <=> N2 + OH
  qf[85] = sc[3] * sc[13];
  qr[85] = sc[4] * sc[29];

  // reaction 72: NNH + O <=> NH + NO
  qf[86] = sc[3] * sc[13];
  qr[86] = sc[8] * sc[11];

  // reaction 73: NNH + OH <=> H2O + N2
  qf[87] = sc[4] * sc[13];
  qr[87] = sc[6] * sc[29];

  // reaction 74: NNH + O2 <=> HO2 + N2
  qf[88] = sc[1] * sc[13];
  qr[88] = sc[5] * sc[29];

  // reaction 75: NH + NNH <=> N2 + NH2
  qf[89] = sc[11] * sc[13];
  qr[89] = sc[10] * sc[29];

  // reaction 76: NH2 + NNH <=> N2 + NH3
  qf[90] = sc[10] * sc[13];
  qr[90] = sc[9] * sc[29];

  // reaction 77: NNH + NO <=> HNO + N2
  qf[91] = sc[8] * sc[13];
  qr[91] = sc[21] * sc[29];

  // reaction 79: H + NH2OH <=> H2 + HNOH
  qf[92] = sc[2] * sc[18];
  qr[92] = sc[0] * sc[20];

  // reaction 80: H + NH2OH <=> H2 + H2NO
  qf[93] = sc[2] * sc[18];
  qr[93] = sc[0] * sc[19];

  // reaction 81: NH2OH + O <=> HNOH + OH
  qf[94] = sc[3] * sc[18];
  qr[94] = sc[4] * sc[20];

  // reaction 82: NH2OH + O <=> H2NO + OH
  qf[95] = sc[3] * sc[18];
  qr[95] = sc[4] * sc[19];

  // reaction 83: NH2OH + OH <=> H2O + HNOH
  qf[96] = sc[4] * sc[18];
  qr[96] = sc[6] * sc[20];

  // reaction 84: NH2OH + OH <=> H2NO + H2O
  qf[97] = sc[4] * sc[18];
  qr[97] = sc[6] * sc[19];

  // reaction 85: NH2 + NH2OH <=> HNOH + NH3
  qf[98] = sc[10] * sc[18];
  qr[98] = sc[9] * sc[20];

  // reaction 86: NH2 + NH2OH <=> H2NO + NH3
  qf[99] = sc[10] * sc[18];
  qr[99] = sc[9] * sc[19];

  // reaction 87: NH + NH2OH <=> HNOH + NH2
  qf[100] = sc[11] * sc[18];
  qr[100] = sc[10] * sc[20];

  // reaction 88: NH + NH2OH <=> H2NO + NH2
  qf[101] = sc[11] * sc[18];
  qr[101] = sc[10] * sc[19];

  // reaction 89: HO2 + NH2OH <=> H2O2 + HNOH
  qf[102] = sc[5] * sc[18];
  qr[102] = sc[7] * sc[20];

  // reaction 90: HO2 + NH2OH <=> H2NO + H2O2
  qf[103] = sc[5] * sc[18];
  qr[103] = sc[7] * sc[19];

  // reaction 93: H + H2NO <=> H2 + HNO
  qf[104] = sc[2] * sc[19];
  qr[104] = sc[0] * sc[21];

  // reaction 94: H + H2NO <=> NH2 + OH
  qf[105] = sc[2] * sc[19];
  qr[105] = sc[4] * sc[10];

  // reaction 95: H2NO + O <=> HNO + OH
  qf[106] = sc[3] * sc[19];
  qr[106] = sc[4] * sc[21];

  // reaction 96: H2NO + OH <=> H2O + HNO
  qf[107] = sc[4] * sc[19];
  qr[107] = sc[6] * sc[21];

  // reaction 97: H2NO + HO2 <=> H2O2 + HNO
  qf[108] = sc[5] * sc[19];
  qr[108] = sc[7] * sc[21];

  // reaction 98: H2NO + O2 <=> HNO + HO2
  qf[109] = sc[1] * sc[19];
  qr[109] = sc[5] * sc[21];

  // reaction 99: H2NO + NH2 <=> HNO + NH3
  qf[110] = sc[10] * sc[19];
  qr[110] = sc[9] * sc[21];

  // reaction 100: H2NO + NO <=> 2 HNO
  qf[111] = sc[8] * sc[19];
  qr[111] = (sc[21] * sc[21]);

  // reaction 101: H2NO + NO2 <=> HNO + HONO
  qf[112] = sc[19] * sc[23];
  qr[112] = sc[21] * sc[24];

  // reaction 103: H + HNOH <=> NH2 + OH
  qf[113] = sc[2] * sc[20];
  qr[113] = sc[4] * sc[10];

  // reaction 104: H + HNOH <=> H2 + HNO
  qf[114] = sc[2] * sc[20];
  qr[114] = sc[0] * sc[21];

  // reaction 105: HNOH + O <=> HNO + OH
  qf[115] = sc[3] * sc[20];
  qr[115] = sc[4] * sc[21];

  // reaction 106: HNOH + O <=> HNO + OH
  qf[116] = sc[3] * sc[20];
  qr[116] = sc[4] * sc[21];

  // reaction 107: HNOH + OH <=> H2O + HNO
  qf[117] = sc[4] * sc[20];
  qr[117] = sc[6] * sc[21];

  // reaction 108: HNOH + HO2 <=> H2O2 + HNO
  qf[118] = sc[5] * sc[20];
  qr[118] = sc[7] * sc[21];

  // reaction 109: HNOH + HO2 <=> NH2OH + O2
  qf[119] = sc[5] * sc[20];
  qr[119] = sc[1] * sc[18];

  // reaction 110: HNOH + O2 <=> HNO + HO2
  qf[120] = sc[1] * sc[20];
  qr[120] = sc[5] * sc[21];

  // reaction 111: HNOH + NH2 <=> HNO + NH3
  qf[121] = sc[10] * sc[20];
  qr[121] = sc[9] * sc[21];

  // reaction 112: HNOH + NO2 <=> HNO + HONO
  qf[122] = sc[20] * sc[23];
  qr[122] = sc[21] * sc[24];

  // reaction 114: H + HNO <=> H2 + NO
  qf[123] = sc[2] * sc[21];
  qr[123] = sc[0] * sc[8];

  // reaction 115: HNO + O <=> NO + OH
  qf[124] = sc[3] * sc[21];
  qr[124] = sc[4] * sc[8];

  // reaction 116: HNO + OH <=> H2O + NO
  qf[125] = sc[4] * sc[21];
  qr[125] = sc[6] * sc[8];

  // reaction 117: HNO + HO2 <=> HNO2 + OH
  qf[126] = sc[5] * sc[21];
  qr[126] = sc[4] * sc[25];

  // reaction 118: HNO + O2 <=> HO2 + NO
  qf[127] = sc[1] * sc[21];
  qr[127] = sc[5] * sc[8];

  // reaction 119: 2 HNO <=> H2O + N2O
  qf[128] = (sc[21] * sc[21]);
  qr[128] = sc[6] * sc[28];

  // reaction 120: HNO + NO2 <=> HONO + NO
  qf[129] = sc[21] * sc[23];
  qr[129] = sc[8] * sc[24];

  // reaction 121: HO2 + NO <=> NO2 + OH
  qf[130] = sc[5] * sc[8];
  qr[130] = sc[4] * sc[23];

  // reaction 123: H + NO2 <=> NO + OH
  qf[131] = sc[2] * sc[23];
  qr[131] = sc[4] * sc[8];

  // reaction 124: NO2 + O <=> NO + O2
  qf[132] = sc[3] * sc[23];
  qr[132] = sc[1] * sc[8];

  // reaction 125: HO2 + NO2 <=> HONO + O2
  qf[133] = sc[5] * sc[23];
  qr[133] = sc[1] * sc[24];

  // reaction 126: HO2 + NO2 <=> HNO2 + O2
  qf[134] = sc[5] * sc[23];
  qr[134] = sc[1] * sc[25];

  // reaction 127: 2 NO2 <=> 2 NO + O2
  qf[135] = (sc[23] * sc[23]);
  qr[135] = sc[1] * (sc[8] * sc[8]);

  // reaction 128: 2 NO2 <=> NO + NO3
  qf[136] = (sc[23] * sc[23]);
  qr[136] = sc[8] * sc[26];

  // reaction 130: H2 + NO2 <=> H + HONO
  qf[137] = sc[0] * sc[23];
  qr[137] = sc[2] * sc[24];

  // reaction 131: H2 + NO2 <=> H + HONO
  qf[138] = sc[0] * sc[23];
  qr[138] = sc[2] * sc[24];

  // reaction 132: H + HONO <=> HNO + OH
  qf[139] = sc[2] * sc[24];
  qr[139] = sc[4] * sc[21];

  // reaction 133: H + HONO <=> H2O + NO
  qf[140] = sc[2] * sc[24];
  qr[140] = sc[6] * sc[8];

  // reaction 134: HONO + O <=> NO2 + OH
  qf[141] = sc[3] * sc[24];
  qr[141] = sc[4] * sc[23];

  // reaction 135: HONO + OH <=> H2O + NO2
  qf[142] = sc[4] * sc[24];
  qr[142] = sc[6] * sc[23];

  // reaction 136: HONO + NO2 <=> HONO2 + NO
  qf[143] = sc[23] * sc[24];
  qr[143] = sc[8] * sc[27];

  // reaction 137: 2 HONO <=> H2O + NO + NO2
  qf[144] = (sc[24] * sc[24]);
  qr[144] = sc[6] * sc[8] * sc[23];

  // reaction 139: H2 + NO2 <=> H + HNO2
  qf[145] = sc[0] * sc[23];
  qr[145] = sc[2] * sc[25];

  // reaction 140: HNO2 + O <=> NO2 + OH
  qf[146] = sc[3] * sc[25];
  qr[146] = sc[4] * sc[23];

  // reaction 141: HNO2 + OH <=> H2O + NO2
  qf[147] = sc[4] * sc[25];
  qr[147] = sc[6] * sc[23];

  // reaction 143: H + NO3 <=> NO2 + OH
  qf[148] = sc[2] * sc[26];
  qr[148] = sc[4] * sc[23];

  // reaction 144: NO3 + O <=> NO2 + O2
  qf[149] = sc[3] * sc[26];
  qr[149] = sc[1] * sc[23];

  // reaction 145: NO3 + OH <=> HO2 + NO2
  qf[150] = sc[4] * sc[26];
  qr[150] = sc[5] * sc[23];

  // reaction 146: HO2 + NO3 <=> NO2 + O2 + OH
  qf[151] = sc[5] * sc[26];
  qr[151] = sc[1] * sc[4] * sc[23];

  // reaction 149: H + HONO2 <=> H2 + NO3
  qf[152] = sc[2] * sc[27];
  qr[152] = sc[0] * sc[26];

  // reaction 150: H + HONO2 <=> H2O + NO2
  qf[153] = sc[2] * sc[27];
  qr[153] = sc[6] * sc[23];

  // reaction 151: H + HONO2 <=> HONO + OH
  qf[154] = sc[2] * sc[27];
  qr[154] = sc[4] * sc[24];

  // reaction 152: HONO2 + OH <=> H2O + NO3
  qf[155] = sc[4] * sc[27];
  qr[155] = sc[6] * sc[26];

  // reaction 154: H + N2O <=> N2 + OH
  qf[156] = sc[2] * sc[28];
  qr[156] = sc[4] * sc[29];

  // reaction 155: N2O + O <=> 2 NO
  qf[157] = sc[3] * sc[28];
  qr[157] = (sc[8] * sc[8]);

  // reaction 156: N2O + O <=> N2 + O2
  qf[158] = sc[3] * sc[28];
  qr[158] = sc[1] * sc[29];

  // reaction 157: N2O + OH <=> HO2 + N2
  qf[159] = sc[4] * sc[28];
  qr[159] = sc[5] * sc[29];

  // reaction 158: N2O + OH <=> HNO + NO
  qf[160] = sc[4] * sc[28];
  qr[160] = sc[8] * sc[21];

  // reaction 159: N2O + NO <=> N2 + NO2
  qf[161] = sc[8] * sc[28];
  qr[161] = sc[23] * sc[29];

  // reaction 160: 2 NH2 <=> H2 + N2H2
  qf[162] = (sc[10] * sc[10]);
  qr[162] = sc[0] * sc[16];

  // reaction 161: 2 NH2 <=> H2 + H2NN
  qf[163] = (sc[10] * sc[10]);
  qr[163] = sc[0] * sc[17];

  // reaction 162: NH + NH2 <=> H + N2H2
  qf[164] = sc[10] * sc[11];
  qr[164] = sc[2] * sc[16];

  // reaction 163: HNOH + NH2 <=> N2H3 + OH
  qf[165] = sc[10] * sc[20];
  qr[165] = sc[4] * sc[15];

  // reaction 164: HNOH + NH2 <=> H2NN + H2O
  qf[166] = sc[10] * sc[20];
  qr[166] = sc[6] * sc[17];

  // reaction 166: N2H4 <=> H2 + H2NN
  qf[167] = sc[14];
  qr[167] = sc[0] * sc[17];

  // reaction 167: H + N2H4 <=> H2 + N2H3
  qf[168] = sc[2] * sc[14];
  qr[168] = sc[0] * sc[15];

  // reaction 168: H + N2H4 <=> NH2 + NH3
  qf[169] = sc[2] * sc[14];
  qr[169] = sc[9] * sc[10];

  // reaction 169: N2H4 + O <=> N2H3 + OH
  qf[170] = sc[3] * sc[14];
  qr[170] = sc[4] * sc[15];

  // reaction 170: N2H4 + O <=> H2O + N2H2
  qf[171] = sc[3] * sc[14];
  qr[171] = sc[6] * sc[16];

  // reaction 171: N2H4 + OH <=> H2O + N2H3
  qf[172] = sc[4] * sc[14];
  qr[172] = sc[6] * sc[15];

  // reaction 172: N2H4 + NH2 <=> N2H3 + NH3
  qf[173] = sc[10] * sc[14];
  qr[173] = sc[9] * sc[15];

  // reaction 173: N2H4 + NO <=> HNO + N2H3
  qf[174] = sc[8] * sc[14];
  qr[174] = sc[15] * sc[21];

  // reaction 174: N2H4 + NO2 <=> HONO + N2H3
  qf[175] = sc[14] * sc[23];
  qr[175] = sc[15] * sc[24];

  // reaction 175: N2H4 + NO2 <=> HNO2 + N2H3
  qf[176] = sc[14] * sc[23];
  qr[176] = sc[15] * sc[25];

  // reaction 176: H + N2H2 <=> N2H3
  qf[177] = sc[2] * sc[16];
  qr[177] = sc[15];

  // reaction 177: H + N2H3 <=> H2 + N2H2
  qf[178] = sc[2] * sc[15];
  qr[178] = sc[0] * sc[16];

  // reaction 178: N2H3 + O <=> N2H2 + OH
  qf[179] = sc[3] * sc[15];
  qr[179] = sc[4] * sc[16];

  // reaction 179: N2H3 + O <=> HNO + NH2
  qf[180] = sc[3] * sc[15];
  qr[180] = sc[10] * sc[21];

  // reaction 180: N2H3 + O => H + NH2 + NO
  qf[181] = sc[3] * sc[15];
  qr[181] = 0.0;

  // reaction 181: N2H3 + OH <=> H2O + N2H2
  qf[182] = sc[4] * sc[15];
  qr[182] = sc[6] * sc[16];

  // reaction 182: N2H3 + OH <=> H2NN + H2O
  qf[183] = sc[4] * sc[15];
  qr[183] = sc[6] * sc[17];

  // reaction 183: N2H3 + OH <=> HNO + NH3
  qf[184] = sc[4] * sc[15];
  qr[184] = sc[9] * sc[21];

  // reaction 184: HO2 + N2H3 <=> H2O2 + N2H2
  qf[185] = sc[5] * sc[15];
  qr[185] = sc[7] * sc[16];

  // reaction 185: HO2 + N2H3 <=> N2H4 + O2
  qf[186] = sc[5] * sc[15];
  qr[186] = sc[1] * sc[14];

  // reaction 186: N2H3 + NH2 <=> N2H2 + NH3
  qf[187] = sc[10] * sc[15];
  qr[187] = sc[9] * sc[16];

  // reaction 187: N2H3 + NH2 <=> H2NN + NH3
  qf[188] = sc[10] * sc[15];
  qr[188] = sc[9] * sc[17];

  // reaction 188: N2H3 + NH <=> N2H2 + NH2
  qf[189] = sc[11] * sc[15];
  qr[189] = sc[10] * sc[16];

  // reaction 190: H + N2H2 <=> H2 + NNH
  qf[190] = sc[2] * sc[16];
  qr[190] = sc[0] * sc[13];

  // reaction 191: N2H2 + O <=> NNH + OH
  qf[191] = sc[3] * sc[16];
  qr[191] = sc[4] * sc[13];

  // reaction 192: N2H2 + O <=> NH2 + NO
  qf[192] = sc[3] * sc[16];
  qr[192] = sc[8] * sc[10];

  // reaction 193: N2H2 + OH <=> H2O + NNH
  qf[193] = sc[4] * sc[16];
  qr[193] = sc[6] * sc[13];

  // reaction 194: N2H2 + NH2 <=> NH3 + NNH
  qf[194] = sc[10] * sc[16];
  qr[194] = sc[9] * sc[13];

  // reaction 195: N2H2 + NH <=> NH2 + NNH
  qf[195] = sc[11] * sc[16];
  qr[195] = sc[10] * sc[13];

  // reaction 196: N2H2 + NO <=> N2O + NH2
  qf[196] = sc[8] * sc[16];
  qr[196] = sc[10] * sc[28];

  // reaction 197: H2NN <=> H + NNH
  qf[197] = sc[17];
  qr[197] = sc[2] * sc[13];

  // reaction 198: H2NN <=> H2 + N2
  qf[198] = sc[17];
  qr[198] = sc[0] * sc[29];

  // reaction 199: H2NN <=> N2H2
  qf[199] = sc[17];
  qr[199] = sc[16];

  // reaction 200: H + H2NN <=> H2 + NNH
  qf[200] = sc[2] * sc[17];
  qr[200] = sc[0] * sc[13];

  // reaction 201: H + H2NN <=> H + N2H2
  qf[201] = sc[2] * sc[17];
  qr[201] = sc[2] * sc[16];

  // reaction 202: H2NN + O <=> NNH + OH
  qf[202] = sc[3] * sc[17];
  qr[202] = sc[4] * sc[13];

  // reaction 203: H2NN + O <=> NH2 + NO
  qf[203] = sc[3] * sc[17];
  qr[203] = sc[8] * sc[10];

  // reaction 204: H2NN + OH <=> H2O + NNH
  qf[204] = sc[4] * sc[17];
  qr[204] = sc[6] * sc[13];

  // reaction 205: H2NN + OH => H + NH2 + NO
  qf[205] = sc[4] * sc[17];
  qr[205] = 0.0;

  // reaction 206: H2NN + HO2 => NH2 + NO + OH
  qf[206] = sc[5] * sc[17];
  qr[206] = 0.0;

  // reaction 207: H2NN + HO2 <=> H2O2 + NNH
  qf[207] = sc[5] * sc[17];
  qr[207] = sc[7] * sc[13];

  // reaction 208: H2NN + O2 <=> NH2 + NO2
  qf[208] = sc[1] * sc[17];
  qr[208] = sc[10] * sc[23];

  // reaction 209: H2NN + NH2 <=> NH3 + NNH
  qf[209] = sc[10] * sc[17];
  qr[209] = sc[9] * sc[13];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 30; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[30];
  gibbs(g_RT, T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  H + O2 <=> O + OH
  k_f = 100000000 * exp(-(7692.16995349094) * invT);
  qf[22] *= k_f;
  qr[22] *= k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[3] - g_RT[4]));
  // reaction 1:  H2 + O <=> H + OH
  k_f = 3800000 * exp(-(3999.56605981591) * invT);
  qf[23] *= k_f;
  qr[23] *= k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[3] - g_RT[4]));
  // reaction 2:  H2 + O <=> H + OH
  k_f = 880000000 * exp(-(9649.1795668055) * invT);
  qf[24] *= k_f;
  qr[24] *= k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[3] - g_RT[4]));
  // reaction 3:  H2 + OH <=> H + H2O
  k_f = 220 * exp((1.51) * logT - (1726.03316371019) * invT);
  qf[25] *= k_f;
  qr[25] *= k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[4] - g_RT[6]));
  // reaction 4:  2 OH <=> H2O + O
  k_f = 20 * exp((1.651) * logT - (317.529716122778) * invT);
  qf[26] *= k_f;
  qr[26] *= k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[6]));
  // reaction 5:  2 OH <=> H2O + O
  k_f = 260000 * exp((-0.057) * logT - (-416.160182620503) * invT);
  qf[27] *= k_f;
  qr[27] *= k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[6]));
  // reaction 6:  H2 + M <=> 2 H + M
  k_f = 46000000000000 * exp((-1.4) * logT - (52525.7555766966) * invT);
  Corr = mixture + (1.5) * sc[0] + (11) * sc[6];
  qf[12] *= Corr * k_f;
  qr[12] *= Corr * k_f * exp(-(g_RT[0] - 2.000000 * g_RT[2])) * (refCinv);
  // reaction 7:  H + O + M <=> OH + M
  k_f = 4700000 * exp((-1) * logT);
  Corr = mixture + (1.5) * sc[0] + (11) * sc[6];
  qf[13] *= Corr * k_f;
  qr[13] *= Corr * k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[4])) * (refC);
  // reaction 8:  2 O + M <=> O2 + M
  k_f = 19 * exp(-(-899.751398458839) * invT);
  Corr = mixture + (1.5) * sc[0] + (11) * sc[6];
  qf[14] *= Corr * k_f;
  qr[14] *= Corr * k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[3])) * (refC);
  // reaction 9:  H2O + M <=> H + OH + M
  k_f = 6.1e+21 * exp((-3.322) * logT - (60783.5410625521) * invT);
  Corr = mixture + (2) * sc[0] + (0.5) * sc[1] + (-1) * sc[6] + sc[29];
  qf[15] *= Corr * k_f;
  qr[15] *= Corr * k_f * exp(-(-g_RT[2] - g_RT[4] + g_RT[6])) * (refCinv);
  // reaction 10:  H2O + H2O <=> H + OH + H2O
  k_f = 1e+20 * exp((-2.44) * logT - (60476.5788964112) * invT);
  qf[16] *= k_f;
  qr[16] *= k_f * exp(-(-g_RT[2] - g_RT[4] + g_RT[6])) * (refCinv);
  // reaction 11:  H + O2 (+M) <=> HO2 (+M)
  k_f = 4700000 * exp((0.44) * logT);
  Corr = mixture + sc[0] + (-0.22) * sc[1] + (13) * sc[6];
  redP = Corr / k_f * 636600000 * exp(-1.72 * logT - (264.088106214317) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10((0.5) * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[5])) * (refC);
  // reaction 12:  H + HO2 <=> H2 + O2
  k_f = 2.8 * exp((2.09) * logT - (-730.167382082648) * invT);
  qf[28] *= k_f;
  qr[28] *= k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[5]));
  // reaction 13:  H + HO2 <=> 2 OH
  k_f = 71000000 * exp(-(148.448916412392) * invT);
  qf[29] *= k_f;
  qr[29] *= k_f * exp(-(g_RT[2] - 2.000000 * g_RT[4] + g_RT[5]));
  // reaction 14:  H + HO2 <=> H2O + O
  k_f = 1400000;
  qf[30] *= k_f;
  qr[30] *= k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[5] - g_RT[6]));
  // reaction 15:  HO2 + O <=> O2 + OH
  k_f = 29000 * exp((1) * logT - (-364.328866042617) * invT);
  qf[31] *= k_f;
  qr[31] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[5]));
  // reaction 16:  HO2 + OH <=> H2O + O2
  k_f = 190000000000000 * exp((-2.49) * logT - (293.878532829956) * invT);
  qf[32] *= k_f;
  qr[32] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[5] - g_RT[6]));
  // reaction 17:  HO2 + OH <=> H2O + O2
  k_f = 1200 * exp((1.24) * logT - (-659.213832204183) * invT);
  qf[33] *= k_f;
  qr[33] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[5] - g_RT[6]));
  // reaction 18:  2 HO2 <=> H2O2 + O2
  k_f = 1200 * exp((0.771) * logT - (-918.370415093613) * invT);
  qf[34] *= k_f;
  qr[34] *= k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[5] - g_RT[7]));
  // reaction 19:  2 HO2 <=> H2O2 + O2
  k_f = 1300000 * exp((0.295) * logT - (3722.29367695751) * invT);
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[5] - g_RT[7]));
  // reaction 20:  H2O2 (+M) <=> 2 OH (+M)
  k_f = 2000000000000 * exp((0.9) * logT - (24531.3092413143) * invT);
  Corr = mixture + (2.7) * sc[0] + (0.2) * sc[1] + (6.5) * sc[6] +
         (6.7) * sc[7] + (0.5) * sc[29];
  redP = Corr / k_f * 2.5e+18 * exp(-2.3 * logT - (24531.3092413143) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10((0.57) * exp(-T * 1e+30) + 0.43 * exp(-T * 1e-30) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(-2.000000 * g_RT[4] + g_RT[7])) * (refCinv);
  // reaction 21:  H + H2O2 <=> H2O + OH
  k_f = 24000000 * exp(-(1997.77016324474) * invT);
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7]));
  // reaction 22:  H + H2O2 <=> H2 + HO2
  k_f = 48000000 * exp(-(4000.57249314752) * invT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[7]));
  // reaction 23:  H2O2 + O <=> HO2 + OH
  k_f = 9.6 * exp((2) * logT - (1997.77016324474) * invT);
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[5] + g_RT[7]));
  // reaction 24:  H2O2 + OH <=> H2O + HO2
  k_f = 1700000 * exp(-(160.022899725901) * invT);
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]));
  // reaction 25:  H2O2 + OH <=> H2O + HO2
  k_f = 76000000 * exp(-(3658.38516040031) * invT);
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]));
  // reaction 26:  H + NH2 (+M) <=> NH3 (+M)
  k_f = 160000000;
  Corr = mixture;
  redP = Corr / k_f * 36000000000 * exp(-1.76 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent =
    log10((0.5) * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[2] - g_RT[9] + g_RT[10])) * (refC);
  // reaction 27:  H + NH3 <=> H2 + NH2
  k_f = 0.64 * exp((2.39) * logT - (5118.2167078998) * invT);
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[9] - g_RT[10]));
  // reaction 28:  NH3 + O <=> NH2 + OH
  k_f = 9.4 * exp((1.94) * logT - (3250.77966109849) * invT);
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[9] - g_RT[10]));
  // reaction 29:  NH3 + OH <=> H2O + NH2
  k_f = 2 * exp((2.04) * logT - (284.820632845471) * invT);
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[9] - g_RT[10]));
  // reaction 30:  HO2 + NH3 <=> H2O2 + NH2
  k_f = 300000 * exp(-(11070.7666477038) * invT);
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[9] - g_RT[10]));
  // reaction 31:  H2 + NH <=> H + NH2
  k_f = 21000000 * exp(-(7758.09133671136) * invT);
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(g_RT[0] - g_RT[2] - g_RT[10] + g_RT[11]));
  // reaction 32:  NH2 + O <=> H + HNO
  k_f = 660000000 * exp((-0.5) * logT);
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[21]));
  // reaction 33:  NH2 + O <=> NH + OH
  k_f = 7000000;
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[11]));
  // reaction 34:  NH2 + O <=> NH + OH
  k_f = 8.6e-07 * exp((4.01) * logT - (841.881481891296) * invT);
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[11]));
  // reaction 35:  NH2 + OH <=> H2O + NH
  k_f = 3.3 * exp((1.949) * logT - (-109.198016479624) * invT);
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[10] - g_RT[11]));
  // reaction 36:  HO2 + NH2 <=> NH3 + O2
  k_f = 0.017 * exp((1.55) * logT - (1020.02018158617) * invT);
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT[10]));
  // reaction 37:  HO2 + NH2 <=> H2NO + OH
  k_f = 250000000000 * exp((-1.28) * logT - (586.750632328303) * invT);
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[10] - g_RT[19]));
  // reaction 38:  HO2 + NH2 <=> H2O + HNO
  k_f = 16 * exp((0.55) * logT - (264.188749547478) * invT);
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[21]));
  // reaction 39:  HO2 + NH2 <=> H2O + HNO
  k_f = 5700000000 * exp((-1.12) * logT - (355.774182723937) * invT);
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[21]));
  // reaction 40:  HO2 + NH2 <=> H2O + HON
  k_f = 21 * exp((0.64) * logT - (408.108715967628) * invT);
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[22]));
  // reaction 41:  NH2 + O2 <=> H2NO + O
  k_f = 260000 * exp((0.487) * logT - (14618.4441416271) * invT);
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(g_RT[1] - g_RT[3] + g_RT[10] - g_RT[19]));
  // reaction 42:  NH2 + O2 <=> HNO + OH
  k_f = 2.9e-08 * exp((3.764) * logT - (9150.99506765883) * invT);
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(g_RT[1] - g_RT[4] + g_RT[10] - g_RT[21]));
  // reaction 43:  2 NH2 <=> NH + NH3
  k_f = 5.6e-06 * exp((3.53) * logT - (277.775599524205) * invT);
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(-g_RT[9] + 2.000000 * g_RT[10] - g_RT[11]));
  // reaction 44:  NH + NH2 <=> N + NH3
  k_f = 0.0096 * exp((2.46) * logT - (53.844183241105) * invT);
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[11] - g_RT[12]));
  // reaction 45:  N + NH2 <=> 2 H + N2
  k_f = 70000000;
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(-2.000000 * g_RT[2] + g_RT[10] + g_RT[12] - g_RT[29])) *
            (refCinv);
  // reaction 46:  HNO + NH2 <=> NH3 + NO
  k_f = 0.00059 * exp((2.95) * logT - (-1745.65861367657) * invT);
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(-g_RT[8] - g_RT[9] + g_RT[10] + g_RT[21]));
  // reaction 47:  NH2 + NO <=> H2O + N2
  k_f = 26000000000000 * exp((-2.369) * logT - (437.798499250106) * invT);
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(-g_RT[6] + g_RT[8] + g_RT[10] - g_RT[29]));
  // reaction 48:  NH2 + NO <=> NNH + OH
  k_f = 43000 * exp((0.294) * logT - (-435.785632586887) * invT);
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(-g_RT[4] + g_RT[8] + g_RT[10] - g_RT[13]));
  // reaction 49:  HONO + NH2 <=> NH3 + NO2
  k_f = 7.1e-05 * exp((3.02) * logT - (-2485.89032907532) * invT);
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(-g_RT[9] + g_RT[10] - g_RT[23] + g_RT[24]));
  // reaction 50:  NH2 + NO2 <=> H2NO + NO
  k_f = 860000 * exp((0.11) * logT - (-596.814965644398) * invT);
  qf[64] *= k_f;
  qr[64] *= k_f * exp(-(-g_RT[8] + g_RT[10] - g_RT[19] + g_RT[23]));
  // reaction 51:  NH2 + NO2 <=> H2O + N2O
  k_f = 220000 * exp((0.11) * logT - (-596.814965644398) * invT);
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(-g_RT[6] + g_RT[10] + g_RT[23] - g_RT[28]));
  // reaction 52:  H + NH <=> H2 + N
  k_f = 30000000;
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[12]));
  // reaction 53:  NH + O <=> H + NO
  k_f = 92000000;
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[8] + g_RT[11]));
  // reaction 54:  NH + OH <=> H + HNO
  k_f = 320000000 * exp((-0.376) * logT - (-23.1479666270171) * invT);
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[11] - g_RT[21]));
  // reaction 55:  NH + OH <=> H2O + N
  k_f = 16 * exp((1.733) * logT - (-289.852799503519) * invT);
  qf[69] *= k_f;
  qr[69] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[11] - g_RT[12]));
  // reaction 56:  NH + O2 <=> HNO + O
  k_f = 24000000 * exp(-(6969.55082139537) * invT);
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(g_RT[1] - g_RT[3] + g_RT[11] - g_RT[21]));
  // reaction 57:  NH + O2 <=> NO + OH
  k_f = 99000 * exp(-(769.921498681221) * invT);
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[8] + g_RT[11]));
  // reaction 58:  2 NH <=> N + NH2
  k_f = 5.7e-07 * exp((3.88) * logT - (172.100099705214) * invT);
  qf[72] *= k_f;
  qr[72] *= k_f * exp(-(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[12]));
  // reaction 59:  N + NH <=> H + N2
  k_f = 30000000;
  qf[73] *= k_f;
  qr[73] *= k_f * exp(-(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[29]));
  // reaction 60:  NH + NO <=> H + N2O
  k_f = 2700000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
  qf[74] *= k_f;
  qr[74] *= k_f * exp(-(-g_RT[2] + g_RT[8] + g_RT[11] - g_RT[28]));
  // reaction 61:  NH + NO <=> N2 + OH
  k_f = 680000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
  qf[75] *= k_f;
  qr[75] *= k_f * exp(-(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT[29]));
  // reaction 62:  HONO + NH <=> NH2 + NO2
  k_f = 10000000;
  qf[76] *= k_f;
  qr[76] *= k_f * exp(-(-g_RT[10] + g_RT[11] - g_RT[23] + g_RT[24]));
  // reaction 63:  NH + NO2 <=> N2O + OH
  k_f = 4100000;
  qf[77] *= k_f;
  qr[77] *= k_f * exp(-(-g_RT[4] + g_RT[11] + g_RT[23] - g_RT[28]));
  // reaction 64:  NH + NO2 <=> HNO + NO
  k_f = 5900000;
  qf[78] *= k_f;
  qr[78] *= k_f * exp(-(-g_RT[8] + g_RT[11] - g_RT[21] + g_RT[23]));
  // reaction 65:  N + OH <=> H + NO
  k_f = 38000000;
  qf[79] *= k_f;
  qr[79] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[8] + g_RT[12]));
  // reaction 66:  N + O2 <=> NO + O
  k_f = 5900 * exp((1) * logT - (3160.20066125364) * invT);
  qf[80] *= k_f;
  qr[80] *= k_f * exp(-(g_RT[1] - g_RT[3] - g_RT[8] + g_RT[12]));
  // reaction 67:  N + NO <=> N2 + O
  k_f = 9400000 * exp((0.14) * logT);
  qf[81] *= k_f;
  qr[81] *= k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[12] - g_RT[29]));
  // reaction 68:  NNH <=> H + N2
  k_f = 1000000000;
  qf[82] *= k_f;
  qr[82] *= k_f * exp(-(-g_RT[2] + g_RT[13] - g_RT[29])) * (refCinv);
  // reaction 69:  H + NNH <=> H2 + N2
  k_f = 100000000;
  qf[83] *= k_f;
  qr[83] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[13] - g_RT[29]));
  // reaction 70:  NNH + O <=> H + N2O
  k_f = 190000000 * exp((-0.274) * logT - (-11.0707666477038) * invT);
  qf[84] *= k_f;
  qr[84] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[13] - g_RT[28]));
  // reaction 71:  NNH + O <=> N2 + OH
  k_f = 12000000 * exp((0.145) * logT - (-109.198016479624) * invT);
  qf[85] *= k_f;
  qr[85] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[13] - g_RT[29]));
  // reaction 72:  NNH + O <=> NH + NO
  k_f = 520000 * exp((0.381) * logT - (-205.81561631413) * invT);
  qf[86] *= k_f;
  qr[86] *= k_f * exp(-(g_RT[3] - g_RT[8] - g_RT[11] + g_RT[13]));
  // reaction 73:  NNH + OH <=> H2O + N2
  k_f = 50000000;
  qf[87] *= k_f;
  qr[87] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[13] - g_RT[29]));
  // reaction 74:  NNH + O2 <=> HO2 + N2
  k_f = 560000000 * exp((-0.385) * logT - (-6.54181665546136) * invT);
  qf[88] *= k_f;
  qr[88] *= k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[13] - g_RT[29]));
  // reaction 75:  NH + NNH <=> N2 + NH2
  k_f = 50000000;
  qf[89] *= k_f;
  qr[89] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[13] - g_RT[29]));
  // reaction 76:  NH2 + NNH <=> N2 + NH3
  k_f = 50000000;
  qf[90] *= k_f;
  qr[90] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[13] - g_RT[29]));
  // reaction 77:  NNH + NO <=> HNO + N2
  k_f = 50000000;
  qf[91] *= k_f;
  qr[91] *= k_f * exp(-(g_RT[8] + g_RT[13] - g_RT[21] - g_RT[29]));
  // reaction 78:  NH2OH (+M) <=> NH2 + OH (+M)
  k_f = 1.4e+20 * exp((-1.31) * logT - (32246.1239447664) * invT);
  Corr = mixture;
  redP = Corr / k_f * 5.4e+31 * exp(-5.96 * logT - (33606.3185924366) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.69) * exp(-T * 1e+30) + 0.31 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(-g_RT[4] - g_RT[10] + g_RT[18])) * (refCinv);
  // reaction 79:  H + NH2OH <=> H2 + HNOH
  k_f = 480 * exp((1.5) * logT - (3144.60094461369) * invT);
  qf[92] *= k_f;
  qr[92] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[18] - g_RT[20]));
  // reaction 80:  H + NH2OH <=> H2 + H2NO
  k_f = 240 * exp((1.5) * logT - (2549.79884563251) * invT);
  qf[93] *= k_f;
  qr[93] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[18] - g_RT[19]));
  // reaction 81:  NH2OH + O <=> HNOH + OH
  k_f = 330 * exp((1.5) * logT - (1944.93241333524) * invT);
  qf[94] *= k_f;
  qr[94] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[18] - g_RT[20]));
  // reaction 82:  NH2OH + O <=> H2NO + OH
  k_f = 170 * exp((1.5) * logT - (1514.68216407221) * invT);
  qf[95] *= k_f;
  qr[95] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[18] - g_RT[19]));
  // reaction 83:  NH2OH + OH <=> H2O + HNOH
  k_f = 0.015 * exp((2.61) * logT - (-1779.87734695129) * invT);
  qf[96] *= k_f;
  qr[96] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[18] - g_RT[20]));
  // reaction 84:  NH2OH + OH <=> H2NO + H2O
  k_f = 0.15 * exp((2.28) * logT - (-652.168798882917) * invT);
  qf[97] *= k_f;
  qr[97] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[18] - g_RT[19]));
  // reaction 85:  NH2 + NH2OH <=> HNOH + NH3
  k_f = 1.1e-07 * exp((4) * logT - (-48.8120165830578) * invT);
  qf[98] *= k_f;
  qr[98] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[20]));
  // reaction 86:  NH2 + NH2OH <=> H2NO + NH3
  k_f = 9.5e-06 * exp((3.42) * logT - (-509.758482460181) * invT);
  qf[99] *= k_f;
  qr[99] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[19]));
  // reaction 87:  NH + NH2OH <=> HNOH + NH2
  k_f = 2.9e-09 * exp((4.4) * logT - (787.030865318582) * invT);
  qf[100] *= k_f;
  qr[100] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[18] - g_RT[20]));
  // reaction 88:  NH + NH2OH <=> H2NO + NH2
  k_f = 1.5e-09 * exp((4.6) * logT - (1219.79719791064) * invT);
  qf[101] *= k_f;
  qr[101] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[18] - g_RT[19]));
  // reaction 89:  HO2 + NH2OH <=> H2O2 + HNOH
  k_f = 0.029 * exp((2.69) * logT - (4809.24167509571) * invT);
  qf[102] *= k_f;
  qr[102] *= k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[18] - g_RT[20]));
  // reaction 90:  HO2 + NH2OH <=> H2NO + H2O2
  k_f = 0.014 * exp((2.69) * logT - (3229.64456113469) * invT);
  qf[103] *= k_f;
  qr[103] *= k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[18] - g_RT[19]));
  // reaction 91:  H2NO + M <=> H + HNO + M
  k_f = 2.8e+18 * exp((-2.83) * logT - (32666.3098607134) * invT);
  Corr = mixture + (9) * sc[6];
  qf[17] *= Corr * k_f;
  qr[17] *= Corr * k_f * exp(-(-g_RT[2] + g_RT[19] - g_RT[21])) * (refCinv);
  // reaction 92:  H2NO + M <=> HNOH + M
  k_f = 1.1e+23 * exp((-4) * logT - (22141.5332954077) * invT);
  Corr = mixture + (9) * sc[6];
  qf[18] *= Corr * k_f;
  qr[18] *= Corr * k_f * exp(-(g_RT[19] - g_RT[20]));
  // reaction 93:  H + H2NO <=> H2 + HNO
  k_f = 30 * exp((2) * logT - (1006.43333160944) * invT);
  qf[104] *= k_f;
  qr[104] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[19] - g_RT[21]));
  // reaction 94:  H + H2NO <=> NH2 + OH
  k_f = 50000000;
  qf[105] *= k_f;
  qr[105] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[19]));
  // reaction 95:  H2NO + O <=> HNO + OH
  k_f = 30 * exp((2) * logT - (1006.43333160944) * invT);
  qf[106] *= k_f;
  qr[106] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[19] - g_RT[21]));
  // reaction 96:  H2NO + OH <=> H2O + HNO
  k_f = 100000000;
  qf[107] *= k_f;
  qr[107] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[19] - g_RT[21]));
  // reaction 97:  H2NO + HO2 <=> H2O2 + HNO
  k_f = 0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[108] *= k_f;
  qr[108] *= k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[19] - g_RT[21]));
  // reaction 98:  H2NO + O2 <=> HNO + HO2
  k_f = 0.00023 * exp((2.994) * logT - (8303.07498577788) * invT);
  qf[109] *= k_f;
  qr[109] *= k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[19] - g_RT[21]));
  // reaction 99:  H2NO + NH2 <=> HNO + NH3
  k_f = 3000000 * exp(-(503.21666580472) * invT);
  qf[110] *= k_f;
  qr[110] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[19] - g_RT[21]));
  // reaction 100:  H2NO + NO <=> 2 HNO
  k_f = 0.02 * exp((2) * logT - (6541.81665546136) * invT);
  qf[111] *= k_f;
  qr[111] *= k_f * exp(-(g_RT[8] + g_RT[19] - 2.000000 * g_RT[21]));
  // reaction 101:  H2NO + NO2 <=> HNO + HONO
  k_f = 0.044 * exp((2.64) * logT - (2032.99532985107) * invT);
  qf[112] *= k_f;
  qr[112] *= k_f * exp(-(g_RT[19] - g_RT[21] + g_RT[23] - g_RT[24]));
  // reaction 102:  HNOH + M <=> H + HNO + M
  k_f = 2e+18 * exp((-2.84) * logT - (29656.5709825354) * invT);
  Corr = mixture + (9) * sc[6];
  qf[19] *= Corr * k_f;
  qr[19] *= Corr * k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[21])) * (refCinv);
  // reaction 103:  H + HNOH <=> NH2 + OH
  k_f = 40000000;
  qf[113] *= k_f;
  qr[113] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[20]));
  // reaction 104:  H + HNOH <=> H2 + HNO
  k_f = 480 * exp((1.5) * logT - (190.215899674184) * invT);
  qf[114] *= k_f;
  qr[114] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[20] - g_RT[21]));
  // reaction 105:  HNOH + O <=> HNO + OH
  k_f = 70000000;
  qf[115] *= k_f;
  qr[115] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[20] - g_RT[21]));
  // reaction 106:  HNOH + O <=> HNO + OH
  k_f = 330 * exp((1.5) * logT - (-180.15156635809) * invT);
  qf[116] *= k_f;
  qr[116] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[20] - g_RT[21]));
  // reaction 107:  HNOH + OH <=> H2O + HNO
  k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
  qf[117] *= k_f;
  qr[117] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[21]));
  // reaction 108:  HNOH + HO2 <=> H2O2 + HNO
  k_f = 0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[118] *= k_f;
  qr[118] *= k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[20] - g_RT[21]));
  // reaction 109:  HNOH + HO2 <=> NH2OH + O2
  k_f = 0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[119] *= k_f;
  qr[119] *= k_f * exp(-(-g_RT[1] + g_RT[5] - g_RT[18] + g_RT[20]));
  // reaction 110:  HNOH + O2 <=> HNO + HO2
  k_f = 3000000 * exp(-(12580.416645118) * invT);
  qf[120] *= k_f;
  qr[120] *= k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[20] - g_RT[21]));
  // reaction 111:  HNOH + NH2 <=> HNO + NH3
  k_f = 1.8 * exp((1.94) * logT - (-579.705599007037) * invT);
  qf[121] *= k_f;
  qr[121] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[20] - g_RT[21]));
  // reaction 112:  HNOH + NO2 <=> HNO + HONO
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  qf[122] *= k_f;
  qr[122] *= k_f * exp(-(g_RT[20] - g_RT[21] + g_RT[23] - g_RT[24]));
  // reaction 113:  H + NO (+M) <=> HNO (+M)
  k_f = 1500000000 * exp((-0.41) * logT);
  Corr = mixture + (0.6) * sc[29];
  redP = Corr / k_f * 240 * exp(0.206 * logT - (-779.985831997315) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.18) * exp(-T * 1e+30) + 0.82 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(g_RT[2] + g_RT[8] - g_RT[21])) * (refC);
  // reaction 114:  H + HNO <=> H2 + NO
  k_f = 66000 * exp((0.94) * logT - (249.092249573336) * invT);
  qf[123] *= k_f;
  qr[123] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[8] + g_RT[21]));
  // reaction 115:  HNO + O <=> NO + OH
  k_f = 23000000;
  qf[124] *= k_f;
  qr[124] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[8] + g_RT[21]));
  // reaction 116:  HNO + OH <=> H2O + NO
  k_f = 1200 * exp((1.189) * logT - (168.074366378776) * invT);
  qf[125] *= k_f;
  qr[125] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[8] + g_RT[21]));
  // reaction 117:  HNO + HO2 <=> HNO2 + OH
  k_f = 0.002 * exp((2.36) * logT - (4518.88565892638) * invT);
  qf[126] *= k_f;
  qr[126] *= k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[21] - g_RT[25]));
  // reaction 118:  HNO + O2 <=> HO2 + NO
  k_f = 20000000 * exp(-(8051.46665287552) * invT);
  qf[127] *= k_f;
  qr[127] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[8] + g_RT[21]));
  // reaction 119:  2 HNO <=> H2O + N2O
  k_f = 900 * exp(-(1559.97166399463) * invT);
  qf[128] *= k_f;
  qr[128] *= k_f * exp(-(-g_RT[6] + 2.000000 * g_RT[21] - g_RT[28]));
  // reaction 120:  HNO + NO2 <=> HONO + NO
  k_f = 0.044 * exp((2.64) * logT - (2032.99532985107) * invT);
  qf[129] *= k_f;
  qr[129] *= k_f * exp(-(-g_RT[8] + g_RT[21] + g_RT[23] - g_RT[24]));
  // reaction 121:  HO2 + NO <=> NO2 + OH
  k_f = 2100000 * exp(-(-250.098682904946) * invT);
  qf[130] *= k_f;
  qr[130] *= k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[8] - g_RT[23]));
  // reaction 122:  NO + O (+M) <=> NO2 (+M)
  k_f = 1300000000 * exp((-0.75) * logT);
  Corr = mixture;
  redP =
    Corr / k_f * 4720000000000 * exp(-2.87 * logT - (779.985831997315) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.25) * exp(-T * 0.001) + 0.75 * exp(-T * 1e-05) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(g_RT[3] + g_RT[8] - g_RT[23])) * (refC);
  // reaction 123:  H + NO2 <=> NO + OH
  k_f = 130000000 * exp(-(182.164433021309) * invT);
  qf[131] *= k_f;
  qr[131] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[8] + g_RT[23]));
  // reaction 124:  NO2 + O <=> NO + O2
  k_f = 110000000 * exp((-0.52) * logT);
  qf[132] *= k_f;
  qr[132] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[8] + g_RT[23]));
  // reaction 125:  HO2 + NO2 <=> HONO + O2
  k_f = 1.9e-06 * exp((3.32) * logT - (1531.79153070957) * invT);
  qf[133] *= k_f;
  qr[133] *= k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[23] - g_RT[24]));
  // reaction 126:  HO2 + NO2 <=> HNO2 + O2
  k_f = 1.9e-05 * exp((3.26) * logT - (2507.52864570492) * invT);
  qf[134] *= k_f;
  qr[134] *= k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[23] - g_RT[25]));
  // reaction 127:  2 NO2 <=> 2 NO + O2
  k_f = 4500000 * exp(-(13888.2767595445) * invT);
  qf[135] *= k_f;
  qr[135] *= k_f * exp(-(-g_RT[1] - 2.000000 * g_RT[8] + 2.000000 * g_RT[23])) *
             (refCinv);
  // reaction 128:  2 NO2 <=> NO + NO3
  k_f = 9600 * exp((0.73) * logT - (10517.2283153186) * invT);
  qf[136] *= k_f;
  qr[136] *= k_f * exp(-(-g_RT[8] + 2.000000 * g_RT[23] - g_RT[26]));
  // reaction 129:  NO + OH (+M) <=> HONO (+M)
  k_f = 110000000 * exp((-0.3) * logT);
  Corr = mixture;
  redP = Corr / k_f * 339200000000 * exp(-2.5 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.25) * exp(-T * 1e+30) + 0.75 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[4] + g_RT[8] - g_RT[24])) * (refC);
  // reaction 130:  H2 + NO2 <=> H + HONO
  k_f = 1.8e-05 * exp((3.51) * logT - (13234.5983106641) * invT);
  qf[137] *= k_f;
  qr[137] *= k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[24]));
  // reaction 131:  H2 + NO2 <=> H + HONO
  k_f = 2.4e-05 * exp((3.62) * logT - (18015.156635809) * invT);
  qf[138] *= k_f;
  qr[138] *= k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[24]));
  // reaction 132:  H + HONO <=> HNO + OH
  k_f = 56000 * exp((0.86) * logT - (2516.0833290236) * invT);
  qf[139] *= k_f;
  qr[139] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[24]));
  // reaction 133:  H + HONO <=> H2O + NO
  k_f = 8.1 * exp((1.89) * logT - (1937.38416334817) * invT);
  qf[140] *= k_f;
  qr[140] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[8] + g_RT[24]));
  // reaction 134:  HONO + O <=> NO2 + OH
  k_f = 12000000 * exp(-(2999.17132819613) * invT);
  qf[141] *= k_f;
  qr[141] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24]));
  // reaction 135:  HONO + OH <=> H2O + NO2
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  qf[142] *= k_f;
  qr[142] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[23] + g_RT[24]));
  // reaction 136:  HONO + NO2 <=> HONO2 + NO
  k_f = 200000 * exp(-(16455.1849718143) * invT);
  qf[143] *= k_f;
  qr[143] *= k_f * exp(-(-g_RT[8] + g_RT[23] + g_RT[24] - g_RT[27]));
  // reaction 137:  2 HONO <=> H2O + NO + NO2
  k_f = 3.5e-07 * exp((3.64) * logT - (6109.0503228693) * invT);
  qf[144] *= k_f;
  qr[144] *= k_f * exp(-(-g_RT[6] - g_RT[8] - g_RT[23] + 2.000000 * g_RT[24])) *
             (refCinv);
  // reaction 138:  HNO2 (+M) <=> HONO (+M)
  k_f = 250000000000000 * exp(-(16253.8983054924) * invT);
  Corr = mixture;
  redP = Corr / k_f * 3100000000000 * exp(-(15851.3249728487) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (-0.149) * exp(-T * 1e+30) + 1.149 * exp(-T * 0.00032) +
    exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(-g_RT[24] + g_RT[25]));
  // reaction 139:  H2 + NO2 <=> H + HNO2
  k_f = 0.00024 * exp((3.15) * logT - (15650.0383065268) * invT);
  qf[145] *= k_f;
  qr[145] *= k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[25]));
  // reaction 140:  HNO2 + O <=> NO2 + OH
  k_f = 170 * exp((1.5) * logT - (1006.43333160944) * invT);
  qf[146] *= k_f;
  qr[146] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[25]));
  // reaction 141:  HNO2 + OH <=> H2O + NO2
  k_f = 40000000;
  qf[147] *= k_f;
  qr[147] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[23] + g_RT[25]));
  // reaction 142:  NO2 + O (+M) <=> NO3 (+M)
  k_f = 3500000 * exp((0.24) * logT);
  Corr = mixture;
  redP = Corr / k_f * 250000000 * exp(-1.5 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.29) * exp(-T * 1e+30) + 0.71 * exp(-T * 0.000588235294117647) +
    exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(g_RT[3] + g_RT[23] - g_RT[26])) * (refC);
  // reaction 143:  H + NO3 <=> NO2 + OH
  k_f = 60000000;
  qf[148] *= k_f;
  qr[148] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[23] + g_RT[26]));
  // reaction 144:  NO3 + O <=> NO2 + O2
  k_f = 10000000;
  qf[149] *= k_f;
  qr[149] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[23] + g_RT[26]));
  // reaction 145:  NO3 + OH <=> HO2 + NO2
  k_f = 14000000;
  qf[150] *= k_f;
  qr[150] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[26]));
  // reaction 146:  HO2 + NO3 <=> NO2 + O2 + OH
  k_f = 1500000;
  qf[151] *= k_f;
  qr[151] *= k_f * exp(-(-g_RT[1] - g_RT[4] + g_RT[5] - g_RT[23] + g_RT[26])) *
             (refCinv);
  // reaction 147:  NO3 + NO2 <=> NO + O2 + NO2
  k_f = 50000 * exp(-(1479.45699746588) * invT);
  qf[20] *= k_f;
  qr[20] *= k_f * exp(-(-g_RT[1] - g_RT[8] + g_RT[26])) * (refCinv);
  // reaction 148:  NO2 + OH (+M) <=> HONO2 (+M)
  k_f = 30000000;
  Corr = mixture;
  redP = Corr / k_f * 29380000000000 * exp(-3 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent =
    log10((0.6) * exp(-T * 1e+30) + 0.4 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(g_RT[4] + g_RT[23] - g_RT[27])) * (refC);
  // reaction 149:  H + HONO2 <=> H2 + NO3
  k_f = 560 * exp((1.5) * logT - (8252.7533191974) * invT);
  qf[152] *= k_f;
  qr[152] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[26] + g_RT[27]));
  // reaction 150:  H + HONO2 <=> H2O + NO2
  k_f = 6.1e-05 * exp((3.3) * logT - (3162.71674458266) * invT);
  qf[153] *= k_f;
  qr[153] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[27]));
  // reaction 151:  H + HONO2 <=> HONO + OH
  k_f = 0.38 * exp((2.3) * logT - (3510.43946065372) * invT);
  qf[154] *= k_f;
  qr[154] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[24] + g_RT[27]));
  // reaction 152:  HONO2 + OH <=> H2O + NO3
  k_f = 10000 * exp(-(-623.988665597852) * invT);
  qf[155] *= k_f;
  qr[155] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[26] + g_RT[27]));
  // reaction 153:  N2O (+M) <=> N2 + O (+M)
  k_f = 99000000000 * exp(-(29136.7481667591) * invT);
  Corr = mixture + (0.4) * sc[1] + (11) * sc[6] + (0.7) * sc[29];
  redP = Corr / k_f * 600000000 * exp(-(28906.7781504863) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(+exp(-T * 1e-07) + exp(-10000000 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[10] *= Corr * k_f;
  qr[10] *= Corr * k_f * exp(-(-g_RT[3] + g_RT[28] - g_RT[29])) * (refCinv);
  // reaction 154:  H + N2O <=> N2 + OH
  k_f = 64 * exp((1.835) * logT - (6789.39925503728) * invT);
  qf[156] *= k_f;
  qr[156] *= k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[28] - g_RT[29]));
  // reaction 155:  N2O + O <=> 2 NO
  k_f = 92000000 * exp(-(13928.5340928088) * invT);
  qf[157] *= k_f;
  qr[157] *= k_f * exp(-(g_RT[3] - 2.000000 * g_RT[8] + g_RT[28]));
  // reaction 156:  N2O + O <=> N2 + O2
  k_f = 92000000 * exp(-(13928.5340928088) * invT);
  qf[158] *= k_f;
  qr[158] *= k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[28] - g_RT[29]));
  // reaction 157:  N2O + OH <=> HO2 + N2
  k_f = 1.3e-08 * exp((4.72) * logT - (18397.6013018206) * invT);
  qf[159] *= k_f;
  qr[159] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[28] - g_RT[29]));
  // reaction 158:  N2O + OH <=> HNO + NO
  k_f = 1.2e-10 * exp((4.33) * logT - (12620.6739783824) * invT);
  qf[160] *= k_f;
  qr[160] *= k_f * exp(-(g_RT[4] - g_RT[8] - g_RT[21] + g_RT[28]));
  // reaction 159:  N2O + NO <=> N2 + NO2
  k_f = 0.53 * exp((2.23) * logT - (23288.8672934424) * invT);
  qf[161] *= k_f;
  qr[161] *= k_f * exp(-(g_RT[8] - g_RT[23] + g_RT[28] - g_RT[29]));
  // reaction 160:  2 NH2 <=> H2 + N2H2
  k_f = 170 * exp((1.62) * logT - (5929.40197317701) * invT);
  qf[162] *= k_f;
  qr[162] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[16]));
  // reaction 161:  2 NH2 <=> H2 + H2NN
  k_f = 0.072 * exp((1.88) * logT - (4429.31309241314) * invT);
  qf[163] *= k_f;
  qr[163] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[17]));
  // reaction 162:  NH + NH2 <=> H + N2H2
  k_f = 430000000 * exp((-0.272) * logT - (-38.7476832669634) * invT);
  qf[164] *= k_f;
  qr[164] *= k_f * exp(-(-g_RT[2] + g_RT[10] + g_RT[11] - g_RT[16]));
  // reaction 163:  HNOH + NH2 <=> N2H3 + OH
  k_f = 1e-05 * exp((3.46) * logT - (-235.002182930804) * invT);
  qf[165] *= k_f;
  qr[165] *= k_f * exp(-(-g_RT[4] + g_RT[10] - g_RT[15] + g_RT[20]));
  // reaction 164:  HNOH + NH2 <=> H2NN + H2O
  k_f = 88000000000 * exp((-1.08) * logT - (560.080149040653) * invT);
  qf[166] *= k_f;
  qr[166] *= k_f * exp(-(-g_RT[6] + g_RT[10] - g_RT[17] + g_RT[20]));
  // reaction 165:  2 NH2 (+M) <=> N2H4 (+M)
  k_f = 560000000 * exp((-0.414) * logT - (33.2122999431115) * invT);
  Corr = mixture;
  redP = Corr / k_f * 1.6e+22 * exp(-5.49 * logT - (999.891514953978) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.69) * exp(-T * 1e+30) + 0.31 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[11] *= Corr * k_f;
  qr[11] *= Corr * k_f * exp(-(2.000000 * g_RT[10] - g_RT[14])) * (refC);
  // reaction 166:  N2H4 <=> H2 + H2NN
  k_f = 140000000000000 * exp(-(37696.4636520974) * invT);
  qf[167] *= k_f;
  qr[167] *= k_f * exp(-(-g_RT[0] + g_RT[14] - g_RT[17])) * (refCinv);
  // reaction 167:  H + N2H4 <=> H2 + N2H3
  k_f = 7000000 * exp(-(1258.0416645118) * invT);
  qf[168] *= k_f;
  qr[168] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[14] - g_RT[15]));
  // reaction 168:  H + N2H4 <=> NH2 + NH3
  k_f = 0.23 * exp((1.42) * logT - (4127.38309293031) * invT);
  qf[169] *= k_f;
  qr[169] *= k_f * exp(-(g_RT[2] - g_RT[9] - g_RT[10] + g_RT[14]));
  // reaction 169:  N2H4 + O <=> N2H3 + OH
  k_f = 150000 * exp(-(-639.085165571994) * invT);
  qf[170] *= k_f;
  qr[170] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[14] - g_RT[15]));
  // reaction 170:  N2H4 + O <=> H2O + N2H2
  k_f = 290000 * exp(-(-639.085165571994) * invT);
  qf[171] *= k_f;
  qr[171] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[14] - g_RT[16]));
  // reaction 171:  N2H4 + OH <=> H2O + N2H3
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  qf[172] *= k_f;
  qr[172] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[14] - g_RT[15]));
  // reaction 172:  N2H4 + NH2 <=> N2H3 + NH3
  k_f = 7.6e-07 * exp((4) * logT - (2037.02106317751) * invT);
  qf[173] *= k_f;
  qr[173] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[14] - g_RT[15]));
  // reaction 173:  N2H4 + NO <=> HNO + N2H3
  k_f = 6e-05 * exp((3.16) * logT - (15521.7180567466) * invT);
  qf[174] *= k_f;
  qr[174] *= k_f * exp(-(g_RT[8] + g_RT[14] - g_RT[15] - g_RT[21]));
  // reaction 174:  N2H4 + NO2 <=> HONO + N2H3
  k_f = 8.2e-05 * exp((3.13) * logT - (4458.49965902982) * invT);
  qf[175] *= k_f;
  qr[175] *= k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[23] - g_RT[24]));
  // reaction 175:  N2H4 + NO2 <=> HNO2 + N2H3
  k_f = 2.4e-08 * exp((4.14) * logT - (3998.5596264843) * invT);
  qf[176] *= k_f;
  qr[176] *= k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[23] - g_RT[25]));
  // reaction 176:  H + N2H2 <=> N2H3
  k_f = 130000000 * exp(-(1947.95171333007) * invT);
  qf[177] *= k_f;
  qr[177] *= k_f * exp(-(g_RT[2] - g_RT[15] + g_RT[16])) * (refC);
  // reaction 177:  H + N2H3 <=> H2 + N2H2
  k_f = 240 * exp((1.5) * logT - (-5.0321666580472) * invT);
  qf[178] *= k_f;
  qr[178] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[15] - g_RT[16]));
  // reaction 178:  N2H3 + O <=> N2H2 + OH
  k_f = 170 * exp((1.5) * logT - (-325.077966109849) * invT);
  qf[179] *= k_f;
  qr[179] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[15] - g_RT[16]));
  // reaction 179:  N2H3 + O <=> HNO + NH2
  k_f = 30000000;
  qf[180] *= k_f;
  qr[180] *= k_f * exp(-(g_RT[3] - g_RT[10] + g_RT[15] - g_RT[21]));
  // reaction 180:  N2H3 + O => H + NH2 + NO
  k_f = 30000000;
  qf[181] *= k_f;
  qr[181] *= k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[8] - g_RT[10] + g_RT[15])) *
             (refCinv);
  // reaction 181:  N2H3 + OH <=> H2O + N2H2
  k_f = 1.2 * exp((2) * logT - (-599.834265639226) * invT);
  qf[182] *= k_f;
  qr[182] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[15] - g_RT[16]));
  // reaction 182:  N2H3 + OH <=> H2NN + H2O
  k_f = 30000000;
  qf[183] *= k_f;
  qr[183] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[15] - g_RT[17]));
  // reaction 183:  N2H3 + OH <=> HNO + NH3
  k_f = 1000000 * exp(-(7548.2499870708) * invT);
  qf[184] *= k_f;
  qr[184] *= k_f * exp(-(g_RT[4] - g_RT[9] + g_RT[15] - g_RT[21]));
  // reaction 184:  HO2 + N2H3 <=> H2O2 + N2H2
  k_f = 0.014 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[185] *= k_f;
  qr[185] *= k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[15] - g_RT[16]));
  // reaction 185:  HO2 + N2H3 <=> N2H4 + O2
  k_f = 0.92 * exp((1.94) * logT - (1069.83863150083) * invT);
  qf[186] *= k_f;
  qr[186] *= k_f * exp(-(-g_RT[1] + g_RT[5] - g_RT[14] + g_RT[15]));
  // reaction 186:  N2H3 + NH2 <=> N2H2 + NH3
  k_f = 0.92 * exp((1.94) * logT - (-579.705599007037) * invT);
  qf[187] *= k_f;
  qr[187] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[16]));
  // reaction 187:  N2H3 + NH2 <=> H2NN + NH3
  k_f = 30000000;
  qf[188] *= k_f;
  qr[188] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[17]));
  // reaction 188:  N2H3 + NH <=> N2H2 + NH2
  k_f = 20000000;
  qf[189] *= k_f;
  qr[189] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[16]));
  // reaction 189:  N2H2 + M <=> H + NNH + M
  k_f = 1.9e+21 * exp((-3.05) * logT - (33266.1441263526) * invT);
  Corr = mixture + (6) * sc[6];
  qf[21] *= Corr * k_f;
  qr[21] *= Corr * k_f * exp(-(-g_RT[2] - g_RT[13] + g_RT[16])) * (refCinv);
  // reaction 190:  H + N2H2 <=> H2 + NNH
  k_f = 110000000 * exp(-(1574.06173063716) * invT);
  qf[190] *= k_f;
  qr[190] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[13] + g_RT[16]));
  // reaction 191:  N2H2 + O <=> NNH + OH
  k_f = 330 * exp((1.5) * logT - (250.098682904946) * invT);
  qf[191] *= k_f;
  qr[191] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[16]));
  // reaction 192:  N2H2 + O <=> NH2 + NO
  k_f = 10000000;
  qf[192] *= k_f;
  qr[192] *= k_f * exp(-(g_RT[3] - g_RT[8] - g_RT[10] + g_RT[16]));
  // reaction 193:  N2H2 + OH <=> H2O + NNH
  k_f = 5.9e-05 * exp((3.4) * logT - (684.374665494419) * invT);
  qf[193] *= k_f;
  qr[193] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[13] + g_RT[16]));
  // reaction 194:  N2H2 + NH2 <=> NH3 + NNH
  k_f = 8.8e-08 * exp((4.05) * logT - (810.178831945599) * invT);
  qf[194] *= k_f;
  qr[194] *= k_f * exp(-(-g_RT[9] + g_RT[10] - g_RT[13] + g_RT[16]));
  // reaction 195:  N2H2 + NH <=> NH2 + NNH
  k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
  qf[195] *= k_f;
  qr[195] *= k_f * exp(-(-g_RT[10] + g_RT[11] - g_RT[13] + g_RT[16]));
  // reaction 196:  N2H2 + NO <=> N2O + NH2
  k_f = 4000000 * exp(-(5999.34908972387) * invT);
  qf[196] *= k_f;
  qr[196] *= k_f * exp(-(g_RT[8] - g_RT[10] + g_RT[16] - g_RT[28]));
  // reaction 197:  H2NN <=> H + NNH
  k_f = 3.4e+26 * exp((-4.83) * logT - (23262.7000268206) * invT);
  qf[197] *= k_f;
  qr[197] *= k_f * exp(-(-g_RT[2] - g_RT[13] + g_RT[17])) * (refCinv);
  // reaction 198:  H2NN <=> H2 + N2
  k_f = 250000000000000 * exp(-(26562.2917045021) * invT);
  qf[198] *= k_f;
  qr[198] *= k_f * exp(-(-g_RT[0] + g_RT[17] - g_RT[29])) * (refCinv);
  // reaction 199:  H2NN <=> N2H2
  k_f = 130000000000000 * exp(-(23616.4613428813) * invT);
  qf[199] *= k_f;
  qr[199] *= k_f * exp(-(-g_RT[16] + g_RT[17]));
  // reaction 200:  H + H2NN <=> H2 + NNH
  k_f = 480 * exp((1.5) * logT - (-449.875699229419) * invT);
  qf[200] *= k_f;
  qr[200] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[13] + g_RT[17]));
  // reaction 201:  H + H2NN <=> H + N2H2
  k_f = 70000000;
  qf[201] *= k_f;
  qr[201] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[16] + g_RT[17]));
  // reaction 202:  H2NN + O <=> NNH + OH
  k_f = 330 * exp((1.5) * logT - (-449.875699229419) * invT);
  qf[202] *= k_f;
  qr[202] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[17]));
  // reaction 203:  H2NN + O <=> NH2 + NO
  k_f = 70000000;
  qf[203] *= k_f;
  qr[203] *= k_f * exp(-(g_RT[3] - g_RT[8] - g_RT[10] + g_RT[17]));
  // reaction 204:  H2NN + OH <=> H2O + NNH
  k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
  qf[204] *= k_f;
  qr[204] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[13] + g_RT[17]));
  // reaction 205:  H2NN + OH => H + NH2 + NO
  k_f = 2000000;
  qf[205] *= k_f;
  qr[205] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[8] - g_RT[10] + g_RT[17])) *
             (refCinv);
  // reaction 206:  H2NN + HO2 => NH2 + NO + OH
  k_f = 9000000;
  qf[206] *= k_f;
  qr[206] *= k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[8] - g_RT[10] + g_RT[17])) *
             (refCinv);
  // reaction 207:  H2NN + HO2 <=> H2O2 + NNH
  k_f = 0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[207] *= k_f;
  qr[207] *= k_f * exp(-(g_RT[5] - g_RT[7] - g_RT[13] + g_RT[17]));
  // reaction 208:  H2NN + O2 <=> NH2 + NO2
  k_f = 1500000 * exp(-(2999.67454486193) * invT);
  qf[208] *= k_f;
  qr[208] *= k_f * exp(-(g_RT[1] - g_RT[10] + g_RT[17] - g_RT[23]));
  // reaction 209:  H2NN + NH2 <=> NH3 + NNH
  k_f = 1.8 * exp((1.94) * logT - (-579.705599007037) * invT);
  qf[209] *= k_f;
  qr[209] *= k_f * exp(-(-g_RT[9] + g_RT[10] - g_RT[13] + g_RT[17]));
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T)
{
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 30; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 30; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[30];
  gibbs(g_RT, T);

  {
    // reaction 11:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 4700000 * exp((0.44) * logT);
    amrex::Real Corr = mixture + sc[0] + (-0.22) * sc[1] + (13) * sc[6];
    const amrex::Real redP =
      Corr / k_f * 636600000 * exp(-1.72 * logT - 264.088106214317 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[5])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 20:  H2O2 (+M) <=> 2 OH (+M)
    const amrex::Real k_f =
      2000000000000 * exp((0.9) * logT - (24531.3092413143) * invT);
    amrex::Real Corr = mixture + (2.7) * sc[0] + (0.2) * sc[1] + (6.5) * sc[6] +
                       (6.7) * sc[7] + (0.5) * sc[29];
    const amrex::Real redP =
      Corr / k_f * 2.5e+18 * exp(-2.3 * logT - 24531.3092413143 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.57 * exp(-T * 1e+30) + 0.43 * exp(-T * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[7]);
    const amrex::Real qr = Corr * k_f * exp(-(-2.000000 * g_RT[4] + g_RT[7])) *
                           (refCinv) * ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[4] += 2.000000 * qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 26:  H + NH2 (+M) <=> NH3 (+M)
    const amrex::Real k_f = 160000000;
    amrex::Real Corr = mixture;
    const amrex::Real redP = Corr / k_f * 36000000000 * exp(-1.76 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] - g_RT[9] + g_RT[10])) * (refC) * (sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 78:  NH2OH (+M) <=> NH2 + OH (+M)
    const amrex::Real k_f =
      1.4e+20 * exp((-1.31) * logT - (32246.1239447664) * invT);
    amrex::Real Corr = mixture;
    const amrex::Real redP =
      Corr / k_f * 5.4e+31 * exp(-5.96 * logT - 33606.3185924366 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.69 * exp(-T * 1e+30) + 0.31 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[18]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[4] - g_RT[10] + g_RT[18])) *
                           (refCinv) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[10] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 113:  H + NO (+M) <=> HNO (+M)
    const amrex::Real k_f = 1500000000 * exp((-0.41) * logT);
    amrex::Real Corr = mixture + (0.6) * sc[29];
    const amrex::Real redP =
      Corr / k_f * 240 * exp(0.206 * logT - -779.985831997315 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.18 * exp(-T * 1e+30) + 0.82 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[8]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[8] - g_RT[21])) * (refC) * (sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[8] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 122:  NO + O (+M) <=> NO2 (+M)
    const amrex::Real k_f = 1300000000 * exp((-0.75) * logT);
    amrex::Real Corr = mixture;
    const amrex::Real redP =
      Corr / k_f * 4720000000000 * exp(-2.87 * logT - 779.985831997315 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.25 * exp(-T * 0.001) + 0.75 * exp(-T * 1e-05) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[3] * sc[8]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[3] + g_RT[8] - g_RT[23])) * (refC) * (sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[8] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 129:  NO + OH (+M) <=> HONO (+M)
    const amrex::Real k_f = 110000000 * exp((-0.3) * logT);
    amrex::Real Corr = mixture;
    const amrex::Real redP = Corr / k_f * 339200000000 * exp(-2.5 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.25 * exp(-T * 1e+30) + 0.75 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[8] - g_RT[24])) * (refC) * (sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[8] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 138:  HNO2 (+M) <=> HONO (+M)
    const amrex::Real k_f = 250000000000000 * exp(-(16253.8983054924) * invT);
    amrex::Real Corr = mixture;
    const amrex::Real redP =
      Corr / k_f * 3100000000000 * exp(-15851.3249728487 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.149 * exp(-T * 1e+30) + 1.149 * exp(-T * 0.00032) +
      exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[25]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[24] + g_RT[25])) * (sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 142:  NO2 + O (+M) <=> NO3 (+M)
    const amrex::Real k_f = 3500000 * exp((0.24) * logT);
    amrex::Real Corr = mixture;
    const amrex::Real redP = Corr / k_f * 250000000 * exp(-1.5 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.29 * exp(-T * 1e+30) + 0.71 * exp(-T * 0.000588235294117647) +
      exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[3] * sc[23]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[3] + g_RT[23] - g_RT[26])) * (refC) * (sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[23] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 148:  NO2 + OH (+M) <=> HONO2 (+M)
    const amrex::Real k_f = 30000000;
    amrex::Real Corr = mixture;
    const amrex::Real redP = Corr / k_f * 29380000000000 * exp(-3 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.6 * exp(-T * 1e+30) + 0.4 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[23]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[23] - g_RT[27])) * (refC) * (sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[23] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 153:  N2O (+M) <=> N2 + O (+M)
    const amrex::Real k_f = 99000000000 * exp(-(29136.7481667591) * invT);
    amrex::Real Corr = mixture + (0.4) * sc[1] + (11) * sc[6] + (0.7) * sc[29];
    const amrex::Real redP =
      Corr / k_f * 600000000 * exp(-28906.7781504863 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-T * 1e-07) + exp(-10000000 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[28]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[3] + g_RT[28] - g_RT[29])) *
                           (refCinv) * (sc[3] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 165:  2 NH2 (+M) <=> N2H4 (+M)
    const amrex::Real k_f =
      560000000 * exp((-0.414) * logT - (33.2122999431115) * invT);
    amrex::Real Corr = mixture;
    const amrex::Real redP =
      Corr / k_f * 1.6e+22 * exp(-5.49 * logT - 999.891514953978 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.69 * exp(-T * 1e+30) + 0.31 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[10] * sc[10]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[10] - g_RT[14])) * (refC) * (sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= 2.000000 * qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 6:  H2 + M <=> 2 H + M
    const amrex::Real k_f =
      46000000000000 * exp((-1.4) * logT - (52525.7555766966) * invT);
    const amrex::Real Corr = mixture + (1.5) * sc[0] + (11) * sc[6];
    const amrex::Real qf = Corr * k_f * (sc[0]);
    const amrex::Real qr = Corr * k_f * exp(-(g_RT[0] - 2.000000 * g_RT[2])) *
                           (refCinv) * ((sc[2] * sc[2]));
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] += 2.000000 * qdot;
  }

  {
    // reaction 7:  H + O + M <=> OH + M
    const amrex::Real k_f = 4700000 * exp((-1) * logT);
    const amrex::Real Corr = mixture + (1.5) * sc[0] + (11) * sc[6];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[4])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 8:  2 O + M <=> O2 + M
    const amrex::Real k_f = 19 * exp(-(-899.751398458839) * invT);
    const amrex::Real Corr = mixture + (1.5) * sc[0] + (11) * sc[6];
    const amrex::Real qf = Corr * k_f * ((sc[3] * sc[3]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[3])) * (refC) * (sc[1]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= 2.000000 * qdot;
  }

  {
    // reaction 9:  H2O + M <=> H + OH + M
    const amrex::Real k_f =
      6.1e+21 * exp((-3.322) * logT - (60783.5410625521) * invT);
    const amrex::Real Corr =
      mixture + (2) * sc[0] + (0.5) * sc[1] + (-1) * sc[6] + sc[29];
    const amrex::Real qf = Corr * k_f * (sc[6]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] - g_RT[4] + g_RT[6])) *
                           (refCinv) * (sc[2] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 10:  H2O + H2O <=> H + OH + H2O
    const amrex::Real k_f =
      1e+20 * exp((-2.44) * logT - (60476.5788964112) * invT);
    const amrex::Real qf = k_f * ((sc[6] * sc[6]));
    const amrex::Real qr = k_f * exp(-(-g_RT[2] - g_RT[4] + g_RT[6])) *
                           (refCinv) * (sc[2] * sc[4] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 91:  H2NO + M <=> H + HNO + M
    const amrex::Real k_f =
      2.8e+18 * exp((-2.83) * logT - (32666.3098607134) * invT);
    const amrex::Real Corr = mixture + (9) * sc[6];
    const amrex::Real qf = Corr * k_f * (sc[19]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] + g_RT[19] - g_RT[21])) *
                           (refCinv) * (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 92:  H2NO + M <=> HNOH + M
    const amrex::Real k_f =
      1.1e+23 * exp((-4) * logT - (22141.5332954077) * invT);
    const amrex::Real Corr = mixture + (9) * sc[6];
    const amrex::Real qf = Corr * k_f * (sc[19]);
    const amrex::Real qr = Corr * k_f * exp(-(g_RT[19] - g_RT[20])) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 102:  HNOH + M <=> H + HNO + M
    const amrex::Real k_f =
      2e+18 * exp((-2.84) * logT - (29656.5709825354) * invT);
    const amrex::Real Corr = mixture + (9) * sc[6];
    const amrex::Real qf = Corr * k_f * (sc[20]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[21])) *
                           (refCinv) * (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 147:  NO3 + NO2 <=> NO + O2 + NO2
    const amrex::Real k_f = 50000 * exp(-(1479.45699746588) * invT);
    const amrex::Real qf = k_f * (sc[23] * sc[26]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[8] + g_RT[26])) *
                           (refCinv) * (sc[1] * sc[8] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[8] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 189:  N2H2 + M <=> H + NNH + M
    const amrex::Real k_f =
      1.9e+21 * exp((-3.05) * logT - (33266.1441263526) * invT);
    const amrex::Real Corr = mixture + (6) * sc[6];
    const amrex::Real qf = Corr * k_f * (sc[16]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] - g_RT[13] + g_RT[16])) *
                           (refCinv) * (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 0:  H + O2 <=> O + OH
    const amrex::Real k_f = 100000000 * exp(-(7692.16995349094) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[3] - g_RT[4])) * (sc[3] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 1:  H2 + O <=> H + OH
    const amrex::Real k_f = 3800000 * exp(-(3999.56605981591) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[3] - g_RT[4])) * (sc[2] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 2:  H2 + O <=> H + OH
    const amrex::Real k_f = 880000000 * exp(-(9649.1795668055) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[3] - g_RT[4])) * (sc[2] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 3:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      220 * exp((1.51) * logT - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[4] - g_RT[6])) * (sc[2] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 4:  2 OH <=> H2O + O
    const amrex::Real k_f =
      20 * exp((1.651) * logT - (317.529716122778) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[6])) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 5:  2 OH <=> H2O + O
    const amrex::Real k_f =
      260000 * exp((-0.057) * logT - (-416.160182620503) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[6])) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 12:  H + HO2 <=> H2 + O2
    const amrex::Real k_f =
      2.8 * exp((2.09) * logT - (-730.167382082648) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[5])) * (sc[0] * sc[1]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[5] -= qdot;
  }

  {
    // reaction 13:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 71000000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - 2.000000 * g_RT[4] + g_RT[5])) * ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[5] -= qdot;
  }

  {
    // reaction 14:  H + HO2 <=> H2O + O
    const amrex::Real k_f = 1400000;
    const amrex::Real qf = k_f * (sc[2] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[5] - g_RT[6])) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[5] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 15:  HO2 + O <=> O2 + OH
    const amrex::Real k_f =
      29000 * exp((1) * logT - (-364.328866042617) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[5])) * (sc[1] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[5] -= qdot;
  }

  {
    // reaction 16:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      190000000000000 * exp((-2.49) * logT - (293.878532829956) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[5] - g_RT[6])) * (sc[1] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 17:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1200 * exp((1.24) * logT - (-659.213832204183) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[5] - g_RT[6])) * (sc[1] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 18:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f =
      1200 * exp((0.771) * logT - (-918.370415093613) * invT);
    const amrex::Real qf = k_f * ((sc[5] * sc[5]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[5] - g_RT[7])) * (sc[1] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 19:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f =
      1300000 * exp((0.295) * logT - (3722.29367695751) * invT);
    const amrex::Real qf = k_f * ((sc[5] * sc[5]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[5] - g_RT[7])) * (sc[1] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 21:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24000000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7])) * (sc[4] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 22:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 48000000 * exp(-(4000.57249314752) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[7])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 23:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.6 * exp((2) * logT - (1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[5] + g_RT[7])) * (sc[4] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 24:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 1700000 * exp(-(160.022899725901) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 25:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 76000000 * exp(-(3658.38516040031) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 27:  H + NH3 <=> H2 + NH2
    const amrex::Real k_f =
      0.64 * exp((2.39) * logT - (5118.2167078998) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[9] - g_RT[10])) * (sc[0] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 28:  NH3 + O <=> NH2 + OH
    const amrex::Real k_f =
      9.4 * exp((1.94) * logT - (3250.77966109849) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[9] - g_RT[10])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 29:  NH3 + OH <=> H2O + NH2
    const amrex::Real k_f = 2 * exp((2.04) * logT - (284.820632845471) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[9] - g_RT[10])) * (sc[6] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 30:  HO2 + NH3 <=> H2O2 + NH2
    const amrex::Real k_f = 300000 * exp(-(11070.7666477038) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[9] - g_RT[10])) * (sc[7] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 31:  H2 + NH <=> H + NH2
    const amrex::Real k_f = 21000000 * exp(-(7758.09133671136) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[2] - g_RT[10] + g_RT[11])) * (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 32:  NH2 + O <=> H + HNO
    const amrex::Real k_f = 660000000 * exp((-0.5) * logT);
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[21])) * (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[10] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 33:  NH2 + O <=> NH + OH
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[11])) * (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 34:  NH2 + O <=> NH + OH
    const amrex::Real k_f =
      8.6e-07 * exp((4.01) * logT - (841.881481891296) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[11])) * (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 35:  NH2 + OH <=> H2O + NH
    const amrex::Real k_f =
      3.3 * exp((1.949) * logT - (-109.198016479624) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[10] - g_RT[11])) * (sc[6] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 36:  HO2 + NH2 <=> NH3 + O2
    const amrex::Real k_f =
      0.017 * exp((1.55) * logT - (1020.02018158617) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT[10])) * (sc[1] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 37:  HO2 + NH2 <=> H2NO + OH
    const amrex::Real k_f =
      250000000000 * exp((-1.28) * logT - (586.750632328303) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[10] - g_RT[19])) * (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[10] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 38:  HO2 + NH2 <=> H2O + HNO
    const amrex::Real k_f = 16 * exp((0.55) * logT - (264.188749547478) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[21])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[6] += qdot;
    wdot[10] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 39:  HO2 + NH2 <=> H2O + HNO
    const amrex::Real k_f =
      5700000000 * exp((-1.12) * logT - (355.774182723937) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[21])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[6] += qdot;
    wdot[10] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 40:  HO2 + NH2 <=> H2O + HON
    const amrex::Real k_f = 21 * exp((0.64) * logT - (408.108715967628) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[22])) * (sc[6] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[6] += qdot;
    wdot[10] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 41:  NH2 + O2 <=> H2NO + O
    const amrex::Real k_f =
      260000 * exp((0.487) * logT - (14618.4441416271) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[3] + g_RT[10] - g_RT[19])) * (sc[3] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[10] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 42:  NH2 + O2 <=> HNO + OH
    const amrex::Real k_f =
      2.9e-08 * exp((3.764) * logT - (9150.99506765883) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] + g_RT[10] - g_RT[21])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 43:  2 NH2 <=> NH + NH3
    const amrex::Real k_f =
      5.6e-06 * exp((3.53) * logT - (277.775599524205) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + 2.000000 * g_RT[10] - g_RT[11])) *
                           (sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= 2.000000 * qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 44:  NH + NH2 <=> N + NH3
    const amrex::Real k_f =
      0.0096 * exp((2.46) * logT - (53.844183241105) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[11] - g_RT[12])) *
                           (sc[9] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 45:  N + NH2 <=> 2 H + N2
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[10] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[2] + g_RT[10] + g_RT[12] - g_RT[29])) *
      (refCinv) * ((sc[2] * sc[2]) * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += 2.000000 * qdot;
    wdot[10] -= qdot;
    wdot[12] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 46:  HNO + NH2 <=> NH3 + NO
    const amrex::Real k_f =
      0.00059 * exp((2.95) * logT - (-1745.65861367657) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] - g_RT[9] + g_RT[10] + g_RT[21])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 47:  NH2 + NO <=> H2O + N2
    const amrex::Real k_f =
      26000000000000 * exp((-2.369) * logT - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[8] + g_RT[10] - g_RT[29])) * (sc[6] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] -= qdot;
    wdot[10] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 48:  NH2 + NO <=> NNH + OH
    const amrex::Real k_f =
      43000 * exp((0.294) * logT - (-435.785632586887) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[8] + g_RT[10] - g_RT[13])) * (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 49:  HONO + NH2 <=> NH3 + NO2
    const amrex::Real k_f =
      7.1e-05 * exp((3.02) * logT - (-2485.89032907532) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] - g_RT[23] + g_RT[24])) *
                           (sc[9] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 50:  NH2 + NO2 <=> H2NO + NO
    const amrex::Real k_f =
      860000 * exp((0.11) * logT - (-596.814965644398) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] + g_RT[10] - g_RT[19] + g_RT[23])) *
                           (sc[8] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[10] -= qdot;
    wdot[19] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 51:  NH2 + NO2 <=> H2O + N2O
    const amrex::Real k_f =
      220000 * exp((0.11) * logT - (-596.814965644398) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + g_RT[10] + g_RT[23] - g_RT[28])) *
                           (sc[6] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[10] -= qdot;
    wdot[23] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 52:  H + NH <=> H2 + N
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[12])) * (sc[0] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 53:  NH + O <=> H + NO
    const amrex::Real k_f = 92000000;
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[8] + g_RT[11])) * (sc[2] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[8] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 54:  NH + OH <=> H + HNO
    const amrex::Real k_f =
      320000000 * exp((-0.376) * logT - (-23.1479666270171) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[11] - g_RT[21])) * (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[11] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 55:  NH + OH <=> H2O + N
    const amrex::Real k_f =
      16 * exp((1.733) * logT - (-289.852799503519) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[11] - g_RT[12])) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 56:  NH + O2 <=> HNO + O
    const amrex::Real k_f = 24000000 * exp(-(6969.55082139537) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[3] + g_RT[11] - g_RT[21])) * (sc[3] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[11] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 57:  NH + O2 <=> NO + OH
    const amrex::Real k_f = 99000 * exp(-(769.921498681221) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[8] + g_RT[11])) * (sc[4] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[8] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 58:  2 NH <=> N + NH2
    const amrex::Real k_f =
      5.7e-07 * exp((3.88) * logT - (172.100099705214) * invT);
    const amrex::Real qf = k_f * ((sc[11] * sc[11]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[12])) *
                           (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= 2.000000 * qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 59:  N + NH <=> H + N2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[11] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[29])) *
                           (sc[2] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 60:  NH + NO <=> H + N2O
    const amrex::Real k_f =
      2700000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[8] + g_RT[11] - g_RT[28])) * (sc[2] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[8] -= qdot;
    wdot[11] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 61:  NH + NO <=> N2 + OH
    const amrex::Real k_f =
      680000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT[29])) * (sc[4] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[11] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 62:  HONO + NH <=> NH2 + NO2
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[11] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] - g_RT[23] + g_RT[24])) *
                           (sc[10] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 63:  NH + NO2 <=> N2O + OH
    const amrex::Real k_f = 4100000;
    const amrex::Real qf = k_f * (sc[11] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[11] + g_RT[23] - g_RT[28])) *
                           (sc[4] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[11] -= qdot;
    wdot[23] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 64:  NH + NO2 <=> HNO + NO
    const amrex::Real k_f = 5900000;
    const amrex::Real qf = k_f * (sc[11] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] + g_RT[11] - g_RT[21] + g_RT[23])) *
                           (sc[8] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[11] -= qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 65:  N + OH <=> H + NO
    const amrex::Real k_f = 38000000;
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[8] + g_RT[12])) * (sc[2] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 66:  N + O2 <=> NO + O
    const amrex::Real k_f = 5900 * exp((1) * logT - (3160.20066125364) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[3] - g_RT[8] + g_RT[12])) * (sc[3] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[8] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 67:  N + NO <=> N2 + O
    const amrex::Real k_f = 9400000 * exp((0.14) * logT);
    const amrex::Real qf = k_f * (sc[8] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[12] - g_RT[29])) * (sc[3] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] -= qdot;
    wdot[12] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 68:  NNH <=> H + N2
    const amrex::Real k_f = 1000000000;
    const amrex::Real qf = k_f * (sc[13]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[13] - g_RT[29])) *
                           (refCinv) * (sc[2] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[13] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 69:  H + NNH <=> H2 + N2
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[2] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[13] - g_RT[29])) * (sc[0] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[13] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 70:  NNH + O <=> H + N2O
    const amrex::Real k_f =
      190000000 * exp((-0.274) * logT - (-11.0707666477038) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[13] - g_RT[28])) * (sc[2] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[13] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 71:  NNH + O <=> N2 + OH
    const amrex::Real k_f =
      12000000 * exp((0.145) * logT - (-109.198016479624) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[13] - g_RT[29])) * (sc[4] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[13] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 72:  NNH + O <=> NH + NO
    const amrex::Real k_f =
      520000 * exp((0.381) * logT - (-205.81561631413) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[8] - g_RT[11] + g_RT[13])) * (sc[8] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[8] += qdot;
    wdot[11] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 73:  NNH + OH <=> H2O + N2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[4] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[13] - g_RT[29])) * (sc[6] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[13] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 74:  NNH + O2 <=> HO2 + N2
    const amrex::Real k_f =
      560000000 * exp((-0.385) * logT - (-6.54181665546136) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[13] - g_RT[29])) * (sc[5] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[13] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 75:  NH + NNH <=> N2 + NH2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[11] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[13] - g_RT[29])) *
                           (sc[10] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[13] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 76:  NH2 + NNH <=> N2 + NH3
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[10] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[13] - g_RT[29])) *
                           (sc[9] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[13] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 77:  NNH + NO <=> HNO + N2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[8] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] + g_RT[13] - g_RT[21] - g_RT[29])) *
                           (sc[21] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[13] -= qdot;
    wdot[21] += qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 79:  H + NH2OH <=> H2 + HNOH
    const amrex::Real k_f = 480 * exp((1.5) * logT - (3144.60094461369) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[18] - g_RT[20])) * (sc[0] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 80:  H + NH2OH <=> H2 + H2NO
    const amrex::Real k_f = 240 * exp((1.5) * logT - (2549.79884563251) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[18] - g_RT[19])) * (sc[0] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 81:  NH2OH + O <=> HNOH + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (1944.93241333524) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[18] - g_RT[20])) * (sc[4] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 82:  NH2OH + O <=> H2NO + OH
    const amrex::Real k_f = 170 * exp((1.5) * logT - (1514.68216407221) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[18] - g_RT[19])) * (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 83:  NH2OH + OH <=> H2O + HNOH
    const amrex::Real k_f =
      0.015 * exp((2.61) * logT - (-1779.87734695129) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[18] - g_RT[20])) * (sc[6] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 84:  NH2OH + OH <=> H2NO + H2O
    const amrex::Real k_f =
      0.15 * exp((2.28) * logT - (-652.168798882917) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[18] - g_RT[19])) * (sc[6] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 85:  NH2 + NH2OH <=> HNOH + NH3
    const amrex::Real k_f =
      1.1e-07 * exp((4) * logT - (-48.8120165830578) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[20])) *
                           (sc[9] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 86:  NH2 + NH2OH <=> H2NO + NH3
    const amrex::Real k_f =
      9.5e-06 * exp((3.42) * logT - (-509.758482460181) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[19])) *
                           (sc[9] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 87:  NH + NH2OH <=> HNOH + NH2
    const amrex::Real k_f =
      2.9e-09 * exp((4.4) * logT - (787.030865318582) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[18] - g_RT[20])) *
                           (sc[10] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 88:  NH + NH2OH <=> H2NO + NH2
    const amrex::Real k_f =
      1.5e-09 * exp((4.6) * logT - (1219.79719791064) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[18] - g_RT[19])) *
                           (sc[10] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 89:  HO2 + NH2OH <=> H2O2 + HNOH
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (4809.24167509571) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[18] - g_RT[20])) * (sc[7] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 90:  HO2 + NH2OH <=> H2NO + H2O2
    const amrex::Real k_f =
      0.014 * exp((2.69) * logT - (3229.64456113469) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[18] - g_RT[19])) * (sc[7] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 93:  H + H2NO <=> H2 + HNO
    const amrex::Real k_f = 30 * exp((2) * logT - (1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[19] - g_RT[21])) * (sc[0] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 94:  H + H2NO <=> NH2 + OH
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[19])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[10] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 95:  H2NO + O <=> HNO + OH
    const amrex::Real k_f = 30 * exp((2) * logT - (1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[19] - g_RT[21])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 96:  H2NO + OH <=> H2O + HNO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[19] - g_RT[21])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 97:  H2NO + HO2 <=> H2O2 + HNO
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[19] - g_RT[21])) * (sc[7] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 98:  H2NO + O2 <=> HNO + HO2
    const amrex::Real k_f =
      0.00023 * exp((2.994) * logT - (8303.07498577788) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[19] - g_RT[21])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 99:  H2NO + NH2 <=> HNO + NH3
    const amrex::Real k_f = 3000000 * exp(-(503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[19] - g_RT[21])) *
                           (sc[9] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 100:  H2NO + NO <=> 2 HNO
    const amrex::Real k_f = 0.02 * exp((2) * logT - (6541.81665546136) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] + g_RT[19] - 2.000000 * g_RT[21])) *
                           ((sc[21] * sc[21]));
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[19] -= qdot;
    wdot[21] += 2.000000 * qdot;
  }

  {
    // reaction 101:  H2NO + NO2 <=> HNO + HONO
    const amrex::Real k_f =
      0.044 * exp((2.64) * logT - (2032.99532985107) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[19] - g_RT[21] + g_RT[23] - g_RT[24])) *
                           (sc[21] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 103:  H + HNOH <=> NH2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[20])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[10] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 104:  H + HNOH <=> H2 + HNO
    const amrex::Real k_f = 480 * exp((1.5) * logT - (190.215899674184) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[20] - g_RT[21])) * (sc[0] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 105:  HNOH + O <=> HNO + OH
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[20] - g_RT[21])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 106:  HNOH + O <=> HNO + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (-180.15156635809) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[20] - g_RT[21])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 107:  HNOH + OH <=> H2O + HNO
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[21])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 108:  HNOH + HO2 <=> H2O2 + HNO
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[20] - g_RT[21])) * (sc[7] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 109:  HNOH + HO2 <=> NH2OH + O2
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[5] - g_RT[18] + g_RT[20])) * (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 110:  HNOH + O2 <=> HNO + HO2
    const amrex::Real k_f = 3000000 * exp(-(12580.416645118) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[20] - g_RT[21])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 111:  HNOH + NH2 <=> HNO + NH3
    const amrex::Real k_f =
      1.8 * exp((1.94) * logT - (-579.705599007037) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[20] - g_RT[21])) *
                           (sc[9] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 112:  HNOH + NO2 <=> HNO + HONO
    const amrex::Real k_f = 600000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[20] - g_RT[21] + g_RT[23] - g_RT[24])) *
                           (sc[21] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[20] -= qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 114:  H + HNO <=> H2 + NO
    const amrex::Real k_f =
      66000 * exp((0.94) * logT - (249.092249573336) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[8] + g_RT[21])) * (sc[0] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[8] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 115:  HNO + O <=> NO + OH
    const amrex::Real k_f = 23000000;
    const amrex::Real qf = k_f * (sc[3] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[8] + g_RT[21])) * (sc[4] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[8] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 116:  HNO + OH <=> H2O + NO
    const amrex::Real k_f =
      1200 * exp((1.189) * logT - (168.074366378776) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[8] + g_RT[21])) * (sc[6] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[8] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 117:  HNO + HO2 <=> HNO2 + OH
    const amrex::Real k_f =
      0.002 * exp((2.36) * logT - (4518.88565892638) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[21] - g_RT[25])) * (sc[4] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[21] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 118:  HNO + O2 <=> HO2 + NO
    const amrex::Real k_f = 20000000 * exp(-(8051.46665287552) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[8] + g_RT[21])) * (sc[5] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[8] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 119:  2 HNO <=> H2O + N2O
    const amrex::Real k_f = 900 * exp(-(1559.97166399463) * invT);
    const amrex::Real qf = k_f * ((sc[21] * sc[21]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + 2.000000 * g_RT[21] - g_RT[28])) *
                           (sc[6] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[21] -= 2.000000 * qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 120:  HNO + NO2 <=> HONO + NO
    const amrex::Real k_f =
      0.044 * exp((2.64) * logT - (2032.99532985107) * invT);
    const amrex::Real qf = k_f * (sc[21] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] + g_RT[21] + g_RT[23] - g_RT[24])) *
                           (sc[8] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[21] -= qdot;
    wdot[23] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 121:  HO2 + NO <=> NO2 + OH
    const amrex::Real k_f = 2100000 * exp(-(-250.098682904946) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[8] - g_RT[23])) * (sc[4] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[8] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 123:  H + NO2 <=> NO + OH
    const amrex::Real k_f = 130000000 * exp(-(182.164433021309) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[8] + g_RT[23])) * (sc[4] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[8] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 124:  NO2 + O <=> NO + O2
    const amrex::Real k_f = 110000000 * exp((-0.52) * logT);
    const amrex::Real qf = k_f * (sc[3] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[8] + g_RT[23])) * (sc[1] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[8] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 125:  HO2 + NO2 <=> HONO + O2
    const amrex::Real k_f =
      1.9e-06 * exp((3.32) * logT - (1531.79153070957) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[23] - g_RT[24])) * (sc[1] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[23] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 126:  HO2 + NO2 <=> HNO2 + O2
    const amrex::Real k_f =
      1.9e-05 * exp((3.26) * logT - (2507.52864570492) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[23] - g_RT[25])) * (sc[1] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[23] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 127:  2 NO2 <=> 2 NO + O2
    const amrex::Real k_f = 4500000 * exp(-(13888.2767595445) * invT);
    const amrex::Real qf = k_f * ((sc[23] * sc[23]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] - 2.000000 * g_RT[8] + 2.000000 * g_RT[23])) *
      (refCinv) * (sc[1] * (sc[8] * sc[8]));
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[8] += 2.000000 * qdot;
    wdot[23] -= 2.000000 * qdot;
  }

  {
    // reaction 128:  2 NO2 <=> NO + NO3
    const amrex::Real k_f =
      9600 * exp((0.73) * logT - (10517.2283153186) * invT);
    const amrex::Real qf = k_f * ((sc[23] * sc[23]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] + 2.000000 * g_RT[23] - g_RT[26])) *
                           (sc[8] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[23] -= 2.000000 * qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 130:  H2 + NO2 <=> H + HONO
    const amrex::Real k_f =
      1.8e-05 * exp((3.51) * logT - (13234.5983106641) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[24])) * (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] += qdot;
    wdot[23] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 131:  H2 + NO2 <=> H + HONO
    const amrex::Real k_f =
      2.4e-05 * exp((3.62) * logT - (18015.156635809) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[24])) * (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] += qdot;
    wdot[23] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 132:  H + HONO <=> HNO + OH
    const amrex::Real k_f =
      56000 * exp((0.86) * logT - (2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[24])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[21] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 133:  H + HONO <=> H2O + NO
    const amrex::Real k_f =
      8.1 * exp((1.89) * logT - (1937.38416334817) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[8] + g_RT[24])) * (sc[6] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[8] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 134:  HONO + O <=> NO2 + OH
    const amrex::Real k_f = 12000000 * exp(-(2999.17132819613) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24])) * (sc[4] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 135:  HONO + OH <=> H2O + NO2
    const amrex::Real k_f = 1700000 * exp(-(-261.672666218454) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[23] + g_RT[24])) * (sc[6] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 136:  HONO + NO2 <=> HONO2 + NO
    const amrex::Real k_f = 200000 * exp(-(16455.1849718143) * invT);
    const amrex::Real qf = k_f * (sc[23] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] + g_RT[23] + g_RT[24] - g_RT[27])) *
                           (sc[8] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[23] -= qdot;
    wdot[24] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 137:  2 HONO <=> H2O + NO + NO2
    const amrex::Real k_f =
      3.5e-07 * exp((3.64) * logT - (6109.0503228693) * invT);
    const amrex::Real qf = k_f * ((sc[24] * sc[24]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] - g_RT[8] - g_RT[23] + 2.000000 * g_RT[24])) *
      (refCinv) * (sc[6] * sc[8] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] += qdot;
    wdot[23] += qdot;
    wdot[24] -= 2.000000 * qdot;
  }

  {
    // reaction 139:  H2 + NO2 <=> H + HNO2
    const amrex::Real k_f =
      0.00024 * exp((3.15) * logT - (15650.0383065268) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[25])) * (sc[2] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] += qdot;
    wdot[23] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 140:  HNO2 + O <=> NO2 + OH
    const amrex::Real k_f = 170 * exp((1.5) * logT - (1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[25])) * (sc[4] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[23] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 141:  HNO2 + OH <=> H2O + NO2
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[4] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[23] + g_RT[25])) * (sc[6] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[23] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 143:  H + NO3 <=> NO2 + OH
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[2] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[23] + g_RT[26])) * (sc[4] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[23] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 144:  NO3 + O <=> NO2 + O2
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[3] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[23] + g_RT[26])) * (sc[1] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[23] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 145:  NO3 + OH <=> HO2 + NO2
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[4] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[26])) * (sc[5] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[23] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 146:  HO2 + NO3 <=> NO2 + O2 + OH
    const amrex::Real k_f = 1500000;
    const amrex::Real qf = k_f * (sc[5] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] - g_RT[4] + g_RT[5] - g_RT[23] + g_RT[26])) *
      (refCinv) * (sc[1] * sc[4] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[23] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 149:  H + HONO2 <=> H2 + NO3
    const amrex::Real k_f = 560 * exp((1.5) * logT - (8252.7533191974) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[26] + g_RT[27])) * (sc[0] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[26] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 150:  H + HONO2 <=> H2O + NO2
    const amrex::Real k_f =
      6.1e-05 * exp((3.3) * logT - (3162.71674458266) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[27])) * (sc[6] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[23] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 151:  H + HONO2 <=> HONO + OH
    const amrex::Real k_f =
      0.38 * exp((2.3) * logT - (3510.43946065372) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[24] + g_RT[27])) * (sc[4] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[24] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 152:  HONO2 + OH <=> H2O + NO3
    const amrex::Real k_f = 10000 * exp(-(-623.988665597852) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[26] + g_RT[27])) * (sc[6] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[26] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 154:  H + N2O <=> N2 + OH
    const amrex::Real k_f =
      64 * exp((1.835) * logT - (6789.39925503728) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[28] - g_RT[29])) * (sc[4] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 155:  N2O + O <=> 2 NO
    const amrex::Real k_f = 92000000 * exp(-(13928.5340928088) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - 2.000000 * g_RT[8] + g_RT[28])) * ((sc[8] * sc[8]));
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[8] += 2.000000 * qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 156:  N2O + O <=> N2 + O2
    const amrex::Real k_f = 92000000 * exp(-(13928.5340928088) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[28] - g_RT[29])) * (sc[1] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 157:  N2O + OH <=> HO2 + N2
    const amrex::Real k_f =
      1.3e-08 * exp((4.72) * logT - (18397.6013018206) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[28] - g_RT[29])) * (sc[5] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 158:  N2O + OH <=> HNO + NO
    const amrex::Real k_f =
      1.2e-10 * exp((4.33) * logT - (12620.6739783824) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[8] - g_RT[21] + g_RT[28])) * (sc[8] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    wdot[21] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 159:  N2O + NO <=> N2 + NO2
    const amrex::Real k_f =
      0.53 * exp((2.23) * logT - (23288.8672934424) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] - g_RT[23] + g_RT[28] - g_RT[29])) *
                           (sc[23] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[23] += qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 160:  2 NH2 <=> H2 + N2H2
    const amrex::Real k_f =
      170 * exp((1.62) * logT - (5929.40197317701) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[16])) *
                           (sc[0] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[10] -= 2.000000 * qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 161:  2 NH2 <=> H2 + H2NN
    const amrex::Real k_f =
      0.072 * exp((1.88) * logT - (4429.31309241314) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[17])) *
                           (sc[0] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[10] -= 2.000000 * qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 162:  NH + NH2 <=> H + N2H2
    const amrex::Real k_f =
      430000000 * exp((-0.272) * logT - (-38.7476832669634) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[10] + g_RT[11] - g_RT[16])) *
                           (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[11] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 163:  HNOH + NH2 <=> N2H3 + OH
    const amrex::Real k_f =
      1e-05 * exp((3.46) * logT - (-235.002182930804) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[10] - g_RT[15] + g_RT[20])) *
                           (sc[4] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[15] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 164:  HNOH + NH2 <=> H2NN + H2O
    const amrex::Real k_f =
      88000000000 * exp((-1.08) * logT - (560.080149040653) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + g_RT[10] - g_RT[17] + g_RT[20])) *
                           (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[10] -= qdot;
    wdot[17] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 166:  N2H4 <=> H2 + H2NN
    const amrex::Real k_f = 140000000000000 * exp(-(37696.4636520974) * invT);
    const amrex::Real qf = k_f * (sc[14]);
    const amrex::Real qr = k_f * exp(-(-g_RT[0] + g_RT[14] - g_RT[17])) *
                           (refCinv) * (sc[0] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[14] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 167:  H + N2H4 <=> H2 + N2H3
    const amrex::Real k_f = 7000000 * exp(-(1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[14] - g_RT[15])) * (sc[0] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 168:  H + N2H4 <=> NH2 + NH3
    const amrex::Real k_f =
      0.23 * exp((1.42) * logT - (4127.38309293031) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[9] - g_RT[10] + g_RT[14])) * (sc[9] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] += qdot;
    wdot[10] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 169:  N2H4 + O <=> N2H3 + OH
    const amrex::Real k_f = 150000 * exp(-(-639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[14] - g_RT[15])) * (sc[4] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 170:  N2H4 + O <=> H2O + N2H2
    const amrex::Real k_f = 290000 * exp(-(-639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[14] - g_RT[16])) * (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[14] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 171:  N2H4 + OH <=> H2O + N2H3
    const amrex::Real k_f = 13000000 * exp(-(-160.022899725901) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[14] - g_RT[15])) * (sc[6] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 172:  N2H4 + NH2 <=> N2H3 + NH3
    const amrex::Real k_f =
      7.6e-07 * exp((4) * logT - (2037.02106317751) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[14] - g_RT[15])) *
                           (sc[9] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 173:  N2H4 + NO <=> HNO + N2H3
    const amrex::Real k_f =
      6e-05 * exp((3.16) * logT - (15521.7180567466) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] + g_RT[14] - g_RT[15] - g_RT[21])) *
                           (sc[15] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 174:  N2H4 + NO2 <=> HONO + N2H3
    const amrex::Real k_f =
      8.2e-05 * exp((3.13) * logT - (4458.49965902982) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - g_RT[15] + g_RT[23] - g_RT[24])) *
                           (sc[15] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[23] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 175:  N2H4 + NO2 <=> HNO2 + N2H3
    const amrex::Real k_f =
      2.4e-08 * exp((4.14) * logT - (3998.5596264843) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - g_RT[15] + g_RT[23] - g_RT[25])) *
                           (sc[15] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[23] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 176:  H + N2H2 <=> N2H3
    const amrex::Real k_f = 130000000 * exp(-(1947.95171333007) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[15] + g_RT[16])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 177:  H + N2H3 <=> H2 + N2H2
    const amrex::Real k_f = 240 * exp((1.5) * logT - (-5.0321666580472) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[15] - g_RT[16])) * (sc[0] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 178:  N2H3 + O <=> N2H2 + OH
    const amrex::Real k_f =
      170 * exp((1.5) * logT - (-325.077966109849) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[15] - g_RT[16])) * (sc[4] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 179:  N2H3 + O <=> HNO + NH2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[10] + g_RT[15] - g_RT[21])) *
                           (sc[10] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[15] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 180:  N2H3 + O => H + NH2 + NO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[8] += qdot;
    wdot[10] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 181:  N2H3 + OH <=> H2O + N2H2
    const amrex::Real k_f = 1.2 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[15] - g_RT[16])) * (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 182:  N2H3 + OH <=> H2NN + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[15] - g_RT[17])) * (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 183:  N2H3 + OH <=> HNO + NH3
    const amrex::Real k_f = 1000000 * exp(-(7548.2499870708) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[9] + g_RT[15] - g_RT[21])) * (sc[9] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    wdot[15] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 184:  HO2 + N2H3 <=> H2O2 + N2H2
    const amrex::Real k_f =
      0.014 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[7] + g_RT[15] - g_RT[16])) * (sc[7] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 185:  HO2 + N2H3 <=> N2H4 + O2
    const amrex::Real k_f =
      0.92 * exp((1.94) * logT - (1069.83863150083) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[5] - g_RT[14] + g_RT[15])) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 186:  N2H3 + NH2 <=> N2H2 + NH3
    const amrex::Real k_f =
      0.92 * exp((1.94) * logT - (-579.705599007037) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[16])) *
                           (sc[9] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 187:  N2H3 + NH2 <=> H2NN + NH3
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[17])) *
                           (sc[9] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 188:  N2H3 + NH <=> N2H2 + NH2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[11] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[16])) *
                           (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 190:  H + N2H2 <=> H2 + NNH
    const amrex::Real k_f = 110000000 * exp(-(1574.06173063716) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[13] + g_RT[16])) * (sc[0] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 191:  N2H2 + O <=> NNH + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (250.098682904946) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[16])) * (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 192:  N2H2 + O <=> NH2 + NO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[8] - g_RT[10] + g_RT[16])) * (sc[8] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[8] += qdot;
    wdot[10] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 193:  N2H2 + OH <=> H2O + NNH
    const amrex::Real k_f =
      5.9e-05 * exp((3.4) * logT - (684.374665494419) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[13] + g_RT[16])) * (sc[6] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 194:  N2H2 + NH2 <=> NH3 + NNH
    const amrex::Real k_f =
      8.8e-08 * exp((4.05) * logT - (810.178831945599) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] - g_RT[13] + g_RT[16])) *
                           (sc[9] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 195:  N2H2 + NH <=> NH2 + NNH
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] - g_RT[13] + g_RT[16])) *
                           (sc[10] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 196:  N2H2 + NO <=> N2O + NH2
    const amrex::Real k_f = 4000000 * exp(-(5999.34908972387) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] - g_RT[10] + g_RT[16] - g_RT[28])) *
                           (sc[10] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[10] += qdot;
    wdot[16] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 197:  H2NN <=> H + NNH
    const amrex::Real k_f =
      3.4e+26 * exp((-4.83) * logT - (23262.7000268206) * invT);
    const amrex::Real qf = k_f * (sc[17]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] - g_RT[13] + g_RT[17])) *
                           (refCinv) * (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 198:  H2NN <=> H2 + N2
    const amrex::Real k_f = 250000000000000 * exp(-(26562.2917045021) * invT);
    const amrex::Real qf = k_f * (sc[17]);
    const amrex::Real qr = k_f * exp(-(-g_RT[0] + g_RT[17] - g_RT[29])) *
                           (refCinv) * (sc[0] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[17] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 199:  H2NN <=> N2H2
    const amrex::Real k_f = 130000000000000 * exp(-(23616.4613428813) * invT);
    const amrex::Real qf = k_f * (sc[17]);
    const amrex::Real qr = k_f * exp(-(-g_RT[16] + g_RT[17])) * (sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 200:  H + H2NN <=> H2 + NNH
    const amrex::Real k_f =
      480 * exp((1.5) * logT - (-449.875699229419) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[13] + g_RT[17])) * (sc[0] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 201:  H + H2NN <=> H + N2H2
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[2] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[16] + g_RT[17])) * (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 202:  H2NN + O <=> NNH + OH
    const amrex::Real k_f =
      330 * exp((1.5) * logT - (-449.875699229419) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[17])) * (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 203:  H2NN + O <=> NH2 + NO
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[3] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[8] - g_RT[10] + g_RT[17])) * (sc[8] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[8] += qdot;
    wdot[10] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 204:  H2NN + OH <=> H2O + NNH
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[13] + g_RT[17])) * (sc[6] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 205:  H2NN + OH => H + NH2 + NO
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[4] * sc[17]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    wdot[10] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 206:  H2NN + HO2 => NH2 + NO + OH
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[5] * sc[17]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[10] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 207:  H2NN + HO2 <=> H2O2 + NNH
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[7] - g_RT[13] + g_RT[17])) * (sc[7] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 208:  H2NN + O2 <=> NH2 + NO2
    const amrex::Real k_f = 1500000 * exp(-(2999.67454486193) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[10] + g_RT[17] - g_RT[23])) *
                           (sc[10] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[10] += qdot;
    wdot[17] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 209:  H2NN + NH2 <=> NH3 + NNH
    const amrex::Real k_f =
      1.8 * exp((1.94) * logT - (-579.705599007037) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] - g_RT[13] + g_RT[17])) *
                           (sc[9] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[])
{

  // convert to SI
  for (int id = 0; id < 30; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[30]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  for (int i = 0; i < 30; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[30]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 30; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[30]; // temporary storage

  // See Eq 8 with an extra 1e6 so c goes to SI
  for (int i = 0; i < 30; i++) {
    c[i] = 1e6 * rho * y[i] * imw(i);
  }

  // call productionRate
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[30];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 31.998000;  // O2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 33.006000;  // HO2
  XW += x[6] * 18.015000;  // H2O
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 30.006000;  // NO
  XW += x[9] * 17.031000;  // NH3
  XW += x[10] * 16.023000; // NH2
  XW += x[11] * 15.015000; // NH
  XW += x[12] * 14.007000; // N
  XW += x[13] * 29.022000; // NNH
  XW += x[14] * 32.046000; // N2H4
  XW += x[15] * 31.038000; // N2H3
  XW += x[16] * 30.030000; // N2H2
  XW += x[17] * 30.030000; // H2NN
  XW += x[18] * 33.030000; // NH2OH
  XW += x[19] * 32.022000; // H2NO
  XW += x[20] * 32.022000; // HNOH
  XW += x[21] * 31.014000; // HNO
  XW += x[22] * 31.014000; // HON
  XW += x[23] * 46.005000; // NO2
  XW += x[24] * 47.013000; // HONO
  XW += x[25] * 47.013000; // HNO2
  XW += x[26] * 62.004000; // NO3
  XW += x[27] * 63.012000; // HONO2
  XW += x[28] * 44.013000; // N2O
  XW += x[29] * 28.014000; // N2
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 30; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = 0;  // H2
  kcharge[1] = 0;  // O2
  kcharge[2] = 0;  // H
  kcharge[3] = 0;  // O
  kcharge[4] = 0;  // OH
  kcharge[5] = 0;  // HO2
  kcharge[6] = 0;  // H2O
  kcharge[7] = 0;  // H2O2
  kcharge[8] = 0;  // NO
  kcharge[9] = 0;  // NH3
  kcharge[10] = 0; // NH2
  kcharge[11] = 0; // NH
  kcharge[12] = 0; // N
  kcharge[13] = 0; // NNH
  kcharge[14] = 0; // N2H4
  kcharge[15] = 0; // N2H3
  kcharge[16] = 0; // N2H2
  kcharge[17] = 0; // H2NN
  kcharge[18] = 0; // NH2OH
  kcharge[19] = 0; // H2NO
  kcharge[20] = 0; // HNOH
  kcharge[21] = 0; // HNO
  kcharge[22] = 0; // HON
  kcharge[23] = 0; // NO2
  kcharge[24] = 0; // HONO
  kcharge[25] = 0; // HNO2
  kcharge[26] = 0; // NO3
  kcharge[27] = 0; // HONO2
  kcharge[28] = 0; // N2O
  kcharge[29] = 0; // N2
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{

  int kchrg[30];
  CKCHRG(kchrg);

  for (int id = 0; id < 30; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw(id);
  }
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 961; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[30];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real invT = 1.0 / T;
  const amrex::Real invT2 = invT * invT;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 30; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[30];
  gibbs(g_RT, T);

  // compute the species enthalpy
  amrex::Real h_RT[30];
  speciesEnthalpy(h_RT, T);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[30];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 11: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0.78 - 1) * sc[1] + (14 - 1) * sc[6];
  // forward
  phi_f = sc[1] * sc[2];
  k_f = 4700000 * exp(0.44 * logT);
  dlnkfdT = 0.44 * invT;
  // pressure-fall-off
  k_0 = 6.366e+20 * exp(-1.72 * logT - (264.088106214317) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.72 * invT + (264.088106214317) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(g_RT[1] + g_RT[2] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[2]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q; // O2
  wdot[2] -= q; // H
  wdot[5] += q; // HO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = 0.78 * dcdc_fac + k_f * sc[2];
  dqdc[2] = dcdc_fac + k_f * sc[1];
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac - k_r;
  dqdc[6] = 14 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] -= dqdc[k];
    J[31 * k + 2] -= dqdc[k];
    J[31 * k + 5] += dqdc[k];
  }
  J[931] -= dqdT; // dwdot[O2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[935] += dqdT; // dwdot[HO2]/dT

  // reaction 20: H2O2 (+M) <=> 2 OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (3.7 - 1) * sc[0] + (1.2 - 1) * sc[1] + (7.5 - 1) * sc[6] +
          (7.7 - 1) * sc[7] + (1.5 - 1) * sc[29];
  // forward
  phi_f = sc[7];
  k_f = 2000000000000 * exp(0.9 * logT - (24531.3092413143) * invT);
  dlnkfdT = 0.9 * invT + (24531.3092413143) * invT2;
  // pressure-fall-off
  k_0 = 2.5e+24 * exp(-2.3 * logT - (24531.3092413143) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.3 * invT + (24531.3092413143) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.43) * exp(-T / 1e-30);
  Fcent2 = 0.43 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = refC * exp(-2.000000 * g_RT[4] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7]) + (2.000000 * h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += 2 * q; // OH
  wdot[7] -= q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 3.7 * dcdc_fac;
  dqdc[1] = 1.2 * dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac - k_r * 2.000000 * sc[4];
  dqdc[5] = dcdc_fac;
  dqdc[6] = 7.5 * dcdc_fac;
  dqdc[7] = 7.7 * dcdc_fac + k_f;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = 1.5 * dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 4] += 2 * dqdc[k];
    J[31 * k + 7] -= dqdc[k];
  }
  J[934] += 2 * dqdT; // dwdot[OH]/dT
  J[937] -= dqdT;     // dwdot[H2O2]/dT

  // reaction 26: H + NH2 (+M) <=> NH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 160000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 3.6e+22 * exp(-1.76 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.76 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[9];
  Kc = refCinv * exp(g_RT[2] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // H
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac + k_f * sc[10];
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac - k_r;
  dqdc[10] = dcdc_fac + k_f * sc[2];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 2] -= dqdc[k];
    J[31 * k + 9] += dqdc[k];
    J[31 * k + 10] -= dqdc[k];
  }
  J[932] -= dqdT; // dwdot[H]/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT

  // reaction 78: NH2OH (+M) <=> NH2 + OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[18];
  k_f = 1.4e+20 * exp(-1.31 * logT - (32246.1239447664) * invT);
  dlnkfdT = -1.31 * invT + (32246.1239447664) * invT2;
  // pressure-fall-off
  k_0 = 5.4e+37 * exp(-5.96 * logT - (33606.3185924366) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.96 * invT + (33606.3185924366) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.31) * exp(-T / 1e-30);
  Fcent2 = 0.31 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = refC * exp(-g_RT[4] - g_RT[10] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18]) + (h_RT[4] + h_RT[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += q;  // OH
  wdot[10] += q; // NH2
  wdot[18] -= q; // NH2OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac - k_r * sc[10];
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac - k_r * sc[4];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 4] += dqdc[k];
    J[31 * k + 10] += dqdc[k];
    J[31 * k + 18] -= dqdc[k];
  }
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 113: H + NO (+M) <=> HNO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.6 - 1) * sc[29];
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 1500000000 * exp(-0.41 * logT);
  dlnkfdT = -0.41 * invT;
  // pressure-fall-off
  k_0 = 240000000000000 * exp(0.206 * logT - (-779.985831997315) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = 0.206 * invT + (-779.985831997315) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.82) * exp(-T / 1e-30);
  Fcent2 = 0.82 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[21];
  Kc = refCinv * exp(g_RT[2] + g_RT[8] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[8]) + (h_RT[21]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // H
  wdot[8] -= q;  // NO
  wdot[21] += q; // HNO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac + k_f * sc[8];
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac + k_f * sc[2];
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac - k_r;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = 1.6 * dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 2] -= dqdc[k];
    J[31 * k + 8] -= dqdc[k];
    J[31 * k + 21] += dqdc[k];
  }
  J[932] -= dqdT; // dwdot[H]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 122: NO + O (+M) <=> NO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 1300000000 * exp(-0.75 * logT);
  dlnkfdT = -0.75 * invT;
  // pressure-fall-off
  k_0 = 4.72e+24 * exp(-2.87 * logT - (779.985831997315) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.87 * invT + (779.985831997315) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.75) * exp(-T / 1000);
  Fcent2 = 0.75 * exp(-T / 100000);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1000 - Fcent2 / 100000 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[23];
  Kc = refCinv * exp(g_RT[3] + g_RT[8] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[8]) + (h_RT[23]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] -= q;  // NO
  wdot[23] += q; // NO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac + k_f * sc[8];
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac + k_f * sc[3];
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac - k_r;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 3] -= dqdc[k];
    J[31 * k + 8] -= dqdc[k];
    J[31 * k + 23] += dqdc[k];
  }
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[953] += dqdT; // dwdot[NO2]/dT

  // reaction 129: NO + OH (+M) <=> HONO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 110000000 * exp(-0.3 * logT);
  dlnkfdT = -0.3 * invT;
  // pressure-fall-off
  k_0 = 3.392e+23 * exp(-2.5 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.5 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.75) * exp(-T / 1e-30);
  Fcent2 = 0.75 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[24];
  Kc = refCinv * exp(g_RT[4] + g_RT[8] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[8]) + (h_RT[24]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[8] -= q;  // NO
  wdot[24] += q; // HONO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * sc[8];
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac + k_f * sc[4];
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac - k_r;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 4] -= dqdc[k];
    J[31 * k + 8] -= dqdc[k];
    J[31 * k + 24] += dqdc[k];
  }
  J[934] -= dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 138: HNO2 (+M) <=> HONO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[25];
  k_f = 250000000000000 * exp(-(16253.8983054924) * invT);
  dlnkfdT = (16253.8983054924) * invT2;
  // pressure-fall-off
  k_0 = 3.1e+18 * exp(-(15851.3249728487) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (15851.3249728487) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1.149) * exp(-T / 1e-30);
  Fcent2 = 1.149 * exp(-T / 3125);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 3125 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[24];
  Kc = exp(-g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25]) + (h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[24] += q; // HONO
  wdot[25] -= q; // HNO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac - k_r;
  dqdc[25] = dcdc_fac + k_f;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 24] += dqdc[k];
    J[31 * k + 25] -= dqdc[k];
  }
  J[954] += dqdT; // dwdot[HONO]/dT
  J[955] -= dqdT; // dwdot[HNO2]/dT

  // reaction 142: NO2 + O (+M) <=> NO3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 3500000 * exp(0.24 * logT);
  dlnkfdT = 0.24 * invT;
  // pressure-fall-off
  k_0 = 2.5e+20 * exp(-1.5 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.5 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.71) * exp(-T / 1e-30);
  Fcent2 = 0.71 * exp(-T / 1700);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1700 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(g_RT[3] + g_RT[23] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= q;  // O
  wdot[23] -= q; // NO2
  wdot[26] += q; // NO3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac + k_f * sc[23];
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac + k_f * sc[3];
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac - k_r;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 3] -= dqdc[k];
    J[31 * k + 23] -= dqdc[k];
    J[31 * k + 26] += dqdc[k];
  }
  J[933] -= dqdT; // dwdot[O]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[956] += dqdT; // dwdot[NO3]/dT

  // reaction 148: NO2 + OH (+M) <=> HONO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.938e+25 * exp(-3 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.4) * exp(-T / 1e-30);
  Fcent2 = 0.4 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(g_RT[4] + g_RT[23] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[23] -= q; // NO2
  wdot[27] += q; // HONO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * sc[23];
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac + k_f * sc[4];
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac - k_r;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 4] -= dqdc[k];
    J[31 * k + 23] -= dqdc[k];
    J[31 * k + 27] += dqdc[k];
  }
  J[934] -= dqdT; // dwdot[OH]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[957] += dqdT; // dwdot[HONO2]/dT

  // reaction 153: N2O (+M) <=> N2 + O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.4 - 1) * sc[1] + (12 - 1) * sc[6] + (1.7 - 1) * sc[29];
  // forward
  phi_f = sc[28];
  k_f = 99000000000 * exp(-(29136.7481667591) * invT);
  dlnkfdT = (29136.7481667591) * invT2;
  // pressure-fall-off
  k_0 = 600000000000000 * exp(-(28906.7781504863) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (28906.7781504863) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1);
  Fcent2 = 1 * exp(-T / 10000000);
  Fcent3 = exp(-10000000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1 - Fcent2 / 10000000 + Fcent3 * 10000000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[3] * sc[29];
  Kc = refC * exp(-g_RT[3] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[28]) + (h_RT[3] + h_RT[29]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] += q;  // O
  wdot[28] -= q; // N2O
  wdot[29] += q; // N2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = 1.4 * dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac - k_r * sc[29];
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = 12 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac + k_f;
  dqdc[29] = 1.7 * dcdc_fac - k_r * sc[3];
  for (int k = 0; k < 30; k++) {
    J[31 * k + 3] += dqdc[k];
    J[31 * k + 28] -= dqdc[k];
    J[31 * k + 29] += dqdc[k];
  }
  J[933] += dqdT; // dwdot[O]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 165: 2 NH2 (+M) <=> N2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 560000000 * exp(-0.414 * logT - (33.2122999431115) * invT);
  dlnkfdT = -0.414 * invT + (33.2122999431115) * invT2;
  // pressure-fall-off
  k_0 = 1.6e+34 * exp(-5.49 * logT - (999.891514953978) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.49 * invT + (999.891514953978) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.31) * exp(-T / 1e-30);
  Fcent2 = 0.31 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[14];
  Kc = refCinv * exp(2.000000 * g_RT[10] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[14]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[10] -= 2 * q; // NH2
  wdot[14] += q;     // N2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac + k_f * 2.000000 * sc[10];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac - k_r;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 10] += -2 * dqdc[k];
    J[31 * k + 14] += dqdc[k];
  }
  J[940] += -2 * dqdT; // dwdot[NH2]/dT
  J[944] += dqdT;      // dwdot[N2H4]/dT

  // reaction 6: H2 + M <=> 2 H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[0] + (12 - 1) * sc[6];
  // forward
  phi_f = sc[0];
  k_f = 46000000000000 * exp(-1.4 * logT - (52525.7555766966) * invT);
  dlnkfdT = -1.4 * invT + (52525.7555766966) * invT2;
  // reverse
  phi_r = (sc[2] * sc[2]);
  Kc = refC * exp(g_RT[0] - 2.000000 * g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0]) + (2.000000 * h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;     // H2
  wdot[2] += 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2.5 * q_nocor + k_f;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor - k_r * 2.000000 * sc[2];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = 12 * q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 0] -= dqdc[k];
    J[31 * k + 2] += 2 * dqdc[k];
  }
  J[930] -= dqdT;     // dwdot[H2]/dT
  J[932] += 2 * dqdT; // dwdot[H]/dT

  // reaction 7: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[0] + (12 - 1) * sc[6];
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 4700000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2.5 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor + k_f * sc[3];
  dqdc[3] = q_nocor + k_f * sc[2];
  dqdc[4] = q_nocor - k_r;
  dqdc[5] = q_nocor;
  dqdc[6] = 12 * q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 2] -= dqdc[k];
    J[31 * k + 3] -= dqdc[k];
    J[31 * k + 4] += dqdc[k];
  }
  J[932] -= dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 8: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[0] + (12 - 1) * sc[6];
  // forward
  phi_f = (sc[3] * sc[3]);
  k_f = 19 * exp(-(-899.751398458839) * invT);
  dlnkfdT = (-899.751398458839) * invT2;
  // reverse
  phi_r = sc[1];
  Kc = refCinv * exp(-g_RT[1] + 2.000000 * g_RT[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[3]) + (h_RT[1]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;     // O2
  wdot[3] -= 2 * q; // O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2.5 * q_nocor;
  dqdc[1] = q_nocor - k_r;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor + k_f * 2.000000 * sc[3];
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = 12 * q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] += dqdc[k];
    J[31 * k + 3] += -2 * dqdc[k];
  }
  J[931] += dqdT;      // dwdot[O2]/dT
  J[933] += -2 * dqdT; // dwdot[O]/dT

  // reaction 9: H2O + M <=> H + OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha =
    mixture + (3 - 1) * sc[0] + (1.5 - 1) * sc[1] + (0 - 1) * sc[6] + sc[29];
  // forward
  phi_f = sc[6];
  k_f = 6.1e+21 * exp(-3.322 * logT - (60783.5410625521) * invT);
  dlnkfdT = -3.322 * invT + (60783.5410625521) * invT2;
  // reverse
  phi_r = sc[2] * sc[4];
  Kc = refC * exp(-g_RT[2] - g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6]) + (h_RT[2] + h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q; // H
  wdot[4] += q; // OH
  wdot[6] -= q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 3 * q_nocor;
  dqdc[1] = 1.5 * q_nocor;
  dqdc[2] = q_nocor - k_r * sc[4];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor - k_r * sc[2];
  dqdc[5] = q_nocor;
  dqdc[6] = +k_f;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = 2 * q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 2] += dqdc[k];
    J[31 * k + 4] += dqdc[k];
    J[31 * k + 6] -= dqdc[k];
  }
  J[932] += dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[H2O]/dT

  // reaction 10: H2O + H2O <=> H + OH + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 1e+20 * exp(-2.44 * logT - (60476.5788964112) * invT);
  dlnkfdT = -2.44 * invT + (60476.5788964112) * invT2;
  // reverse
  phi_r = sc[2] * sc[4] * sc[6];
  Kc = refC * exp(-g_RT[2] - g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[6]) + (h_RT[2] + h_RT[4] + h_RT[6]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q; // H
  wdot[4] += q; // OH
  wdot[6] -= q; // H2O
  // d()/d[H]
  dqdci = -k_r * sc[4] * sc[6];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[68] -= dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[2] * sc[6];
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = +k_f * 2.000000 * sc[6] - k_r * sc[2] * sc[4];
  J[188] += dqdci; // dwdot[H]/d[H2O]
  J[190] += dqdci; // dwdot[OH]/d[H2O]
  J[192] -= dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[H2O]/dT

  // reaction 91: H2NO + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[6];
  // forward
  phi_f = sc[19];
  k_f = 2.8e+18 * exp(-2.83 * logT - (32666.3098607134) * invT);
  dlnkfdT = -2.83 * invT + (32666.3098607134) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor - k_r * sc[21];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = 10 * q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor + k_f;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor - k_r * sc[2];
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 2] += dqdc[k];
    J[31 * k + 19] -= dqdc[k];
    J[31 * k + 21] += dqdc[k];
  }
  J[932] += dqdT; // dwdot[H]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 92: H2NO + M <=> HNOH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[6];
  // forward
  phi_f = sc[19];
  k_f = 1.1e+23 * exp(-4 * logT - (22141.5332954077) * invT);
  dlnkfdT = -4 * invT + (22141.5332954077) * invT2;
  // reverse
  phi_r = sc[20];
  Kc = exp(g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] -= q; // H2NO
  wdot[20] += q; // HNOH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = 10 * q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor + k_f;
  dqdc[20] = q_nocor - k_r;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 19] -= dqdc[k];
    J[31 * k + 20] += dqdc[k];
  }
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 102: HNOH + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[6];
  // forward
  phi_f = sc[20];
  k_f = 2e+18 * exp(-2.84 * logT - (29656.5709825354) * invT);
  dlnkfdT = -2.84 * invT + (29656.5709825354) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor - k_r * sc[21];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = 10 * q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor + k_f;
  dqdc[21] = q_nocor - k_r * sc[2];
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 2] += dqdc[k];
    J[31 * k + 20] -= dqdc[k];
    J[31 * k + 21] += dqdc[k];
  }
  J[932] += dqdT; // dwdot[H]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 147: NO3 + NO2 <=> NO + O2 + NO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[26];
  k_f = 50000 * exp(-(1479.45699746588) * invT);
  dlnkfdT = (1479.45699746588) * invT2;
  // reverse
  phi_r = sc[1] * sc[8] * sc[23];
  Kc = refC * exp(-g_RT[1] - g_RT[8] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[23] + h_RT[26]) + (h_RT[1] + h_RT[8] + h_RT[23]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[8] += q;  // NO
  wdot[26] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[8] * sc[23];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[39] += dqdci; // dwdot[NO]/d[O2]
  J[57] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[1] * sc[23];
  J[249] += dqdci; // dwdot[O2]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[274] -= dqdci; // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[26] - k_r * sc[1] * sc[8];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[739] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[23];
  J[807] += dqdci; // dwdot[O2]/d[NO3]
  J[814] += dqdci; // dwdot[NO]/d[NO3]
  J[832] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[956] -= dqdT; // dwdot[NO3]/dT

  // reaction 189: N2H2 + M <=> H + NNH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (7 - 1) * sc[6];
  // forward
  phi_f = sc[16];
  k_f = 1.9e+21 * exp(-3.05 * logT - (33266.1441263526) * invT);
  dlnkfdT = -3.05 * invT + (33266.1441263526) * invT2;
  // reverse
  phi_r = sc[2] * sc[13];
  Kc = refC * exp(-g_RT[2] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[2] + h_RT[13]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor - k_r * sc[13];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = 7 * q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor - k_r * sc[2];
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor + k_f;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 2] += dqdc[k];
    J[31 * k + 13] += dqdc[k];
    J[31 * k + 16] -= dqdc[k];
  }
  J[932] += dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 0: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[2];
  k_f = 100000000 * exp(-(7692.16995349094) * invT);
  dlnkfdT = (7692.16995349094) * invT2;
  // reverse
  phi_r = sc[3] * sc[4];
  Kc = exp(g_RT[1] + g_RT[2] - g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[2]) + (h_RT[3] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // O2
  wdot[2] -= q; // H
  wdot[3] += q; // O
  wdot[4] += q; // OH
  // d()/d[O2]
  dqdci = +k_f * sc[2];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[33] -= dqdci; // dwdot[H]/d[O2]
  J[34] += dqdci; // dwdot[O]/d[O2]
  J[35] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[H]
  dqdci = +k_f * sc[1];
  J[63] -= dqdci; // dwdot[O2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[65] += dqdci; // dwdot[O]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[4];
  J[94] -= dqdci; // dwdot[O2]/d[O]
  J[95] -= dqdci; // dwdot[H]/d[O]
  J[96] += dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[125] -= dqdci; // dwdot[O2]/d[OH]
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[127] += dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 1: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 3800000 * exp(-(3999.56605981591) * invT);
  dlnkfdT = (3999.56605981591) * invT2;
  // reverse
  phi_r = sc[2] * sc[4];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[3]) + (h_RT[2] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[2] += q; // H
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[3];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[2] += dqdci; // dwdot[H]/d[H2]
  J[3] -= dqdci; // dwdot[O]/d[H2]
  J[4] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[O]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[93] -= dqdci; // dwdot[H2]/d[O]
  J[95] += dqdci; // dwdot[H]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[124] -= dqdci; // dwdot[H2]/d[OH]
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 2: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 880000000 * exp(-(9649.1795668055) * invT);
  dlnkfdT = (9649.1795668055) * invT2;
  // reverse
  phi_r = sc[2] * sc[4];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[3]) + (h_RT[2] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[2] += q; // H
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[3];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[2] += dqdci; // dwdot[H]/d[H2]
  J[3] -= dqdci; // dwdot[O]/d[H2]
  J[4] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[O]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[93] -= dqdci; // dwdot[H2]/d[O]
  J[95] += dqdci; // dwdot[H]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[124] -= dqdci; // dwdot[H2]/d[OH]
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 3: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 220 * exp(1.51 * logT - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[2] += q; // H
  wdot[4] -= q; // OH
  wdot[6] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[2] += dqdci; // dwdot[H]/d[H2]
  J[4] -= dqdci; // dwdot[OH]/d[H2]
  J[6] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[6];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[66] -= dqdci; // dwdot[OH]/d[H]
  J[68] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[124] -= dqdci; // dwdot[H2]/d[OH]
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[186] -= dqdci; // dwdot[H2]/d[H2O]
  J[188] += dqdci; // dwdot[H]/d[H2O]
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT

  // reaction 4: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 20 * exp(1.651 * logT - (317.529716122778) * invT);
  dlnkfdT = 1.651 * invT + (317.529716122778) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[6] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[96] += dqdci;      // dwdot[O]/d[O]
  J[97] += -2 * dqdci; // dwdot[OH]/d[O]
  J[99] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[127] += dqdci;      // dwdot[O]/d[OH]
  J[128] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[189] += dqdci;      // dwdot[O]/d[H2O]
  J[190] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[933] += dqdT;      // dwdot[O]/dT
  J[934] += -2 * dqdT; // dwdot[OH]/dT
  J[936] += dqdT;      // dwdot[H2O]/dT

  // reaction 5: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 260000 * exp(-0.057 * logT - (-416.160182620503) * invT);
  dlnkfdT = -0.057 * invT + (-416.160182620503) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[6] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[96] += dqdci;      // dwdot[O]/d[O]
  J[97] += -2 * dqdci; // dwdot[OH]/d[O]
  J[99] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[127] += dqdci;      // dwdot[O]/d[OH]
  J[128] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[189] += dqdci;      // dwdot[O]/d[H2O]
  J[190] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[933] += dqdT;      // dwdot[O]/dT
  J[934] += -2 * dqdT; // dwdot[OH]/dT
  J[936] += dqdT;      // dwdot[H2O]/dT

  // reaction 12: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 2.8 * exp(2.09 * logT - (-730.167382082648) * invT);
  dlnkfdT = 2.09 * invT + (-730.167382082648) * invT2;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = exp(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[0] + h_RT[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] += q; // O2
  wdot[2] -= q; // H
  wdot[5] -= q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[O2]/d[H2]
  J[2] -= dqdci; // dwdot[H]/d[H2]
  J[5] -= dqdci; // dwdot[HO2]/d[H2]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[31] += dqdci; // dwdot[H2]/d[O2]
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[33] -= dqdci; // dwdot[H]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H]
  dqdci = +k_f * sc[5];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[63] += dqdci; // dwdot[O2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[67] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[155] += dqdci; // dwdot[H2]/d[HO2]
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[157] -= dqdci; // dwdot[H]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT

  // reaction 13: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 71000000 * exp(-(148.448916412392) * invT);
  dlnkfdT = (148.448916412392) * invT2;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = exp(g_RT[2] - 2.000000 * g_RT[4] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (2.000000 * h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;     // H
  wdot[4] += 2 * q; // OH
  wdot[5] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[5];
  J[64] -= dqdci;     // dwdot[H]/d[H]
  J[66] += 2 * dqdci; // dwdot[OH]/d[H]
  J[67] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[4];
  J[126] -= dqdci;     // dwdot[H]/d[OH]
  J[128] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[157] -= dqdci;     // dwdot[H]/d[HO2]
  J[159] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[932] -= dqdT;     // dwdot[H]/dT
  J[934] += 2 * dqdT; // dwdot[OH]/dT
  J[935] -= dqdT;     // dwdot[HO2]/dT

  // reaction 14: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 1400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[3] += q; // O
  wdot[5] -= q; // HO2
  wdot[6] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc[5];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[65] += dqdci; // dwdot[O]/d[H]
  J[67] -= dqdci; // dwdot[HO2]/d[H]
  J[68] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[95] -= dqdci; // dwdot[H]/d[O]
  J[96] += dqdci; // dwdot[O]/d[O]
  J[98] -= dqdci; // dwdot[HO2]/d[O]
  J[99] += dqdci; // dwdot[H2O]/d[O]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[157] -= dqdci; // dwdot[H]/d[HO2]
  J[158] += dqdci; // dwdot[O]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[188] -= dqdci; // dwdot[H]/d[H2O]
  J[189] += dqdci; // dwdot[O]/d[H2O]
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT

  // reaction 15: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[5];
  k_f = 29000 * exp(1 * logT - (-364.328866042617) * invT);
  dlnkfdT = 1 * invT + (-364.328866042617) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[5]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // O2
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  wdot[5] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[4];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[34] -= dqdci; // dwdot[O]/d[O2]
  J[35] += dqdci; // dwdot[OH]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[5];
  J[94] += dqdci; // dwdot[O2]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  J[98] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[125] += dqdci; // dwdot[O2]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[3];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[158] -= dqdci; // dwdot[O]/d[HO2]
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT

  // reaction 16: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[5];
  k_f = 190000000000000 * exp(-2.49 * logT - (293.878532829956) * invT);
  dlnkfdT = -2.49 * invT + (293.878532829956) * invT2;
  // reverse
  phi_r = sc[1] * sc[6];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[5]) + (h_RT[1] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // O2
  wdot[4] -= q; // OH
  wdot[5] -= q; // HO2
  wdot[6] += q; // H2O
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[35] -= dqdci; // dwdot[OH]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[37] += dqdci; // dwdot[H2O]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[5];
  J[125] += dqdci; // dwdot[O2]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[187] += dqdci; // dwdot[O2]/d[H2O]
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT

  // reaction 17: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[5];
  k_f = 1200 * exp(1.24 * logT - (-659.213832204183) * invT);
  dlnkfdT = 1.24 * invT + (-659.213832204183) * invT2;
  // reverse
  phi_r = sc[1] * sc[6];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[5]) + (h_RT[1] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // O2
  wdot[4] -= q; // OH
  wdot[5] -= q; // HO2
  wdot[6] += q; // H2O
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[35] -= dqdci; // dwdot[OH]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[37] += dqdci; // dwdot[H2O]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[5];
  J[125] += dqdci; // dwdot[O2]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[187] += dqdci; // dwdot[O2]/d[H2O]
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT

  // reaction 18: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[5] * sc[5]);
  k_f = 1200 * exp(0.771 * logT - (-918.370415093613) * invT);
  dlnkfdT = 0.771 * invT + (-918.370415093613) * invT2;
  // reverse
  phi_r = sc[1] * sc[7];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[5] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[5]) + (h_RT[1] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;     // O2
  wdot[5] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[32] += dqdci;      // dwdot[O2]/d[O2]
  J[36] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[38] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[5];
  J[156] += dqdci;      // dwdot[O2]/d[HO2]
  J[160] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[1];
  J[218] += dqdci;      // dwdot[O2]/d[H2O2]
  J[222] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[931] += dqdT;      // dwdot[O2]/dT
  J[935] += -2 * dqdT; // dwdot[HO2]/dT
  J[937] += dqdT;      // dwdot[H2O2]/dT

  // reaction 19: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[5] * sc[5]);
  k_f = 1300000 * exp(0.295 * logT - (3722.29367695751) * invT);
  dlnkfdT = 0.295 * invT + (3722.29367695751) * invT2;
  // reverse
  phi_r = sc[1] * sc[7];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[5] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[5]) + (h_RT[1] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;     // O2
  wdot[5] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[32] += dqdci;      // dwdot[O2]/d[O2]
  J[36] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[38] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[5];
  J[156] += dqdci;      // dwdot[O2]/d[HO2]
  J[160] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[1];
  J[218] += dqdci;      // dwdot[O2]/d[H2O2]
  J[222] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[931] += dqdT;      // dwdot[O2]/dT
  J[935] += -2 * dqdT; // dwdot[HO2]/dT
  J[937] += dqdT;      // dwdot[H2O2]/dT

  // reaction 21: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 24000000 * exp(-(1997.77016324474) * invT);
  dlnkfdT = (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[4] += q; // OH
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[68] += dqdci; // dwdot[H2O]/d[H]
  J[69] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[6];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[188] -= dqdci; // dwdot[H]/d[H2O]
  J[190] += dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[193] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[219] -= dqdci; // dwdot[H]/d[H2O2]
  J[221] += dqdci; // dwdot[OH]/d[H2O2]
  J[223] += dqdci; // dwdot[H2O]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 22: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 48000000 * exp(-(4000.57249314752) * invT);
  dlnkfdT = (4000.57249314752) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[2] -= q; // H
  wdot[5] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[H2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[2] -= dqdci; // dwdot[H]/d[H2]
  J[5] += dqdci; // dwdot[HO2]/d[H2]
  J[7] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[67] += dqdci; // dwdot[HO2]/d[H]
  J[69] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[155] += dqdci; // dwdot[H2]/d[HO2]
  J[157] -= dqdci; // dwdot[H]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[162] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[217] += dqdci; // dwdot[H2]/d[H2O2]
  J[219] -= dqdci; // dwdot[H]/d[H2O2]
  J[222] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 23: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 9.6 * exp(2 * logT - (1997.77016324474) * invT);
  dlnkfdT = 2 * invT + (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  wdot[5] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[98] += dqdci;  // dwdot[HO2]/d[O]
  J[100] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[HO2]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[4];
  J[158] -= dqdci; // dwdot[O]/d[HO2]
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[162] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[3];
  J[220] -= dqdci; // dwdot[O]/d[H2O2]
  J[221] += dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 24: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 1700000 * exp(-(160.022899725901) * invT);
  dlnkfdT = (160.022899725901) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // HO2
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[HO2]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  J[162] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[5];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[191] += dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[193] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[221] -= dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[HO2]/d[H2O2]
  J[223] += dqdci; // dwdot[H2O]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 25: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 76000000 * exp(-(3658.38516040031) * invT);
  dlnkfdT = (3658.38516040031) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // HO2
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[HO2]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  J[162] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[5];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[191] += dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[193] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[221] -= dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[HO2]/d[H2O2]
  J[223] += dqdci; // dwdot[H2O]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 27: H + NH3 <=> H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 0.64 * exp(2.39 * logT - (5118.2167078998) * invT);
  dlnkfdT = 2.39 * invT + (5118.2167078998) * invT2;
  // reverse
  phi_r = sc[0] * sc[10];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[0] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[9] -= q;  // NH3
  wdot[10] += q; // NH2
  // d()/d[H2]
  dqdci = -k_r * sc[10];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[9] -= dqdci;  // dwdot[NH3]/d[H2]
  J[10] += dqdci; // dwdot[NH2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[9];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[71] -= dqdci; // dwdot[NH3]/d[H]
  J[72] += dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH3]
  dqdci = +k_f * sc[2];
  J[279] += dqdci; // dwdot[H2]/d[NH3]
  J[281] -= dqdci; // dwdot[H]/d[NH3]
  J[288] -= dqdci; // dwdot[NH3]/d[NH3]
  J[289] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[0];
  J[310] += dqdci; // dwdot[H2]/d[NH2]
  J[312] -= dqdci; // dwdot[H]/d[NH2]
  J[319] -= dqdci; // dwdot[NH3]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[939] -= dqdT; // dwdot[NH3]/dT
  J[940] += dqdT; // dwdot[NH2]/dT

  // reaction 28: NH3 + O <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 9.4 * exp(1.94 * logT - (3250.77966109849) * invT);
  dlnkfdT = 1.94 * invT + (3250.77966109849) * invT2;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[9] -= q;  // NH3
  wdot[10] += q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[9];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[102] -= dqdci; // dwdot[NH3]/d[O]
  J[103] += dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[133] -= dqdci; // dwdot[NH3]/d[OH]
  J[134] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH3]
  dqdci = +k_f * sc[3];
  J[282] -= dqdci; // dwdot[O]/d[NH3]
  J[283] += dqdci; // dwdot[OH]/d[NH3]
  J[288] -= dqdci; // dwdot[NH3]/d[NH3]
  J[289] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[319] -= dqdci; // dwdot[NH3]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[939] -= dqdT; // dwdot[NH3]/dT
  J[940] += dqdT; // dwdot[NH2]/dT

  // reaction 29: NH3 + OH <=> H2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 2 * exp(2.04 * logT - (284.820632845471) * invT);
  dlnkfdT = 2.04 * invT + (284.820632845471) * invT2;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[9] -= q;  // NH3
  wdot[10] += q; // NH2
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[133] -= dqdci; // dwdot[NH3]/d[OH]
  J[134] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[195] -= dqdci; // dwdot[NH3]/d[H2O]
  J[196] += dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NH3]
  dqdci = +k_f * sc[4];
  J[283] -= dqdci; // dwdot[OH]/d[NH3]
  J[285] += dqdci; // dwdot[H2O]/d[NH3]
  J[288] -= dqdci; // dwdot[NH3]/d[NH3]
  J[289] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[6];
  J[314] -= dqdci; // dwdot[OH]/d[NH2]
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[319] -= dqdci; // dwdot[NH3]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[939] -= dqdT; // dwdot[NH3]/dT
  J[940] += dqdT; // dwdot[NH2]/dT

  // reaction 30: HO2 + NH3 <=> H2O2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 300000 * exp(-(11070.7666477038) * invT);
  dlnkfdT = (11070.7666477038) * invT2;
  // reverse
  phi_r = sc[7] * sc[10];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[7] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[9] -= q;  // NH3
  wdot[10] += q; // NH2
  // d()/d[HO2]
  dqdci = +k_f * sc[9];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[164] -= dqdci; // dwdot[NH3]/d[HO2]
  J[165] += dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[10];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[226] -= dqdci; // dwdot[NH3]/d[H2O2]
  J[227] += dqdci; // dwdot[NH2]/d[H2O2]
  // d()/d[NH3]
  dqdci = +k_f * sc[5];
  J[284] -= dqdci; // dwdot[HO2]/d[NH3]
  J[286] += dqdci; // dwdot[H2O2]/d[NH3]
  J[288] -= dqdci; // dwdot[NH3]/d[NH3]
  J[289] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[7];
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[317] += dqdci; // dwdot[H2O2]/d[NH2]
  J[319] -= dqdci; // dwdot[NH3]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[939] -= dqdT; // dwdot[NH3]/dT
  J[940] += dqdT; // dwdot[NH2]/dT

  // reaction 31: H2 + NH <=> H + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[11];
  k_f = 21000000 * exp(-(7758.09133671136) * invT);
  dlnkfdT = (7758.09133671136) * invT2;
  // reverse
  phi_r = sc[2] * sc[10];
  Kc = exp(g_RT[0] - g_RT[2] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[11]) + (h_RT[2] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[2] += q;  // H
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  // d()/d[H2]
  dqdci = +k_f * sc[11];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[2] += dqdci;  // dwdot[H]/d[H2]
  J[10] += dqdci; // dwdot[NH2]/d[H2]
  J[11] -= dqdci; // dwdot[NH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[10];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[NH2]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[NH2]
  dqdci = -k_r * sc[2];
  J[310] -= dqdci; // dwdot[H2]/d[NH2]
  J[312] += dqdci; // dwdot[H]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[0];
  J[341] -= dqdci; // dwdot[H2]/d[NH]
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT

  // reaction 32: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 660000000 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[2] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[3] -= q;  // O
  wdot[10] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[O]/d[H]
  J[72] -= dqdci; // dwdot[NH2]/d[H]
  J[83] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[95] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[103] -= dqdci; // dwdot[NH2]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[312] += dqdci; // dwdot[H]/d[NH2]
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[653] += dqdci; // dwdot[H]/d[HNO]
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 33: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 7000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH2
  wdot[11] += q; // NH
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[103] -= dqdci; // dwdot[NH2]/d[O]
  J[104] += dqdci; // dwdot[NH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[135] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[321] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[4];
  J[344] -= dqdci; // dwdot[O]/d[NH]
  J[345] += dqdci; // dwdot[OH]/d[NH]
  J[351] -= dqdci; // dwdot[NH2]/d[NH]
  J[352] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[941] += dqdT; // dwdot[NH]/dT

  // reaction 34: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 8.6e-07 * exp(4.01 * logT - (841.881481891296) * invT);
  dlnkfdT = 4.01 * invT + (841.881481891296) * invT2;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH2
  wdot[11] += q; // NH
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[103] -= dqdci; // dwdot[NH2]/d[O]
  J[104] += dqdci; // dwdot[NH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[135] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[321] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[4];
  J[344] -= dqdci; // dwdot[O]/d[NH]
  J[345] += dqdci; // dwdot[OH]/d[NH]
  J[351] -= dqdci; // dwdot[NH2]/d[NH]
  J[352] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[941] += dqdT; // dwdot[NH]/dT

  // reaction 35: NH2 + OH <=> H2O + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 3.3 * exp(1.949 * logT - (-109.198016479624) * invT);
  dlnkfdT = 1.949 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[6] * sc[11];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[6] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[11] += q; // NH
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[135] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[197] += dqdci; // dwdot[NH]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[314] -= dqdci; // dwdot[OH]/d[NH2]
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[321] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[6];
  J[345] -= dqdci; // dwdot[OH]/d[NH]
  J[347] += dqdci; // dwdot[H2O]/d[NH]
  J[351] -= dqdci; // dwdot[NH2]/d[NH]
  J[352] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[941] += dqdT; // dwdot[NH]/dT

  // reaction 36: HO2 + NH2 <=> NH3 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 0.017 * exp(1.55 * logT - (1020.02018158617) * invT);
  dlnkfdT = 1.55 * invT + (1020.02018158617) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[5] -= q;  // HO2
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  // d()/d[O2]
  dqdci = -k_r * sc[9];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[40] += dqdci; // dwdot[NH3]/d[O2]
  J[41] -= dqdci; // dwdot[NH2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[164] += dqdci; // dwdot[NH3]/d[HO2]
  J[165] -= dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[NH3]
  dqdci = -k_r * sc[1];
  J[280] += dqdci; // dwdot[O2]/d[NH3]
  J[284] -= dqdci; // dwdot[HO2]/d[NH3]
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[311] += dqdci; // dwdot[O2]/d[NH2]
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT

  // reaction 37: HO2 + NH2 <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 250000000000 * exp(-1.28 * logT - (586.750632328303) * invT);
  dlnkfdT = -1.28 * invT + (586.750632328303) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[5] + g_RT[10] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // HO2
  wdot[10] -= q; // NH2
  wdot[19] += q; // H2NO
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[143] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[165] -= dqdci; // dwdot[NH2]/d[HO2]
  J[174] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[329] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[593] += dqdci; // dwdot[OH]/d[H2NO]
  J[594] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[599] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 38: HO2 + NH2 <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 16 * exp(0.55 * logT - (264.188749547478) * invT);
  dlnkfdT = 0.55 * invT + (264.188749547478) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  J[165] -= dqdci; // dwdot[NH2]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[207] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[656] -= dqdci; // dwdot[HO2]/d[HNO]
  J[657] += dqdci; // dwdot[H2O]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 39: HO2 + NH2 <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 5700000000 * exp(-1.12 * logT - (355.774182723937) * invT);
  dlnkfdT = -1.12 * invT + (355.774182723937) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  J[165] -= dqdci; // dwdot[NH2]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[207] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[656] -= dqdci; // dwdot[HO2]/d[HNO]
  J[657] += dqdci; // dwdot[H2O]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 40: HO2 + NH2 <=> H2O + HON
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 21 * exp(0.64 * logT - (408.108715967628) * invT);
  dlnkfdT = 0.64 * invT + (408.108715967628) * invT2;
  // reverse
  phi_r = sc[6] * sc[22];
  Kc = exp(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[6] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[22] += q; // HON
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  J[165] -= dqdci; // dwdot[NH2]/d[HO2]
  J[177] += dqdci; // dwdot[HON]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[208] += dqdci; // dwdot[HON]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[332] += dqdci; // dwdot[HON]/d[NH2]
  // d()/d[HON]
  dqdci = -k_r * sc[6];
  J[687] -= dqdci; // dwdot[HO2]/d[HON]
  J[688] += dqdci; // dwdot[H2O]/d[HON]
  J[692] -= dqdci; // dwdot[NH2]/d[HON]
  J[704] += dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[952] += dqdT; // dwdot[HON]/dT

  // reaction 41: NH2 + O2 <=> H2NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 260000 * exp(0.487 * logT - (14618.4441416271) * invT);
  dlnkfdT = 0.487 * invT + (14618.4441416271) * invT2;
  // reverse
  phi_r = sc[3] * sc[19];
  Kc = exp(g_RT[1] - g_RT[3] + g_RT[10] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[3] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[3] += q;  // O
  wdot[10] -= q; // NH2
  wdot[19] += q; // H2NO
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[34] += dqdci; // dwdot[O]/d[O2]
  J[41] -= dqdci; // dwdot[NH2]/d[O2]
  J[50] += dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[19];
  J[94] -= dqdci;  // dwdot[O2]/d[O]
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[103] -= dqdci; // dwdot[NH2]/d[O]
  J[112] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[1];
  J[311] -= dqdci; // dwdot[O2]/d[NH2]
  J[313] += dqdci; // dwdot[O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[329] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[3];
  J[590] -= dqdci; // dwdot[O2]/d[H2NO]
  J[592] += dqdci; // dwdot[O]/d[H2NO]
  J[599] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 42: NH2 + O2 <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 2.9e-08 * exp(3.764 * logT - (9150.99506765883) * invT);
  dlnkfdT = 3.764 * invT + (9150.99506765883) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[1] - g_RT[4] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[35] += dqdci; // dwdot[OH]/d[O2]
  J[41] -= dqdci; // dwdot[NH2]/d[O2]
  J[52] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[125] -= dqdci; // dwdot[O2]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[1];
  J[311] -= dqdci; // dwdot[O2]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[652] -= dqdci; // dwdot[O2]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 43: 2 NH2 <=> NH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 5.6e-06 * exp(3.53 * logT - (277.775599524205) * invT);
  dlnkfdT = 3.53 * invT + (277.775599524205) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(-g_RT[9] + 2.000000 * g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;      // NH3
  wdot[10] -= 2 * q; // NH2
  wdot[11] += q;     // NH
  // d()/d[NH3]
  dqdci = -k_r * sc[11];
  J[288] += dqdci;      // dwdot[NH3]/d[NH3]
  J[289] += -2 * dqdci; // dwdot[NH2]/d[NH3]
  J[290] += dqdci;      // dwdot[NH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[319] += dqdci;      // dwdot[NH3]/d[NH2]
  J[320] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[321] += dqdci;      // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[9];
  J[350] += dqdci;      // dwdot[NH3]/d[NH]
  J[351] += -2 * dqdci; // dwdot[NH2]/d[NH]
  J[352] += dqdci;      // dwdot[NH]/d[NH]
  // d()/dT
  J[939] += dqdT;      // dwdot[NH3]/dT
  J[940] += -2 * dqdT; // dwdot[NH2]/dT
  J[941] += dqdT;      // dwdot[NH]/dT

  // reaction 44: NH + NH2 <=> N + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[11];
  k_f = 0.0096 * exp(2.46 * logT - (53.844183241105) * invT);
  dlnkfdT = 2.46 * invT + (53.844183241105) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[11]) + (h_RT[9] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[11] -= q; // NH
  wdot[12] += q; // N
  // d()/d[NH3]
  dqdci = -k_r * sc[12];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[290] -= dqdci; // dwdot[NH]/d[NH3]
  J[291] += dqdci; // dwdot[N]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[11];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[322] += dqdci; // dwdot[N]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[350] += dqdci; // dwdot[NH3]/d[NH]
  J[351] -= dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[353] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[9];
  J[381] += dqdci; // dwdot[NH3]/d[N]
  J[382] -= dqdci; // dwdot[NH2]/d[N]
  J[383] -= dqdci; // dwdot[NH]/d[N]
  J[384] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[942] += dqdT; // dwdot[N]/dT

  // reaction 45: N + NH2 <=> 2 H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = (sc[2] * sc[2]) * sc[29];
  Kc = refC * exp(-2.000000 * g_RT[2] + g_RT[10] + g_RT[12] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (2.000000 * h_RT[2] + h_RT[29]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += 2 * q; // H
  wdot[10] -= q;    // NH2
  wdot[12] -= q;    // N
  wdot[29] += q;    // N2
  // d()/d[H]
  dqdci = -k_r * 2.000000 * sc[2] * sc[29];
  J[64] += 2 * dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci;     // dwdot[NH2]/d[H]
  J[74] -= dqdci;     // dwdot[N]/d[H]
  J[91] += dqdci;     // dwdot[N2]/d[H]
  // d()/d[NH2]
  dqdci = +k_f * sc[12];
  J[312] += 2 * dqdci; // dwdot[H]/d[NH2]
  J[320] -= dqdci;     // dwdot[NH2]/d[NH2]
  J[322] -= dqdci;     // dwdot[N]/d[NH2]
  J[339] += dqdci;     // dwdot[N2]/d[NH2]
  // d()/d[N]
  dqdci = +k_f * sc[10];
  J[374] += 2 * dqdci; // dwdot[H]/d[N]
  J[382] -= dqdci;     // dwdot[NH2]/d[N]
  J[384] -= dqdci;     // dwdot[N]/d[N]
  J[401] += dqdci;     // dwdot[N2]/d[N]
  // d()/d[N2]
  dqdci = -k_r * sc[2] * sc[2];
  J[901] += 2 * dqdci; // dwdot[H]/d[N2]
  J[909] -= dqdci;     // dwdot[NH2]/d[N2]
  J[911] -= dqdci;     // dwdot[N]/d[N2]
  J[928] += dqdci;     // dwdot[N2]/d[N2]
  // d()/dT
  J[932] += 2 * dqdT; // dwdot[H]/dT
  J[940] -= dqdT;     // dwdot[NH2]/dT
  J[942] -= dqdT;     // dwdot[N]/dT
  J[959] += dqdT;     // dwdot[N2]/dT

  // reaction 46: HNO + NH2 <=> NH3 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[21];
  k_f = 0.00059 * exp(2.95 * logT - (-1745.65861367657) * invT);
  dlnkfdT = 2.95 * invT + (-1745.65861367657) * invT2;
  // reverse
  phi_r = sc[8] * sc[9];
  Kc = exp(-g_RT[8] - g_RT[9] + g_RT[10] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[21]) + (h_RT[8] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // NO
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[21] -= q; // HNO
  // d()/d[NO]
  dqdci = -k_r * sc[9];
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[257] += dqdci; // dwdot[NH3]/d[NO]
  J[258] -= dqdci; // dwdot[NH2]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NH3]
  dqdci = -k_r * sc[8];
  J[287] += dqdci; // dwdot[NO]/d[NH3]
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[300] -= dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[21];
  J[318] += dqdci; // dwdot[NO]/d[NH2]
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[331] -= dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = +k_f * sc[10];
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[660] += dqdci; // dwdot[NH3]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 47: NH2 + NO <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 26000000000000 * exp(-2.369 * logT - (437.798499250106) * invT);
  dlnkfdT = -2.369 * invT + (437.798499250106) * invT2;
  // reverse
  phi_r = sc[6] * sc[29];
  Kc = exp(-g_RT[6] + g_RT[8] + g_RT[10] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[6] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O
  wdot[8] -= q;  // NO
  wdot[10] -= q; // NH2
  wdot[29] += q; // N2
  // d()/d[H2O]
  dqdci = -k_r * sc[29];
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[194] -= dqdci; // dwdot[NO]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[215] += dqdci; // dwdot[N2]/d[H2O]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[254] += dqdci; // dwdot[H2O]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[258] -= dqdci; // dwdot[NH2]/d[NO]
  J[277] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[8];
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[318] -= dqdci; // dwdot[NO]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[339] += dqdci; // dwdot[N2]/d[NH2]
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[905] += dqdci; // dwdot[H2O]/d[N2]
  J[907] -= dqdci; // dwdot[NO]/d[N2]
  J[909] -= dqdci; // dwdot[NH2]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 48: NH2 + NO <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 43000 * exp(0.294 * logT - (-435.785632586887) * invT);
  dlnkfdT = 0.294 * invT + (-435.785632586887) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[10] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[8] -= q;  // NO
  wdot[10] -= q; // NH2
  wdot[13] += q; // NNH
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[NO]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[258] -= dqdci; // dwdot[NH2]/d[NO]
  J[261] += dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[8];
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[318] -= dqdci; // dwdot[NO]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[323] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[411] -= dqdci; // dwdot[NO]/d[NNH]
  J[413] -= dqdci; // dwdot[NH2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT

  // reaction 49: HONO + NH2 <=> NH3 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[24];
  k_f = 7.1e-05 * exp(3.02 * logT - (-2485.89032907532) * invT);
  dlnkfdT = 3.02 * invT + (-2485.89032907532) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(-g_RT[9] + g_RT[10] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[24]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[23] += q; // NO2
  wdot[24] -= q; // HONO
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[302] += dqdci; // dwdot[NO2]/d[NH3]
  J[303] -= dqdci; // dwdot[HONO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[24];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[333] += dqdci; // dwdot[NO2]/d[NH2]
  J[334] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NO2]
  dqdci = -k_r * sc[9];
  J[722] += dqdci; // dwdot[NH3]/d[NO2]
  J[723] -= dqdci; // dwdot[NH2]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[737] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[10];
  J[753] += dqdci; // dwdot[NH3]/d[HONO]
  J[754] -= dqdci; // dwdot[NH2]/d[HONO]
  J[767] += dqdci; // dwdot[NO2]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 50: NH2 + NO2 <=> H2NO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[23];
  k_f = 860000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[8] * sc[19];
  Kc = exp(-g_RT[8] + g_RT[10] - g_RT[19] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[23]) + (h_RT[8] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // NO
  wdot[10] -= q; // NH2
  wdot[19] += q; // H2NO
  wdot[23] -= q; // NO2
  // d()/d[NO]
  dqdci = -k_r * sc[19];
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[258] -= dqdci; // dwdot[NH2]/d[NO]
  J[267] += dqdci; // dwdot[H2NO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[318] += dqdci; // dwdot[NO]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[329] += dqdci; // dwdot[H2NO]/d[NH2]
  J[333] -= dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[8];
  J[597] += dqdci; // dwdot[NO]/d[H2NO]
  J[599] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[612] -= dqdci; // dwdot[NO2]/d[H2NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[10];
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[723] -= dqdci; // dwdot[NH2]/d[NO2]
  J[732] += dqdci; // dwdot[H2NO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT

  // reaction 51: NH2 + NO2 <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[23];
  k_f = 220000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[6] * sc[28];
  Kc = exp(-g_RT[6] + g_RT[10] + g_RT[23] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[23]) + (h_RT[6] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[23] -= q; // NO2
  wdot[28] += q; // N2O
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[209] -= dqdci; // dwdot[NO2]/d[H2O]
  J[214] += dqdci; // dwdot[N2O]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[333] -= dqdci; // dwdot[NO2]/d[NH2]
  J[338] += dqdci; // dwdot[N2O]/d[NH2]
  // d()/d[NO2]
  dqdci = +k_f * sc[10];
  J[719] += dqdci; // dwdot[H2O]/d[NO2]
  J[723] -= dqdci; // dwdot[NH2]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[741] += dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[6];
  J[874] += dqdci; // dwdot[H2O]/d[N2O]
  J[878] -= dqdci; // dwdot[NH2]/d[N2O]
  J[891] -= dqdci; // dwdot[NO2]/d[N2O]
  J[896] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[958] += dqdT; // dwdot[N2O]/dT

  // reaction 52: H + NH <=> H2 + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[12];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[0] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[11] -= q; // NH
  wdot[12] += q; // N
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[11] -= dqdci; // dwdot[NH]/d[H2]
  J[12] += dqdci; // dwdot[N]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  J[74] += dqdci; // dwdot[N]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[2];
  J[341] += dqdci; // dwdot[H2]/d[NH]
  J[343] -= dqdci; // dwdot[H]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[353] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[0];
  J[372] += dqdci; // dwdot[H2]/d[N]
  J[374] -= dqdci; // dwdot[H]/d[N]
  J[383] -= dqdci; // dwdot[NH]/d[N]
  J[384] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[942] += dqdT; // dwdot[N]/dT

  // reaction 53: NH + O <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 92000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[8];
  Kc = exp(-g_RT[2] + g_RT[3] - g_RT[8] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[2] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[11] -= q; // NH
  // d()/d[H]
  dqdci = -k_r * sc[8];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[O]/d[H]
  J[70] += dqdci; // dwdot[NO]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[95] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[104] -= dqdci; // dwdot[NH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[250] += dqdci; // dwdot[H]/d[NO]
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[259] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[344] -= dqdci; // dwdot[O]/d[NH]
  J[349] += dqdci; // dwdot[NO]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[941] -= dqdT; // dwdot[NH]/dT

  // reaction 54: NH + OH <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 320000000 * exp(-0.376 * logT - (-23.1479666270171) * invT);
  dlnkfdT = -0.376 * invT + (-23.1479666270171) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[11] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[2] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // OH
  wdot[11] -= q; // NH
  wdot[21] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[66] -= dqdci; // dwdot[OH]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  J[83] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[135] -= dqdci; // dwdot[NH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[345] -= dqdci; // dwdot[OH]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[362] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[653] += dqdci; // dwdot[H]/d[HNO]
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[662] -= dqdci; // dwdot[NH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 55: NH + OH <=> H2O + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 16 * exp(1.733 * logT - (-289.852799503519) * invT);
  dlnkfdT = 1.733 * invT + (-289.852799503519) * invT2;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[11] -= q; // NH
  wdot[12] += q; // N
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[135] -= dqdci; // dwdot[NH]/d[OH]
  J[136] += dqdci; // dwdot[N]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[197] -= dqdci; // dwdot[NH]/d[H2O]
  J[198] += dqdci; // dwdot[N]/d[H2O]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[345] -= dqdci; // dwdot[OH]/d[NH]
  J[347] += dqdci; // dwdot[H2O]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[353] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[6];
  J[376] -= dqdci; // dwdot[OH]/d[N]
  J[378] += dqdci; // dwdot[H2O]/d[N]
  J[383] -= dqdci; // dwdot[NH]/d[N]
  J[384] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[942] += dqdT; // dwdot[N]/dT

  // reaction 56: NH + O2 <=> HNO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 24000000 * exp(-(6969.55082139537) * invT);
  dlnkfdT = (6969.55082139537) * invT2;
  // reverse
  phi_r = sc[3] * sc[21];
  Kc = exp(g_RT[1] - g_RT[3] + g_RT[11] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[3] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[3] += q;  // O
  wdot[11] -= q; // NH
  wdot[21] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[34] += dqdci; // dwdot[O]/d[O2]
  J[42] -= dqdci; // dwdot[NH]/d[O2]
  J[52] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[21];
  J[94] -= dqdci;  // dwdot[O2]/d[O]
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[104] -= dqdci; // dwdot[NH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH]
  dqdci = +k_f * sc[1];
  J[342] -= dqdci; // dwdot[O2]/d[NH]
  J[344] += dqdci; // dwdot[O]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[362] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[3];
  J[652] -= dqdci; // dwdot[O2]/d[HNO]
  J[654] += dqdci; // dwdot[O]/d[HNO]
  J[662] -= dqdci; // dwdot[NH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 57: NH + O2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 99000 * exp(-(769.921498681221) * invT);
  dlnkfdT = (769.921498681221) * invT2;
  // reverse
  phi_r = sc[4] * sc[8];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[8] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[4] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[8] += q;  // NO
  wdot[11] -= q; // NH
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[35] += dqdci; // dwdot[OH]/d[O2]
  J[39] += dqdci; // dwdot[NO]/d[O2]
  J[42] -= dqdci; // dwdot[NH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[125] -= dqdci; // dwdot[O2]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[135] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[249] -= dqdci; // dwdot[O2]/d[NO]
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[259] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[1];
  J[342] -= dqdci; // dwdot[O2]/d[NH]
  J[345] += dqdci; // dwdot[OH]/d[NH]
  J[349] += dqdci; // dwdot[NO]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[941] -= dqdT; // dwdot[NH]/dT

  // reaction 58: 2 NH <=> N + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 5.7e-07 * exp(3.88 * logT - (172.100099705214) * invT);
  dlnkfdT = 3.88 * invT + (172.100099705214) * invT2;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q;     // NH2
  wdot[11] -= 2 * q; // NH
  wdot[12] += q;     // N
  // d()/d[NH2]
  dqdci = -k_r * sc[12];
  J[320] += dqdci;      // dwdot[NH2]/d[NH2]
  J[321] += -2 * dqdci; // dwdot[NH]/d[NH2]
  J[322] += dqdci;      // dwdot[N]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[11];
  J[351] += dqdci;      // dwdot[NH2]/d[NH]
  J[352] += -2 * dqdci; // dwdot[NH]/d[NH]
  J[353] += dqdci;      // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[10];
  J[382] += dqdci;      // dwdot[NH2]/d[N]
  J[383] += -2 * dqdci; // dwdot[NH]/d[N]
  J[384] += dqdci;      // dwdot[N]/d[N]
  // d()/dT
  J[940] += dqdT;      // dwdot[NH2]/dT
  J[941] += -2 * dqdT; // dwdot[NH]/dT
  J[942] += dqdT;      // dwdot[N]/dT

  // reaction 59: N + NH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[29];
  Kc = exp(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[2] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[11] -= q; // NH
  wdot[12] -= q; // N
  wdot[29] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  J[74] -= dqdci; // dwdot[N]/d[H]
  J[91] += dqdci; // dwdot[N2]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[12];
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[353] -= dqdci; // dwdot[N]/d[NH]
  J[370] += dqdci; // dwdot[N2]/d[NH]
  // d()/d[N]
  dqdci = +k_f * sc[11];
  J[374] += dqdci; // dwdot[H]/d[N]
  J[383] -= dqdci; // dwdot[NH]/d[N]
  J[384] -= dqdci; // dwdot[N]/d[N]
  J[401] += dqdci; // dwdot[N2]/d[N]
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[901] += dqdci; // dwdot[H]/d[N2]
  J[910] -= dqdci; // dwdot[NH]/d[N2]
  J[911] -= dqdci; // dwdot[N]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[942] -= dqdT; // dwdot[N]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 60: NH + NO <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 2700000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[2] * sc[28];
  Kc = exp(-g_RT[2] + g_RT[8] + g_RT[11] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[2] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[8] -= q;  // NO
  wdot[11] -= q; // NH
  wdot[28] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[NO]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  J[90] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[250] += dqdci; // dwdot[H]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[259] -= dqdci; // dwdot[NH]/d[NO]
  J[276] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[8];
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[349] -= dqdci; // dwdot[NO]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[369] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[870] += dqdci; // dwdot[H]/d[N2O]
  J[876] -= dqdci; // dwdot[NO]/d[N2O]
  J[879] -= dqdci; // dwdot[NH]/d[N2O]
  J[896] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[958] += dqdT; // dwdot[N2O]/dT

  // reaction 61: NH + NO <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 680000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[4] * sc[29];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[4] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[8] -= q;  // NO
  wdot[11] -= q; // NH
  wdot[29] += q; // N2
  // d()/d[OH]
  dqdci = -k_r * sc[29];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[NO]/d[OH]
  J[135] -= dqdci; // dwdot[NH]/d[OH]
  J[153] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[259] -= dqdci; // dwdot[NH]/d[NO]
  J[277] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[8];
  J[345] += dqdci; // dwdot[OH]/d[NH]
  J[349] -= dqdci; // dwdot[NO]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[370] += dqdci; // dwdot[N2]/d[NH]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[903] += dqdci; // dwdot[OH]/d[N2]
  J[907] -= dqdci; // dwdot[NO]/d[N2]
  J[910] -= dqdci; // dwdot[NH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 62: HONO + NH <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[24];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[23];
  Kc = exp(-g_RT[10] + g_RT[11] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[24]) + (h_RT[10] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[23] += q; // NO2
  wdot[24] -= q; // HONO
  // d()/d[NH2]
  dqdci = -k_r * sc[23];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[333] += dqdci; // dwdot[NO2]/d[NH2]
  J[334] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[24];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[364] += dqdci; // dwdot[NO2]/d[NH]
  J[365] -= dqdci; // dwdot[HONO]/d[NH]
  // d()/d[NO2]
  dqdci = -k_r * sc[10];
  J[723] += dqdci; // dwdot[NH2]/d[NO2]
  J[724] -= dqdci; // dwdot[NH]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[737] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[11];
  J[754] += dqdci; // dwdot[NH2]/d[HONO]
  J[755] -= dqdci; // dwdot[NH]/d[HONO]
  J[767] += dqdci; // dwdot[NO2]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 63: NH + NO2 <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[23];
  k_f = 4100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[28];
  Kc = exp(-g_RT[4] + g_RT[11] + g_RT[23] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[23]) + (h_RT[4] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[11] -= q; // NH
  wdot[23] -= q; // NO2
  wdot[28] += q; // N2O
  // d()/d[OH]
  dqdci = -k_r * sc[28];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] -= dqdci; // dwdot[NH]/d[OH]
  J[147] -= dqdci; // dwdot[NO2]/d[OH]
  J[152] += dqdci; // dwdot[N2O]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[23];
  J[345] += dqdci; // dwdot[OH]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[364] -= dqdci; // dwdot[NO2]/d[NH]
  J[369] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[NO2]
  dqdci = +k_f * sc[11];
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[724] -= dqdci; // dwdot[NH]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[741] += dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[4];
  J[872] += dqdci; // dwdot[OH]/d[N2O]
  J[879] -= dqdci; // dwdot[NH]/d[N2O]
  J[891] -= dqdci; // dwdot[NO2]/d[N2O]
  J[896] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[958] += dqdT; // dwdot[N2O]/dT

  // reaction 64: NH + NO2 <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[23];
  k_f = 5900000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[21];
  Kc = exp(-g_RT[8] + g_RT[11] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[23]) + (h_RT[8] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // NO
  wdot[11] -= q; // NH
  wdot[21] += q; // HNO
  wdot[23] -= q; // NO2
  // d()/d[NO]
  dqdci = -k_r * sc[21];
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[259] -= dqdci; // dwdot[NH]/d[NO]
  J[269] += dqdci; // dwdot[HNO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[23];
  J[349] += dqdci; // dwdot[NO]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[362] += dqdci; // dwdot[HNO]/d[NH]
  J[364] -= dqdci; // dwdot[NO2]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[8];
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[662] -= dqdci; // dwdot[NH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[NO2]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[11];
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[724] -= dqdci; // dwdot[NH]/d[NO2]
  J[734] += dqdci; // dwdot[HNO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT

  // reaction 65: N + OH <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 38000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[8];
  Kc = exp(-g_RT[2] + g_RT[4] - g_RT[8] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[2] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // OH
  wdot[8] += q;  // NO
  wdot[12] -= q; // N
  // d()/d[H]
  dqdci = -k_r * sc[8];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[66] -= dqdci; // dwdot[OH]/d[H]
  J[70] += dqdci; // dwdot[NO]/d[H]
  J[74] -= dqdci; // dwdot[N]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[136] -= dqdci; // dwdot[N]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[250] += dqdci; // dwdot[H]/d[NO]
  J[252] -= dqdci; // dwdot[OH]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[260] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[4];
  J[374] += dqdci; // dwdot[H]/d[N]
  J[376] -= dqdci; // dwdot[OH]/d[N]
  J[380] += dqdci; // dwdot[NO]/d[N]
  J[384] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[942] -= dqdT; // dwdot[N]/dT

  // reaction 66: N + O2 <=> NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 5900 * exp(1 * logT - (3160.20066125364) * invT);
  dlnkfdT = 1 * invT + (3160.20066125364) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(g_RT[1] - g_RT[3] - g_RT[8] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[3] += q;  // O
  wdot[8] += q;  // NO
  wdot[12] -= q; // N
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[34] += dqdci; // dwdot[O]/d[O2]
  J[39] += dqdci; // dwdot[NO]/d[O2]
  J[43] -= dqdci; // dwdot[N]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[8];
  J[94] -= dqdci;  // dwdot[O2]/d[O]
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[105] -= dqdci; // dwdot[N]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[3];
  J[249] -= dqdci; // dwdot[O2]/d[NO]
  J[251] += dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[260] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[1];
  J[373] -= dqdci; // dwdot[O2]/d[N]
  J[375] += dqdci; // dwdot[O]/d[N]
  J[380] += dqdci; // dwdot[NO]/d[N]
  J[384] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[942] -= dqdT; // dwdot[N]/dT

  // reaction 67: N + NO <=> N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[12];
  k_f = 9400000 * exp(0.14 * logT);
  dlnkfdT = 0.14 * invT;
  // reverse
  phi_r = sc[3] * sc[29];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[12] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[12]) + (h_RT[3] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O
  wdot[8] -= q;  // NO
  wdot[12] -= q; // N
  wdot[29] += q; // N2
  // d()/d[O]
  dqdci = -k_r * sc[29];
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[101] -= dqdci; // dwdot[NO]/d[O]
  J[105] -= dqdci; // dwdot[N]/d[O]
  J[122] += dqdci; // dwdot[N2]/d[O]
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[251] += dqdci; // dwdot[O]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[260] -= dqdci; // dwdot[N]/d[NO]
  J[277] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[8];
  J[375] += dqdci; // dwdot[O]/d[N]
  J[380] -= dqdci; // dwdot[NO]/d[N]
  J[384] -= dqdci; // dwdot[N]/d[N]
  J[401] += dqdci; // dwdot[N2]/d[N]
  // d()/d[N2]
  dqdci = -k_r * sc[3];
  J[902] += dqdci; // dwdot[O]/d[N2]
  J[907] -= dqdci; // dwdot[NO]/d[N2]
  J[911] -= dqdci; // dwdot[N]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[942] -= dqdT; // dwdot[N]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 68: NNH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13];
  k_f = 1000000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[29];
  Kc = refC * exp(-g_RT[2] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13]) + (h_RT[2] + h_RT[29]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[NNH]/d[H]
  J[91] += dqdci; // dwdot[N2]/d[H]
  // d()/d[NNH]
  dqdci = +k_f;
  J[405] += dqdci; // dwdot[H]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[901] += dqdci; // dwdot[H]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 69: H + NNH <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[13];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[29];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[13]) + (h_RT[0] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[H2]
  dqdci = -k_r * sc[29];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[13] -= dqdci; // dwdot[NNH]/d[H2]
  J[29] += dqdci; // dwdot[N2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[NNH]/d[H]
  J[91] += dqdci; // dwdot[N2]/d[H]
  // d()/d[NNH]
  dqdci = +k_f * sc[2];
  J[403] += dqdci; // dwdot[H2]/d[NNH]
  J[405] -= dqdci; // dwdot[H]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[0];
  J[899] += dqdci; // dwdot[H2]/d[N2]
  J[901] -= dqdci; // dwdot[H]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 70: NNH + O <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 190000000 * exp(-0.274 * logT - (-11.0707666477038) * invT);
  dlnkfdT = -0.274 * invT + (-11.0707666477038) * invT2;
  // reverse
  phi_r = sc[2] * sc[28];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[13] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[2] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[3] -= q;  // O
  wdot[13] -= q; // NNH
  wdot[28] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[O]/d[H]
  J[75] -= dqdci; // dwdot[NNH]/d[H]
  J[90] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[95] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  J[121] += dqdci; // dwdot[N2O]/d[O]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[405] += dqdci; // dwdot[H]/d[NNH]
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[431] += dqdci; // dwdot[N2O]/d[NNH]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[870] += dqdci; // dwdot[H]/d[N2O]
  J[871] -= dqdci; // dwdot[O]/d[N2O]
  J[881] -= dqdci; // dwdot[NNH]/d[N2O]
  J[896] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[958] += dqdT; // dwdot[N2O]/dT

  // reaction 71: NNH + O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 12000000 * exp(0.145 * logT - (-109.198016479624) * invT);
  dlnkfdT = 0.145 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[4] * sc[29];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[4] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  J[122] += dqdci; // dwdot[N2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[29];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] -= dqdci; // dwdot[NNH]/d[OH]
  J[153] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[902] -= dqdci; // dwdot[O]/d[N2]
  J[903] += dqdci; // dwdot[OH]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 72: NNH + O <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 520000 * exp(0.381 * logT - (-205.81561631413) * invT);
  dlnkfdT = 0.381 * invT + (-205.81561631413) * invT2;
  // reverse
  phi_r = sc[8] * sc[11];
  Kc = exp(g_RT[3] - g_RT[8] - g_RT[11] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[8] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[11] += q; // NH
  wdot[13] -= q; // NNH
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[104] += dqdci; // dwdot[NH]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[11];
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[259] += dqdci; // dwdot[NH]/d[NO]
  J[261] -= dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH]
  dqdci = -k_r * sc[8];
  J[344] -= dqdci; // dwdot[O]/d[NH]
  J[349] += dqdci; // dwdot[NO]/d[NH]
  J[352] += dqdci; // dwdot[NH]/d[NH]
  J[354] -= dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[411] += dqdci; // dwdot[NO]/d[NNH]
  J[414] += dqdci; // dwdot[NH]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[941] += dqdT; // dwdot[NH]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 73: NNH + OH <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[29];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[6] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[137] -= dqdci; // dwdot[NNH]/d[OH]
  J[153] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[29];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[199] -= dqdci; // dwdot[NNH]/d[H2O]
  J[215] += dqdci; // dwdot[N2]/d[H2O]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[409] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[903] -= dqdci; // dwdot[OH]/d[N2]
  J[905] += dqdci; // dwdot[H2O]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 74: NNH + O2 <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 560000000 * exp(-0.385 * logT - (-6.54181665546136) * invT);
  dlnkfdT = -0.385 * invT + (-6.54181665546136) * invT2;
  // reverse
  phi_r = sc[5] * sc[29];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[13]) + (h_RT[5] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[5] += q;  // HO2
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[O2]
  dqdci = +k_f * sc[13];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[36] += dqdci; // dwdot[HO2]/d[O2]
  J[44] -= dqdci; // dwdot[NNH]/d[O2]
  J[60] += dqdci; // dwdot[N2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[29];
  J[156] -= dqdci; // dwdot[O2]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[168] -= dqdci; // dwdot[NNH]/d[HO2]
  J[184] += dqdci; // dwdot[N2]/d[HO2]
  // d()/d[NNH]
  dqdci = +k_f * sc[1];
  J[404] -= dqdci; // dwdot[O2]/d[NNH]
  J[408] += dqdci; // dwdot[HO2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[900] -= dqdci; // dwdot[O2]/d[N2]
  J[904] += dqdci; // dwdot[HO2]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 75: NH + NNH <=> N2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[29];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[13]) + (h_RT[10] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[NH2]
  dqdci = -k_r * sc[29];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[323] -= dqdci; // dwdot[NNH]/d[NH2]
  J[339] += dqdci; // dwdot[N2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[13];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[354] -= dqdci; // dwdot[NNH]/d[NH]
  J[370] += dqdci; // dwdot[N2]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[11];
  J[413] += dqdci; // dwdot[NH2]/d[NNH]
  J[414] -= dqdci; // dwdot[NH]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[10];
  J[909] += dqdci; // dwdot[NH2]/d[N2]
  J[910] -= dqdci; // dwdot[NH]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 76: NH2 + NNH <=> N2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[29];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (h_RT[9] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[NH3]
  dqdci = -k_r * sc[29];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[292] -= dqdci; // dwdot[NNH]/d[NH3]
  J[308] += dqdci; // dwdot[N2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[13];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[323] -= dqdci; // dwdot[NNH]/d[NH2]
  J[339] += dqdci; // dwdot[N2]/d[NH2]
  // d()/d[NNH]
  dqdci = +k_f * sc[10];
  J[412] += dqdci; // dwdot[NH3]/d[NNH]
  J[413] -= dqdci; // dwdot[NH2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[9];
  J[908] += dqdci; // dwdot[NH3]/d[N2]
  J[909] -= dqdci; // dwdot[NH2]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 77: NNH + NO <=> HNO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[21] * sc[29];
  Kc = exp(g_RT[8] + g_RT[13] - g_RT[21] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[13]) + (h_RT[21] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // NO
  wdot[13] -= q; // NNH
  wdot[21] += q; // HNO
  wdot[29] += q; // N2
  // d()/d[NO]
  dqdci = +k_f * sc[13];
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[261] -= dqdci; // dwdot[NNH]/d[NO]
  J[269] += dqdci; // dwdot[HNO]/d[NO]
  J[277] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[NNH]
  dqdci = +k_f * sc[8];
  J[411] -= dqdci; // dwdot[NO]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[424] += dqdci; // dwdot[HNO]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[HNO]
  dqdci = -k_r * sc[29];
  J[659] -= dqdci; // dwdot[NO]/d[HNO]
  J[664] -= dqdci; // dwdot[NNH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[680] += dqdci; // dwdot[N2]/d[HNO]
  // d()/d[N2]
  dqdci = -k_r * sc[21];
  J[907] -= dqdci; // dwdot[NO]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[920] += dqdci; // dwdot[HNO]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 79: H + NH2OH <=> H2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 480 * exp(1.5 * logT - (3144.60094461369) * invT);
  dlnkfdT = 1.5 * invT + (3144.60094461369) * invT2;
  // reverse
  phi_r = sc[0] * sc[20];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[0] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[H2]
  dqdci = -k_r * sc[20];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[18] -= dqdci; // dwdot[NH2OH]/d[H2]
  J[20] += dqdci; // dwdot[HNOH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[80] -= dqdci; // dwdot[NH2OH]/d[H]
  J[82] += dqdci; // dwdot[HNOH]/d[H]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[2];
  J[558] += dqdci; // dwdot[H2]/d[NH2OH]
  J[560] -= dqdci; // dwdot[H]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[0];
  J[620] += dqdci; // dwdot[H2]/d[HNOH]
  J[622] -= dqdci; // dwdot[H]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 80: H + NH2OH <=> H2 + H2NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 240 * exp(1.5 * logT - (2549.79884563251) * invT);
  dlnkfdT = 1.5 * invT + (2549.79884563251) * invT2;
  // reverse
  phi_r = sc[0] * sc[19];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[0] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[18] -= dqdci; // dwdot[NH2OH]/d[H2]
  J[19] += dqdci; // dwdot[H2NO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[80] -= dqdci; // dwdot[NH2OH]/d[H]
  J[81] += dqdci; // dwdot[H2NO]/d[H]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[2];
  J[558] += dqdci; // dwdot[H2]/d[NH2OH]
  J[560] -= dqdci; // dwdot[H]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[0];
  J[589] += dqdci; // dwdot[H2]/d[H2NO]
  J[591] -= dqdci; // dwdot[H]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 81: NH2OH + O <=> HNOH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 330 * exp(1.5 * logT - (1944.93241333524) * invT);
  dlnkfdT = 1.5 * invT + (1944.93241333524) * invT2;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[111] -= dqdci; // dwdot[NH2OH]/d[O]
  J[113] += dqdci; // dwdot[HNOH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[144] += dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[3];
  J[561] -= dqdci; // dwdot[O]/d[NH2OH]
  J[562] += dqdci; // dwdot[OH]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[4];
  J[623] -= dqdci; // dwdot[O]/d[HNOH]
  J[624] += dqdci; // dwdot[OH]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 82: NH2OH + O <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 170 * exp(1.5 * logT - (1514.68216407221) * invT);
  dlnkfdT = 1.5 * invT + (1514.68216407221) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[111] -= dqdci; // dwdot[NH2OH]/d[O]
  J[112] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[143] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[3];
  J[561] -= dqdci; // dwdot[O]/d[NH2OH]
  J[562] += dqdci; // dwdot[OH]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[592] -= dqdci; // dwdot[O]/d[H2NO]
  J[593] += dqdci; // dwdot[OH]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 83: NH2OH + OH <=> H2O + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 0.015 * exp(2.61 * logT - (-1779.87734695129) * invT);
  dlnkfdT = 2.61 * invT + (-1779.87734695129) * invT2;
  // reverse
  phi_r = sc[6] * sc[20];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[6] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[142] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[144] += dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[204] -= dqdci; // dwdot[NH2OH]/d[H2O]
  J[206] += dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[562] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[564] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[6];
  J[624] -= dqdci; // dwdot[OH]/d[HNOH]
  J[626] += dqdci; // dwdot[H2O]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 84: NH2OH + OH <=> H2NO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 0.15 * exp(2.28 * logT - (-652.168798882917) * invT);
  dlnkfdT = 2.28 * invT + (-652.168798882917) * invT2;
  // reverse
  phi_r = sc[6] * sc[19];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[6] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[142] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[143] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[204] -= dqdci; // dwdot[NH2OH]/d[H2O]
  J[205] += dqdci; // dwdot[H2NO]/d[H2O]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[562] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[564] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[6];
  J[593] -= dqdci; // dwdot[OH]/d[H2NO]
  J[595] += dqdci; // dwdot[H2O]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 85: NH2 + NH2OH <=> HNOH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 1.1e-07 * exp(4 * logT - (-48.8120165830578) * invT);
  dlnkfdT = 4 * invT + (-48.8120165830578) * invT2;
  // reverse
  phi_r = sc[9] * sc[20];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[9] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[NH3]
  dqdci = -k_r * sc[20];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[297] -= dqdci; // dwdot[NH2OH]/d[NH3]
  J[299] += dqdci; // dwdot[HNOH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[328] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[330] += dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[10];
  J[567] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[568] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[9];
  J[629] += dqdci; // dwdot[NH3]/d[HNOH]
  J[630] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 86: NH2 + NH2OH <=> H2NO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 9.5e-06 * exp(3.42 * logT - (-509.758482460181) * invT);
  dlnkfdT = 3.42 * invT + (-509.758482460181) * invT2;
  // reverse
  phi_r = sc[9] * sc[19];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[9] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[NH3]
  dqdci = -k_r * sc[19];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[297] -= dqdci; // dwdot[NH2OH]/d[NH3]
  J[298] += dqdci; // dwdot[H2NO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[328] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[329] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[10];
  J[567] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[568] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[9];
  J[598] += dqdci; // dwdot[NH3]/d[H2NO]
  J[599] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 87: NH + NH2OH <=> HNOH + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 2.9e-09 * exp(4.4 * logT - (787.030865318582) * invT);
  dlnkfdT = 4.4 * invT + (787.030865318582) * invT2;
  // reverse
  phi_r = sc[10] * sc[20];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[10] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[NH2]
  dqdci = -k_r * sc[20];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[328] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[330] += dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[18];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[359] -= dqdci; // dwdot[NH2OH]/d[NH]
  J[361] += dqdci; // dwdot[HNOH]/d[NH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[11];
  J[568] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[569] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[10];
  J[630] += dqdci; // dwdot[NH2]/d[HNOH]
  J[631] -= dqdci; // dwdot[NH]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 88: NH + NH2OH <=> H2NO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 1.5e-09 * exp(4.6 * logT - (1219.79719791064) * invT);
  dlnkfdT = 4.6 * invT + (1219.79719791064) * invT2;
  // reverse
  phi_r = sc[10] * sc[19];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[10] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[NH2]
  dqdci = -k_r * sc[19];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[328] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[329] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[18];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[359] -= dqdci; // dwdot[NH2OH]/d[NH]
  J[360] += dqdci; // dwdot[H2NO]/d[NH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[11];
  J[568] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[569] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[10];
  J[599] += dqdci; // dwdot[NH2]/d[H2NO]
  J[600] -= dqdci; // dwdot[NH]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 89: HO2 + NH2OH <=> H2O2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[18];
  k_f = 0.029 * exp(2.69 * logT - (4809.24167509571) * invT);
  dlnkfdT = 2.69 * invT + (4809.24167509571) * invT2;
  // reverse
  phi_r = sc[7] * sc[20];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[18]) + (h_RT[7] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[173] -= dqdci; // dwdot[NH2OH]/d[HO2]
  J[175] += dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[20];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[235] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  J[237] += dqdci; // dwdot[HNOH]/d[H2O2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[5];
  J[563] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[565] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[7];
  J[625] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[627] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 90: HO2 + NH2OH <=> H2NO + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[18];
  k_f = 0.014 * exp(2.69 * logT - (3229.64456113469) * invT);
  dlnkfdT = 2.69 * invT + (3229.64456113469) * invT2;
  // reverse
  phi_r = sc[7] * sc[19];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[18]) + (h_RT[7] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[173] -= dqdci; // dwdot[NH2OH]/d[HO2]
  J[174] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[19];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[235] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  J[236] += dqdci; // dwdot[H2NO]/d[H2O2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[5];
  J[563] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[565] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[7];
  J[594] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[596] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 93: H + H2NO <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 30 * exp(2 * logT - (1006.43333160944) * invT);
  dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[0] * sc[21];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[0] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[19] -= dqdci; // dwdot[H2NO]/d[H2]
  J[21] += dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[81] -= dqdci; // dwdot[H2NO]/d[H]
  J[83] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[589] += dqdci; // dwdot[H2]/d[H2NO]
  J[591] -= dqdci; // dwdot[H]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[651] += dqdci; // dwdot[H2]/d[HNO]
  J[653] -= dqdci; // dwdot[H]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 94: H + H2NO <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[10] += q; // NH2
  wdot[19] -= q; // H2NO
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[72] += dqdci; // dwdot[NH2]/d[H]
  J[81] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NH2]/d[OH]
  J[143] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[312] -= dqdci; // dwdot[H]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[329] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[591] -= dqdci; // dwdot[H]/d[H2NO]
  J[593] += dqdci; // dwdot[OH]/d[H2NO]
  J[599] += dqdci; // dwdot[NH2]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT

  // reaction 95: H2NO + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 30 * exp(2 * logT - (1006.43333160944) * invT);
  dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[112] -= dqdci; // dwdot[H2NO]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[143] -= dqdci; // dwdot[H2NO]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2NO]
  dqdci = +k_f * sc[3];
  J[592] -= dqdci; // dwdot[O]/d[H2NO]
  J[593] += dqdci; // dwdot[OH]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 96: H2NO + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[143] -= dqdci; // dwdot[H2NO]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[205] -= dqdci; // dwdot[H2NO]/d[H2O]
  J[207] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[H2NO]
  dqdci = +k_f * sc[4];
  J[593] -= dqdci; // dwdot[OH]/d[H2NO]
  J[595] += dqdci; // dwdot[H2O]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[657] += dqdci; // dwdot[H2O]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 97: H2NO + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[19];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[21];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[19]) + (h_RT[7] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[HO2]
  dqdci = +k_f * sc[19];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[174] -= dqdci; // dwdot[H2NO]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[236] -= dqdci; // dwdot[H2NO]/d[H2O2]
  J[238] += dqdci; // dwdot[HNO]/d[H2O2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[5];
  J[594] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[596] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[7];
  J[656] -= dqdci; // dwdot[HO2]/d[HNO]
  J[658] += dqdci; // dwdot[H2O2]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 98: H2NO + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 0.00023 * exp(2.994 * logT - (8303.07498577788) * invT);
  dlnkfdT = 2.994 * invT + (8303.07498577788) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[5] += q;  // HO2
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[36] += dqdci; // dwdot[HO2]/d[O2]
  J[50] -= dqdci; // dwdot[H2NO]/d[O2]
  J[52] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[21];
  J[156] -= dqdci; // dwdot[O2]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[174] -= dqdci; // dwdot[H2NO]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[1];
  J[590] -= dqdci; // dwdot[O2]/d[H2NO]
  J[594] += dqdci; // dwdot[HO2]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[652] -= dqdci; // dwdot[O2]/d[HNO]
  J[656] += dqdci; // dwdot[HO2]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 99: H2NO + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[19];
  k_f = 3000000 * exp(-(503.21666580472) * invT);
  dlnkfdT = (503.21666580472) * invT2;
  // reverse
  phi_r = sc[9] * sc[21];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[19]) + (h_RT[9] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[298] -= dqdci; // dwdot[H2NO]/d[NH3]
  J[300] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[19];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[329] -= dqdci; // dwdot[H2NO]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[10];
  J[598] += dqdci; // dwdot[NH3]/d[H2NO]
  J[599] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[660] += dqdci; // dwdot[NH3]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 100: H2NO + NO <=> 2 HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[19];
  k_f = 0.02 * exp(2 * logT - (6541.81665546136) * invT);
  dlnkfdT = 2 * invT + (6541.81665546136) * invT2;
  // reverse
  phi_r = (sc[21] * sc[21]);
  Kc = exp(g_RT[8] + g_RT[19] - 2.000000 * g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[19]) + (2.000000 * h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;      // NO
  wdot[19] -= q;     // H2NO
  wdot[21] += 2 * q; // HNO
  // d()/d[NO]
  dqdci = +k_f * sc[19];
  J[256] -= dqdci;     // dwdot[NO]/d[NO]
  J[267] -= dqdci;     // dwdot[H2NO]/d[NO]
  J[269] += 2 * dqdci; // dwdot[HNO]/d[NO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[8];
  J[597] -= dqdci;     // dwdot[NO]/d[H2NO]
  J[608] -= dqdci;     // dwdot[H2NO]/d[H2NO]
  J[610] += 2 * dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * 2.000000 * sc[21];
  J[659] -= dqdci;     // dwdot[NO]/d[HNO]
  J[670] -= dqdci;     // dwdot[H2NO]/d[HNO]
  J[672] += 2 * dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[938] -= dqdT;     // dwdot[NO]/dT
  J[949] -= dqdT;     // dwdot[H2NO]/dT
  J[951] += 2 * dqdT; // dwdot[HNO]/dT

  // reaction 101: H2NO + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[23];
  k_f = 0.044 * exp(2.64 * logT - (2032.99532985107) * invT);
  dlnkfdT = 2.64 * invT + (2032.99532985107) * invT2;
  // reverse
  phi_r = sc[21] * sc[24];
  Kc = exp(g_RT[19] - g_RT[21] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[23]) + (h_RT[21] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[H2NO]
  dqdci = +k_f * sc[23];
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  J[612] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[613] += dqdci; // dwdot[HONO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[24];
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[NO2]/d[HNO]
  J[675] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[19];
  J[732] -= dqdci; // dwdot[H2NO]/d[NO2]
  J[734] += dqdci; // dwdot[HNO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[21];
  J[763] -= dqdci; // dwdot[H2NO]/d[HONO]
  J[765] += dqdci; // dwdot[HNO]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 103: H + HNOH <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[10] += q; // NH2
  wdot[20] -= q; // HNOH
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[72] += dqdci; // dwdot[NH2]/d[H]
  J[82] -= dqdci; // dwdot[HNOH]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NH2]/d[OH]
  J[144] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[312] -= dqdci; // dwdot[H]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[330] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[2];
  J[622] -= dqdci; // dwdot[H]/d[HNOH]
  J[624] += dqdci; // dwdot[OH]/d[HNOH]
  J[630] += dqdci; // dwdot[NH2]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT

  // reaction 104: H + HNOH <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 480 * exp(1.5 * logT - (190.215899674184) * invT);
  dlnkfdT = 1.5 * invT + (190.215899674184) * invT2;
  // reverse
  phi_r = sc[0] * sc[21];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[0] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[20] -= dqdci; // dwdot[HNOH]/d[H2]
  J[21] += dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[HNOH]/d[H]
  J[83] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[HNOH]
  dqdci = +k_f * sc[2];
  J[620] += dqdci; // dwdot[H2]/d[HNOH]
  J[622] -= dqdci; // dwdot[H]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[651] += dqdci; // dwdot[H2]/d[HNO]
  J[653] -= dqdci; // dwdot[H]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 105: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[113] -= dqdci; // dwdot[HNOH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[144] -= dqdci; // dwdot[HNOH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[3];
  J[623] -= dqdci; // dwdot[O]/d[HNOH]
  J[624] += dqdci; // dwdot[OH]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 106: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 330 * exp(1.5 * logT - (-180.15156635809) * invT);
  dlnkfdT = 1.5 * invT + (-180.15156635809) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[113] -= dqdci; // dwdot[HNOH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[144] -= dqdci; // dwdot[HNOH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[3];
  J[623] -= dqdci; // dwdot[O]/d[HNOH]
  J[624] += dqdci; // dwdot[OH]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 107: HNOH + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[144] -= dqdci; // dwdot[HNOH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[206] -= dqdci; // dwdot[HNOH]/d[H2O]
  J[207] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[HNOH]
  dqdci = +k_f * sc[4];
  J[624] -= dqdci; // dwdot[OH]/d[HNOH]
  J[626] += dqdci; // dwdot[H2O]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[657] += dqdci; // dwdot[H2O]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 108: HNOH + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[20];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[21];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[20]) + (h_RT[7] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[175] -= dqdci; // dwdot[HNOH]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[237] -= dqdci; // dwdot[HNOH]/d[H2O2]
  J[238] += dqdci; // dwdot[HNO]/d[H2O2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[5];
  J[625] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[627] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[7];
  J[656] -= dqdci; // dwdot[HO2]/d[HNO]
  J[658] += dqdci; // dwdot[H2O2]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 109: HNOH + HO2 <=> NH2OH + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[20];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[5] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[20]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[5] -= q;  // HO2
  wdot[18] += q; // NH2OH
  wdot[20] -= q; // HNOH
  // d()/d[O2]
  dqdci = -k_r * sc[18];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[49] += dqdci; // dwdot[NH2OH]/d[O2]
  J[51] -= dqdci; // dwdot[HNOH]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[173] += dqdci; // dwdot[NH2OH]/d[HO2]
  J[175] -= dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[NH2OH]
  dqdci = -k_r * sc[1];
  J[559] += dqdci; // dwdot[O2]/d[NH2OH]
  J[563] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[576] += dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] -= dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[5];
  J[621] += dqdci; // dwdot[O2]/d[HNOH]
  J[625] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[638] += dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[948] += dqdT; // dwdot[NH2OH]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT

  // reaction 110: HNOH + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 3000000 * exp(-(12580.416645118) * invT);
  dlnkfdT = (12580.416645118) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[5] += q;  // HO2
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[20];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[36] += dqdci; // dwdot[HO2]/d[O2]
  J[51] -= dqdci; // dwdot[HNOH]/d[O2]
  J[52] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[21];
  J[156] -= dqdci; // dwdot[O2]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[175] -= dqdci; // dwdot[HNOH]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[1];
  J[621] -= dqdci; // dwdot[O2]/d[HNOH]
  J[625] += dqdci; // dwdot[HO2]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[652] -= dqdci; // dwdot[O2]/d[HNO]
  J[656] += dqdci; // dwdot[HO2]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 111: HNOH + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 1.8 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[9] * sc[21];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[9] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[299] -= dqdci; // dwdot[HNOH]/d[NH3]
  J[300] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[330] -= dqdci; // dwdot[HNOH]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[10];
  J[629] += dqdci; // dwdot[NH3]/d[HNOH]
  J[630] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[660] += dqdci; // dwdot[NH3]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 112: HNOH + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[23];
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[21] * sc[24];
  Kc = exp(g_RT[20] - g_RT[21] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[23]) + (h_RT[21] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[HNOH]
  dqdci = +k_f * sc[23];
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  J[643] -= dqdci; // dwdot[NO2]/d[HNOH]
  J[644] += dqdci; // dwdot[HONO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[24];
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[NO2]/d[HNO]
  J[675] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[20];
  J[733] -= dqdci; // dwdot[HNOH]/d[NO2]
  J[734] += dqdci; // dwdot[HNO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[21];
  J[764] -= dqdci; // dwdot[HNOH]/d[HONO]
  J[765] += dqdci; // dwdot[HNO]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 114: H + HNO <=> H2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 66000 * exp(0.94 * logT - (249.092249573336) * invT);
  dlnkfdT = 0.94 * invT + (249.092249573336) * invT2;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[8] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[8] += q;  // NO
  wdot[21] -= q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[8] += dqdci;  // dwdot[NO]/d[H2]
  J[21] -= dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[70] += dqdci; // dwdot[NO]/d[H]
  J[83] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[0];
  J[248] += dqdci; // dwdot[H2]/d[NO]
  J[250] -= dqdci; // dwdot[H]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[2];
  J[651] += dqdci; // dwdot[H2]/d[HNO]
  J[653] -= dqdci; // dwdot[H]/d[HNO]
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 115: HNO + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 23000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[8];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[8] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[4] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[8] += q;  // NO
  wdot[21] -= q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[114] -= dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[3];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 116: HNO + OH <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 1200 * exp(1.189 * logT - (168.074366378776) * invT);
  dlnkfdT = 1.189 * invT + (168.074366378776) * invT2;
  // reverse
  phi_r = sc[6] * sc[8];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[8] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[6] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[8] += q;  // NO
  wdot[21] -= q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[194] += dqdci; // dwdot[NO]/d[H2O]
  J[207] -= dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[252] -= dqdci; // dwdot[OH]/d[NO]
  J[254] += dqdci; // dwdot[H2O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[4];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[657] += dqdci; // dwdot[H2O]/d[HNO]
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 117: HNO + HO2 <=> HNO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[21];
  k_f = 0.002 * exp(2.36 * logT - (4518.88565892638) * invT);
  dlnkfdT = 2.36 * invT + (4518.88565892638) * invT2;
  // reverse
  phi_r = sc[4] * sc[25];
  Kc = exp(-g_RT[4] + g_RT[5] + g_RT[21] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[21]) + (h_RT[4] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // HO2
  wdot[21] -= q; // HNO
  wdot[25] += q; // HNO2
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  J[149] += dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[21];
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[176] -= dqdci; // dwdot[HNO]/d[HO2]
  J[180] += dqdci; // dwdot[HNO2]/d[HO2]
  // d()/d[HNO]
  dqdci = +k_f * sc[5];
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[656] -= dqdci; // dwdot[HO2]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  J[676] += dqdci; // dwdot[HNO2]/d[HNO]
  // d()/d[HNO2]
  dqdci = -k_r * sc[4];
  J[779] += dqdci; // dwdot[OH]/d[HNO2]
  J[780] -= dqdci; // dwdot[HO2]/d[HNO2]
  J[796] -= dqdci; // dwdot[HNO]/d[HNO2]
  J[800] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT
  J[955] += dqdT; // dwdot[HNO2]/dT

  // reaction 118: HNO + O2 <=> HO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 20000000 * exp(-(8051.46665287552) * invT);
  dlnkfdT = (8051.46665287552) * invT2;
  // reverse
  phi_r = sc[5] * sc[8];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[8] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[5] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[5] += q;  // HO2
  wdot[8] += q;  // NO
  wdot[21] -= q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[36] += dqdci; // dwdot[HO2]/d[O2]
  J[39] += dqdci; // dwdot[NO]/d[O2]
  J[52] -= dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[8];
  J[156] -= dqdci; // dwdot[O2]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[163] += dqdci; // dwdot[NO]/d[HO2]
  J[176] -= dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[249] -= dqdci; // dwdot[O2]/d[NO]
  J[253] += dqdci; // dwdot[HO2]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[1];
  J[652] -= dqdci; // dwdot[O2]/d[HNO]
  J[656] += dqdci; // dwdot[HO2]/d[HNO]
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 119: 2 HNO <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[21] * sc[21]);
  k_f = 900 * exp(-(1559.97166399463) * invT);
  dlnkfdT = (1559.97166399463) * invT2;
  // reverse
  phi_r = sc[6] * sc[28];
  Kc = exp(-g_RT[6] + 2.000000 * g_RT[21] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[21]) + (h_RT[6] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;      // H2O
  wdot[21] -= 2 * q; // HNO
  wdot[28] += q;     // N2O
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[192] += dqdci;      // dwdot[H2O]/d[H2O]
  J[207] += -2 * dqdci; // dwdot[HNO]/d[H2O]
  J[214] += dqdci;      // dwdot[N2O]/d[H2O]
  // d()/d[HNO]
  dqdci = +k_f * 2.000000 * sc[21];
  J[657] += dqdci;      // dwdot[H2O]/d[HNO]
  J[672] += -2 * dqdci; // dwdot[HNO]/d[HNO]
  J[679] += dqdci;      // dwdot[N2O]/d[HNO]
  // d()/d[N2O]
  dqdci = -k_r * sc[6];
  J[874] += dqdci;      // dwdot[H2O]/d[N2O]
  J[889] += -2 * dqdci; // dwdot[HNO]/d[N2O]
  J[896] += dqdci;      // dwdot[N2O]/d[N2O]
  // d()/dT
  J[936] += dqdT;      // dwdot[H2O]/dT
  J[951] += -2 * dqdT; // dwdot[HNO]/dT
  J[958] += dqdT;      // dwdot[N2O]/dT

  // reaction 120: HNO + NO2 <=> HONO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21] * sc[23];
  k_f = 0.044 * exp(2.64 * logT - (2032.99532985107) * invT);
  dlnkfdT = 2.64 * invT + (2032.99532985107) * invT2;
  // reverse
  phi_r = sc[8] * sc[24];
  Kc = exp(-g_RT[8] + g_RT[21] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21] + h_RT[23]) + (h_RT[8] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // NO
  wdot[21] -= q; // HNO
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[NO]
  dqdci = -k_r * sc[24];
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  J[272] += dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[23];
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[NO2]/d[HNO]
  J[675] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[21];
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[734] -= dqdci; // dwdot[HNO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[8];
  J[752] += dqdci; // dwdot[NO]/d[HONO]
  J[765] -= dqdci; // dwdot[HNO]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 121: HO2 + NO <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 2100000 * exp(-(-250.098682904946) * invT);
  dlnkfdT = (-250.098682904946) * invT2;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(-g_RT[4] + g_RT[5] + g_RT[8] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // HO2
  wdot[8] -= q;  // NO
  wdot[23] += q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[132] -= dqdci; // dwdot[NO]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[8];
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[163] -= dqdci; // dwdot[NO]/d[HO2]
  J[178] += dqdci; // dwdot[NO2]/d[HO2]
  // d()/d[NO]
  dqdci = +k_f * sc[5];
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[253] -= dqdci; // dwdot[HO2]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[271] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[718] -= dqdci; // dwdot[HO2]/d[NO2]
  J[721] -= dqdci; // dwdot[NO]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[953] += dqdT; // dwdot[NO2]/dT

  // reaction 123: H + NO2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[23];
  k_f = 130000000 * exp(-(182.164433021309) * invT);
  dlnkfdT = (182.164433021309) * invT2;
  // reverse
  phi_r = sc[4] * sc[8];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[8] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[23]) + (h_RT[4] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[8] += q;  // NO
  wdot[23] -= q; // NO2
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[70] += dqdci; // dwdot[NO]/d[H]
  J[85] -= dqdci; // dwdot[NO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[147] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[250] -= dqdci; // dwdot[H]/d[NO]
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[715] -= dqdci; // dwdot[H]/d[NO2]
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT

  // reaction 124: NO2 + O <=> NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 110000000 * exp(-0.52 * logT);
  dlnkfdT = -0.52 * invT;
  // reverse
  phi_r = sc[1] * sc[8];
  Kc = exp(-g_RT[1] + g_RT[3] - g_RT[8] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[1] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[23] -= q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[8];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[34] -= dqdci; // dwdot[O]/d[O2]
  J[39] += dqdci; // dwdot[NO]/d[O2]
  J[54] -= dqdci; // dwdot[NO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[94] += dqdci;  // dwdot[O2]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[116] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[249] += dqdci; // dwdot[O2]/d[NO]
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[3];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[716] -= dqdci; // dwdot[O]/d[NO2]
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT

  // reaction 125: HO2 + NO2 <=> HONO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[23];
  k_f = 1.9e-06 * exp(3.32 * logT - (1531.79153070957) * invT);
  dlnkfdT = 3.32 * invT + (1531.79153070957) * invT2;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[23]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[5] -= q;  // HO2
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[O2]
  dqdci = -k_r * sc[24];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[54] -= dqdci; // dwdot[NO2]/d[O2]
  J[55] += dqdci; // dwdot[HONO]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[178] -= dqdci; // dwdot[NO2]/d[HO2]
  J[179] += dqdci; // dwdot[HONO]/d[HO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[5];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[718] -= dqdci; // dwdot[HO2]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[1];
  J[745] += dqdci; // dwdot[O2]/d[HONO]
  J[749] -= dqdci; // dwdot[HO2]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 126: HO2 + NO2 <=> HNO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[23];
  k_f = 1.9e-05 * exp(3.26 * logT - (2507.52864570492) * invT);
  dlnkfdT = 3.26 * invT + (2507.52864570492) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[23] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[23]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[5] -= q;  // HO2
  wdot[23] -= q; // NO2
  wdot[25] += q; // HNO2
  // d()/d[O2]
  dqdci = -k_r * sc[25];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[54] -= dqdci; // dwdot[NO2]/d[O2]
  J[56] += dqdci; // dwdot[HNO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[178] -= dqdci; // dwdot[NO2]/d[HO2]
  J[180] += dqdci; // dwdot[HNO2]/d[HO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[5];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[718] -= dqdci; // dwdot[HO2]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[738] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[1];
  J[776] += dqdci; // dwdot[O2]/d[HNO2]
  J[780] -= dqdci; // dwdot[HO2]/d[HNO2]
  J[798] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[800] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HNO2]/dT

  // reaction 127: 2 NO2 <=> 2 NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[23] * sc[23]);
  k_f = 4500000 * exp(-(13888.2767595445) * invT);
  dlnkfdT = (13888.2767595445) * invT2;
  // reverse
  phi_r = sc[1] * (sc[8] * sc[8]);
  Kc = refC * exp(-g_RT[1] - 2.000000 * g_RT[8] + 2.000000 * g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[23]) + (h_RT[1] + 2.000000 * h_RT[8]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // O2
  wdot[8] += 2 * q;  // NO
  wdot[23] -= 2 * q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[8] * sc[8];
  J[32] += dqdci;      // dwdot[O2]/d[O2]
  J[39] += 2 * dqdci;  // dwdot[NO]/d[O2]
  J[54] += -2 * dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[1] * 2.000000 * sc[8];
  J[249] += dqdci;      // dwdot[O2]/d[NO]
  J[256] += 2 * dqdci;  // dwdot[NO]/d[NO]
  J[271] += -2 * dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[23];
  J[714] += dqdci;      // dwdot[O2]/d[NO2]
  J[721] += 2 * dqdci;  // dwdot[NO]/d[NO2]
  J[736] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[931] += dqdT;      // dwdot[O2]/dT
  J[938] += 2 * dqdT;  // dwdot[NO]/dT
  J[953] += -2 * dqdT; // dwdot[NO2]/dT

  // reaction 128: 2 NO2 <=> NO + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[23] * sc[23]);
  k_f = 9600 * exp(0.73 * logT - (10517.2283153186) * invT);
  dlnkfdT = 0.73 * invT + (10517.2283153186) * invT2;
  // reverse
  phi_r = sc[8] * sc[26];
  Kc = exp(-g_RT[8] + 2.000000 * g_RT[23] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[23]) + (h_RT[8] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;      // NO
  wdot[23] -= 2 * q; // NO2
  wdot[26] += q;     // NO3
  // d()/d[NO]
  dqdci = -k_r * sc[26];
  J[256] += dqdci;      // dwdot[NO]/d[NO]
  J[271] += -2 * dqdci; // dwdot[NO2]/d[NO]
  J[274] += dqdci;      // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[23];
  J[721] += dqdci;      // dwdot[NO]/d[NO2]
  J[736] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  J[739] += dqdci;      // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = -k_r * sc[8];
  J[814] += dqdci;      // dwdot[NO]/d[NO3]
  J[829] += -2 * dqdci; // dwdot[NO2]/d[NO3]
  J[832] += dqdci;      // dwdot[NO3]/d[NO3]
  // d()/dT
  J[938] += dqdT;      // dwdot[NO]/dT
  J[953] += -2 * dqdT; // dwdot[NO2]/dT
  J[956] += dqdT;      // dwdot[NO3]/dT

  // reaction 130: H2 + NO2 <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[23];
  k_f = 1.8e-05 * exp(3.51 * logT - (13234.5983106641) * invT);
  dlnkfdT = 3.51 * invT + (13234.5983106641) * invT2;
  // reverse
  phi_r = sc[2] * sc[24];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[23]) + (h_RT[2] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[2] += q;  // H
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[H2]
  dqdci = +k_f * sc[23];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[2] += dqdci;  // dwdot[H]/d[H2]
  J[23] -= dqdci; // dwdot[NO2]/d[H2]
  J[24] += dqdci; // dwdot[HONO]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[85] -= dqdci; // dwdot[NO2]/d[H]
  J[86] += dqdci; // dwdot[HONO]/d[H]
  // d()/d[NO2]
  dqdci = +k_f * sc[0];
  J[713] -= dqdci; // dwdot[H2]/d[NO2]
  J[715] += dqdci; // dwdot[H]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[2];
  J[744] -= dqdci; // dwdot[H2]/d[HONO]
  J[746] += dqdci; // dwdot[H]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 131: H2 + NO2 <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[23];
  k_f = 2.4e-05 * exp(3.62 * logT - (18015.156635809) * invT);
  dlnkfdT = 3.62 * invT + (18015.156635809) * invT2;
  // reverse
  phi_r = sc[2] * sc[24];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[23]) + (h_RT[2] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[2] += q;  // H
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[H2]
  dqdci = +k_f * sc[23];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[2] += dqdci;  // dwdot[H]/d[H2]
  J[23] -= dqdci; // dwdot[NO2]/d[H2]
  J[24] += dqdci; // dwdot[HONO]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[85] -= dqdci; // dwdot[NO2]/d[H]
  J[86] += dqdci; // dwdot[HONO]/d[H]
  // d()/d[NO2]
  dqdci = +k_f * sc[0];
  J[713] -= dqdci; // dwdot[H2]/d[NO2]
  J[715] += dqdci; // dwdot[H]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[2];
  J[744] -= dqdci; // dwdot[H2]/d[HONO]
  J[746] += dqdci; // dwdot[H]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 132: H + HONO <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 56000 * exp(0.86 * logT - (2516.0833290236) * invT);
  dlnkfdT = 0.86 * invT + (2516.0833290236) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[21] += q; // HNO
  wdot[24] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[83] += dqdci; // dwdot[HNO]/d[H]
  J[86] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[148] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[653] -= dqdci; // dwdot[H]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[675] -= dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[746] -= dqdci; // dwdot[H]/d[HONO]
  J[748] += dqdci; // dwdot[OH]/d[HONO]
  J[765] += dqdci; // dwdot[HNO]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 133: H + HONO <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 8.1 * exp(1.89 * logT - (1937.38416334817) * invT);
  dlnkfdT = 1.89 * invT + (1937.38416334817) * invT2;
  // reverse
  phi_r = sc[6] * sc[8];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[8] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[6] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // H2O
  wdot[8] += q;  // NO
  wdot[24] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[68] += dqdci; // dwdot[H2O]/d[H]
  J[70] += dqdci; // dwdot[NO]/d[H]
  J[86] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[188] -= dqdci; // dwdot[H]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[194] += dqdci; // dwdot[NO]/d[H2O]
  J[210] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[250] -= dqdci; // dwdot[H]/d[NO]
  J[254] += dqdci; // dwdot[H2O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[272] -= dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[746] -= dqdci; // dwdot[H]/d[HONO]
  J[750] += dqdci; // dwdot[H2O]/d[HONO]
  J[752] += dqdci; // dwdot[NO]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 134: HONO + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[24];
  k_f = 12000000 * exp(-(2999.17132819613) * invT);
  dlnkfdT = (2999.17132819613) * invT2;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[24]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[23] += q; // NO2
  wdot[24] -= q; // HONO
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[116] += dqdci; // dwdot[NO2]/d[O]
  J[117] -= dqdci; // dwdot[HONO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[148] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[716] -= dqdci; // dwdot[O]/d[NO2]
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[737] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[3];
  J[747] -= dqdci; // dwdot[O]/d[HONO]
  J[748] += dqdci; // dwdot[OH]/d[HONO]
  J[767] += dqdci; // dwdot[NO2]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 135: HONO + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  dlnkfdT = (-261.672666218454) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[23] += q; // NO2
  wdot[24] -= q; // HONO
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[148] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] += dqdci; // dwdot[NO2]/d[H2O]
  J[210] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[717] -= dqdci; // dwdot[OH]/d[NO2]
  J[719] += dqdci; // dwdot[H2O]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[737] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[4];
  J[748] -= dqdci; // dwdot[OH]/d[HONO]
  J[750] += dqdci; // dwdot[H2O]/d[HONO]
  J[767] += dqdci; // dwdot[NO2]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 136: HONO + NO2 <=> HONO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[24];
  k_f = 200000 * exp(-(16455.1849718143) * invT);
  dlnkfdT = (16455.1849718143) * invT2;
  // reverse
  phi_r = sc[8] * sc[27];
  Kc = exp(-g_RT[8] + g_RT[23] + g_RT[24] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[24]) + (h_RT[8] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // NO
  wdot[23] -= q; // NO2
  wdot[24] -= q; // HONO
  wdot[27] += q; // HONO2
  // d()/d[NO]
  dqdci = -k_r * sc[27];
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  J[272] -= dqdci; // dwdot[HONO]/d[NO]
  J[275] += dqdci; // dwdot[HONO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[24];
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] -= dqdci; // dwdot[HONO]/d[NO2]
  J[740] += dqdci; // dwdot[HONO2]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[23];
  J[752] += dqdci; // dwdot[NO]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  J[771] += dqdci; // dwdot[HONO2]/d[HONO]
  // d()/d[HONO2]
  dqdci = -k_r * sc[8];
  J[845] += dqdci; // dwdot[NO]/d[HONO2]
  J[860] -= dqdci; // dwdot[NO2]/d[HONO2]
  J[861] -= dqdci; // dwdot[HONO]/d[HONO2]
  J[864] += dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT
  J[957] += dqdT; // dwdot[HONO2]/dT

  // reaction 137: 2 HONO <=> H2O + NO + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[24] * sc[24]);
  k_f = 3.5e-07 * exp(3.64 * logT - (6109.0503228693) * invT);
  dlnkfdT = 3.64 * invT + (6109.0503228693) * invT2;
  // reverse
  phi_r = sc[6] * sc[8] * sc[23];
  Kc = refC * exp(-g_RT[6] - g_RT[8] - g_RT[23] + 2.000000 * g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[24]) + (h_RT[6] + h_RT[8] + h_RT[23]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;      // H2O
  wdot[8] += q;      // NO
  wdot[23] += q;     // NO2
  wdot[24] -= 2 * q; // HONO
  // d()/d[H2O]
  dqdci = -k_r * sc[8] * sc[23];
  J[192] += dqdci;      // dwdot[H2O]/d[H2O]
  J[194] += dqdci;      // dwdot[NO]/d[H2O]
  J[209] += dqdci;      // dwdot[NO2]/d[H2O]
  J[210] += -2 * dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[6] * sc[23];
  J[254] += dqdci;      // dwdot[H2O]/d[NO]
  J[256] += dqdci;      // dwdot[NO]/d[NO]
  J[271] += dqdci;      // dwdot[NO2]/d[NO]
  J[272] += -2 * dqdci; // dwdot[HONO]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[6] * sc[8];
  J[719] += dqdci;      // dwdot[H2O]/d[NO2]
  J[721] += dqdci;      // dwdot[NO]/d[NO2]
  J[736] += dqdci;      // dwdot[NO2]/d[NO2]
  J[737] += -2 * dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * 2.000000 * sc[24];
  J[750] += dqdci;      // dwdot[H2O]/d[HONO]
  J[752] += dqdci;      // dwdot[NO]/d[HONO]
  J[767] += dqdci;      // dwdot[NO2]/d[HONO]
  J[768] += -2 * dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[936] += dqdT;      // dwdot[H2O]/dT
  J[938] += dqdT;      // dwdot[NO]/dT
  J[953] += dqdT;      // dwdot[NO2]/dT
  J[954] += -2 * dqdT; // dwdot[HONO]/dT

  // reaction 139: H2 + NO2 <=> H + HNO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[23];
  k_f = 0.00024 * exp(3.15 * logT - (15650.0383065268) * invT);
  dlnkfdT = 3.15 * invT + (15650.0383065268) * invT2;
  // reverse
  phi_r = sc[2] * sc[25];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[23]) + (h_RT[2] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[2] += q;  // H
  wdot[23] -= q; // NO2
  wdot[25] += q; // HNO2
  // d()/d[H2]
  dqdci = +k_f * sc[23];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[2] += dqdci;  // dwdot[H]/d[H2]
  J[23] -= dqdci; // dwdot[NO2]/d[H2]
  J[25] += dqdci; // dwdot[HNO2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[25];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[85] -= dqdci; // dwdot[NO2]/d[H]
  J[87] += dqdci; // dwdot[HNO2]/d[H]
  // d()/d[NO2]
  dqdci = +k_f * sc[0];
  J[713] -= dqdci; // dwdot[H2]/d[NO2]
  J[715] += dqdci; // dwdot[H]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[738] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[2];
  J[775] -= dqdci; // dwdot[H2]/d[HNO2]
  J[777] += dqdci; // dwdot[H]/d[HNO2]
  J[798] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[800] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HNO2]/dT

  // reaction 140: HNO2 + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[25];
  k_f = 170 * exp(1.5 * logT - (1006.43333160944) * invT);
  dlnkfdT = 1.5 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[25]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[23] += q; // NO2
  wdot[25] -= q; // HNO2
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[116] += dqdci; // dwdot[NO2]/d[O]
  J[118] -= dqdci; // dwdot[HNO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[149] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[716] -= dqdci; // dwdot[O]/d[NO2]
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[738] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[3];
  J[778] -= dqdci; // dwdot[O]/d[HNO2]
  J[779] += dqdci; // dwdot[OH]/d[HNO2]
  J[798] += dqdci; // dwdot[NO2]/d[HNO2]
  J[800] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HNO2]/dT

  // reaction 141: HNO2 + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[25];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[23] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[25]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[23] += q; // NO2
  wdot[25] -= q; // HNO2
  // d()/d[OH]
  dqdci = +k_f * sc[25];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[149] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] += dqdci; // dwdot[NO2]/d[H2O]
  J[211] -= dqdci; // dwdot[HNO2]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[717] -= dqdci; // dwdot[OH]/d[NO2]
  J[719] += dqdci; // dwdot[H2O]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[738] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[4];
  J[779] -= dqdci; // dwdot[OH]/d[HNO2]
  J[781] += dqdci; // dwdot[H2O]/d[HNO2]
  J[798] += dqdci; // dwdot[NO2]/d[HNO2]
  J[800] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HNO2]/dT

  // reaction 143: H + NO3 <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[26];
  k_f = 60000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[23] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[26]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[23] += q; // NO2
  wdot[26] -= q; // NO3
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[85] += dqdci; // dwdot[NO2]/d[H]
  J[88] -= dqdci; // dwdot[NO3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[150] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[715] -= dqdci; // dwdot[H]/d[NO2]
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[739] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[2];
  J[808] -= dqdci; // dwdot[H]/d[NO3]
  J[810] += dqdci; // dwdot[OH]/d[NO3]
  J[829] += dqdci; // dwdot[NO2]/d[NO3]
  J[832] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[NO3]/dT

  // reaction 144: NO3 + O <=> NO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[26];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[3] - g_RT[23] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[26]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[3] -= q;  // O
  wdot[23] += q; // NO2
  wdot[26] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[23];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[34] -= dqdci; // dwdot[O]/d[O2]
  J[54] += dqdci; // dwdot[NO2]/d[O2]
  J[57] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[94] += dqdci;  // dwdot[O2]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[116] += dqdci; // dwdot[NO2]/d[O]
  J[119] -= dqdci; // dwdot[NO3]/d[O]
  // d()/d[NO2]
  dqdci = -k_r * sc[1];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[716] -= dqdci; // dwdot[O]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[739] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[3];
  J[807] += dqdci; // dwdot[O2]/d[NO3]
  J[809] -= dqdci; // dwdot[O]/d[NO3]
  J[829] += dqdci; // dwdot[NO2]/d[NO3]
  J[832] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[NO3]/dT

  // reaction 145: NO3 + OH <=> HO2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[26];
  k_f = 14000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[26]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // HO2
  wdot[23] += q; // NO2
  wdot[26] -= q; // NO3
  // d()/d[OH]
  dqdci = +k_f * sc[26];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[HO2]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[150] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[23];
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[178] += dqdci; // dwdot[NO2]/d[HO2]
  J[181] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[717] -= dqdci; // dwdot[OH]/d[NO2]
  J[718] += dqdci; // dwdot[HO2]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[739] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[4];
  J[810] -= dqdci; // dwdot[OH]/d[NO3]
  J[811] += dqdci; // dwdot[HO2]/d[NO3]
  J[829] += dqdci; // dwdot[NO2]/d[NO3]
  J[832] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[NO3]/dT

  // reaction 146: HO2 + NO3 <=> NO2 + O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[26];
  k_f = 1500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[4] * sc[23];
  Kc = refC * exp(-g_RT[1] - g_RT[4] + g_RT[5] - g_RT[23] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[5] + h_RT[26]) + (h_RT[1] + h_RT[4] + h_RT[23]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[4] += q;  // OH
  wdot[5] -= q;  // HO2
  wdot[23] += q; // NO2
  wdot[26] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[4] * sc[23];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[35] += dqdci; // dwdot[OH]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[54] += dqdci; // dwdot[NO2]/d[O2]
  J[57] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[1] * sc[23];
  J[125] += dqdci; // dwdot[O2]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[150] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[26];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[178] += dqdci; // dwdot[NO2]/d[HO2]
  J[181] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[NO2]
  dqdci = -k_r * sc[1] * sc[4];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[718] -= dqdci; // dwdot[HO2]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[739] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[5];
  J[807] += dqdci; // dwdot[O2]/d[NO3]
  J[810] += dqdci; // dwdot[OH]/d[NO3]
  J[811] -= dqdci; // dwdot[HO2]/d[NO3]
  J[829] += dqdci; // dwdot[NO2]/d[NO3]
  J[832] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[NO3]/dT

  // reaction 149: H + HONO2 <=> H2 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 560 * exp(1.5 * logT - (8252.7533191974) * invT);
  dlnkfdT = 1.5 * invT + (8252.7533191974) * invT2;
  // reverse
  phi_r = sc[0] * sc[26];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[0] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[26] += q; // NO3
  wdot[27] -= q; // HONO2
  // d()/d[H2]
  dqdci = -k_r * sc[26];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[26] += dqdci; // dwdot[NO3]/d[H2]
  J[27] -= dqdci; // dwdot[HONO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[88] += dqdci; // dwdot[NO3]/d[H]
  J[89] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[NO3]
  dqdci = -k_r * sc[0];
  J[806] += dqdci; // dwdot[H2]/d[NO3]
  J[808] -= dqdci; // dwdot[H]/d[NO3]
  J[832] += dqdci; // dwdot[NO3]/d[NO3]
  J[833] -= dqdci; // dwdot[HONO2]/d[NO3]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[837] += dqdci; // dwdot[H2]/d[HONO2]
  J[839] -= dqdci; // dwdot[H]/d[HONO2]
  J[863] += dqdci; // dwdot[NO3]/d[HONO2]
  J[864] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[956] += dqdT; // dwdot[NO3]/dT
  J[957] -= dqdT; // dwdot[HONO2]/dT

  // reaction 150: H + HONO2 <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 6.1e-05 * exp(3.3 * logT - (3162.71674458266) * invT);
  dlnkfdT = 3.3 * invT + (3162.71674458266) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // H2O
  wdot[23] += q; // NO2
  wdot[27] -= q; // HONO2
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[68] += dqdci; // dwdot[H2O]/d[H]
  J[85] += dqdci; // dwdot[NO2]/d[H]
  J[89] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[188] -= dqdci; // dwdot[H]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] += dqdci; // dwdot[NO2]/d[H2O]
  J[213] -= dqdci; // dwdot[HONO2]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[715] -= dqdci; // dwdot[H]/d[NO2]
  J[719] += dqdci; // dwdot[H2O]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[740] -= dqdci; // dwdot[HONO2]/d[NO2]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[839] -= dqdci; // dwdot[H]/d[HONO2]
  J[843] += dqdci; // dwdot[H2O]/d[HONO2]
  J[860] += dqdci; // dwdot[NO2]/d[HONO2]
  J[864] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[957] -= dqdT; // dwdot[HONO2]/dT

  // reaction 151: H + HONO2 <=> HONO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 0.38 * exp(2.3 * logT - (3510.43946065372) * invT);
  dlnkfdT = 2.3 * invT + (3510.43946065372) * invT2;
  // reverse
  phi_r = sc[4] * sc[24];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[24] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[4] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[24] += q; // HONO
  wdot[27] -= q; // HONO2
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[86] += dqdci; // dwdot[HONO]/d[H]
  J[89] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[24];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[148] += dqdci; // dwdot[HONO]/d[OH]
  J[151] -= dqdci; // dwdot[HONO2]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[4];
  J[746] -= dqdci; // dwdot[H]/d[HONO]
  J[748] += dqdci; // dwdot[OH]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  J[771] -= dqdci; // dwdot[HONO2]/d[HONO]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[839] -= dqdci; // dwdot[H]/d[HONO2]
  J[841] += dqdci; // dwdot[OH]/d[HONO2]
  J[861] += dqdci; // dwdot[HONO]/d[HONO2]
  J[864] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[954] += dqdT; // dwdot[HONO]/dT
  J[957] -= dqdT; // dwdot[HONO2]/dT

  // reaction 152: HONO2 + OH <=> H2O + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[27];
  k_f = 10000 * exp(-(-623.988665597852) * invT);
  dlnkfdT = (-623.988665597852) * invT2;
  // reverse
  phi_r = sc[6] * sc[26];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[27]) + (h_RT[6] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[26] += q; // NO3
  wdot[27] -= q; // HONO2
  // d()/d[OH]
  dqdci = +k_f * sc[27];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[150] += dqdci; // dwdot[NO3]/d[OH]
  J[151] -= dqdci; // dwdot[HONO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[26];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[212] += dqdci; // dwdot[NO3]/d[H2O]
  J[213] -= dqdci; // dwdot[HONO2]/d[H2O]
  // d()/d[NO3]
  dqdci = -k_r * sc[6];
  J[810] -= dqdci; // dwdot[OH]/d[NO3]
  J[812] += dqdci; // dwdot[H2O]/d[NO3]
  J[832] += dqdci; // dwdot[NO3]/d[NO3]
  J[833] -= dqdci; // dwdot[HONO2]/d[NO3]
  // d()/d[HONO2]
  dqdci = +k_f * sc[4];
  J[841] -= dqdci; // dwdot[OH]/d[HONO2]
  J[843] += dqdci; // dwdot[H2O]/d[HONO2]
  J[863] += dqdci; // dwdot[NO3]/d[HONO2]
  J[864] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[956] += dqdT; // dwdot[NO3]/dT
  J[957] -= dqdT; // dwdot[HONO2]/dT

  // reaction 154: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 64 * exp(1.835 * logT - (6789.39925503728) * invT);
  dlnkfdT = 1.835 * invT + (6789.39925503728) * invT2;
  // reverse
  phi_r = sc[4] * sc[29];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[4] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[28] -= q; // N2O
  wdot[29] += q; // N2
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[90] -= dqdci; // dwdot[N2O]/d[H]
  J[91] += dqdci; // dwdot[N2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[29];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[152] -= dqdci; // dwdot[N2O]/d[OH]
  J[153] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[870] -= dqdci; // dwdot[H]/d[N2O]
  J[872] += dqdci; // dwdot[OH]/d[N2O]
  J[896] -= dqdci; // dwdot[N2O]/d[N2O]
  J[897] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[901] -= dqdci; // dwdot[H]/d[N2]
  J[903] += dqdci; // dwdot[OH]/d[N2]
  J[927] -= dqdci; // dwdot[N2O]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 155: N2O + O <=> 2 NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[28];
  k_f = 92000000 * exp(-(13928.5340928088) * invT);
  dlnkfdT = (13928.5340928088) * invT2;
  // reverse
  phi_r = (sc[8] * sc[8]);
  Kc = exp(g_RT[3] - 2.000000 * g_RT[8] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[28]) + (2.000000 * h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;     // O
  wdot[8] += 2 * q; // NO
  wdot[28] -= q;    // N2O
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[96] -= dqdci;      // dwdot[O]/d[O]
  J[101] += 2 * dqdci; // dwdot[NO]/d[O]
  J[121] -= dqdci;     // dwdot[N2O]/d[O]
  // d()/d[NO]
  dqdci = -k_r * 2.000000 * sc[8];
  J[251] -= dqdci;     // dwdot[O]/d[NO]
  J[256] += 2 * dqdci; // dwdot[NO]/d[NO]
  J[276] -= dqdci;     // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[3];
  J[871] -= dqdci;     // dwdot[O]/d[N2O]
  J[876] += 2 * dqdci; // dwdot[NO]/d[N2O]
  J[896] -= dqdci;     // dwdot[N2O]/d[N2O]
  // d()/dT
  J[933] -= dqdT;     // dwdot[O]/dT
  J[938] += 2 * dqdT; // dwdot[NO]/dT
  J[958] -= dqdT;     // dwdot[N2O]/dT

  // reaction 156: N2O + O <=> N2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[28];
  k_f = 92000000 * exp(-(13928.5340928088) * invT);
  dlnkfdT = (13928.5340928088) * invT2;
  // reverse
  phi_r = sc[1] * sc[29];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[28]) + (h_RT[1] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[3] -= q;  // O
  wdot[28] -= q; // N2O
  wdot[29] += q; // N2
  // d()/d[O2]
  dqdci = -k_r * sc[29];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[34] -= dqdci; // dwdot[O]/d[O2]
  J[59] -= dqdci; // dwdot[N2O]/d[O2]
  J[60] += dqdci; // dwdot[N2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[94] += dqdci;  // dwdot[O2]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[121] -= dqdci; // dwdot[N2O]/d[O]
  J[122] += dqdci; // dwdot[N2]/d[O]
  // d()/d[N2O]
  dqdci = +k_f * sc[3];
  J[869] += dqdci; // dwdot[O2]/d[N2O]
  J[871] -= dqdci; // dwdot[O]/d[N2O]
  J[896] -= dqdci; // dwdot[N2O]/d[N2O]
  J[897] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[900] += dqdci; // dwdot[O2]/d[N2]
  J[902] -= dqdci; // dwdot[O]/d[N2]
  J[927] -= dqdci; // dwdot[N2O]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 157: N2O + OH <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 1.3e-08 * exp(4.72 * logT - (18397.6013018206) * invT);
  dlnkfdT = 4.72 * invT + (18397.6013018206) * invT2;
  // reverse
  phi_r = sc[5] * sc[29];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[5] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // HO2
  wdot[28] -= q; // N2O
  wdot[29] += q; // N2
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[HO2]/d[OH]
  J[152] -= dqdci; // dwdot[N2O]/d[OH]
  J[153] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[29];
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[183] -= dqdci; // dwdot[N2O]/d[HO2]
  J[184] += dqdci; // dwdot[N2]/d[HO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[872] -= dqdci; // dwdot[OH]/d[N2O]
  J[873] += dqdci; // dwdot[HO2]/d[N2O]
  J[896] -= dqdci; // dwdot[N2O]/d[N2O]
  J[897] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[903] -= dqdci; // dwdot[OH]/d[N2]
  J[904] += dqdci; // dwdot[HO2]/d[N2]
  J[927] -= dqdci; // dwdot[N2O]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 158: N2O + OH <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 1.2e-10 * exp(4.33 * logT - (12620.6739783824) * invT);
  dlnkfdT = 4.33 * invT + (12620.6739783824) * invT2;
  // reverse
  phi_r = sc[8] * sc[21];
  Kc = exp(g_RT[4] - g_RT[8] - g_RT[21] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[8] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[8] += q;  // NO
  wdot[21] += q; // HNO
  wdot[28] -= q; // N2O
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[152] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[21];
  J[252] -= dqdci; // dwdot[OH]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] += dqdci; // dwdot[HNO]/d[NO]
  J[276] -= dqdci; // dwdot[N2O]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[8];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[679] -= dqdci; // dwdot[N2O]/d[HNO]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[872] -= dqdci; // dwdot[OH]/d[N2O]
  J[876] += dqdci; // dwdot[NO]/d[N2O]
  J[889] += dqdci; // dwdot[HNO]/d[N2O]
  J[896] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT

  // reaction 159: N2O + NO <=> N2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[28];
  k_f = 0.53 * exp(2.23 * logT - (23288.8672934424) * invT);
  dlnkfdT = 2.23 * invT + (23288.8672934424) * invT2;
  // reverse
  phi_r = sc[23] * sc[29];
  Kc = exp(g_RT[8] - g_RT[23] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[28]) + (h_RT[23] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // NO
  wdot[23] += q; // NO2
  wdot[28] -= q; // N2O
  wdot[29] += q; // N2
  // d()/d[NO]
  dqdci = +k_f * sc[28];
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[271] += dqdci; // dwdot[NO2]/d[NO]
  J[276] -= dqdci; // dwdot[N2O]/d[NO]
  J[277] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[29];
  J[721] -= dqdci; // dwdot[NO]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[741] -= dqdci; // dwdot[N2O]/d[NO2]
  J[742] += dqdci; // dwdot[N2]/d[NO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[8];
  J[876] -= dqdci; // dwdot[NO]/d[N2O]
  J[891] += dqdci; // dwdot[NO2]/d[N2O]
  J[896] -= dqdci; // dwdot[N2O]/d[N2O]
  J[897] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[23];
  J[907] -= dqdci; // dwdot[NO]/d[N2]
  J[922] += dqdci; // dwdot[NO2]/d[N2]
  J[927] -= dqdci; // dwdot[N2O]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 160: 2 NH2 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 170 * exp(1.62 * logT - (5929.40197317701) * invT);
  dlnkfdT = 1.62 * invT + (5929.40197317701) * invT2;
  // reverse
  phi_r = sc[0] * sc[16];
  Kc = exp(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[0] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // H2
  wdot[10] -= 2 * q; // NH2
  wdot[16] += q;     // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[16];
  J[0] += dqdci;       // dwdot[H2]/d[H2]
  J[10] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[16] += dqdci;      // dwdot[N2H2]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[310] += dqdci;      // dwdot[H2]/d[NH2]
  J[320] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[326] += dqdci;      // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[0];
  J[496] += dqdci;      // dwdot[H2]/d[N2H2]
  J[506] += -2 * dqdci; // dwdot[NH2]/d[N2H2]
  J[512] += dqdci;      // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[930] += dqdT;      // dwdot[H2]/dT
  J[940] += -2 * dqdT; // dwdot[NH2]/dT
  J[946] += dqdT;      // dwdot[N2H2]/dT

  // reaction 161: 2 NH2 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 0.072 * exp(1.88 * logT - (4429.31309241314) * invT);
  dlnkfdT = 1.88 * invT + (4429.31309241314) * invT2;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = exp(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[0] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // H2
  wdot[10] -= 2 * q; // NH2
  wdot[17] += q;     // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;       // dwdot[H2]/d[H2]
  J[10] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[17] += dqdci;      // dwdot[H2NN]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[310] += dqdci;      // dwdot[H2]/d[NH2]
  J[320] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[327] += dqdci;      // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[0];
  J[527] += dqdci;      // dwdot[H2]/d[H2NN]
  J[537] += -2 * dqdci; // dwdot[NH2]/d[H2NN]
  J[544] += dqdci;      // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[930] += dqdT;      // dwdot[H2]/dT
  J[940] += -2 * dqdT; // dwdot[NH2]/dT
  J[947] += dqdT;      // dwdot[H2NN]/dT

  // reaction 162: NH + NH2 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[11];
  k_f = 430000000 * exp(-0.272 * logT - (-38.7476832669634) * invT);
  dlnkfdT = -0.272 * invT + (-38.7476832669634) * invT2;
  // reverse
  phi_r = sc[2] * sc[16];
  Kc = exp(-g_RT[2] + g_RT[10] + g_RT[11] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[11]) + (h_RT[2] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[10] -= q; // NH2
  wdot[11] -= q; // NH
  wdot[16] += q; // N2H2
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci; // dwdot[NH2]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  J[78] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NH2]
  dqdci = +k_f * sc[11];
  J[312] += dqdci; // dwdot[H]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[326] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[351] -= dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[357] += dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[498] += dqdci; // dwdot[H]/d[N2H2]
  J[506] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[507] -= dqdci; // dwdot[NH]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 163: HNOH + NH2 <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 1e-05 * exp(3.46 * logT - (-235.002182930804) * invT);
  dlnkfdT = 3.46 * invT + (-235.002182930804) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[10] - g_RT[15] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH2
  wdot[15] += q; // N2H3
  wdot[20] -= q; // HNOH
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  J[144] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[325] += dqdci; // dwdot[N2H3]/d[NH2]
  J[330] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[4];
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[475] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[485] -= dqdci; // dwdot[HNOH]/d[N2H3]
  // d()/d[HNOH]
  dqdci = +k_f * sc[10];
  J[624] += dqdci; // dwdot[OH]/d[HNOH]
  J[630] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[635] += dqdci; // dwdot[N2H3]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT

  // reaction 164: HNOH + NH2 <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 88000000000 * exp(-1.08 * logT - (560.080149040653) * invT);
  dlnkfdT = -1.08 * invT + (560.080149040653) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(-g_RT[6] + g_RT[10] - g_RT[17] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[17] += q; // H2NN
  wdot[20] -= q; // HNOH
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[203] += dqdci; // dwdot[H2NN]/d[H2O]
  J[206] -= dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[327] += dqdci; // dwdot[H2NN]/d[NH2]
  J[330] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[6];
  J[533] += dqdci; // dwdot[H2O]/d[H2NN]
  J[537] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  J[547] -= dqdci; // dwdot[HNOH]/d[H2NN]
  // d()/d[HNOH]
  dqdci = +k_f * sc[10];
  J[626] += dqdci; // dwdot[H2O]/d[HNOH]
  J[630] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[637] += dqdci; // dwdot[H2NN]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT

  // reaction 166: N2H4 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14];
  k_f = 140000000000000 * exp(-(37696.4636520974) * invT);
  dlnkfdT = (37696.4636520974) * invT2;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = refC * exp(-g_RT[0] + g_RT[14] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14]) + (h_RT[0] + h_RT[17]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[14] -= q; // N2H4
  wdot[17] += q; // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[14] -= dqdci; // dwdot[N2H4]/d[H2]
  J[17] += dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[N2H4]
  dqdci = +k_f;
  J[434] += dqdci; // dwdot[H2]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[451] += dqdci; // dwdot[H2NN]/d[N2H4]
  // d()/d[H2NN]
  dqdci = -k_r * sc[0];
  J[527] += dqdci; // dwdot[H2]/d[H2NN]
  J[541] -= dqdci; // dwdot[N2H4]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 167: H + N2H4 <=> H2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 7000000 * exp(-(1258.0416645118) * invT);
  dlnkfdT = (1258.0416645118) * invT2;
  // reverse
  phi_r = sc[0] * sc[15];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[0] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[14] -= dqdci; // dwdot[N2H4]/d[H2]
  J[15] += dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[N2H4]/d[H]
  J[77] += dqdci; // dwdot[N2H3]/d[H]
  // d()/d[N2H4]
  dqdci = +k_f * sc[2];
  J[434] += dqdci; // dwdot[H2]/d[N2H4]
  J[436] -= dqdci; // dwdot[H]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[0];
  J[465] += dqdci; // dwdot[H2]/d[N2H3]
  J[467] -= dqdci; // dwdot[H]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT

  // reaction 168: H + N2H4 <=> NH2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 0.23 * exp(1.42 * logT - (4127.38309293031) * invT);
  dlnkfdT = 1.42 * invT + (4127.38309293031) * invT2;
  // reverse
  phi_r = sc[9] * sc[10];
  Kc = exp(g_RT[2] - g_RT[9] - g_RT[10] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[9] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[9] += q;  // NH3
  wdot[10] += q; // NH2
  wdot[14] -= q; // N2H4
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[NH3]/d[H]
  J[72] += dqdci; // dwdot[NH2]/d[H]
  J[76] -= dqdci; // dwdot[N2H4]/d[H]
  // d()/d[NH3]
  dqdci = -k_r * sc[10];
  J[281] -= dqdci; // dwdot[H]/d[NH3]
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] += dqdci; // dwdot[NH2]/d[NH3]
  J[293] -= dqdci; // dwdot[N2H4]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[9];
  J[312] -= dqdci; // dwdot[H]/d[NH2]
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[324] -= dqdci; // dwdot[N2H4]/d[NH2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[2];
  J[436] -= dqdci; // dwdot[H]/d[N2H4]
  J[443] += dqdci; // dwdot[NH3]/d[N2H4]
  J[444] += dqdci; // dwdot[NH2]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT

  // reaction 169: N2H4 + O <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 150000 * exp(-(-639.085165571994) * invT);
  dlnkfdT = (-639.085165571994) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[107] -= dqdci; // dwdot[N2H4]/d[O]
  J[108] += dqdci; // dwdot[N2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[N2H4]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H4]
  dqdci = +k_f * sc[3];
  J[437] -= dqdci; // dwdot[O]/d[N2H4]
  J[438] += dqdci; // dwdot[OH]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[4];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT

  // reaction 170: N2H4 + O <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 290000 * exp(-(-639.085165571994) * invT);
  dlnkfdT = (-639.085165571994) * invT2;
  // reverse
  phi_r = sc[6] * sc[16];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[14] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[6] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[6] += q;  // H2O
  wdot[14] -= q; // N2H4
  wdot[16] += q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[99] += dqdci;  // dwdot[H2O]/d[O]
  J[107] -= dqdci; // dwdot[N2H4]/d[O]
  J[109] += dqdci; // dwdot[N2H2]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[189] -= dqdci; // dwdot[O]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[200] -= dqdci; // dwdot[N2H4]/d[H2O]
  J[202] += dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[N2H4]
  dqdci = +k_f * sc[3];
  J[437] -= dqdci; // dwdot[O]/d[N2H4]
  J[440] += dqdci; // dwdot[H2O]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[450] += dqdci; // dwdot[N2H2]/d[N2H4]
  // d()/d[N2H2]
  dqdci = -k_r * sc[6];
  J[499] -= dqdci; // dwdot[O]/d[N2H2]
  J[502] += dqdci; // dwdot[H2O]/d[N2H2]
  J[510] -= dqdci; // dwdot[N2H4]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 171: N2H4 + OH <=> H2O + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  dlnkfdT = (-160.022899725901) * invT2;
  // reverse
  phi_r = sc[6] * sc[15];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[6] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[138] -= dqdci; // dwdot[N2H4]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[200] -= dqdci; // dwdot[N2H4]/d[H2O]
  J[201] += dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[438] -= dqdci; // dwdot[OH]/d[N2H4]
  J[440] += dqdci; // dwdot[H2O]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[6];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[471] += dqdci; // dwdot[H2O]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT

  // reaction 172: N2H4 + NH2 <=> N2H3 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 7.6e-07 * exp(4 * logT - (2037.02106317751) * invT);
  dlnkfdT = 4 * invT + (2037.02106317751) * invT2;
  // reverse
  phi_r = sc[9] * sc[15];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[9] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  // d()/d[NH3]
  dqdci = -k_r * sc[15];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[293] -= dqdci; // dwdot[N2H4]/d[NH3]
  J[294] += dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[14];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[324] -= dqdci; // dwdot[N2H4]/d[NH2]
  J[325] += dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[10];
  J[443] += dqdci; // dwdot[NH3]/d[N2H4]
  J[444] -= dqdci; // dwdot[NH2]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[9];
  J[474] += dqdci; // dwdot[NH3]/d[N2H3]
  J[475] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT

  // reaction 173: N2H4 + NO <=> HNO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[14];
  k_f = 6e-05 * exp(3.16 * logT - (15521.7180567466) * invT);
  dlnkfdT = 3.16 * invT + (15521.7180567466) * invT2;
  // reverse
  phi_r = sc[15] * sc[21];
  Kc = exp(g_RT[8] + g_RT[14] - g_RT[15] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[14]) + (h_RT[15] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // NO
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  wdot[21] += q; // HNO
  // d()/d[NO]
  dqdci = +k_f * sc[14];
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[262] -= dqdci; // dwdot[N2H4]/d[NO]
  J[263] += dqdci; // dwdot[N2H3]/d[NO]
  J[269] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[N2H4]
  dqdci = +k_f * sc[8];
  J[442] -= dqdci; // dwdot[NO]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[455] += dqdci; // dwdot[HNO]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[21];
  J[473] -= dqdci; // dwdot[NO]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[15];
  J[659] -= dqdci; // dwdot[NO]/d[HNO]
  J[665] -= dqdci; // dwdot[N2H4]/d[HNO]
  J[666] += dqdci; // dwdot[N2H3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 174: N2H4 + NO2 <=> HONO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[23];
  k_f = 8.2e-05 * exp(3.13 * logT - (4458.49965902982) * invT);
  dlnkfdT = 3.13 * invT + (4458.49965902982) * invT2;
  // reverse
  phi_r = sc[15] * sc[24];
  Kc = exp(g_RT[14] - g_RT[15] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[23]) + (h_RT[15] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[N2H4]
  dqdci = +k_f * sc[23];
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[457] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[458] += dqdci; // dwdot[HONO]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[24];
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[488] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[489] += dqdci; // dwdot[HONO]/d[N2H3]
  // d()/d[NO2]
  dqdci = +k_f * sc[14];
  J[727] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[728] += dqdci; // dwdot[N2H3]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[15];
  J[758] -= dqdci; // dwdot[N2H4]/d[HONO]
  J[759] += dqdci; // dwdot[N2H3]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 175: N2H4 + NO2 <=> HNO2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[23];
  k_f = 2.4e-08 * exp(4.14 * logT - (3998.5596264843) * invT);
  dlnkfdT = 4.14 * invT + (3998.5596264843) * invT2;
  // reverse
  phi_r = sc[15] * sc[25];
  Kc = exp(g_RT[14] - g_RT[15] + g_RT[23] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[23]) + (h_RT[15] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  wdot[23] -= q; // NO2
  wdot[25] += q; // HNO2
  // d()/d[N2H4]
  dqdci = +k_f * sc[23];
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[457] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[459] += dqdci; // dwdot[HNO2]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[25];
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[488] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[490] += dqdci; // dwdot[HNO2]/d[N2H3]
  // d()/d[NO2]
  dqdci = +k_f * sc[14];
  J[727] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[728] += dqdci; // dwdot[N2H3]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[738] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[15];
  J[789] -= dqdci; // dwdot[N2H4]/d[HNO2]
  J[790] += dqdci; // dwdot[N2H3]/d[HNO2]
  J[798] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[800] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HNO2]/dT

  // reaction 176: H + N2H2 <=> N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 130000000 * exp(-(1947.95171333007) * invT);
  dlnkfdT = (1947.95171333007) * invT2;
  // reverse
  phi_r = sc[15];
  Kc = refCinv * exp(g_RT[2] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H2
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[77] += dqdci; // dwdot[N2H3]/d[H]
  J[78] -= dqdci; // dwdot[N2H2]/d[H]
  // d()/d[N2H3]
  dqdci = -k_r;
  J[467] -= dqdci; // dwdot[H]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = +k_f * sc[2];
  J[498] -= dqdci; // dwdot[H]/d[N2H2]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 177: H + N2H3 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 240 * exp(1.5 * logT - (-5.0321666580472) * invT);
  dlnkfdT = 1.5 * invT + (-5.0321666580472) * invT2;
  // reverse
  phi_r = sc[0] * sc[16];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[0] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[16];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[15] -= dqdci; // dwdot[N2H3]/d[H2]
  J[16] += dqdci; // dwdot[N2H2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[N2H3]/d[H]
  J[78] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[N2H3]
  dqdci = +k_f * sc[2];
  J[465] += dqdci; // dwdot[H2]/d[N2H3]
  J[467] -= dqdci; // dwdot[H]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[0];
  J[496] += dqdci; // dwdot[H2]/d[N2H2]
  J[498] -= dqdci; // dwdot[H]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 178: N2H3 + O <=> N2H2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 170 * exp(1.5 * logT - (-325.077966109849) * invT);
  dlnkfdT = 1.5 * invT + (-325.077966109849) * invT2;
  // reverse
  phi_r = sc[4] * sc[16];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[4] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  J[109] += dqdci; // dwdot[N2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[140] += dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[4];
  J[499] -= dqdci; // dwdot[O]/d[N2H2]
  J[500] += dqdci; // dwdot[OH]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 179: N2H3 + O <=> HNO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[21];
  Kc = exp(g_RT[3] - g_RT[10] + g_RT[15] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[10] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[10] += q; // NH2
  wdot[15] -= q; // N2H3
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[103] += dqdci; // dwdot[NH2]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[21];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[475] += dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[10];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[661] += dqdci; // dwdot[NH2]/d[HNO]
  J[666] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 180: N2H3 + O => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] += q;  // H
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[10] += q; // NH2
  wdot[15] -= q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[95] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[103] += dqdci; // dwdot[NH2]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[467] += dqdci; // dwdot[H]/d[N2H3]
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[473] += dqdci; // dwdot[NO]/d[N2H3]
  J[475] += dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 181: N2H3 + OH <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 1.2 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[6] * sc[16];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[6] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[140] += dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[201] -= dqdci; // dwdot[N2H3]/d[H2O]
  J[202] += dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[471] += dqdci; // dwdot[H2O]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[6];
  J[500] -= dqdci; // dwdot[OH]/d[N2H2]
  J[502] += dqdci; // dwdot[H2O]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 182: N2H3 + OH <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[15] -= q; // N2H3
  wdot[17] += q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[141] += dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[201] -= dqdci; // dwdot[N2H3]/d[H2O]
  J[203] += dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[471] += dqdci; // dwdot[H2O]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[482] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[6];
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[533] += dqdci; // dwdot[H2O]/d[H2NN]
  J[542] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 183: N2H3 + OH <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 1000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[9] * sc[21];
  Kc = exp(g_RT[4] - g_RT[9] + g_RT[15] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[9] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[9] += q;  // NH3
  wdot[15] -= q; // N2H3
  wdot[21] += q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[NH3]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[283] -= dqdci; // dwdot[OH]/d[NH3]
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[294] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[300] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[474] += dqdci; // dwdot[NH3]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[660] += dqdci; // dwdot[NH3]/d[HNO]
  J[666] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 184: HO2 + N2H3 <=> H2O2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[15];
  k_f = 0.014 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[16];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[7] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[HO2]
  dqdci = +k_f * sc[15];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[170] -= dqdci; // dwdot[N2H3]/d[HO2]
  J[171] += dqdci; // dwdot[N2H2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[16];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[232] -= dqdci; // dwdot[N2H3]/d[H2O2]
  J[233] += dqdci; // dwdot[N2H2]/d[H2O2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[5];
  J[470] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[472] += dqdci; // dwdot[H2O2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[7];
  J[501] -= dqdci; // dwdot[HO2]/d[N2H2]
  J[503] += dqdci; // dwdot[H2O2]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 185: HO2 + N2H3 <=> N2H4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[15];
  k_f = 0.92 * exp(1.94 * logT - (1069.83863150083) * invT);
  dlnkfdT = 1.94 * invT + (1069.83863150083) * invT2;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[5] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[5] -= q;  // HO2
  wdot[14] += q; // N2H4
  wdot[15] -= q; // N2H3
  // d()/d[O2]
  dqdci = -k_r * sc[14];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[45] += dqdci; // dwdot[N2H4]/d[O2]
  J[46] -= dqdci; // dwdot[N2H3]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[15];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[169] += dqdci; // dwdot[N2H4]/d[HO2]
  J[170] -= dqdci; // dwdot[N2H3]/d[HO2]
  // d()/d[N2H4]
  dqdci = -k_r * sc[1];
  J[435] += dqdci; // dwdot[O2]/d[N2H4]
  J[439] -= dqdci; // dwdot[HO2]/d[N2H4]
  J[448] += dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = +k_f * sc[5];
  J[466] += dqdci; // dwdot[O2]/d[N2H3]
  J[470] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[944] += dqdT; // dwdot[N2H4]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 186: N2H3 + NH2 <=> N2H2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 0.92 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[9] * sc[16];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[9] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[NH3]
  dqdci = -k_r * sc[16];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[294] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[295] += dqdci; // dwdot[N2H2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[326] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[10];
  J[474] += dqdci; // dwdot[NH3]/d[N2H3]
  J[475] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[9];
  J[505] += dqdci; // dwdot[NH3]/d[N2H2]
  J[506] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 187: N2H3 + NH2 <=> H2NN + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[17];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[9] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[15] -= q; // N2H3
  wdot[17] += q; // H2NN
  // d()/d[NH3]
  dqdci = -k_r * sc[17];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[294] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[296] += dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[327] += dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[10];
  J[474] += dqdci; // dwdot[NH3]/d[N2H3]
  J[475] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[482] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[9];
  J[536] += dqdci; // dwdot[NH3]/d[H2NN]
  J[537] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[542] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 188: N2H3 + NH <=> N2H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[16];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[10] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[NH2]
  dqdci = -k_r * sc[16];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[326] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[15];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[356] -= dqdci; // dwdot[N2H3]/d[NH]
  J[357] += dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[11];
  J[475] += dqdci; // dwdot[NH2]/d[N2H3]
  J[476] -= dqdci; // dwdot[NH]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[10];
  J[506] += dqdci; // dwdot[NH2]/d[N2H2]
  J[507] -= dqdci; // dwdot[NH]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 190: H + N2H2 <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 110000000 * exp(-(1574.06173063716) * invT);
  dlnkfdT = (1574.06173063716) * invT2;
  // reverse
  phi_r = sc[0] * sc[13];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[0] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[13] += dqdci; // dwdot[NNH]/d[H2]
  J[16] -= dqdci; // dwdot[N2H2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[75] += dqdci; // dwdot[NNH]/d[H]
  J[78] -= dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[0];
  J[403] += dqdci; // dwdot[H2]/d[NNH]
  J[405] -= dqdci; // dwdot[H]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[2];
  J[496] += dqdci; // dwdot[H2]/d[N2H2]
  J[498] -= dqdci; // dwdot[H]/d[N2H2]
  J[509] += dqdci; // dwdot[NNH]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 191: N2H2 + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 330 * exp(1.5 * logT - (250.098682904946) * invT);
  dlnkfdT = 1.5 * invT + (250.098682904946) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] += dqdci; // dwdot[NNH]/d[O]
  J[109] -= dqdci; // dwdot[N2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[140] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[3];
  J[499] -= dqdci; // dwdot[O]/d[N2H2]
  J[500] += dqdci; // dwdot[OH]/d[N2H2]
  J[509] += dqdci; // dwdot[NNH]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 192: N2H2 + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[10];
  Kc = exp(g_RT[3] - g_RT[8] - g_RT[10] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[8] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[10] += q; // NH2
  wdot[16] -= q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[103] += dqdci; // dwdot[NH2]/d[O]
  J[109] -= dqdci; // dwdot[N2H2]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[10];
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[258] += dqdci; // dwdot[NH2]/d[NO]
  J[264] -= dqdci; // dwdot[N2H2]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[8];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[318] += dqdci; // dwdot[NO]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[326] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[3];
  J[499] -= dqdci; // dwdot[O]/d[N2H2]
  J[504] += dqdci; // dwdot[NO]/d[N2H2]
  J[506] += dqdci; // dwdot[NH2]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 193: N2H2 + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 5.9e-05 * exp(3.4 * logT - (684.374665494419) * invT);
  dlnkfdT = 3.4 * invT + (684.374665494419) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[140] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[13];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[199] += dqdci; // dwdot[NNH]/d[H2O]
  J[202] -= dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[409] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[4];
  J[500] -= dqdci; // dwdot[OH]/d[N2H2]
  J[502] += dqdci; // dwdot[H2O]/d[N2H2]
  J[509] += dqdci; // dwdot[NNH]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 194: N2H2 + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 8.8e-08 * exp(4.05 * logT - (810.178831945599) * invT);
  dlnkfdT = 4.05 * invT + (810.178831945599) * invT2;
  // reverse
  phi_r = sc[9] * sc[13];
  Kc = exp(-g_RT[9] + g_RT[10] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[9] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // d()/d[NH3]
  dqdci = -k_r * sc[13];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[292] += dqdci; // dwdot[NNH]/d[NH3]
  J[295] -= dqdci; // dwdot[N2H2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[16];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[323] += dqdci; // dwdot[NNH]/d[NH2]
  J[326] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[9];
  J[412] += dqdci; // dwdot[NH3]/d[NNH]
  J[413] -= dqdci; // dwdot[NH2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[10];
  J[505] += dqdci; // dwdot[NH3]/d[N2H2]
  J[506] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[509] += dqdci; // dwdot[NNH]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 195: N2H2 + NH <=> NH2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[16];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[10] * sc[13];
  Kc = exp(-g_RT[10] + g_RT[11] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[16]) + (h_RT[10] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // d()/d[NH2]
  dqdci = -k_r * sc[13];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[323] += dqdci; // dwdot[NNH]/d[NH2]
  J[326] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[16];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[354] += dqdci; // dwdot[NNH]/d[NH]
  J[357] -= dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[NNH]
  dqdci = -k_r * sc[10];
  J[413] += dqdci; // dwdot[NH2]/d[NNH]
  J[414] -= dqdci; // dwdot[NH]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[11];
  J[506] += dqdci; // dwdot[NH2]/d[N2H2]
  J[507] -= dqdci; // dwdot[NH]/d[N2H2]
  J[509] += dqdci; // dwdot[NNH]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 196: N2H2 + NO <=> N2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[16];
  k_f = 4000000 * exp(-(5999.34908972387) * invT);
  dlnkfdT = (5999.34908972387) * invT2;
  // reverse
  phi_r = sc[10] * sc[28];
  Kc = exp(g_RT[8] - g_RT[10] + g_RT[16] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[16]) + (h_RT[10] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // NO
  wdot[10] += q; // NH2
  wdot[16] -= q; // N2H2
  wdot[28] += q; // N2O
  // d()/d[NO]
  dqdci = +k_f * sc[16];
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[258] += dqdci; // dwdot[NH2]/d[NO]
  J[264] -= dqdci; // dwdot[N2H2]/d[NO]
  J[276] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[28];
  J[318] -= dqdci; // dwdot[NO]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[326] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[338] += dqdci; // dwdot[N2O]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[8];
  J[504] -= dqdci; // dwdot[NO]/d[N2H2]
  J[506] += dqdci; // dwdot[NH2]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[524] += dqdci; // dwdot[N2O]/d[N2H2]
  // d()/d[N2O]
  dqdci = -k_r * sc[10];
  J[876] -= dqdci; // dwdot[NO]/d[N2O]
  J[878] += dqdci; // dwdot[NH2]/d[N2O]
  J[884] -= dqdci; // dwdot[N2H2]/d[N2O]
  J[896] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT
  J[958] += dqdT; // dwdot[N2O]/dT

  // reaction 197: H2NN <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 3.4e+26 * exp(-4.83 * logT - (23262.7000268206) * invT);
  dlnkfdT = -4.83 * invT + (23262.7000268206) * invT2;
  // reverse
  phi_r = sc[2] * sc[13];
  Kc = refC * exp(-g_RT[2] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[2] + h_RT[13]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[75] += dqdci; // dwdot[NNH]/d[H]
  J[79] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[405] += dqdci; // dwdot[H]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[529] += dqdci; // dwdot[H]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 198: H2NN <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 250000000000000 * exp(-(26562.2917045021) * invT);
  dlnkfdT = (26562.2917045021) * invT2;
  // reverse
  phi_r = sc[0] * sc[29];
  Kc = refC * exp(-g_RT[0] + g_RT[17] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[0] + h_RT[29]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[17] -= q; // H2NN
  wdot[29] += q; // N2
  // d()/d[H2]
  dqdci = -k_r * sc[29];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[17] -= dqdci; // dwdot[H2NN]/d[H2]
  J[29] += dqdci; // dwdot[N2]/d[H2]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[527] += dqdci; // dwdot[H2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[556] += dqdci; // dwdot[N2]/d[H2NN]
  // d()/d[N2]
  dqdci = -k_r * sc[0];
  J[899] += dqdci; // dwdot[H2]/d[N2]
  J[916] -= dqdci; // dwdot[H2NN]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 199: H2NN <=> N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 130000000000000 * exp(-(23616.4613428813) * invT);
  dlnkfdT = (23616.4613428813) * invT2;
  // reverse
  phi_r = sc[16];
  Kc = exp(-g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // N2H2
  wdot[17] -= q; // H2NN
  // d()/d[N2H2]
  dqdci = -k_r;
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[513] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[543] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[946] += dqdT; // dwdot[N2H2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 200: H + H2NN <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 480 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[0] * sc[13];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[0] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[13] += dqdci; // dwdot[NNH]/d[H2]
  J[17] -= dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[75] += dqdci; // dwdot[NNH]/d[H]
  J[79] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[0];
  J[403] += dqdci; // dwdot[H2]/d[NNH]
  J[405] -= dqdci; // dwdot[H]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[527] += dqdci; // dwdot[H2]/d[H2NN]
  J[529] -= dqdci; // dwdot[H]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 201: H + H2NN <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[16];
  Kc = exp(g_RT[2] - g_RT[2] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[2] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // N2H2
  wdot[17] -= q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[17] - k_r * sc[16];
  J[78] += dqdci; // dwdot[N2H2]/d[H]
  J[79] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[513] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[543] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[946] += dqdT; // dwdot[N2H2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 202: H2NN + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 330 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] += dqdci; // dwdot[NNH]/d[O]
  J[110] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[530] -= dqdci; // dwdot[O]/d[H2NN]
  J[531] += dqdci; // dwdot[OH]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 203: H2NN + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[10];
  Kc = exp(g_RT[3] - g_RT[8] - g_RT[10] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[8] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[10] += q; // NH2
  wdot[17] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[103] += dqdci; // dwdot[NH2]/d[O]
  J[110] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[10];
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[258] += dqdci; // dwdot[NH2]/d[NO]
  J[265] -= dqdci; // dwdot[H2NN]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[8];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[318] += dqdci; // dwdot[NO]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[327] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[530] -= dqdci; // dwdot[O]/d[H2NN]
  J[535] += dqdci; // dwdot[NO]/d[H2NN]
  J[537] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 204: H2NN + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[13];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[199] += dqdci; // dwdot[NNH]/d[H2O]
  J[203] -= dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[409] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[533] += dqdci; // dwdot[H2O]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 205: H2NN + OH => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // OH
  wdot[8] += q;  // NO
  wdot[10] += q; // NH2
  wdot[17] -= q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[134] += dqdci; // dwdot[NH2]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[529] += dqdci; // dwdot[H]/d[H2NN]
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[535] += dqdci; // dwdot[NO]/d[H2NN]
  J[537] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 206: H2NN + HO2 => NH2 + NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[17];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // HO2
  wdot[8] += q;  // NO
  wdot[10] += q; // NH2
  wdot[17] -= q; // H2NN
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[163] += dqdci; // dwdot[NO]/d[HO2]
  J[165] += dqdci; // dwdot[NH2]/d[HO2]
  J[172] -= dqdci; // dwdot[H2NN]/d[HO2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[5];
  J[531] += dqdci; // dwdot[OH]/d[H2NN]
  J[532] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[535] += dqdci; // dwdot[NO]/d[H2NN]
  J[537] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 207: H2NN + HO2 <=> H2O2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[17];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[13];
  Kc = exp(g_RT[5] - g_RT[7] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[17]) + (h_RT[7] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[168] += dqdci; // dwdot[NNH]/d[HO2]
  J[172] -= dqdci; // dwdot[H2NN]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[13];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[230] += dqdci; // dwdot[NNH]/d[H2O2]
  J[234] -= dqdci; // dwdot[H2NN]/d[H2O2]
  // d()/d[NNH]
  dqdci = -k_r * sc[7];
  J[408] -= dqdci; // dwdot[HO2]/d[NNH]
  J[410] += dqdci; // dwdot[H2O2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[5];
  J[532] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[534] += dqdci; // dwdot[H2O2]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 208: H2NN + O2 <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 1500000 * exp(-(2999.67454486193) * invT);
  dlnkfdT = (2999.67454486193) * invT2;
  // reverse
  phi_r = sc[10] * sc[23];
  Kc = exp(g_RT[1] - g_RT[10] + g_RT[17] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[10] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[10] += q; // NH2
  wdot[17] -= q; // H2NN
  wdot[23] += q; // NO2
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[41] += dqdci; // dwdot[NH2]/d[O2]
  J[48] -= dqdci; // dwdot[H2NN]/d[O2]
  J[54] += dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NH2]
  dqdci = -k_r * sc[23];
  J[311] -= dqdci; // dwdot[O2]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[327] -= dqdci; // dwdot[H2NN]/d[NH2]
  J[333] += dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[1];
  J[528] -= dqdci; // dwdot[O2]/d[H2NN]
  J[537] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[550] += dqdci; // dwdot[NO2]/d[H2NN]
  // d()/d[NO2]
  dqdci = -k_r * sc[10];
  J[714] -= dqdci; // dwdot[O2]/d[NO2]
  J[723] += dqdci; // dwdot[NH2]/d[NO2]
  J[730] -= dqdci; // dwdot[H2NN]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[953] += dqdT; // dwdot[NO2]/dT

  // reaction 209: H2NN + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[17];
  k_f = 1.8 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[9] * sc[13];
  Kc = exp(-g_RT[9] + g_RT[10] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[17]) + (h_RT[9] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[NH3]
  dqdci = -k_r * sc[13];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[292] += dqdci; // dwdot[NNH]/d[NH3]
  J[296] -= dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[17];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[323] += dqdci; // dwdot[NNH]/d[NH2]
  J[327] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[9];
  J[412] += dqdci; // dwdot[NH3]/d[NNH]
  J[413] -= dqdci; // dwdot[NH2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[10];
  J[536] += dqdci; // dwdot[NH3]/d[H2NN]
  J[537] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  amrex::Real c_R[30], dcRdT[30], e_RT[30];
  amrex::Real* eh_RT;
  if (HP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 30; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[930 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 30; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 30; ++m) {
      dehmixdc += eh_RT[m] * J[k * 31 + m];
    }
    J[k * 31 + 30] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[960] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[30];

  for (int k = 0; k < 30; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 30; k++) {
    J[930 + k] *= 1.e-6;
    J[k * 31 + 30] *= 1.e6;
  }
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int consP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 961; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[30];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real invT = 1.0 / T;
  const amrex::Real invT2 = invT * invT;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 30; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[30];
  gibbs(g_RT, T);

  // compute the species enthalpy
  amrex::Real h_RT[30];
  speciesEnthalpy(h_RT, T);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[30];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 11: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0.78 - 1) * sc[1] + (14 - 1) * sc[6];
  // forward
  phi_f = sc[1] * sc[2];
  k_f = 4700000 * exp(0.44 * logT);
  dlnkfdT = 0.44 * invT;
  // pressure-fall-off
  k_0 = 6.366e+20 * exp(-1.72 * logT - (264.088106214317) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.72 * invT + (264.088106214317) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(g_RT[1] + g_RT[2] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[2]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q; // O2
  wdot[2] -= q; // H
  wdot[5] += q; // HO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci; // dwdot[O2]/d[H2]
    J[2] -= dqdci; // dwdot[H]/d[H2]
    J[5] += dqdci; // dwdot[HO2]/d[H2]
    // d()/d[O2]
    dqdci = (0.78 - 1) * dcdc_fac + k_f * sc[2];
    J[32] -= dqdci; // dwdot[O2]/d[O2]
    J[33] -= dqdci; // dwdot[H]/d[O2]
    J[36] += dqdci; // dwdot[HO2]/d[O2]
    // d()/d[H]
    dqdci = +k_f * sc[1];
    J[63] -= dqdci; // dwdot[O2]/d[H]
    J[64] -= dqdci; // dwdot[H]/d[H]
    J[67] += dqdci; // dwdot[HO2]/d[H]
    // d()/d[HO2]
    dqdci = -k_r;
    J[156] -= dqdci; // dwdot[O2]/d[HO2]
    J[157] -= dqdci; // dwdot[H]/d[HO2]
    J[160] += dqdci; // dwdot[HO2]/d[HO2]
    // d()/d[H2O]
    dqdci = (14 - 1) * dcdc_fac;
    J[187] -= dqdci; // dwdot[O2]/d[H2O]
    J[188] -= dqdci; // dwdot[H]/d[H2O]
    J[191] += dqdci; // dwdot[HO2]/d[H2O]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = 0.78 * dcdc_fac + k_f * sc[2];
    dqdc[2] = dcdc_fac + k_f * sc[1];
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac - k_r;
    dqdc[6] = 14 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] -= dqdc[k];
      J[31 * k + 2] -= dqdc[k];
      J[31 * k + 5] += dqdc[k];
    }
  }
  J[931] -= dqdT; // dwdot[O2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[935] += dqdT; // dwdot[HO2]/dT

  // reaction 20: H2O2 (+M) <=> 2 OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (3.7 - 1) * sc[0] + (1.2 - 1) * sc[1] + (7.5 - 1) * sc[6] +
          (7.7 - 1) * sc[7] + (1.5 - 1) * sc[29];
  // forward
  phi_f = sc[7];
  k_f = 2000000000000 * exp(0.9 * logT - (24531.3092413143) * invT);
  dlnkfdT = 0.9 * invT + (24531.3092413143) * invT2;
  // pressure-fall-off
  k_0 = 2.5e+24 * exp(-2.3 * logT - (24531.3092413143) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.3 * invT + (24531.3092413143) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.43) * exp(-T / 1e-30);
  Fcent2 = 0.43 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = refC * exp(-2.000000 * g_RT[4] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7]) + (2.000000 * h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += 2 * q; // OH
  wdot[7] -= q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (3.7 - 1) * dcdc_fac;
    J[4] += 2 * dqdci; // dwdot[OH]/d[H2]
    J[7] -= dqdci;     // dwdot[H2O2]/d[H2]
    // d()/d[O2]
    dqdci = (1.2 - 1) * dcdc_fac;
    J[35] += 2 * dqdci; // dwdot[OH]/d[O2]
    J[38] -= dqdci;     // dwdot[H2O2]/d[O2]
    // d()/d[OH]
    dqdci = -k_r * 2.000000 * sc[4];
    J[128] += 2 * dqdci; // dwdot[OH]/d[OH]
    J[131] -= dqdci;     // dwdot[H2O2]/d[OH]
    // d()/d[H2O]
    dqdci = (7.5 - 1) * dcdc_fac;
    J[190] += 2 * dqdci; // dwdot[OH]/d[H2O]
    J[193] -= dqdci;     // dwdot[H2O2]/d[H2O]
    // d()/d[H2O2]
    dqdci = (7.7 - 1) * dcdc_fac + k_f;
    J[221] += 2 * dqdci; // dwdot[OH]/d[H2O2]
    J[224] -= dqdci;     // dwdot[H2O2]/d[H2O2]
    // d()/d[N2]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[903] += 2 * dqdci; // dwdot[OH]/d[N2]
    J[906] -= dqdci;     // dwdot[H2O2]/d[N2]
  } else {
    dqdc[0] = 3.7 * dcdc_fac;
    dqdc[1] = 1.2 * dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac - k_r * 2.000000 * sc[4];
    dqdc[5] = dcdc_fac;
    dqdc[6] = 7.5 * dcdc_fac;
    dqdc[7] = 7.7 * dcdc_fac + k_f;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = 1.5 * dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 4] += 2 * dqdc[k];
      J[31 * k + 7] -= dqdc[k];
    }
  }
  J[934] += 2 * dqdT; // dwdot[OH]/dT
  J[937] -= dqdT;     // dwdot[H2O2]/dT

  // reaction 26: H + NH2 (+M) <=> NH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 160000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 3.6e+22 * exp(-1.76 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.76 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[9];
  Kc = refCinv * exp(g_RT[2] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // H
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H]
    dqdci = +k_f * sc[10];
    J[64] -= dqdci; // dwdot[H]/d[H]
    J[71] += dqdci; // dwdot[NH3]/d[H]
    J[72] -= dqdci; // dwdot[NH2]/d[H]
    // d()/d[NH3]
    dqdci = -k_r;
    J[281] -= dqdci; // dwdot[H]/d[NH3]
    J[288] += dqdci; // dwdot[NH3]/d[NH3]
    J[289] -= dqdci; // dwdot[NH2]/d[NH3]
    // d()/d[NH2]
    dqdci = +k_f * sc[2];
    J[312] -= dqdci; // dwdot[H]/d[NH2]
    J[319] += dqdci; // dwdot[NH3]/d[NH2]
    J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac + k_f * sc[10];
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac - k_r;
    dqdc[10] = dcdc_fac + k_f * sc[2];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 2] -= dqdc[k];
      J[31 * k + 9] += dqdc[k];
      J[31 * k + 10] -= dqdc[k];
    }
  }
  J[932] -= dqdT; // dwdot[H]/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT

  // reaction 78: NH2OH (+M) <=> NH2 + OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[18];
  k_f = 1.4e+20 * exp(-1.31 * logT - (32246.1239447664) * invT);
  dlnkfdT = -1.31 * invT + (32246.1239447664) * invT2;
  // pressure-fall-off
  k_0 = 5.4e+37 * exp(-5.96 * logT - (33606.3185924366) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.96 * invT + (33606.3185924366) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.31) * exp(-T / 1e-30);
  Fcent2 = 0.31 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = refC * exp(-g_RT[4] - g_RT[10] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18]) + (h_RT[4] + h_RT[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += q;  // OH
  wdot[10] += q; // NH2
  wdot[18] -= q; // NH2OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[OH]
    dqdci = -k_r * sc[10];
    J[128] += dqdci; // dwdot[OH]/d[OH]
    J[134] += dqdci; // dwdot[NH2]/d[OH]
    J[142] -= dqdci; // dwdot[NH2OH]/d[OH]
    // d()/d[NH2]
    dqdci = -k_r * sc[4];
    J[314] += dqdci; // dwdot[OH]/d[NH2]
    J[320] += dqdci; // dwdot[NH2]/d[NH2]
    J[328] -= dqdci; // dwdot[NH2OH]/d[NH2]
    // d()/d[NH2OH]
    dqdci = +k_f;
    J[562] += dqdci; // dwdot[OH]/d[NH2OH]
    J[568] += dqdci; // dwdot[NH2]/d[NH2OH]
    J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac - k_r * sc[10];
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac - k_r * sc[4];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 4] += dqdc[k];
      J[31 * k + 10] += dqdc[k];
      J[31 * k + 18] -= dqdc[k];
    }
  }
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 113: H + NO (+M) <=> HNO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.6 - 1) * sc[29];
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 1500000000 * exp(-0.41 * logT);
  dlnkfdT = -0.41 * invT;
  // pressure-fall-off
  k_0 = 240000000000000 * exp(0.206 * logT - (-779.985831997315) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = 0.206 * invT + (-779.985831997315) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.82) * exp(-T / 1e-30);
  Fcent2 = 0.82 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[21];
  Kc = refCinv * exp(g_RT[2] + g_RT[8] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[8]) + (h_RT[21]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // H
  wdot[8] -= q;  // NO
  wdot[21] += q; // HNO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H]
    dqdci = +k_f * sc[8];
    J[64] -= dqdci; // dwdot[H]/d[H]
    J[70] -= dqdci; // dwdot[NO]/d[H]
    J[83] += dqdci; // dwdot[HNO]/d[H]
    // d()/d[NO]
    dqdci = +k_f * sc[2];
    J[250] -= dqdci; // dwdot[H]/d[NO]
    J[256] -= dqdci; // dwdot[NO]/d[NO]
    J[269] += dqdci; // dwdot[HNO]/d[NO]
    // d()/d[HNO]
    dqdci = -k_r;
    J[653] -= dqdci; // dwdot[H]/d[HNO]
    J[659] -= dqdci; // dwdot[NO]/d[HNO]
    J[672] += dqdci; // dwdot[HNO]/d[HNO]
    // d()/d[N2]
    dqdci = (1.6 - 1) * dcdc_fac;
    J[901] -= dqdci; // dwdot[H]/d[N2]
    J[907] -= dqdci; // dwdot[NO]/d[N2]
    J[920] += dqdci; // dwdot[HNO]/d[N2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac + k_f * sc[8];
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac + k_f * sc[2];
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac - k_r;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = 1.6 * dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 2] -= dqdc[k];
      J[31 * k + 8] -= dqdc[k];
      J[31 * k + 21] += dqdc[k];
    }
  }
  J[932] -= dqdT; // dwdot[H]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 122: NO + O (+M) <=> NO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 1300000000 * exp(-0.75 * logT);
  dlnkfdT = -0.75 * invT;
  // pressure-fall-off
  k_0 = 4.72e+24 * exp(-2.87 * logT - (779.985831997315) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.87 * invT + (779.985831997315) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.75) * exp(-T / 1000);
  Fcent2 = 0.75 * exp(-T / 100000);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1000 - Fcent2 / 100000 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[23];
  Kc = refCinv * exp(g_RT[3] + g_RT[8] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[8]) + (h_RT[23]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] -= q;  // NO
  wdot[23] += q; // NO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[O]
    dqdci = +k_f * sc[8];
    J[96] -= dqdci;  // dwdot[O]/d[O]
    J[101] -= dqdci; // dwdot[NO]/d[O]
    J[116] += dqdci; // dwdot[NO2]/d[O]
    // d()/d[NO]
    dqdci = +k_f * sc[3];
    J[251] -= dqdci; // dwdot[O]/d[NO]
    J[256] -= dqdci; // dwdot[NO]/d[NO]
    J[271] += dqdci; // dwdot[NO2]/d[NO]
    // d()/d[NO2]
    dqdci = -k_r;
    J[716] -= dqdci; // dwdot[O]/d[NO2]
    J[721] -= dqdci; // dwdot[NO]/d[NO2]
    J[736] += dqdci; // dwdot[NO2]/d[NO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac + k_f * sc[8];
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac + k_f * sc[3];
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac - k_r;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 3] -= dqdc[k];
      J[31 * k + 8] -= dqdc[k];
      J[31 * k + 23] += dqdc[k];
    }
  }
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[953] += dqdT; // dwdot[NO2]/dT

  // reaction 129: NO + OH (+M) <=> HONO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 110000000 * exp(-0.3 * logT);
  dlnkfdT = -0.3 * invT;
  // pressure-fall-off
  k_0 = 3.392e+23 * exp(-2.5 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.5 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.75) * exp(-T / 1e-30);
  Fcent2 = 0.75 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[24];
  Kc = refCinv * exp(g_RT[4] + g_RT[8] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[8]) + (h_RT[24]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[8] -= q;  // NO
  wdot[24] += q; // HONO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[OH]
    dqdci = +k_f * sc[8];
    J[128] -= dqdci; // dwdot[OH]/d[OH]
    J[132] -= dqdci; // dwdot[NO]/d[OH]
    J[148] += dqdci; // dwdot[HONO]/d[OH]
    // d()/d[NO]
    dqdci = +k_f * sc[4];
    J[252] -= dqdci; // dwdot[OH]/d[NO]
    J[256] -= dqdci; // dwdot[NO]/d[NO]
    J[272] += dqdci; // dwdot[HONO]/d[NO]
    // d()/d[HONO]
    dqdci = -k_r;
    J[748] -= dqdci; // dwdot[OH]/d[HONO]
    J[752] -= dqdci; // dwdot[NO]/d[HONO]
    J[768] += dqdci; // dwdot[HONO]/d[HONO]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * sc[8];
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac + k_f * sc[4];
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac - k_r;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 4] -= dqdc[k];
      J[31 * k + 8] -= dqdc[k];
      J[31 * k + 24] += dqdc[k];
    }
  }
  J[934] -= dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 138: HNO2 (+M) <=> HONO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[25];
  k_f = 250000000000000 * exp(-(16253.8983054924) * invT);
  dlnkfdT = (16253.8983054924) * invT2;
  // pressure-fall-off
  k_0 = 3.1e+18 * exp(-(15851.3249728487) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (15851.3249728487) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1.149) * exp(-T / 1e-30);
  Fcent2 = 1.149 * exp(-T / 3125);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 3125 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[24];
  Kc = exp(-g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25]) + (h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[24] += q; // HONO
  wdot[25] -= q; // HNO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[HONO]
    dqdci = -k_r;
    J[768] += dqdci; // dwdot[HONO]/d[HONO]
    J[769] -= dqdci; // dwdot[HNO2]/d[HONO]
    // d()/d[HNO2]
    dqdci = +k_f;
    J[799] += dqdci; // dwdot[HONO]/d[HNO2]
    J[800] -= dqdci; // dwdot[HNO2]/d[HNO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac - k_r;
    dqdc[25] = dcdc_fac + k_f;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 24] += dqdc[k];
      J[31 * k + 25] -= dqdc[k];
    }
  }
  J[954] += dqdT; // dwdot[HONO]/dT
  J[955] -= dqdT; // dwdot[HNO2]/dT

  // reaction 142: NO2 + O (+M) <=> NO3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 3500000 * exp(0.24 * logT);
  dlnkfdT = 0.24 * invT;
  // pressure-fall-off
  k_0 = 2.5e+20 * exp(-1.5 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.5 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.71) * exp(-T / 1e-30);
  Fcent2 = 0.71 * exp(-T / 1700);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1700 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(g_RT[3] + g_RT[23] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= q;  // O
  wdot[23] -= q; // NO2
  wdot[26] += q; // NO3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[O]
    dqdci = +k_f * sc[23];
    J[96] -= dqdci;  // dwdot[O]/d[O]
    J[116] -= dqdci; // dwdot[NO2]/d[O]
    J[119] += dqdci; // dwdot[NO3]/d[O]
    // d()/d[NO2]
    dqdci = +k_f * sc[3];
    J[716] -= dqdci; // dwdot[O]/d[NO2]
    J[736] -= dqdci; // dwdot[NO2]/d[NO2]
    J[739] += dqdci; // dwdot[NO3]/d[NO2]
    // d()/d[NO3]
    dqdci = -k_r;
    J[809] -= dqdci; // dwdot[O]/d[NO3]
    J[829] -= dqdci; // dwdot[NO2]/d[NO3]
    J[832] += dqdci; // dwdot[NO3]/d[NO3]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac + k_f * sc[23];
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac + k_f * sc[3];
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac - k_r;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 3] -= dqdc[k];
      J[31 * k + 23] -= dqdc[k];
      J[31 * k + 26] += dqdc[k];
    }
  }
  J[933] -= dqdT; // dwdot[O]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[956] += dqdT; // dwdot[NO3]/dT

  // reaction 148: NO2 + OH (+M) <=> HONO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.938e+25 * exp(-3 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.4) * exp(-T / 1e-30);
  Fcent2 = 0.4 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(g_RT[4] + g_RT[23] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[23] -= q; // NO2
  wdot[27] += q; // HONO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[OH]
    dqdci = +k_f * sc[23];
    J[128] -= dqdci; // dwdot[OH]/d[OH]
    J[147] -= dqdci; // dwdot[NO2]/d[OH]
    J[151] += dqdci; // dwdot[HONO2]/d[OH]
    // d()/d[NO2]
    dqdci = +k_f * sc[4];
    J[717] -= dqdci; // dwdot[OH]/d[NO2]
    J[736] -= dqdci; // dwdot[NO2]/d[NO2]
    J[740] += dqdci; // dwdot[HONO2]/d[NO2]
    // d()/d[HONO2]
    dqdci = -k_r;
    J[841] -= dqdci; // dwdot[OH]/d[HONO2]
    J[860] -= dqdci; // dwdot[NO2]/d[HONO2]
    J[864] += dqdci; // dwdot[HONO2]/d[HONO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * sc[23];
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac + k_f * sc[4];
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac - k_r;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 4] -= dqdc[k];
      J[31 * k + 23] -= dqdc[k];
      J[31 * k + 27] += dqdc[k];
    }
  }
  J[934] -= dqdT; // dwdot[OH]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[957] += dqdT; // dwdot[HONO2]/dT

  // reaction 153: N2O (+M) <=> N2 + O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.4 - 1) * sc[1] + (12 - 1) * sc[6] + (1.7 - 1) * sc[29];
  // forward
  phi_f = sc[28];
  k_f = 99000000000 * exp(-(29136.7481667591) * invT);
  dlnkfdT = (29136.7481667591) * invT2;
  // pressure-fall-off
  k_0 = 600000000000000 * exp(-(28906.7781504863) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (28906.7781504863) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1);
  Fcent2 = 1 * exp(-T / 10000000);
  Fcent3 = exp(-10000000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1 - Fcent2 / 10000000 + Fcent3 * 10000000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[3] * sc[29];
  Kc = refC * exp(-g_RT[3] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[28]) + (h_RT[3] + h_RT[29]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] += q;  // O
  wdot[28] -= q; // N2O
  wdot[29] += q; // N2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[O2]
    dqdci = (1.4 - 1) * dcdc_fac;
    J[34] += dqdci; // dwdot[O]/d[O2]
    J[59] -= dqdci; // dwdot[N2O]/d[O2]
    J[60] += dqdci; // dwdot[N2]/d[O2]
    // d()/d[O]
    dqdci = -k_r * sc[29];
    J[96] += dqdci;  // dwdot[O]/d[O]
    J[121] -= dqdci; // dwdot[N2O]/d[O]
    J[122] += dqdci; // dwdot[N2]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * dcdc_fac;
    J[189] += dqdci; // dwdot[O]/d[H2O]
    J[214] -= dqdci; // dwdot[N2O]/d[H2O]
    J[215] += dqdci; // dwdot[N2]/d[H2O]
    // d()/d[N2O]
    dqdci = +k_f;
    J[871] += dqdci; // dwdot[O]/d[N2O]
    J[896] -= dqdci; // dwdot[N2O]/d[N2O]
    J[897] += dqdci; // dwdot[N2]/d[N2O]
    // d()/d[N2]
    dqdci = (1.7 - 1) * dcdc_fac - k_r * sc[3];
    J[902] += dqdci; // dwdot[O]/d[N2]
    J[927] -= dqdci; // dwdot[N2O]/d[N2]
    J[928] += dqdci; // dwdot[N2]/d[N2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = 1.4 * dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac - k_r * sc[29];
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = 12 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac + k_f;
    dqdc[29] = 1.7 * dcdc_fac - k_r * sc[3];
    for (int k = 0; k < 30; k++) {
      J[31 * k + 3] += dqdc[k];
      J[31 * k + 28] -= dqdc[k];
      J[31 * k + 29] += dqdc[k];
    }
  }
  J[933] += dqdT; // dwdot[O]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 165: 2 NH2 (+M) <=> N2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 560000000 * exp(-0.414 * logT - (33.2122999431115) * invT);
  dlnkfdT = -0.414 * invT + (33.2122999431115) * invT2;
  // pressure-fall-off
  k_0 = 1.6e+34 * exp(-5.49 * logT - (999.891514953978) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.49 * invT + (999.891514953978) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.31) * exp(-T / 1e-30);
  Fcent2 = 0.31 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[14];
  Kc = refCinv * exp(2.000000 * g_RT[10] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[14]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[10] -= 2 * q; // NH2
  wdot[14] += q;     // N2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[NH2]
    dqdci = +k_f * 2.000000 * sc[10];
    J[320] += -2 * dqdci; // dwdot[NH2]/d[NH2]
    J[324] += dqdci;      // dwdot[N2H4]/d[NH2]
    // d()/d[N2H4]
    dqdci = -k_r;
    J[444] += -2 * dqdci; // dwdot[NH2]/d[N2H4]
    J[448] += dqdci;      // dwdot[N2H4]/d[N2H4]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac + k_f * 2.000000 * sc[10];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac - k_r;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 10] += -2 * dqdc[k];
      J[31 * k + 14] += dqdc[k];
    }
  }
  J[940] += -2 * dqdT; // dwdot[NH2]/dT
  J[944] += dqdT;      // dwdot[N2H4]/dT

  // reaction 6: H2 + M <=> 2 H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[0] + (12 - 1) * sc[6];
  // forward
  phi_f = sc[0];
  k_f = 46000000000000 * exp(-1.4 * logT - (52525.7555766966) * invT);
  dlnkfdT = -1.4 * invT + (52525.7555766966) * invT2;
  // reverse
  phi_r = (sc[2] * sc[2]);
  Kc = refC * exp(g_RT[0] - 2.000000 * g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0]) + (2.000000 * h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;     // H2
  wdot[2] += 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor + k_f;
    J[0] -= dqdci;     // dwdot[H2]/d[H2]
    J[2] += 2 * dqdci; // dwdot[H]/d[H2]
    // d()/d[H]
    dqdci = -k_r * 2.000000 * sc[2];
    J[62] -= dqdci;     // dwdot[H2]/d[H]
    J[64] += 2 * dqdci; // dwdot[H]/d[H]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[186] -= dqdci;     // dwdot[H2]/d[H2O]
    J[188] += 2 * dqdci; // dwdot[H]/d[H2O]
  } else {
    dqdc[0] = 2.5 * q_nocor + k_f;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor - k_r * 2.000000 * sc[2];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = 12 * q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 0] -= dqdc[k];
      J[31 * k + 2] += 2 * dqdc[k];
    }
  }
  J[930] -= dqdT;     // dwdot[H2]/dT
  J[932] += 2 * dqdT; // dwdot[H]/dT

  // reaction 7: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[0] + (12 - 1) * sc[6];
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 4700000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor;
    J[2] -= dqdci; // dwdot[H]/d[H2]
    J[3] -= dqdci; // dwdot[O]/d[H2]
    J[4] += dqdci; // dwdot[OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[3];
    J[64] -= dqdci; // dwdot[H]/d[H]
    J[65] -= dqdci; // dwdot[O]/d[H]
    J[66] += dqdci; // dwdot[OH]/d[H]
    // d()/d[O]
    dqdci = +k_f * sc[2];
    J[95] -= dqdci; // dwdot[H]/d[O]
    J[96] -= dqdci; // dwdot[O]/d[O]
    J[97] += dqdci; // dwdot[OH]/d[O]
    // d()/d[OH]
    dqdci = -k_r;
    J[126] -= dqdci; // dwdot[H]/d[OH]
    J[127] -= dqdci; // dwdot[O]/d[OH]
    J[128] += dqdci; // dwdot[OH]/d[OH]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[188] -= dqdci; // dwdot[H]/d[H2O]
    J[189] -= dqdci; // dwdot[O]/d[H2O]
    J[190] += dqdci; // dwdot[OH]/d[H2O]
  } else {
    dqdc[0] = 2.5 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor + k_f * sc[3];
    dqdc[3] = q_nocor + k_f * sc[2];
    dqdc[4] = q_nocor - k_r;
    dqdc[5] = q_nocor;
    dqdc[6] = 12 * q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 2] -= dqdc[k];
      J[31 * k + 3] -= dqdc[k];
      J[31 * k + 4] += dqdc[k];
    }
  }
  J[932] -= dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 8: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[0] + (12 - 1) * sc[6];
  // forward
  phi_f = (sc[3] * sc[3]);
  k_f = 19 * exp(-(-899.751398458839) * invT);
  dlnkfdT = (-899.751398458839) * invT2;
  // reverse
  phi_r = sc[1];
  Kc = refCinv * exp(-g_RT[1] + 2.000000 * g_RT[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[3]) + (h_RT[1]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;     // O2
  wdot[3] -= 2 * q; // O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor;
    J[1] += dqdci;      // dwdot[O2]/d[H2]
    J[3] += -2 * dqdci; // dwdot[O]/d[H2]
    // d()/d[O2]
    dqdci = -k_r;
    J[32] += dqdci;      // dwdot[O2]/d[O2]
    J[34] += -2 * dqdci; // dwdot[O]/d[O2]
    // d()/d[O]
    dqdci = +k_f * 2.000000 * sc[3];
    J[94] += dqdci;      // dwdot[O2]/d[O]
    J[96] += -2 * dqdci; // dwdot[O]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[187] += dqdci;      // dwdot[O2]/d[H2O]
    J[189] += -2 * dqdci; // dwdot[O]/d[H2O]
  } else {
    dqdc[0] = 2.5 * q_nocor;
    dqdc[1] = q_nocor - k_r;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor + k_f * 2.000000 * sc[3];
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = 12 * q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] += dqdc[k];
      J[31 * k + 3] += -2 * dqdc[k];
    }
  }
  J[931] += dqdT;      // dwdot[O2]/dT
  J[933] += -2 * dqdT; // dwdot[O]/dT

  // reaction 9: H2O + M <=> H + OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha =
    mixture + (3 - 1) * sc[0] + (1.5 - 1) * sc[1] + (0 - 1) * sc[6] + sc[29];
  // forward
  phi_f = sc[6];
  k_f = 6.1e+21 * exp(-3.322 * logT - (60783.5410625521) * invT);
  dlnkfdT = -3.322 * invT + (60783.5410625521) * invT2;
  // reverse
  phi_r = sc[2] * sc[4];
  Kc = refC * exp(-g_RT[2] - g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6]) + (h_RT[2] + h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q; // H
  wdot[4] += q; // OH
  wdot[6] -= q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (3 - 1) * q_nocor;
    J[2] += dqdci; // dwdot[H]/d[H2]
    J[4] += dqdci; // dwdot[OH]/d[H2]
    J[6] -= dqdci; // dwdot[H2O]/d[H2]
    // d()/d[O2]
    dqdci = (1.5 - 1) * q_nocor;
    J[33] += dqdci; // dwdot[H]/d[O2]
    J[35] += dqdci; // dwdot[OH]/d[O2]
    J[37] -= dqdci; // dwdot[H2O]/d[O2]
    // d()/d[H]
    dqdci = -k_r * sc[4];
    J[64] += dqdci; // dwdot[H]/d[H]
    J[66] += dqdci; // dwdot[OH]/d[H]
    J[68] -= dqdci; // dwdot[H2O]/d[H]
    // d()/d[OH]
    dqdci = -k_r * sc[2];
    J[126] += dqdci; // dwdot[H]/d[OH]
    J[128] += dqdci; // dwdot[OH]/d[OH]
    J[130] -= dqdci; // dwdot[H2O]/d[OH]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor + k_f;
    J[188] += dqdci; // dwdot[H]/d[H2O]
    J[190] += dqdci; // dwdot[OH]/d[H2O]
    J[192] -= dqdci; // dwdot[H2O]/d[H2O]
    // d()/d[N2]
    dqdci = (2 - 1) * q_nocor;
    J[901] += dqdci; // dwdot[H]/d[N2]
    J[903] += dqdci; // dwdot[OH]/d[N2]
    J[905] -= dqdci; // dwdot[H2O]/d[N2]
  } else {
    dqdc[0] = 3 * q_nocor;
    dqdc[1] = 1.5 * q_nocor;
    dqdc[2] = q_nocor - k_r * sc[4];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor - k_r * sc[2];
    dqdc[5] = q_nocor;
    dqdc[6] = +k_f;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = 2 * q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 2] += dqdc[k];
      J[31 * k + 4] += dqdc[k];
      J[31 * k + 6] -= dqdc[k];
    }
  }
  J[932] += dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[H2O]/dT

  // reaction 10: H2O + H2O <=> H + OH + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 1e+20 * exp(-2.44 * logT - (60476.5788964112) * invT);
  dlnkfdT = -2.44 * invT + (60476.5788964112) * invT2;
  // reverse
  phi_r = sc[2] * sc[4] * sc[6];
  Kc = refC * exp(-g_RT[2] - g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[6]) + (h_RT[2] + h_RT[4] + h_RT[6]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q; // H
  wdot[4] += q; // OH
  wdot[6] -= q; // H2O
  // d()/d[H]
  dqdci = -k_r * sc[4] * sc[6];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[68] -= dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[2] * sc[6];
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = +k_f * 2.000000 * sc[6] - k_r * sc[2] * sc[4];
  J[188] += dqdci; // dwdot[H]/d[H2O]
  J[190] += dqdci; // dwdot[OH]/d[H2O]
  J[192] -= dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[H2O]/dT

  // reaction 91: H2NO + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[6];
  // forward
  phi_f = sc[19];
  k_f = 2.8e+18 * exp(-2.83 * logT - (32666.3098607134) * invT);
  dlnkfdT = -2.83 * invT + (32666.3098607134) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[21];
    J[64] += dqdci; // dwdot[H]/d[H]
    J[81] -= dqdci; // dwdot[H2NO]/d[H]
    J[83] += dqdci; // dwdot[HNO]/d[H]
    // d()/d[H2O]
    dqdci = (10 - 1) * q_nocor;
    J[188] += dqdci; // dwdot[H]/d[H2O]
    J[205] -= dqdci; // dwdot[H2NO]/d[H2O]
    J[207] += dqdci; // dwdot[HNO]/d[H2O]
    // d()/d[H2NO]
    dqdci = +k_f;
    J[591] += dqdci; // dwdot[H]/d[H2NO]
    J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
    J[610] += dqdci; // dwdot[HNO]/d[H2NO]
    // d()/d[HNO]
    dqdci = -k_r * sc[2];
    J[653] += dqdci; // dwdot[H]/d[HNO]
    J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
    J[672] += dqdci; // dwdot[HNO]/d[HNO]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor - k_r * sc[21];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = 10 * q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor + k_f;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor - k_r * sc[2];
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 2] += dqdc[k];
      J[31 * k + 19] -= dqdc[k];
      J[31 * k + 21] += dqdc[k];
    }
  }
  J[932] += dqdT; // dwdot[H]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 92: H2NO + M <=> HNOH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[6];
  // forward
  phi_f = sc[19];
  k_f = 1.1e+23 * exp(-4 * logT - (22141.5332954077) * invT);
  dlnkfdT = -4 * invT + (22141.5332954077) * invT2;
  // reverse
  phi_r = sc[20];
  Kc = exp(g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] -= q; // H2NO
  wdot[20] += q; // HNOH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2O]
    dqdci = (10 - 1) * q_nocor;
    J[205] -= dqdci; // dwdot[H2NO]/d[H2O]
    J[206] += dqdci; // dwdot[HNOH]/d[H2O]
    // d()/d[H2NO]
    dqdci = +k_f;
    J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
    J[609] += dqdci; // dwdot[HNOH]/d[H2NO]
    // d()/d[HNOH]
    dqdci = -k_r;
    J[639] -= dqdci; // dwdot[H2NO]/d[HNOH]
    J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = 10 * q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor + k_f;
    dqdc[20] = q_nocor - k_r;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 19] -= dqdc[k];
      J[31 * k + 20] += dqdc[k];
    }
  }
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 102: HNOH + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[6];
  // forward
  phi_f = sc[20];
  k_f = 2e+18 * exp(-2.84 * logT - (29656.5709825354) * invT);
  dlnkfdT = -2.84 * invT + (29656.5709825354) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[21];
    J[64] += dqdci; // dwdot[H]/d[H]
    J[82] -= dqdci; // dwdot[HNOH]/d[H]
    J[83] += dqdci; // dwdot[HNO]/d[H]
    // d()/d[H2O]
    dqdci = (10 - 1) * q_nocor;
    J[188] += dqdci; // dwdot[H]/d[H2O]
    J[206] -= dqdci; // dwdot[HNOH]/d[H2O]
    J[207] += dqdci; // dwdot[HNO]/d[H2O]
    // d()/d[HNOH]
    dqdci = +k_f;
    J[622] += dqdci; // dwdot[H]/d[HNOH]
    J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
    J[641] += dqdci; // dwdot[HNO]/d[HNOH]
    // d()/d[HNO]
    dqdci = -k_r * sc[2];
    J[653] += dqdci; // dwdot[H]/d[HNO]
    J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
    J[672] += dqdci; // dwdot[HNO]/d[HNO]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor - k_r * sc[21];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = 10 * q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor + k_f;
    dqdc[21] = q_nocor - k_r * sc[2];
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 2] += dqdc[k];
      J[31 * k + 20] -= dqdc[k];
      J[31 * k + 21] += dqdc[k];
    }
  }
  J[932] += dqdT; // dwdot[H]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 147: NO3 + NO2 <=> NO + O2 + NO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[26];
  k_f = 50000 * exp(-(1479.45699746588) * invT);
  dlnkfdT = (1479.45699746588) * invT2;
  // reverse
  phi_r = sc[1] * sc[8] * sc[23];
  Kc = refC * exp(-g_RT[1] - g_RT[8] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[23] + h_RT[26]) + (h_RT[1] + h_RT[8] + h_RT[23]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[8] += q;  // NO
  wdot[26] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[8] * sc[23];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[39] += dqdci; // dwdot[NO]/d[O2]
  J[57] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[1] * sc[23];
  J[249] += dqdci; // dwdot[O2]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[274] -= dqdci; // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[26] - k_r * sc[1] * sc[8];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[739] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[23];
  J[807] += dqdci; // dwdot[O2]/d[NO3]
  J[814] += dqdci; // dwdot[NO]/d[NO3]
  J[832] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[956] -= dqdT; // dwdot[NO3]/dT

  // reaction 189: N2H2 + M <=> H + NNH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (7 - 1) * sc[6];
  // forward
  phi_f = sc[16];
  k_f = 1.9e+21 * exp(-3.05 * logT - (33266.1441263526) * invT);
  dlnkfdT = -3.05 * invT + (33266.1441263526) * invT2;
  // reverse
  phi_r = sc[2] * sc[13];
  Kc = refC * exp(-g_RT[2] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[2] + h_RT[13]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[13];
    J[64] += dqdci; // dwdot[H]/d[H]
    J[75] += dqdci; // dwdot[NNH]/d[H]
    J[78] -= dqdci; // dwdot[N2H2]/d[H]
    // d()/d[H2O]
    dqdci = (7 - 1) * q_nocor;
    J[188] += dqdci; // dwdot[H]/d[H2O]
    J[199] += dqdci; // dwdot[NNH]/d[H2O]
    J[202] -= dqdci; // dwdot[N2H2]/d[H2O]
    // d()/d[NNH]
    dqdci = -k_r * sc[2];
    J[405] += dqdci; // dwdot[H]/d[NNH]
    J[416] += dqdci; // dwdot[NNH]/d[NNH]
    J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
    // d()/d[N2H2]
    dqdci = +k_f;
    J[498] += dqdci; // dwdot[H]/d[N2H2]
    J[509] += dqdci; // dwdot[NNH]/d[N2H2]
    J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor - k_r * sc[13];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = 7 * q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor - k_r * sc[2];
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor + k_f;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 2] += dqdc[k];
      J[31 * k + 13] += dqdc[k];
      J[31 * k + 16] -= dqdc[k];
    }
  }
  J[932] += dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 0: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[2];
  k_f = 100000000 * exp(-(7692.16995349094) * invT);
  dlnkfdT = (7692.16995349094) * invT2;
  // reverse
  phi_r = sc[3] * sc[4];
  Kc = exp(g_RT[1] + g_RT[2] - g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[2]) + (h_RT[3] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // O2
  wdot[2] -= q; // H
  wdot[3] += q; // O
  wdot[4] += q; // OH
  // d()/d[O2]
  dqdci = +k_f * sc[2];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[33] -= dqdci; // dwdot[H]/d[O2]
  J[34] += dqdci; // dwdot[O]/d[O2]
  J[35] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[H]
  dqdci = +k_f * sc[1];
  J[63] -= dqdci; // dwdot[O2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[65] += dqdci; // dwdot[O]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[4];
  J[94] -= dqdci; // dwdot[O2]/d[O]
  J[95] -= dqdci; // dwdot[H]/d[O]
  J[96] += dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[125] -= dqdci; // dwdot[O2]/d[OH]
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[127] += dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 1: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 3800000 * exp(-(3999.56605981591) * invT);
  dlnkfdT = (3999.56605981591) * invT2;
  // reverse
  phi_r = sc[2] * sc[4];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[3]) + (h_RT[2] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[2] += q; // H
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[3];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[2] += dqdci; // dwdot[H]/d[H2]
  J[3] -= dqdci; // dwdot[O]/d[H2]
  J[4] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[O]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[93] -= dqdci; // dwdot[H2]/d[O]
  J[95] += dqdci; // dwdot[H]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[124] -= dqdci; // dwdot[H2]/d[OH]
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 2: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 880000000 * exp(-(9649.1795668055) * invT);
  dlnkfdT = (9649.1795668055) * invT2;
  // reverse
  phi_r = sc[2] * sc[4];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[3]) + (h_RT[2] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[2] += q; // H
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[3];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[2] += dqdci; // dwdot[H]/d[H2]
  J[3] -= dqdci; // dwdot[O]/d[H2]
  J[4] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[O]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[93] -= dqdci; // dwdot[H2]/d[O]
  J[95] += dqdci; // dwdot[H]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[124] -= dqdci; // dwdot[H2]/d[OH]
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 3: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 220 * exp(1.51 * logT - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[2] += q; // H
  wdot[4] -= q; // OH
  wdot[6] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[2] += dqdci; // dwdot[H]/d[H2]
  J[4] -= dqdci; // dwdot[OH]/d[H2]
  J[6] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[6];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[66] -= dqdci; // dwdot[OH]/d[H]
  J[68] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[124] -= dqdci; // dwdot[H2]/d[OH]
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[186] -= dqdci; // dwdot[H2]/d[H2O]
  J[188] += dqdci; // dwdot[H]/d[H2O]
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT

  // reaction 4: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 20 * exp(1.651 * logT - (317.529716122778) * invT);
  dlnkfdT = 1.651 * invT + (317.529716122778) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[6] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[96] += dqdci;      // dwdot[O]/d[O]
  J[97] += -2 * dqdci; // dwdot[OH]/d[O]
  J[99] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[127] += dqdci;      // dwdot[O]/d[OH]
  J[128] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[189] += dqdci;      // dwdot[O]/d[H2O]
  J[190] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[933] += dqdT;      // dwdot[O]/dT
  J[934] += -2 * dqdT; // dwdot[OH]/dT
  J[936] += dqdT;      // dwdot[H2O]/dT

  // reaction 5: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 260000 * exp(-0.057 * logT - (-416.160182620503) * invT);
  dlnkfdT = -0.057 * invT + (-416.160182620503) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[6] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[96] += dqdci;      // dwdot[O]/d[O]
  J[97] += -2 * dqdci; // dwdot[OH]/d[O]
  J[99] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[127] += dqdci;      // dwdot[O]/d[OH]
  J[128] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[189] += dqdci;      // dwdot[O]/d[H2O]
  J[190] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[933] += dqdT;      // dwdot[O]/dT
  J[934] += -2 * dqdT; // dwdot[OH]/dT
  J[936] += dqdT;      // dwdot[H2O]/dT

  // reaction 12: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 2.8 * exp(2.09 * logT - (-730.167382082648) * invT);
  dlnkfdT = 2.09 * invT + (-730.167382082648) * invT2;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = exp(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[0] + h_RT[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] += q; // O2
  wdot[2] -= q; // H
  wdot[5] -= q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[O2]/d[H2]
  J[2] -= dqdci; // dwdot[H]/d[H2]
  J[5] -= dqdci; // dwdot[HO2]/d[H2]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[31] += dqdci; // dwdot[H2]/d[O2]
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[33] -= dqdci; // dwdot[H]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H]
  dqdci = +k_f * sc[5];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[63] += dqdci; // dwdot[O2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[67] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[155] += dqdci; // dwdot[H2]/d[HO2]
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[157] -= dqdci; // dwdot[H]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT

  // reaction 13: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 71000000 * exp(-(148.448916412392) * invT);
  dlnkfdT = (148.448916412392) * invT2;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = exp(g_RT[2] - 2.000000 * g_RT[4] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (2.000000 * h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;     // H
  wdot[4] += 2 * q; // OH
  wdot[5] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[5];
  J[64] -= dqdci;     // dwdot[H]/d[H]
  J[66] += 2 * dqdci; // dwdot[OH]/d[H]
  J[67] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[4];
  J[126] -= dqdci;     // dwdot[H]/d[OH]
  J[128] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[157] -= dqdci;     // dwdot[H]/d[HO2]
  J[159] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[932] -= dqdT;     // dwdot[H]/dT
  J[934] += 2 * dqdT; // dwdot[OH]/dT
  J[935] -= dqdT;     // dwdot[HO2]/dT

  // reaction 14: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 1400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[3] += q; // O
  wdot[5] -= q; // HO2
  wdot[6] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc[5];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[65] += dqdci; // dwdot[O]/d[H]
  J[67] -= dqdci; // dwdot[HO2]/d[H]
  J[68] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[95] -= dqdci; // dwdot[H]/d[O]
  J[96] += dqdci; // dwdot[O]/d[O]
  J[98] -= dqdci; // dwdot[HO2]/d[O]
  J[99] += dqdci; // dwdot[H2O]/d[O]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[157] -= dqdci; // dwdot[H]/d[HO2]
  J[158] += dqdci; // dwdot[O]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[188] -= dqdci; // dwdot[H]/d[H2O]
  J[189] += dqdci; // dwdot[O]/d[H2O]
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT

  // reaction 15: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[5];
  k_f = 29000 * exp(1 * logT - (-364.328866042617) * invT);
  dlnkfdT = 1 * invT + (-364.328866042617) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[5]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // O2
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  wdot[5] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[4];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[34] -= dqdci; // dwdot[O]/d[O2]
  J[35] += dqdci; // dwdot[OH]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[5];
  J[94] += dqdci; // dwdot[O2]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  J[98] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[125] += dqdci; // dwdot[O2]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[3];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[158] -= dqdci; // dwdot[O]/d[HO2]
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT

  // reaction 16: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[5];
  k_f = 190000000000000 * exp(-2.49 * logT - (293.878532829956) * invT);
  dlnkfdT = -2.49 * invT + (293.878532829956) * invT2;
  // reverse
  phi_r = sc[1] * sc[6];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[5]) + (h_RT[1] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // O2
  wdot[4] -= q; // OH
  wdot[5] -= q; // HO2
  wdot[6] += q; // H2O
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[35] -= dqdci; // dwdot[OH]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[37] += dqdci; // dwdot[H2O]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[5];
  J[125] += dqdci; // dwdot[O2]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[187] += dqdci; // dwdot[O2]/d[H2O]
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT

  // reaction 17: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[5];
  k_f = 1200 * exp(1.24 * logT - (-659.213832204183) * invT);
  dlnkfdT = 1.24 * invT + (-659.213832204183) * invT2;
  // reverse
  phi_r = sc[1] * sc[6];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[5]) + (h_RT[1] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // O2
  wdot[4] -= q; // OH
  wdot[5] -= q; // HO2
  wdot[6] += q; // H2O
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[35] -= dqdci; // dwdot[OH]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[37] += dqdci; // dwdot[H2O]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[5];
  J[125] += dqdci; // dwdot[O2]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[187] += dqdci; // dwdot[O2]/d[H2O]
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT

  // reaction 18: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[5] * sc[5]);
  k_f = 1200 * exp(0.771 * logT - (-918.370415093613) * invT);
  dlnkfdT = 0.771 * invT + (-918.370415093613) * invT2;
  // reverse
  phi_r = sc[1] * sc[7];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[5] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[5]) + (h_RT[1] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;     // O2
  wdot[5] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[32] += dqdci;      // dwdot[O2]/d[O2]
  J[36] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[38] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[5];
  J[156] += dqdci;      // dwdot[O2]/d[HO2]
  J[160] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[1];
  J[218] += dqdci;      // dwdot[O2]/d[H2O2]
  J[222] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[931] += dqdT;      // dwdot[O2]/dT
  J[935] += -2 * dqdT; // dwdot[HO2]/dT
  J[937] += dqdT;      // dwdot[H2O2]/dT

  // reaction 19: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[5] * sc[5]);
  k_f = 1300000 * exp(0.295 * logT - (3722.29367695751) * invT);
  dlnkfdT = 0.295 * invT + (3722.29367695751) * invT2;
  // reverse
  phi_r = sc[1] * sc[7];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[5] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[5]) + (h_RT[1] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;     // O2
  wdot[5] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[32] += dqdci;      // dwdot[O2]/d[O2]
  J[36] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[38] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[5];
  J[156] += dqdci;      // dwdot[O2]/d[HO2]
  J[160] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[1];
  J[218] += dqdci;      // dwdot[O2]/d[H2O2]
  J[222] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[931] += dqdT;      // dwdot[O2]/dT
  J[935] += -2 * dqdT; // dwdot[HO2]/dT
  J[937] += dqdT;      // dwdot[H2O2]/dT

  // reaction 21: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 24000000 * exp(-(1997.77016324474) * invT);
  dlnkfdT = (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[4] += q; // OH
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[68] += dqdci; // dwdot[H2O]/d[H]
  J[69] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[6];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[188] -= dqdci; // dwdot[H]/d[H2O]
  J[190] += dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[193] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[219] -= dqdci; // dwdot[H]/d[H2O2]
  J[221] += dqdci; // dwdot[OH]/d[H2O2]
  J[223] += dqdci; // dwdot[H2O]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 22: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 48000000 * exp(-(4000.57249314752) * invT);
  dlnkfdT = (4000.57249314752) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[2] -= q; // H
  wdot[5] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[H2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[2] -= dqdci; // dwdot[H]/d[H2]
  J[5] += dqdci; // dwdot[HO2]/d[H2]
  J[7] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[67] += dqdci; // dwdot[HO2]/d[H]
  J[69] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[155] += dqdci; // dwdot[H2]/d[HO2]
  J[157] -= dqdci; // dwdot[H]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[162] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[217] += dqdci; // dwdot[H2]/d[H2O2]
  J[219] -= dqdci; // dwdot[H]/d[H2O2]
  J[222] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 23: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 9.6 * exp(2 * logT - (1997.77016324474) * invT);
  dlnkfdT = 2 * invT + (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  wdot[5] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[98] += dqdci;  // dwdot[HO2]/d[O]
  J[100] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[HO2]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[4];
  J[158] -= dqdci; // dwdot[O]/d[HO2]
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[162] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[3];
  J[220] -= dqdci; // dwdot[O]/d[H2O2]
  J[221] += dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 24: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 1700000 * exp(-(160.022899725901) * invT);
  dlnkfdT = (160.022899725901) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // HO2
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[HO2]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  J[162] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[5];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[191] += dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[193] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[221] -= dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[HO2]/d[H2O2]
  J[223] += dqdci; // dwdot[H2O]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 25: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 76000000 * exp(-(3658.38516040031) * invT);
  dlnkfdT = (3658.38516040031) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // HO2
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[HO2]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  J[162] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[5];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[191] += dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[193] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[221] -= dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[HO2]/d[H2O2]
  J[223] += dqdci; // dwdot[H2O]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 27: H + NH3 <=> H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 0.64 * exp(2.39 * logT - (5118.2167078998) * invT);
  dlnkfdT = 2.39 * invT + (5118.2167078998) * invT2;
  // reverse
  phi_r = sc[0] * sc[10];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[0] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[9] -= q;  // NH3
  wdot[10] += q; // NH2
  // d()/d[H2]
  dqdci = -k_r * sc[10];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[9] -= dqdci;  // dwdot[NH3]/d[H2]
  J[10] += dqdci; // dwdot[NH2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[9];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[71] -= dqdci; // dwdot[NH3]/d[H]
  J[72] += dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH3]
  dqdci = +k_f * sc[2];
  J[279] += dqdci; // dwdot[H2]/d[NH3]
  J[281] -= dqdci; // dwdot[H]/d[NH3]
  J[288] -= dqdci; // dwdot[NH3]/d[NH3]
  J[289] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[0];
  J[310] += dqdci; // dwdot[H2]/d[NH2]
  J[312] -= dqdci; // dwdot[H]/d[NH2]
  J[319] -= dqdci; // dwdot[NH3]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[939] -= dqdT; // dwdot[NH3]/dT
  J[940] += dqdT; // dwdot[NH2]/dT

  // reaction 28: NH3 + O <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 9.4 * exp(1.94 * logT - (3250.77966109849) * invT);
  dlnkfdT = 1.94 * invT + (3250.77966109849) * invT2;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[9] -= q;  // NH3
  wdot[10] += q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[9];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[102] -= dqdci; // dwdot[NH3]/d[O]
  J[103] += dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[133] -= dqdci; // dwdot[NH3]/d[OH]
  J[134] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH3]
  dqdci = +k_f * sc[3];
  J[282] -= dqdci; // dwdot[O]/d[NH3]
  J[283] += dqdci; // dwdot[OH]/d[NH3]
  J[288] -= dqdci; // dwdot[NH3]/d[NH3]
  J[289] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[319] -= dqdci; // dwdot[NH3]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[939] -= dqdT; // dwdot[NH3]/dT
  J[940] += dqdT; // dwdot[NH2]/dT

  // reaction 29: NH3 + OH <=> H2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 2 * exp(2.04 * logT - (284.820632845471) * invT);
  dlnkfdT = 2.04 * invT + (284.820632845471) * invT2;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[9] -= q;  // NH3
  wdot[10] += q; // NH2
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[133] -= dqdci; // dwdot[NH3]/d[OH]
  J[134] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[195] -= dqdci; // dwdot[NH3]/d[H2O]
  J[196] += dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NH3]
  dqdci = +k_f * sc[4];
  J[283] -= dqdci; // dwdot[OH]/d[NH3]
  J[285] += dqdci; // dwdot[H2O]/d[NH3]
  J[288] -= dqdci; // dwdot[NH3]/d[NH3]
  J[289] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[6];
  J[314] -= dqdci; // dwdot[OH]/d[NH2]
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[319] -= dqdci; // dwdot[NH3]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[939] -= dqdT; // dwdot[NH3]/dT
  J[940] += dqdT; // dwdot[NH2]/dT

  // reaction 30: HO2 + NH3 <=> H2O2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 300000 * exp(-(11070.7666477038) * invT);
  dlnkfdT = (11070.7666477038) * invT2;
  // reverse
  phi_r = sc[7] * sc[10];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[7] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[9] -= q;  // NH3
  wdot[10] += q; // NH2
  // d()/d[HO2]
  dqdci = +k_f * sc[9];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[164] -= dqdci; // dwdot[NH3]/d[HO2]
  J[165] += dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[10];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[226] -= dqdci; // dwdot[NH3]/d[H2O2]
  J[227] += dqdci; // dwdot[NH2]/d[H2O2]
  // d()/d[NH3]
  dqdci = +k_f * sc[5];
  J[284] -= dqdci; // dwdot[HO2]/d[NH3]
  J[286] += dqdci; // dwdot[H2O2]/d[NH3]
  J[288] -= dqdci; // dwdot[NH3]/d[NH3]
  J[289] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[7];
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[317] += dqdci; // dwdot[H2O2]/d[NH2]
  J[319] -= dqdci; // dwdot[NH3]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[939] -= dqdT; // dwdot[NH3]/dT
  J[940] += dqdT; // dwdot[NH2]/dT

  // reaction 31: H2 + NH <=> H + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[11];
  k_f = 21000000 * exp(-(7758.09133671136) * invT);
  dlnkfdT = (7758.09133671136) * invT2;
  // reverse
  phi_r = sc[2] * sc[10];
  Kc = exp(g_RT[0] - g_RT[2] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[11]) + (h_RT[2] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[2] += q;  // H
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  // d()/d[H2]
  dqdci = +k_f * sc[11];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[2] += dqdci;  // dwdot[H]/d[H2]
  J[10] += dqdci; // dwdot[NH2]/d[H2]
  J[11] -= dqdci; // dwdot[NH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[10];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[NH2]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[NH2]
  dqdci = -k_r * sc[2];
  J[310] -= dqdci; // dwdot[H2]/d[NH2]
  J[312] += dqdci; // dwdot[H]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[0];
  J[341] -= dqdci; // dwdot[H2]/d[NH]
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT

  // reaction 32: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 660000000 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[2] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[3] -= q;  // O
  wdot[10] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[O]/d[H]
  J[72] -= dqdci; // dwdot[NH2]/d[H]
  J[83] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[95] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[103] -= dqdci; // dwdot[NH2]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[312] += dqdci; // dwdot[H]/d[NH2]
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[653] += dqdci; // dwdot[H]/d[HNO]
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 33: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 7000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH2
  wdot[11] += q; // NH
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[103] -= dqdci; // dwdot[NH2]/d[O]
  J[104] += dqdci; // dwdot[NH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[135] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[321] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[4];
  J[344] -= dqdci; // dwdot[O]/d[NH]
  J[345] += dqdci; // dwdot[OH]/d[NH]
  J[351] -= dqdci; // dwdot[NH2]/d[NH]
  J[352] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[941] += dqdT; // dwdot[NH]/dT

  // reaction 34: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 8.6e-07 * exp(4.01 * logT - (841.881481891296) * invT);
  dlnkfdT = 4.01 * invT + (841.881481891296) * invT2;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH2
  wdot[11] += q; // NH
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[103] -= dqdci; // dwdot[NH2]/d[O]
  J[104] += dqdci; // dwdot[NH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[135] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[321] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[4];
  J[344] -= dqdci; // dwdot[O]/d[NH]
  J[345] += dqdci; // dwdot[OH]/d[NH]
  J[351] -= dqdci; // dwdot[NH2]/d[NH]
  J[352] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[941] += dqdT; // dwdot[NH]/dT

  // reaction 35: NH2 + OH <=> H2O + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 3.3 * exp(1.949 * logT - (-109.198016479624) * invT);
  dlnkfdT = 1.949 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[6] * sc[11];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[6] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[11] += q; // NH
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[135] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[197] += dqdci; // dwdot[NH]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[314] -= dqdci; // dwdot[OH]/d[NH2]
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[321] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[6];
  J[345] -= dqdci; // dwdot[OH]/d[NH]
  J[347] += dqdci; // dwdot[H2O]/d[NH]
  J[351] -= dqdci; // dwdot[NH2]/d[NH]
  J[352] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[941] += dqdT; // dwdot[NH]/dT

  // reaction 36: HO2 + NH2 <=> NH3 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 0.017 * exp(1.55 * logT - (1020.02018158617) * invT);
  dlnkfdT = 1.55 * invT + (1020.02018158617) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[5] -= q;  // HO2
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  // d()/d[O2]
  dqdci = -k_r * sc[9];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[40] += dqdci; // dwdot[NH3]/d[O2]
  J[41] -= dqdci; // dwdot[NH2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[164] += dqdci; // dwdot[NH3]/d[HO2]
  J[165] -= dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[NH3]
  dqdci = -k_r * sc[1];
  J[280] += dqdci; // dwdot[O2]/d[NH3]
  J[284] -= dqdci; // dwdot[HO2]/d[NH3]
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[311] += dqdci; // dwdot[O2]/d[NH2]
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT

  // reaction 37: HO2 + NH2 <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 250000000000 * exp(-1.28 * logT - (586.750632328303) * invT);
  dlnkfdT = -1.28 * invT + (586.750632328303) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[5] + g_RT[10] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // HO2
  wdot[10] -= q; // NH2
  wdot[19] += q; // H2NO
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[143] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[165] -= dqdci; // dwdot[NH2]/d[HO2]
  J[174] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[329] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[593] += dqdci; // dwdot[OH]/d[H2NO]
  J[594] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[599] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 38: HO2 + NH2 <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 16 * exp(0.55 * logT - (264.188749547478) * invT);
  dlnkfdT = 0.55 * invT + (264.188749547478) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  J[165] -= dqdci; // dwdot[NH2]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[207] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[656] -= dqdci; // dwdot[HO2]/d[HNO]
  J[657] += dqdci; // dwdot[H2O]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 39: HO2 + NH2 <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 5700000000 * exp(-1.12 * logT - (355.774182723937) * invT);
  dlnkfdT = -1.12 * invT + (355.774182723937) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  J[165] -= dqdci; // dwdot[NH2]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[207] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[656] -= dqdci; // dwdot[HO2]/d[HNO]
  J[657] += dqdci; // dwdot[H2O]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 40: HO2 + NH2 <=> H2O + HON
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 21 * exp(0.64 * logT - (408.108715967628) * invT);
  dlnkfdT = 0.64 * invT + (408.108715967628) * invT2;
  // reverse
  phi_r = sc[6] * sc[22];
  Kc = exp(g_RT[5] - g_RT[6] + g_RT[10] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[6] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[22] += q; // HON
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[H2O]/d[HO2]
  J[165] -= dqdci; // dwdot[NH2]/d[HO2]
  J[177] += dqdci; // dwdot[HON]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[191] -= dqdci; // dwdot[HO2]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[208] += dqdci; // dwdot[HON]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[315] -= dqdci; // dwdot[HO2]/d[NH2]
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[332] += dqdci; // dwdot[HON]/d[NH2]
  // d()/d[HON]
  dqdci = -k_r * sc[6];
  J[687] -= dqdci; // dwdot[HO2]/d[HON]
  J[688] += dqdci; // dwdot[H2O]/d[HON]
  J[692] -= dqdci; // dwdot[NH2]/d[HON]
  J[704] += dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[952] += dqdT; // dwdot[HON]/dT

  // reaction 41: NH2 + O2 <=> H2NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 260000 * exp(0.487 * logT - (14618.4441416271) * invT);
  dlnkfdT = 0.487 * invT + (14618.4441416271) * invT2;
  // reverse
  phi_r = sc[3] * sc[19];
  Kc = exp(g_RT[1] - g_RT[3] + g_RT[10] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[3] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[3] += q;  // O
  wdot[10] -= q; // NH2
  wdot[19] += q; // H2NO
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[34] += dqdci; // dwdot[O]/d[O2]
  J[41] -= dqdci; // dwdot[NH2]/d[O2]
  J[50] += dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[19];
  J[94] -= dqdci;  // dwdot[O2]/d[O]
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[103] -= dqdci; // dwdot[NH2]/d[O]
  J[112] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[1];
  J[311] -= dqdci; // dwdot[O2]/d[NH2]
  J[313] += dqdci; // dwdot[O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[329] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[3];
  J[590] -= dqdci; // dwdot[O2]/d[H2NO]
  J[592] += dqdci; // dwdot[O]/d[H2NO]
  J[599] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 42: NH2 + O2 <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 2.9e-08 * exp(3.764 * logT - (9150.99506765883) * invT);
  dlnkfdT = 3.764 * invT + (9150.99506765883) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[1] - g_RT[4] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[35] += dqdci; // dwdot[OH]/d[O2]
  J[41] -= dqdci; // dwdot[NH2]/d[O2]
  J[52] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[125] -= dqdci; // dwdot[O2]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[1];
  J[311] -= dqdci; // dwdot[O2]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[652] -= dqdci; // dwdot[O2]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 43: 2 NH2 <=> NH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 5.6e-06 * exp(3.53 * logT - (277.775599524205) * invT);
  dlnkfdT = 3.53 * invT + (277.775599524205) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(-g_RT[9] + 2.000000 * g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;      // NH3
  wdot[10] -= 2 * q; // NH2
  wdot[11] += q;     // NH
  // d()/d[NH3]
  dqdci = -k_r * sc[11];
  J[288] += dqdci;      // dwdot[NH3]/d[NH3]
  J[289] += -2 * dqdci; // dwdot[NH2]/d[NH3]
  J[290] += dqdci;      // dwdot[NH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[319] += dqdci;      // dwdot[NH3]/d[NH2]
  J[320] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[321] += dqdci;      // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[9];
  J[350] += dqdci;      // dwdot[NH3]/d[NH]
  J[351] += -2 * dqdci; // dwdot[NH2]/d[NH]
  J[352] += dqdci;      // dwdot[NH]/d[NH]
  // d()/dT
  J[939] += dqdT;      // dwdot[NH3]/dT
  J[940] += -2 * dqdT; // dwdot[NH2]/dT
  J[941] += dqdT;      // dwdot[NH]/dT

  // reaction 44: NH + NH2 <=> N + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[11];
  k_f = 0.0096 * exp(2.46 * logT - (53.844183241105) * invT);
  dlnkfdT = 2.46 * invT + (53.844183241105) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[11]) + (h_RT[9] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[11] -= q; // NH
  wdot[12] += q; // N
  // d()/d[NH3]
  dqdci = -k_r * sc[12];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[290] -= dqdci; // dwdot[NH]/d[NH3]
  J[291] += dqdci; // dwdot[N]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[11];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[322] += dqdci; // dwdot[N]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[350] += dqdci; // dwdot[NH3]/d[NH]
  J[351] -= dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[353] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[9];
  J[381] += dqdci; // dwdot[NH3]/d[N]
  J[382] -= dqdci; // dwdot[NH2]/d[N]
  J[383] -= dqdci; // dwdot[NH]/d[N]
  J[384] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[942] += dqdT; // dwdot[N]/dT

  // reaction 45: N + NH2 <=> 2 H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = (sc[2] * sc[2]) * sc[29];
  Kc = refC * exp(-2.000000 * g_RT[2] + g_RT[10] + g_RT[12] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (2.000000 * h_RT[2] + h_RT[29]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += 2 * q; // H
  wdot[10] -= q;    // NH2
  wdot[12] -= q;    // N
  wdot[29] += q;    // N2
  // d()/d[H]
  dqdci = -k_r * 2.000000 * sc[2] * sc[29];
  J[64] += 2 * dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci;     // dwdot[NH2]/d[H]
  J[74] -= dqdci;     // dwdot[N]/d[H]
  J[91] += dqdci;     // dwdot[N2]/d[H]
  // d()/d[NH2]
  dqdci = +k_f * sc[12];
  J[312] += 2 * dqdci; // dwdot[H]/d[NH2]
  J[320] -= dqdci;     // dwdot[NH2]/d[NH2]
  J[322] -= dqdci;     // dwdot[N]/d[NH2]
  J[339] += dqdci;     // dwdot[N2]/d[NH2]
  // d()/d[N]
  dqdci = +k_f * sc[10];
  J[374] += 2 * dqdci; // dwdot[H]/d[N]
  J[382] -= dqdci;     // dwdot[NH2]/d[N]
  J[384] -= dqdci;     // dwdot[N]/d[N]
  J[401] += dqdci;     // dwdot[N2]/d[N]
  // d()/d[N2]
  dqdci = -k_r * sc[2] * sc[2];
  J[901] += 2 * dqdci; // dwdot[H]/d[N2]
  J[909] -= dqdci;     // dwdot[NH2]/d[N2]
  J[911] -= dqdci;     // dwdot[N]/d[N2]
  J[928] += dqdci;     // dwdot[N2]/d[N2]
  // d()/dT
  J[932] += 2 * dqdT; // dwdot[H]/dT
  J[940] -= dqdT;     // dwdot[NH2]/dT
  J[942] -= dqdT;     // dwdot[N]/dT
  J[959] += dqdT;     // dwdot[N2]/dT

  // reaction 46: HNO + NH2 <=> NH3 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[21];
  k_f = 0.00059 * exp(2.95 * logT - (-1745.65861367657) * invT);
  dlnkfdT = 2.95 * invT + (-1745.65861367657) * invT2;
  // reverse
  phi_r = sc[8] * sc[9];
  Kc = exp(-g_RT[8] - g_RT[9] + g_RT[10] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[21]) + (h_RT[8] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // NO
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[21] -= q; // HNO
  // d()/d[NO]
  dqdci = -k_r * sc[9];
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[257] += dqdci; // dwdot[NH3]/d[NO]
  J[258] -= dqdci; // dwdot[NH2]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NH3]
  dqdci = -k_r * sc[8];
  J[287] += dqdci; // dwdot[NO]/d[NH3]
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[300] -= dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[21];
  J[318] += dqdci; // dwdot[NO]/d[NH2]
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[331] -= dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = +k_f * sc[10];
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[660] += dqdci; // dwdot[NH3]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 47: NH2 + NO <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 26000000000000 * exp(-2.369 * logT - (437.798499250106) * invT);
  dlnkfdT = -2.369 * invT + (437.798499250106) * invT2;
  // reverse
  phi_r = sc[6] * sc[29];
  Kc = exp(-g_RT[6] + g_RT[8] + g_RT[10] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[6] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O
  wdot[8] -= q;  // NO
  wdot[10] -= q; // NH2
  wdot[29] += q; // N2
  // d()/d[H2O]
  dqdci = -k_r * sc[29];
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[194] -= dqdci; // dwdot[NO]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[215] += dqdci; // dwdot[N2]/d[H2O]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[254] += dqdci; // dwdot[H2O]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[258] -= dqdci; // dwdot[NH2]/d[NO]
  J[277] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[8];
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[318] -= dqdci; // dwdot[NO]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[339] += dqdci; // dwdot[N2]/d[NH2]
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[905] += dqdci; // dwdot[H2O]/d[N2]
  J[907] -= dqdci; // dwdot[NO]/d[N2]
  J[909] -= dqdci; // dwdot[NH2]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 48: NH2 + NO <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 43000 * exp(0.294 * logT - (-435.785632586887) * invT);
  dlnkfdT = 0.294 * invT + (-435.785632586887) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[10] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[8] -= q;  // NO
  wdot[10] -= q; // NH2
  wdot[13] += q; // NNH
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[NO]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[258] -= dqdci; // dwdot[NH2]/d[NO]
  J[261] += dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[8];
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[318] -= dqdci; // dwdot[NO]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[323] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[411] -= dqdci; // dwdot[NO]/d[NNH]
  J[413] -= dqdci; // dwdot[NH2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT

  // reaction 49: HONO + NH2 <=> NH3 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[24];
  k_f = 7.1e-05 * exp(3.02 * logT - (-2485.89032907532) * invT);
  dlnkfdT = 3.02 * invT + (-2485.89032907532) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(-g_RT[9] + g_RT[10] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[24]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[23] += q; // NO2
  wdot[24] -= q; // HONO
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[302] += dqdci; // dwdot[NO2]/d[NH3]
  J[303] -= dqdci; // dwdot[HONO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[24];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[333] += dqdci; // dwdot[NO2]/d[NH2]
  J[334] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NO2]
  dqdci = -k_r * sc[9];
  J[722] += dqdci; // dwdot[NH3]/d[NO2]
  J[723] -= dqdci; // dwdot[NH2]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[737] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[10];
  J[753] += dqdci; // dwdot[NH3]/d[HONO]
  J[754] -= dqdci; // dwdot[NH2]/d[HONO]
  J[767] += dqdci; // dwdot[NO2]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 50: NH2 + NO2 <=> H2NO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[23];
  k_f = 860000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[8] * sc[19];
  Kc = exp(-g_RT[8] + g_RT[10] - g_RT[19] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[23]) + (h_RT[8] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // NO
  wdot[10] -= q; // NH2
  wdot[19] += q; // H2NO
  wdot[23] -= q; // NO2
  // d()/d[NO]
  dqdci = -k_r * sc[19];
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[258] -= dqdci; // dwdot[NH2]/d[NO]
  J[267] += dqdci; // dwdot[H2NO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[318] += dqdci; // dwdot[NO]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[329] += dqdci; // dwdot[H2NO]/d[NH2]
  J[333] -= dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[8];
  J[597] += dqdci; // dwdot[NO]/d[H2NO]
  J[599] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[612] -= dqdci; // dwdot[NO2]/d[H2NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[10];
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[723] -= dqdci; // dwdot[NH2]/d[NO2]
  J[732] += dqdci; // dwdot[H2NO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT

  // reaction 51: NH2 + NO2 <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[23];
  k_f = 220000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[6] * sc[28];
  Kc = exp(-g_RT[6] + g_RT[10] + g_RT[23] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[23]) + (h_RT[6] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[23] -= q; // NO2
  wdot[28] += q; // N2O
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[209] -= dqdci; // dwdot[NO2]/d[H2O]
  J[214] += dqdci; // dwdot[N2O]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[333] -= dqdci; // dwdot[NO2]/d[NH2]
  J[338] += dqdci; // dwdot[N2O]/d[NH2]
  // d()/d[NO2]
  dqdci = +k_f * sc[10];
  J[719] += dqdci; // dwdot[H2O]/d[NO2]
  J[723] -= dqdci; // dwdot[NH2]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[741] += dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[6];
  J[874] += dqdci; // dwdot[H2O]/d[N2O]
  J[878] -= dqdci; // dwdot[NH2]/d[N2O]
  J[891] -= dqdci; // dwdot[NO2]/d[N2O]
  J[896] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[958] += dqdT; // dwdot[N2O]/dT

  // reaction 52: H + NH <=> H2 + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[12];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[0] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[11] -= q; // NH
  wdot[12] += q; // N
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[11] -= dqdci; // dwdot[NH]/d[H2]
  J[12] += dqdci; // dwdot[N]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  J[74] += dqdci; // dwdot[N]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[2];
  J[341] += dqdci; // dwdot[H2]/d[NH]
  J[343] -= dqdci; // dwdot[H]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[353] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[0];
  J[372] += dqdci; // dwdot[H2]/d[N]
  J[374] -= dqdci; // dwdot[H]/d[N]
  J[383] -= dqdci; // dwdot[NH]/d[N]
  J[384] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[942] += dqdT; // dwdot[N]/dT

  // reaction 53: NH + O <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 92000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[8];
  Kc = exp(-g_RT[2] + g_RT[3] - g_RT[8] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[2] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[11] -= q; // NH
  // d()/d[H]
  dqdci = -k_r * sc[8];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[O]/d[H]
  J[70] += dqdci; // dwdot[NO]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[95] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[104] -= dqdci; // dwdot[NH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[250] += dqdci; // dwdot[H]/d[NO]
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[259] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[344] -= dqdci; // dwdot[O]/d[NH]
  J[349] += dqdci; // dwdot[NO]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[941] -= dqdT; // dwdot[NH]/dT

  // reaction 54: NH + OH <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 320000000 * exp(-0.376 * logT - (-23.1479666270171) * invT);
  dlnkfdT = -0.376 * invT + (-23.1479666270171) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[11] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[2] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // OH
  wdot[11] -= q; // NH
  wdot[21] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[66] -= dqdci; // dwdot[OH]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  J[83] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[135] -= dqdci; // dwdot[NH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[345] -= dqdci; // dwdot[OH]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[362] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[653] += dqdci; // dwdot[H]/d[HNO]
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[662] -= dqdci; // dwdot[NH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 55: NH + OH <=> H2O + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 16 * exp(1.733 * logT - (-289.852799503519) * invT);
  dlnkfdT = 1.733 * invT + (-289.852799503519) * invT2;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[11] -= q; // NH
  wdot[12] += q; // N
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[135] -= dqdci; // dwdot[NH]/d[OH]
  J[136] += dqdci; // dwdot[N]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[197] -= dqdci; // dwdot[NH]/d[H2O]
  J[198] += dqdci; // dwdot[N]/d[H2O]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[345] -= dqdci; // dwdot[OH]/d[NH]
  J[347] += dqdci; // dwdot[H2O]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[353] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[6];
  J[376] -= dqdci; // dwdot[OH]/d[N]
  J[378] += dqdci; // dwdot[H2O]/d[N]
  J[383] -= dqdci; // dwdot[NH]/d[N]
  J[384] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[942] += dqdT; // dwdot[N]/dT

  // reaction 56: NH + O2 <=> HNO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 24000000 * exp(-(6969.55082139537) * invT);
  dlnkfdT = (6969.55082139537) * invT2;
  // reverse
  phi_r = sc[3] * sc[21];
  Kc = exp(g_RT[1] - g_RT[3] + g_RT[11] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[3] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[3] += q;  // O
  wdot[11] -= q; // NH
  wdot[21] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[34] += dqdci; // dwdot[O]/d[O2]
  J[42] -= dqdci; // dwdot[NH]/d[O2]
  J[52] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[21];
  J[94] -= dqdci;  // dwdot[O2]/d[O]
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[104] -= dqdci; // dwdot[NH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH]
  dqdci = +k_f * sc[1];
  J[342] -= dqdci; // dwdot[O2]/d[NH]
  J[344] += dqdci; // dwdot[O]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[362] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[3];
  J[652] -= dqdci; // dwdot[O2]/d[HNO]
  J[654] += dqdci; // dwdot[O]/d[HNO]
  J[662] -= dqdci; // dwdot[NH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 57: NH + O2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 99000 * exp(-(769.921498681221) * invT);
  dlnkfdT = (769.921498681221) * invT2;
  // reverse
  phi_r = sc[4] * sc[8];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[8] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[4] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[8] += q;  // NO
  wdot[11] -= q; // NH
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[35] += dqdci; // dwdot[OH]/d[O2]
  J[39] += dqdci; // dwdot[NO]/d[O2]
  J[42] -= dqdci; // dwdot[NH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[125] -= dqdci; // dwdot[O2]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[135] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[249] -= dqdci; // dwdot[O2]/d[NO]
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[259] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[1];
  J[342] -= dqdci; // dwdot[O2]/d[NH]
  J[345] += dqdci; // dwdot[OH]/d[NH]
  J[349] += dqdci; // dwdot[NO]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[941] -= dqdT; // dwdot[NH]/dT

  // reaction 58: 2 NH <=> N + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 5.7e-07 * exp(3.88 * logT - (172.100099705214) * invT);
  dlnkfdT = 3.88 * invT + (172.100099705214) * invT2;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q;     // NH2
  wdot[11] -= 2 * q; // NH
  wdot[12] += q;     // N
  // d()/d[NH2]
  dqdci = -k_r * sc[12];
  J[320] += dqdci;      // dwdot[NH2]/d[NH2]
  J[321] += -2 * dqdci; // dwdot[NH]/d[NH2]
  J[322] += dqdci;      // dwdot[N]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[11];
  J[351] += dqdci;      // dwdot[NH2]/d[NH]
  J[352] += -2 * dqdci; // dwdot[NH]/d[NH]
  J[353] += dqdci;      // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[10];
  J[382] += dqdci;      // dwdot[NH2]/d[N]
  J[383] += -2 * dqdci; // dwdot[NH]/d[N]
  J[384] += dqdci;      // dwdot[N]/d[N]
  // d()/dT
  J[940] += dqdT;      // dwdot[NH2]/dT
  J[941] += -2 * dqdT; // dwdot[NH]/dT
  J[942] += dqdT;      // dwdot[N]/dT

  // reaction 59: N + NH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[29];
  Kc = exp(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[2] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[11] -= q; // NH
  wdot[12] -= q; // N
  wdot[29] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  J[74] -= dqdci; // dwdot[N]/d[H]
  J[91] += dqdci; // dwdot[N2]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[12];
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[353] -= dqdci; // dwdot[N]/d[NH]
  J[370] += dqdci; // dwdot[N2]/d[NH]
  // d()/d[N]
  dqdci = +k_f * sc[11];
  J[374] += dqdci; // dwdot[H]/d[N]
  J[383] -= dqdci; // dwdot[NH]/d[N]
  J[384] -= dqdci; // dwdot[N]/d[N]
  J[401] += dqdci; // dwdot[N2]/d[N]
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[901] += dqdci; // dwdot[H]/d[N2]
  J[910] -= dqdci; // dwdot[NH]/d[N2]
  J[911] -= dqdci; // dwdot[N]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[942] -= dqdT; // dwdot[N]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 60: NH + NO <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 2700000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[2] * sc[28];
  Kc = exp(-g_RT[2] + g_RT[8] + g_RT[11] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[2] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[8] -= q;  // NO
  wdot[11] -= q; // NH
  wdot[28] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[NO]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  J[90] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[250] += dqdci; // dwdot[H]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[259] -= dqdci; // dwdot[NH]/d[NO]
  J[276] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[8];
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[349] -= dqdci; // dwdot[NO]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[369] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[870] += dqdci; // dwdot[H]/d[N2O]
  J[876] -= dqdci; // dwdot[NO]/d[N2O]
  J[879] -= dqdci; // dwdot[NH]/d[N2O]
  J[896] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[958] += dqdT; // dwdot[N2O]/dT

  // reaction 61: NH + NO <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 680000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[4] * sc[29];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[4] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[8] -= q;  // NO
  wdot[11] -= q; // NH
  wdot[29] += q; // N2
  // d()/d[OH]
  dqdci = -k_r * sc[29];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[NO]/d[OH]
  J[135] -= dqdci; // dwdot[NH]/d[OH]
  J[153] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[259] -= dqdci; // dwdot[NH]/d[NO]
  J[277] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[8];
  J[345] += dqdci; // dwdot[OH]/d[NH]
  J[349] -= dqdci; // dwdot[NO]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[370] += dqdci; // dwdot[N2]/d[NH]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[903] += dqdci; // dwdot[OH]/d[N2]
  J[907] -= dqdci; // dwdot[NO]/d[N2]
  J[910] -= dqdci; // dwdot[NH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 62: HONO + NH <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[24];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[23];
  Kc = exp(-g_RT[10] + g_RT[11] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[24]) + (h_RT[10] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[23] += q; // NO2
  wdot[24] -= q; // HONO
  // d()/d[NH2]
  dqdci = -k_r * sc[23];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[333] += dqdci; // dwdot[NO2]/d[NH2]
  J[334] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[24];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[364] += dqdci; // dwdot[NO2]/d[NH]
  J[365] -= dqdci; // dwdot[HONO]/d[NH]
  // d()/d[NO2]
  dqdci = -k_r * sc[10];
  J[723] += dqdci; // dwdot[NH2]/d[NO2]
  J[724] -= dqdci; // dwdot[NH]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[737] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[11];
  J[754] += dqdci; // dwdot[NH2]/d[HONO]
  J[755] -= dqdci; // dwdot[NH]/d[HONO]
  J[767] += dqdci; // dwdot[NO2]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 63: NH + NO2 <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[23];
  k_f = 4100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[28];
  Kc = exp(-g_RT[4] + g_RT[11] + g_RT[23] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[23]) + (h_RT[4] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[11] -= q; // NH
  wdot[23] -= q; // NO2
  wdot[28] += q; // N2O
  // d()/d[OH]
  dqdci = -k_r * sc[28];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] -= dqdci; // dwdot[NH]/d[OH]
  J[147] -= dqdci; // dwdot[NO2]/d[OH]
  J[152] += dqdci; // dwdot[N2O]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[23];
  J[345] += dqdci; // dwdot[OH]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[364] -= dqdci; // dwdot[NO2]/d[NH]
  J[369] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[NO2]
  dqdci = +k_f * sc[11];
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[724] -= dqdci; // dwdot[NH]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[741] += dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[4];
  J[872] += dqdci; // dwdot[OH]/d[N2O]
  J[879] -= dqdci; // dwdot[NH]/d[N2O]
  J[891] -= dqdci; // dwdot[NO2]/d[N2O]
  J[896] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[958] += dqdT; // dwdot[N2O]/dT

  // reaction 64: NH + NO2 <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[23];
  k_f = 5900000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[21];
  Kc = exp(-g_RT[8] + g_RT[11] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[23]) + (h_RT[8] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // NO
  wdot[11] -= q; // NH
  wdot[21] += q; // HNO
  wdot[23] -= q; // NO2
  // d()/d[NO]
  dqdci = -k_r * sc[21];
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[259] -= dqdci; // dwdot[NH]/d[NO]
  J[269] += dqdci; // dwdot[HNO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[23];
  J[349] += dqdci; // dwdot[NO]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[362] += dqdci; // dwdot[HNO]/d[NH]
  J[364] -= dqdci; // dwdot[NO2]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[8];
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[662] -= dqdci; // dwdot[NH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[NO2]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[11];
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[724] -= dqdci; // dwdot[NH]/d[NO2]
  J[734] += dqdci; // dwdot[HNO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT

  // reaction 65: N + OH <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 38000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[8];
  Kc = exp(-g_RT[2] + g_RT[4] - g_RT[8] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[2] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // OH
  wdot[8] += q;  // NO
  wdot[12] -= q; // N
  // d()/d[H]
  dqdci = -k_r * sc[8];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[66] -= dqdci; // dwdot[OH]/d[H]
  J[70] += dqdci; // dwdot[NO]/d[H]
  J[74] -= dqdci; // dwdot[N]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[136] -= dqdci; // dwdot[N]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[250] += dqdci; // dwdot[H]/d[NO]
  J[252] -= dqdci; // dwdot[OH]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[260] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[4];
  J[374] += dqdci; // dwdot[H]/d[N]
  J[376] -= dqdci; // dwdot[OH]/d[N]
  J[380] += dqdci; // dwdot[NO]/d[N]
  J[384] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[942] -= dqdT; // dwdot[N]/dT

  // reaction 66: N + O2 <=> NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 5900 * exp(1 * logT - (3160.20066125364) * invT);
  dlnkfdT = 1 * invT + (3160.20066125364) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(g_RT[1] - g_RT[3] - g_RT[8] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[3] += q;  // O
  wdot[8] += q;  // NO
  wdot[12] -= q; // N
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[34] += dqdci; // dwdot[O]/d[O2]
  J[39] += dqdci; // dwdot[NO]/d[O2]
  J[43] -= dqdci; // dwdot[N]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[8];
  J[94] -= dqdci;  // dwdot[O2]/d[O]
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[105] -= dqdci; // dwdot[N]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[3];
  J[249] -= dqdci; // dwdot[O2]/d[NO]
  J[251] += dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[260] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[1];
  J[373] -= dqdci; // dwdot[O2]/d[N]
  J[375] += dqdci; // dwdot[O]/d[N]
  J[380] += dqdci; // dwdot[NO]/d[N]
  J[384] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[942] -= dqdT; // dwdot[N]/dT

  // reaction 67: N + NO <=> N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[12];
  k_f = 9400000 * exp(0.14 * logT);
  dlnkfdT = 0.14 * invT;
  // reverse
  phi_r = sc[3] * sc[29];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[12] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[12]) + (h_RT[3] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O
  wdot[8] -= q;  // NO
  wdot[12] -= q; // N
  wdot[29] += q; // N2
  // d()/d[O]
  dqdci = -k_r * sc[29];
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[101] -= dqdci; // dwdot[NO]/d[O]
  J[105] -= dqdci; // dwdot[N]/d[O]
  J[122] += dqdci; // dwdot[N2]/d[O]
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[251] += dqdci; // dwdot[O]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[260] -= dqdci; // dwdot[N]/d[NO]
  J[277] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[8];
  J[375] += dqdci; // dwdot[O]/d[N]
  J[380] -= dqdci; // dwdot[NO]/d[N]
  J[384] -= dqdci; // dwdot[N]/d[N]
  J[401] += dqdci; // dwdot[N2]/d[N]
  // d()/d[N2]
  dqdci = -k_r * sc[3];
  J[902] += dqdci; // dwdot[O]/d[N2]
  J[907] -= dqdci; // dwdot[NO]/d[N2]
  J[911] -= dqdci; // dwdot[N]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[942] -= dqdT; // dwdot[N]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 68: NNH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13];
  k_f = 1000000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[29];
  Kc = refC * exp(-g_RT[2] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13]) + (h_RT[2] + h_RT[29]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[NNH]/d[H]
  J[91] += dqdci; // dwdot[N2]/d[H]
  // d()/d[NNH]
  dqdci = +k_f;
  J[405] += dqdci; // dwdot[H]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[901] += dqdci; // dwdot[H]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 69: H + NNH <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[13];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[29];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[13]) + (h_RT[0] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[H2]
  dqdci = -k_r * sc[29];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[13] -= dqdci; // dwdot[NNH]/d[H2]
  J[29] += dqdci; // dwdot[N2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[NNH]/d[H]
  J[91] += dqdci; // dwdot[N2]/d[H]
  // d()/d[NNH]
  dqdci = +k_f * sc[2];
  J[403] += dqdci; // dwdot[H2]/d[NNH]
  J[405] -= dqdci; // dwdot[H]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[0];
  J[899] += dqdci; // dwdot[H2]/d[N2]
  J[901] -= dqdci; // dwdot[H]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 70: NNH + O <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 190000000 * exp(-0.274 * logT - (-11.0707666477038) * invT);
  dlnkfdT = -0.274 * invT + (-11.0707666477038) * invT2;
  // reverse
  phi_r = sc[2] * sc[28];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[13] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[2] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[3] -= q;  // O
  wdot[13] -= q; // NNH
  wdot[28] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[O]/d[H]
  J[75] -= dqdci; // dwdot[NNH]/d[H]
  J[90] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[95] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  J[121] += dqdci; // dwdot[N2O]/d[O]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[405] += dqdci; // dwdot[H]/d[NNH]
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[431] += dqdci; // dwdot[N2O]/d[NNH]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[870] += dqdci; // dwdot[H]/d[N2O]
  J[871] -= dqdci; // dwdot[O]/d[N2O]
  J[881] -= dqdci; // dwdot[NNH]/d[N2O]
  J[896] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[958] += dqdT; // dwdot[N2O]/dT

  // reaction 71: NNH + O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 12000000 * exp(0.145 * logT - (-109.198016479624) * invT);
  dlnkfdT = 0.145 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[4] * sc[29];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[4] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  J[122] += dqdci; // dwdot[N2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[29];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] -= dqdci; // dwdot[NNH]/d[OH]
  J[153] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[902] -= dqdci; // dwdot[O]/d[N2]
  J[903] += dqdci; // dwdot[OH]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 72: NNH + O <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 520000 * exp(0.381 * logT - (-205.81561631413) * invT);
  dlnkfdT = 0.381 * invT + (-205.81561631413) * invT2;
  // reverse
  phi_r = sc[8] * sc[11];
  Kc = exp(g_RT[3] - g_RT[8] - g_RT[11] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[8] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[11] += q; // NH
  wdot[13] -= q; // NNH
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[104] += dqdci; // dwdot[NH]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[11];
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[259] += dqdci; // dwdot[NH]/d[NO]
  J[261] -= dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH]
  dqdci = -k_r * sc[8];
  J[344] -= dqdci; // dwdot[O]/d[NH]
  J[349] += dqdci; // dwdot[NO]/d[NH]
  J[352] += dqdci; // dwdot[NH]/d[NH]
  J[354] -= dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[411] += dqdci; // dwdot[NO]/d[NNH]
  J[414] += dqdci; // dwdot[NH]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[941] += dqdT; // dwdot[NH]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 73: NNH + OH <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[29];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[6] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[137] -= dqdci; // dwdot[NNH]/d[OH]
  J[153] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[29];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[199] -= dqdci; // dwdot[NNH]/d[H2O]
  J[215] += dqdci; // dwdot[N2]/d[H2O]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[409] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[903] -= dqdci; // dwdot[OH]/d[N2]
  J[905] += dqdci; // dwdot[H2O]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 74: NNH + O2 <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 560000000 * exp(-0.385 * logT - (-6.54181665546136) * invT);
  dlnkfdT = -0.385 * invT + (-6.54181665546136) * invT2;
  // reverse
  phi_r = sc[5] * sc[29];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[13]) + (h_RT[5] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[5] += q;  // HO2
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[O2]
  dqdci = +k_f * sc[13];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[36] += dqdci; // dwdot[HO2]/d[O2]
  J[44] -= dqdci; // dwdot[NNH]/d[O2]
  J[60] += dqdci; // dwdot[N2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[29];
  J[156] -= dqdci; // dwdot[O2]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[168] -= dqdci; // dwdot[NNH]/d[HO2]
  J[184] += dqdci; // dwdot[N2]/d[HO2]
  // d()/d[NNH]
  dqdci = +k_f * sc[1];
  J[404] -= dqdci; // dwdot[O2]/d[NNH]
  J[408] += dqdci; // dwdot[HO2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[900] -= dqdci; // dwdot[O2]/d[N2]
  J[904] += dqdci; // dwdot[HO2]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 75: NH + NNH <=> N2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[29];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[13]) + (h_RT[10] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[NH2]
  dqdci = -k_r * sc[29];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[323] -= dqdci; // dwdot[NNH]/d[NH2]
  J[339] += dqdci; // dwdot[N2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[13];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[354] -= dqdci; // dwdot[NNH]/d[NH]
  J[370] += dqdci; // dwdot[N2]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[11];
  J[413] += dqdci; // dwdot[NH2]/d[NNH]
  J[414] -= dqdci; // dwdot[NH]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[10];
  J[909] += dqdci; // dwdot[NH2]/d[N2]
  J[910] -= dqdci; // dwdot[NH]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 76: NH2 + NNH <=> N2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[29];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[13] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (h_RT[9] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[13] -= q; // NNH
  wdot[29] += q; // N2
  // d()/d[NH3]
  dqdci = -k_r * sc[29];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[292] -= dqdci; // dwdot[NNH]/d[NH3]
  J[308] += dqdci; // dwdot[N2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[13];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[323] -= dqdci; // dwdot[NNH]/d[NH2]
  J[339] += dqdci; // dwdot[N2]/d[NH2]
  // d()/d[NNH]
  dqdci = +k_f * sc[10];
  J[412] += dqdci; // dwdot[NH3]/d[NNH]
  J[413] -= dqdci; // dwdot[NH2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[9];
  J[908] += dqdci; // dwdot[NH3]/d[N2]
  J[909] -= dqdci; // dwdot[NH2]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 77: NNH + NO <=> HNO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[21] * sc[29];
  Kc = exp(g_RT[8] + g_RT[13] - g_RT[21] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[13]) + (h_RT[21] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // NO
  wdot[13] -= q; // NNH
  wdot[21] += q; // HNO
  wdot[29] += q; // N2
  // d()/d[NO]
  dqdci = +k_f * sc[13];
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[261] -= dqdci; // dwdot[NNH]/d[NO]
  J[269] += dqdci; // dwdot[HNO]/d[NO]
  J[277] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[NNH]
  dqdci = +k_f * sc[8];
  J[411] -= dqdci; // dwdot[NO]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[424] += dqdci; // dwdot[HNO]/d[NNH]
  J[432] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[HNO]
  dqdci = -k_r * sc[29];
  J[659] -= dqdci; // dwdot[NO]/d[HNO]
  J[664] -= dqdci; // dwdot[NNH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[680] += dqdci; // dwdot[N2]/d[HNO]
  // d()/d[N2]
  dqdci = -k_r * sc[21];
  J[907] -= dqdci; // dwdot[NO]/d[N2]
  J[912] -= dqdci; // dwdot[NNH]/d[N2]
  J[920] += dqdci; // dwdot[HNO]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 79: H + NH2OH <=> H2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 480 * exp(1.5 * logT - (3144.60094461369) * invT);
  dlnkfdT = 1.5 * invT + (3144.60094461369) * invT2;
  // reverse
  phi_r = sc[0] * sc[20];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[0] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[H2]
  dqdci = -k_r * sc[20];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[18] -= dqdci; // dwdot[NH2OH]/d[H2]
  J[20] += dqdci; // dwdot[HNOH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[80] -= dqdci; // dwdot[NH2OH]/d[H]
  J[82] += dqdci; // dwdot[HNOH]/d[H]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[2];
  J[558] += dqdci; // dwdot[H2]/d[NH2OH]
  J[560] -= dqdci; // dwdot[H]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[0];
  J[620] += dqdci; // dwdot[H2]/d[HNOH]
  J[622] -= dqdci; // dwdot[H]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 80: H + NH2OH <=> H2 + H2NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 240 * exp(1.5 * logT - (2549.79884563251) * invT);
  dlnkfdT = 1.5 * invT + (2549.79884563251) * invT2;
  // reverse
  phi_r = sc[0] * sc[19];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[0] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[18] -= dqdci; // dwdot[NH2OH]/d[H2]
  J[19] += dqdci; // dwdot[H2NO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[80] -= dqdci; // dwdot[NH2OH]/d[H]
  J[81] += dqdci; // dwdot[H2NO]/d[H]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[2];
  J[558] += dqdci; // dwdot[H2]/d[NH2OH]
  J[560] -= dqdci; // dwdot[H]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[0];
  J[589] += dqdci; // dwdot[H2]/d[H2NO]
  J[591] -= dqdci; // dwdot[H]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 81: NH2OH + O <=> HNOH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 330 * exp(1.5 * logT - (1944.93241333524) * invT);
  dlnkfdT = 1.5 * invT + (1944.93241333524) * invT2;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[111] -= dqdci; // dwdot[NH2OH]/d[O]
  J[113] += dqdci; // dwdot[HNOH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[144] += dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[3];
  J[561] -= dqdci; // dwdot[O]/d[NH2OH]
  J[562] += dqdci; // dwdot[OH]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[4];
  J[623] -= dqdci; // dwdot[O]/d[HNOH]
  J[624] += dqdci; // dwdot[OH]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 82: NH2OH + O <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 170 * exp(1.5 * logT - (1514.68216407221) * invT);
  dlnkfdT = 1.5 * invT + (1514.68216407221) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[111] -= dqdci; // dwdot[NH2OH]/d[O]
  J[112] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[143] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[3];
  J[561] -= dqdci; // dwdot[O]/d[NH2OH]
  J[562] += dqdci; // dwdot[OH]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[592] -= dqdci; // dwdot[O]/d[H2NO]
  J[593] += dqdci; // dwdot[OH]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 83: NH2OH + OH <=> H2O + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 0.015 * exp(2.61 * logT - (-1779.87734695129) * invT);
  dlnkfdT = 2.61 * invT + (-1779.87734695129) * invT2;
  // reverse
  phi_r = sc[6] * sc[20];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[6] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[142] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[144] += dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[204] -= dqdci; // dwdot[NH2OH]/d[H2O]
  J[206] += dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[562] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[564] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[6];
  J[624] -= dqdci; // dwdot[OH]/d[HNOH]
  J[626] += dqdci; // dwdot[H2O]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 84: NH2OH + OH <=> H2NO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 0.15 * exp(2.28 * logT - (-652.168798882917) * invT);
  dlnkfdT = 2.28 * invT + (-652.168798882917) * invT2;
  // reverse
  phi_r = sc[6] * sc[19];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[6] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[142] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[143] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[204] -= dqdci; // dwdot[NH2OH]/d[H2O]
  J[205] += dqdci; // dwdot[H2NO]/d[H2O]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[562] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[564] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[6];
  J[593] -= dqdci; // dwdot[OH]/d[H2NO]
  J[595] += dqdci; // dwdot[H2O]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 85: NH2 + NH2OH <=> HNOH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 1.1e-07 * exp(4 * logT - (-48.8120165830578) * invT);
  dlnkfdT = 4 * invT + (-48.8120165830578) * invT2;
  // reverse
  phi_r = sc[9] * sc[20];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[9] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[NH3]
  dqdci = -k_r * sc[20];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[297] -= dqdci; // dwdot[NH2OH]/d[NH3]
  J[299] += dqdci; // dwdot[HNOH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[328] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[330] += dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[10];
  J[567] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[568] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[9];
  J[629] += dqdci; // dwdot[NH3]/d[HNOH]
  J[630] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 86: NH2 + NH2OH <=> H2NO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 9.5e-06 * exp(3.42 * logT - (-509.758482460181) * invT);
  dlnkfdT = 3.42 * invT + (-509.758482460181) * invT2;
  // reverse
  phi_r = sc[9] * sc[19];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[9] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[NH3]
  dqdci = -k_r * sc[19];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[297] -= dqdci; // dwdot[NH2OH]/d[NH3]
  J[298] += dqdci; // dwdot[H2NO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[328] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[329] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[10];
  J[567] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[568] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[9];
  J[598] += dqdci; // dwdot[NH3]/d[H2NO]
  J[599] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 87: NH + NH2OH <=> HNOH + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 2.9e-09 * exp(4.4 * logT - (787.030865318582) * invT);
  dlnkfdT = 4.4 * invT + (787.030865318582) * invT2;
  // reverse
  phi_r = sc[10] * sc[20];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[10] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[NH2]
  dqdci = -k_r * sc[20];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[328] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[330] += dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[18];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[359] -= dqdci; // dwdot[NH2OH]/d[NH]
  J[361] += dqdci; // dwdot[HNOH]/d[NH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[11];
  J[568] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[569] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[10];
  J[630] += dqdci; // dwdot[NH2]/d[HNOH]
  J[631] -= dqdci; // dwdot[NH]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 88: NH + NH2OH <=> H2NO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 1.5e-09 * exp(4.6 * logT - (1219.79719791064) * invT);
  dlnkfdT = 4.6 * invT + (1219.79719791064) * invT2;
  // reverse
  phi_r = sc[10] * sc[19];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[10] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[NH2]
  dqdci = -k_r * sc[19];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[328] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[329] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[18];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[359] -= dqdci; // dwdot[NH2OH]/d[NH]
  J[360] += dqdci; // dwdot[H2NO]/d[NH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[11];
  J[568] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[569] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[10];
  J[599] += dqdci; // dwdot[NH2]/d[H2NO]
  J[600] -= dqdci; // dwdot[NH]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 89: HO2 + NH2OH <=> H2O2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[18];
  k_f = 0.029 * exp(2.69 * logT - (4809.24167509571) * invT);
  dlnkfdT = 2.69 * invT + (4809.24167509571) * invT2;
  // reverse
  phi_r = sc[7] * sc[20];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[18]) + (h_RT[7] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[18] -= q; // NH2OH
  wdot[20] += q; // HNOH
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[173] -= dqdci; // dwdot[NH2OH]/d[HO2]
  J[175] += dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[20];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[235] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  J[237] += dqdci; // dwdot[HNOH]/d[H2O2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[5];
  J[563] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[565] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[7];
  J[625] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[627] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[638] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[950] += dqdT; // dwdot[HNOH]/dT

  // reaction 90: HO2 + NH2OH <=> H2NO + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[18];
  k_f = 0.014 * exp(2.69 * logT - (3229.64456113469) * invT);
  dlnkfdT = 2.69 * invT + (3229.64456113469) * invT2;
  // reverse
  phi_r = sc[7] * sc[19];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[18]) + (h_RT[7] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[18] -= q; // NH2OH
  wdot[19] += q; // H2NO
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[173] -= dqdci; // dwdot[NH2OH]/d[HO2]
  J[174] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[19];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[235] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  J[236] += dqdci; // dwdot[H2NO]/d[H2O2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[5];
  J[563] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[565] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[576] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[577] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[7];
  J[594] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[596] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[607] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[608] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[948] -= dqdT; // dwdot[NH2OH]/dT
  J[949] += dqdT; // dwdot[H2NO]/dT

  // reaction 93: H + H2NO <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 30 * exp(2 * logT - (1006.43333160944) * invT);
  dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[0] * sc[21];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[0] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[19] -= dqdci; // dwdot[H2NO]/d[H2]
  J[21] += dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[81] -= dqdci; // dwdot[H2NO]/d[H]
  J[83] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[589] += dqdci; // dwdot[H2]/d[H2NO]
  J[591] -= dqdci; // dwdot[H]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[651] += dqdci; // dwdot[H2]/d[HNO]
  J[653] -= dqdci; // dwdot[H]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 94: H + H2NO <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[10] += q; // NH2
  wdot[19] -= q; // H2NO
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[72] += dqdci; // dwdot[NH2]/d[H]
  J[81] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NH2]/d[OH]
  J[143] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[312] -= dqdci; // dwdot[H]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[329] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[591] -= dqdci; // dwdot[H]/d[H2NO]
  J[593] += dqdci; // dwdot[OH]/d[H2NO]
  J[599] += dqdci; // dwdot[NH2]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT

  // reaction 95: H2NO + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 30 * exp(2 * logT - (1006.43333160944) * invT);
  dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[112] -= dqdci; // dwdot[H2NO]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[143] -= dqdci; // dwdot[H2NO]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2NO]
  dqdci = +k_f * sc[3];
  J[592] -= dqdci; // dwdot[O]/d[H2NO]
  J[593] += dqdci; // dwdot[OH]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 96: H2NO + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[143] -= dqdci; // dwdot[H2NO]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[205] -= dqdci; // dwdot[H2NO]/d[H2O]
  J[207] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[H2NO]
  dqdci = +k_f * sc[4];
  J[593] -= dqdci; // dwdot[OH]/d[H2NO]
  J[595] += dqdci; // dwdot[H2O]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[657] += dqdci; // dwdot[H2O]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 97: H2NO + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[19];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[21];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[19]) + (h_RT[7] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[HO2]
  dqdci = +k_f * sc[19];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[174] -= dqdci; // dwdot[H2NO]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[236] -= dqdci; // dwdot[H2NO]/d[H2O2]
  J[238] += dqdci; // dwdot[HNO]/d[H2O2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[5];
  J[594] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[596] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[7];
  J[656] -= dqdci; // dwdot[HO2]/d[HNO]
  J[658] += dqdci; // dwdot[H2O2]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 98: H2NO + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 0.00023 * exp(2.994 * logT - (8303.07498577788) * invT);
  dlnkfdT = 2.994 * invT + (8303.07498577788) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[5] += q;  // HO2
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[36] += dqdci; // dwdot[HO2]/d[O2]
  J[50] -= dqdci; // dwdot[H2NO]/d[O2]
  J[52] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[21];
  J[156] -= dqdci; // dwdot[O2]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[174] -= dqdci; // dwdot[H2NO]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[1];
  J[590] -= dqdci; // dwdot[O2]/d[H2NO]
  J[594] += dqdci; // dwdot[HO2]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[652] -= dqdci; // dwdot[O2]/d[HNO]
  J[656] += dqdci; // dwdot[HO2]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 99: H2NO + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[19];
  k_f = 3000000 * exp(-(503.21666580472) * invT);
  dlnkfdT = (503.21666580472) * invT2;
  // reverse
  phi_r = sc[9] * sc[21];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[19]) + (h_RT[9] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[298] -= dqdci; // dwdot[H2NO]/d[NH3]
  J[300] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[19];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[329] -= dqdci; // dwdot[H2NO]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[10];
  J[598] += dqdci; // dwdot[NH3]/d[H2NO]
  J[599] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[660] += dqdci; // dwdot[NH3]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 100: H2NO + NO <=> 2 HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[19];
  k_f = 0.02 * exp(2 * logT - (6541.81665546136) * invT);
  dlnkfdT = 2 * invT + (6541.81665546136) * invT2;
  // reverse
  phi_r = (sc[21] * sc[21]);
  Kc = exp(g_RT[8] + g_RT[19] - 2.000000 * g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[19]) + (2.000000 * h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;      // NO
  wdot[19] -= q;     // H2NO
  wdot[21] += 2 * q; // HNO
  // d()/d[NO]
  dqdci = +k_f * sc[19];
  J[256] -= dqdci;     // dwdot[NO]/d[NO]
  J[267] -= dqdci;     // dwdot[H2NO]/d[NO]
  J[269] += 2 * dqdci; // dwdot[HNO]/d[NO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[8];
  J[597] -= dqdci;     // dwdot[NO]/d[H2NO]
  J[608] -= dqdci;     // dwdot[H2NO]/d[H2NO]
  J[610] += 2 * dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * 2.000000 * sc[21];
  J[659] -= dqdci;     // dwdot[NO]/d[HNO]
  J[670] -= dqdci;     // dwdot[H2NO]/d[HNO]
  J[672] += 2 * dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[938] -= dqdT;     // dwdot[NO]/dT
  J[949] -= dqdT;     // dwdot[H2NO]/dT
  J[951] += 2 * dqdT; // dwdot[HNO]/dT

  // reaction 101: H2NO + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[23];
  k_f = 0.044 * exp(2.64 * logT - (2032.99532985107) * invT);
  dlnkfdT = 2.64 * invT + (2032.99532985107) * invT2;
  // reverse
  phi_r = sc[21] * sc[24];
  Kc = exp(g_RT[19] - g_RT[21] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[23]) + (h_RT[21] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] -= q; // H2NO
  wdot[21] += q; // HNO
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[H2NO]
  dqdci = +k_f * sc[23];
  J[608] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[610] += dqdci; // dwdot[HNO]/d[H2NO]
  J[612] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[613] += dqdci; // dwdot[HONO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[24];
  J[670] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[NO2]/d[HNO]
  J[675] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[19];
  J[732] -= dqdci; // dwdot[H2NO]/d[NO2]
  J[734] += dqdci; // dwdot[HNO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[21];
  J[763] -= dqdci; // dwdot[H2NO]/d[HONO]
  J[765] += dqdci; // dwdot[HNO]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[949] -= dqdT; // dwdot[H2NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 103: H + HNOH <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[10] += q; // NH2
  wdot[20] -= q; // HNOH
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[72] += dqdci; // dwdot[NH2]/d[H]
  J[82] -= dqdci; // dwdot[HNOH]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NH2]/d[OH]
  J[144] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[312] -= dqdci; // dwdot[H]/d[NH2]
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[330] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[2];
  J[622] -= dqdci; // dwdot[H]/d[HNOH]
  J[624] += dqdci; // dwdot[OH]/d[HNOH]
  J[630] += dqdci; // dwdot[NH2]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT

  // reaction 104: H + HNOH <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 480 * exp(1.5 * logT - (190.215899674184) * invT);
  dlnkfdT = 1.5 * invT + (190.215899674184) * invT2;
  // reverse
  phi_r = sc[0] * sc[21];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[0] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[20] -= dqdci; // dwdot[HNOH]/d[H2]
  J[21] += dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[HNOH]/d[H]
  J[83] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[HNOH]
  dqdci = +k_f * sc[2];
  J[620] += dqdci; // dwdot[H2]/d[HNOH]
  J[622] -= dqdci; // dwdot[H]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[651] += dqdci; // dwdot[H2]/d[HNO]
  J[653] -= dqdci; // dwdot[H]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 105: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[113] -= dqdci; // dwdot[HNOH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[144] -= dqdci; // dwdot[HNOH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[3];
  J[623] -= dqdci; // dwdot[O]/d[HNOH]
  J[624] += dqdci; // dwdot[OH]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 106: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 330 * exp(1.5 * logT - (-180.15156635809) * invT);
  dlnkfdT = 1.5 * invT + (-180.15156635809) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[113] -= dqdci; // dwdot[HNOH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[144] -= dqdci; // dwdot[HNOH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[3];
  J[623] -= dqdci; // dwdot[O]/d[HNOH]
  J[624] += dqdci; // dwdot[OH]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 107: HNOH + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[144] -= dqdci; // dwdot[HNOH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[206] -= dqdci; // dwdot[HNOH]/d[H2O]
  J[207] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[HNOH]
  dqdci = +k_f * sc[4];
  J[624] -= dqdci; // dwdot[OH]/d[HNOH]
  J[626] += dqdci; // dwdot[H2O]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[657] += dqdci; // dwdot[H2O]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 108: HNOH + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[20];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[21];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[20]) + (h_RT[7] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[175] -= dqdci; // dwdot[HNOH]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[237] -= dqdci; // dwdot[HNOH]/d[H2O2]
  J[238] += dqdci; // dwdot[HNO]/d[H2O2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[5];
  J[625] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[627] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[7];
  J[656] -= dqdci; // dwdot[HO2]/d[HNO]
  J[658] += dqdci; // dwdot[H2O2]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 109: HNOH + HO2 <=> NH2OH + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[20];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[5] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[20]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[5] -= q;  // HO2
  wdot[18] += q; // NH2OH
  wdot[20] -= q; // HNOH
  // d()/d[O2]
  dqdci = -k_r * sc[18];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[49] += dqdci; // dwdot[NH2OH]/d[O2]
  J[51] -= dqdci; // dwdot[HNOH]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[173] += dqdci; // dwdot[NH2OH]/d[HO2]
  J[175] -= dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[NH2OH]
  dqdci = -k_r * sc[1];
  J[559] += dqdci; // dwdot[O2]/d[NH2OH]
  J[563] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[576] += dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[578] -= dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[5];
  J[621] += dqdci; // dwdot[O2]/d[HNOH]
  J[625] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[638] += dqdci; // dwdot[NH2OH]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[948] += dqdT; // dwdot[NH2OH]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT

  // reaction 110: HNOH + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 3000000 * exp(-(12580.416645118) * invT);
  dlnkfdT = (12580.416645118) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[5] += q;  // HO2
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[20];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[36] += dqdci; // dwdot[HO2]/d[O2]
  J[51] -= dqdci; // dwdot[HNOH]/d[O2]
  J[52] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[21];
  J[156] -= dqdci; // dwdot[O2]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[175] -= dqdci; // dwdot[HNOH]/d[HO2]
  J[176] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[1];
  J[621] -= dqdci; // dwdot[O2]/d[HNOH]
  J[625] += dqdci; // dwdot[HO2]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[652] -= dqdci; // dwdot[O2]/d[HNO]
  J[656] += dqdci; // dwdot[HO2]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 111: HNOH + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 1.8 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[9] * sc[21];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[9] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[299] -= dqdci; // dwdot[HNOH]/d[NH3]
  J[300] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[330] -= dqdci; // dwdot[HNOH]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[10];
  J[629] += dqdci; // dwdot[NH3]/d[HNOH]
  J[630] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[660] += dqdci; // dwdot[NH3]/d[HNO]
  J[661] -= dqdci; // dwdot[NH2]/d[HNO]
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 112: HNOH + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[23];
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[21] * sc[24];
  Kc = exp(g_RT[20] - g_RT[21] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[23]) + (h_RT[21] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[20] -= q; // HNOH
  wdot[21] += q; // HNO
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[HNOH]
  dqdci = +k_f * sc[23];
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[641] += dqdci; // dwdot[HNO]/d[HNOH]
  J[643] -= dqdci; // dwdot[NO2]/d[HNOH]
  J[644] += dqdci; // dwdot[HONO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[24];
  J[671] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[NO2]/d[HNO]
  J[675] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[20];
  J[733] -= dqdci; // dwdot[HNOH]/d[NO2]
  J[734] += dqdci; // dwdot[HNO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[21];
  J[764] -= dqdci; // dwdot[HNOH]/d[HONO]
  J[765] += dqdci; // dwdot[HNO]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 114: H + HNO <=> H2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 66000 * exp(0.94 * logT - (249.092249573336) * invT);
  dlnkfdT = 0.94 * invT + (249.092249573336) * invT2;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[8] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[8] += q;  // NO
  wdot[21] -= q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[8] += dqdci;  // dwdot[NO]/d[H2]
  J[21] -= dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[70] += dqdci; // dwdot[NO]/d[H]
  J[83] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[0];
  J[248] += dqdci; // dwdot[H2]/d[NO]
  J[250] -= dqdci; // dwdot[H]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[2];
  J[651] += dqdci; // dwdot[H2]/d[HNO]
  J[653] -= dqdci; // dwdot[H]/d[HNO]
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 115: HNO + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 23000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[8];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[8] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[4] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[8] += q;  // NO
  wdot[21] -= q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[114] -= dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[3];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 116: HNO + OH <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 1200 * exp(1.189 * logT - (168.074366378776) * invT);
  dlnkfdT = 1.189 * invT + (168.074366378776) * invT2;
  // reverse
  phi_r = sc[6] * sc[8];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[8] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[6] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[8] += q;  // NO
  wdot[21] -= q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[194] += dqdci; // dwdot[NO]/d[H2O]
  J[207] -= dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[252] -= dqdci; // dwdot[OH]/d[NO]
  J[254] += dqdci; // dwdot[H2O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[4];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[657] += dqdci; // dwdot[H2O]/d[HNO]
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 117: HNO + HO2 <=> HNO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[21];
  k_f = 0.002 * exp(2.36 * logT - (4518.88565892638) * invT);
  dlnkfdT = 2.36 * invT + (4518.88565892638) * invT2;
  // reverse
  phi_r = sc[4] * sc[25];
  Kc = exp(-g_RT[4] + g_RT[5] + g_RT[21] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[21]) + (h_RT[4] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // HO2
  wdot[21] -= q; // HNO
  wdot[25] += q; // HNO2
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  J[149] += dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[21];
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[176] -= dqdci; // dwdot[HNO]/d[HO2]
  J[180] += dqdci; // dwdot[HNO2]/d[HO2]
  // d()/d[HNO]
  dqdci = +k_f * sc[5];
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[656] -= dqdci; // dwdot[HO2]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  J[676] += dqdci; // dwdot[HNO2]/d[HNO]
  // d()/d[HNO2]
  dqdci = -k_r * sc[4];
  J[779] += dqdci; // dwdot[OH]/d[HNO2]
  J[780] -= dqdci; // dwdot[HO2]/d[HNO2]
  J[796] -= dqdci; // dwdot[HNO]/d[HNO2]
  J[800] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT
  J[955] += dqdT; // dwdot[HNO2]/dT

  // reaction 118: HNO + O2 <=> HO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 20000000 * exp(-(8051.46665287552) * invT);
  dlnkfdT = (8051.46665287552) * invT2;
  // reverse
  phi_r = sc[5] * sc[8];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[8] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[5] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[5] += q;  // HO2
  wdot[8] += q;  // NO
  wdot[21] -= q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[36] += dqdci; // dwdot[HO2]/d[O2]
  J[39] += dqdci; // dwdot[NO]/d[O2]
  J[52] -= dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[8];
  J[156] -= dqdci; // dwdot[O2]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[163] += dqdci; // dwdot[NO]/d[HO2]
  J[176] -= dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[249] -= dqdci; // dwdot[O2]/d[NO]
  J[253] += dqdci; // dwdot[HO2]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[1];
  J[652] -= dqdci; // dwdot[O2]/d[HNO]
  J[656] += dqdci; // dwdot[HO2]/d[HNO]
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 119: 2 HNO <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[21] * sc[21]);
  k_f = 900 * exp(-(1559.97166399463) * invT);
  dlnkfdT = (1559.97166399463) * invT2;
  // reverse
  phi_r = sc[6] * sc[28];
  Kc = exp(-g_RT[6] + 2.000000 * g_RT[21] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[21]) + (h_RT[6] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;      // H2O
  wdot[21] -= 2 * q; // HNO
  wdot[28] += q;     // N2O
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[192] += dqdci;      // dwdot[H2O]/d[H2O]
  J[207] += -2 * dqdci; // dwdot[HNO]/d[H2O]
  J[214] += dqdci;      // dwdot[N2O]/d[H2O]
  // d()/d[HNO]
  dqdci = +k_f * 2.000000 * sc[21];
  J[657] += dqdci;      // dwdot[H2O]/d[HNO]
  J[672] += -2 * dqdci; // dwdot[HNO]/d[HNO]
  J[679] += dqdci;      // dwdot[N2O]/d[HNO]
  // d()/d[N2O]
  dqdci = -k_r * sc[6];
  J[874] += dqdci;      // dwdot[H2O]/d[N2O]
  J[889] += -2 * dqdci; // dwdot[HNO]/d[N2O]
  J[896] += dqdci;      // dwdot[N2O]/d[N2O]
  // d()/dT
  J[936] += dqdT;      // dwdot[H2O]/dT
  J[951] += -2 * dqdT; // dwdot[HNO]/dT
  J[958] += dqdT;      // dwdot[N2O]/dT

  // reaction 120: HNO + NO2 <=> HONO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21] * sc[23];
  k_f = 0.044 * exp(2.64 * logT - (2032.99532985107) * invT);
  dlnkfdT = 2.64 * invT + (2032.99532985107) * invT2;
  // reverse
  phi_r = sc[8] * sc[24];
  Kc = exp(-g_RT[8] + g_RT[21] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21] + h_RT[23]) + (h_RT[8] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // NO
  wdot[21] -= q; // HNO
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[NO]
  dqdci = -k_r * sc[24];
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] -= dqdci; // dwdot[HNO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  J[272] += dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[23];
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[NO2]/d[HNO]
  J[675] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[21];
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[734] -= dqdci; // dwdot[HNO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[8];
  J[752] += dqdci; // dwdot[NO]/d[HONO]
  J[765] -= dqdci; // dwdot[HNO]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 121: HO2 + NO <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 2100000 * exp(-(-250.098682904946) * invT);
  dlnkfdT = (-250.098682904946) * invT2;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(-g_RT[4] + g_RT[5] + g_RT[8] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // HO2
  wdot[8] -= q;  // NO
  wdot[23] += q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[132] -= dqdci; // dwdot[NO]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[8];
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[163] -= dqdci; // dwdot[NO]/d[HO2]
  J[178] += dqdci; // dwdot[NO2]/d[HO2]
  // d()/d[NO]
  dqdci = +k_f * sc[5];
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[253] -= dqdci; // dwdot[HO2]/d[NO]
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[271] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[718] -= dqdci; // dwdot[HO2]/d[NO2]
  J[721] -= dqdci; // dwdot[NO]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[953] += dqdT; // dwdot[NO2]/dT

  // reaction 123: H + NO2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[23];
  k_f = 130000000 * exp(-(182.164433021309) * invT);
  dlnkfdT = (182.164433021309) * invT2;
  // reverse
  phi_r = sc[4] * sc[8];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[8] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[23]) + (h_RT[4] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[8] += q;  // NO
  wdot[23] -= q; // NO2
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[70] += dqdci; // dwdot[NO]/d[H]
  J[85] -= dqdci; // dwdot[NO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[147] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[250] -= dqdci; // dwdot[H]/d[NO]
  J[252] += dqdci; // dwdot[OH]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[715] -= dqdci; // dwdot[H]/d[NO2]
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT

  // reaction 124: NO2 + O <=> NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 110000000 * exp(-0.52 * logT);
  dlnkfdT = -0.52 * invT;
  // reverse
  phi_r = sc[1] * sc[8];
  Kc = exp(-g_RT[1] + g_RT[3] - g_RT[8] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[1] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[23] -= q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[8];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[34] -= dqdci; // dwdot[O]/d[O2]
  J[39] += dqdci; // dwdot[NO]/d[O2]
  J[54] -= dqdci; // dwdot[NO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[94] += dqdci;  // dwdot[O2]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[116] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[249] += dqdci; // dwdot[O2]/d[NO]
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[3];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[716] -= dqdci; // dwdot[O]/d[NO2]
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT

  // reaction 125: HO2 + NO2 <=> HONO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[23];
  k_f = 1.9e-06 * exp(3.32 * logT - (1531.79153070957) * invT);
  dlnkfdT = 3.32 * invT + (1531.79153070957) * invT2;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[23]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[5] -= q;  // HO2
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[O2]
  dqdci = -k_r * sc[24];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[54] -= dqdci; // dwdot[NO2]/d[O2]
  J[55] += dqdci; // dwdot[HONO]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[178] -= dqdci; // dwdot[NO2]/d[HO2]
  J[179] += dqdci; // dwdot[HONO]/d[HO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[5];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[718] -= dqdci; // dwdot[HO2]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[1];
  J[745] += dqdci; // dwdot[O2]/d[HONO]
  J[749] -= dqdci; // dwdot[HO2]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 126: HO2 + NO2 <=> HNO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[23];
  k_f = 1.9e-05 * exp(3.26 * logT - (2507.52864570492) * invT);
  dlnkfdT = 3.26 * invT + (2507.52864570492) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[23] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[23]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[5] -= q;  // HO2
  wdot[23] -= q; // NO2
  wdot[25] += q; // HNO2
  // d()/d[O2]
  dqdci = -k_r * sc[25];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[54] -= dqdci; // dwdot[NO2]/d[O2]
  J[56] += dqdci; // dwdot[HNO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[178] -= dqdci; // dwdot[NO2]/d[HO2]
  J[180] += dqdci; // dwdot[HNO2]/d[HO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[5];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[718] -= dqdci; // dwdot[HO2]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[738] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[1];
  J[776] += dqdci; // dwdot[O2]/d[HNO2]
  J[780] -= dqdci; // dwdot[HO2]/d[HNO2]
  J[798] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[800] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HNO2]/dT

  // reaction 127: 2 NO2 <=> 2 NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[23] * sc[23]);
  k_f = 4500000 * exp(-(13888.2767595445) * invT);
  dlnkfdT = (13888.2767595445) * invT2;
  // reverse
  phi_r = sc[1] * (sc[8] * sc[8]);
  Kc = refC * exp(-g_RT[1] - 2.000000 * g_RT[8] + 2.000000 * g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[23]) + (h_RT[1] + 2.000000 * h_RT[8]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // O2
  wdot[8] += 2 * q;  // NO
  wdot[23] -= 2 * q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[8] * sc[8];
  J[32] += dqdci;      // dwdot[O2]/d[O2]
  J[39] += 2 * dqdci;  // dwdot[NO]/d[O2]
  J[54] += -2 * dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[1] * 2.000000 * sc[8];
  J[249] += dqdci;      // dwdot[O2]/d[NO]
  J[256] += 2 * dqdci;  // dwdot[NO]/d[NO]
  J[271] += -2 * dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[23];
  J[714] += dqdci;      // dwdot[O2]/d[NO2]
  J[721] += 2 * dqdci;  // dwdot[NO]/d[NO2]
  J[736] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[931] += dqdT;      // dwdot[O2]/dT
  J[938] += 2 * dqdT;  // dwdot[NO]/dT
  J[953] += -2 * dqdT; // dwdot[NO2]/dT

  // reaction 128: 2 NO2 <=> NO + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[23] * sc[23]);
  k_f = 9600 * exp(0.73 * logT - (10517.2283153186) * invT);
  dlnkfdT = 0.73 * invT + (10517.2283153186) * invT2;
  // reverse
  phi_r = sc[8] * sc[26];
  Kc = exp(-g_RT[8] + 2.000000 * g_RT[23] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[23]) + (h_RT[8] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;      // NO
  wdot[23] -= 2 * q; // NO2
  wdot[26] += q;     // NO3
  // d()/d[NO]
  dqdci = -k_r * sc[26];
  J[256] += dqdci;      // dwdot[NO]/d[NO]
  J[271] += -2 * dqdci; // dwdot[NO2]/d[NO]
  J[274] += dqdci;      // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[23];
  J[721] += dqdci;      // dwdot[NO]/d[NO2]
  J[736] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  J[739] += dqdci;      // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = -k_r * sc[8];
  J[814] += dqdci;      // dwdot[NO]/d[NO3]
  J[829] += -2 * dqdci; // dwdot[NO2]/d[NO3]
  J[832] += dqdci;      // dwdot[NO3]/d[NO3]
  // d()/dT
  J[938] += dqdT;      // dwdot[NO]/dT
  J[953] += -2 * dqdT; // dwdot[NO2]/dT
  J[956] += dqdT;      // dwdot[NO3]/dT

  // reaction 130: H2 + NO2 <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[23];
  k_f = 1.8e-05 * exp(3.51 * logT - (13234.5983106641) * invT);
  dlnkfdT = 3.51 * invT + (13234.5983106641) * invT2;
  // reverse
  phi_r = sc[2] * sc[24];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[23]) + (h_RT[2] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[2] += q;  // H
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[H2]
  dqdci = +k_f * sc[23];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[2] += dqdci;  // dwdot[H]/d[H2]
  J[23] -= dqdci; // dwdot[NO2]/d[H2]
  J[24] += dqdci; // dwdot[HONO]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[85] -= dqdci; // dwdot[NO2]/d[H]
  J[86] += dqdci; // dwdot[HONO]/d[H]
  // d()/d[NO2]
  dqdci = +k_f * sc[0];
  J[713] -= dqdci; // dwdot[H2]/d[NO2]
  J[715] += dqdci; // dwdot[H]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[2];
  J[744] -= dqdci; // dwdot[H2]/d[HONO]
  J[746] += dqdci; // dwdot[H]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 131: H2 + NO2 <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[23];
  k_f = 2.4e-05 * exp(3.62 * logT - (18015.156635809) * invT);
  dlnkfdT = 3.62 * invT + (18015.156635809) * invT2;
  // reverse
  phi_r = sc[2] * sc[24];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[23]) + (h_RT[2] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[2] += q;  // H
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[H2]
  dqdci = +k_f * sc[23];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[2] += dqdci;  // dwdot[H]/d[H2]
  J[23] -= dqdci; // dwdot[NO2]/d[H2]
  J[24] += dqdci; // dwdot[HONO]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[85] -= dqdci; // dwdot[NO2]/d[H]
  J[86] += dqdci; // dwdot[HONO]/d[H]
  // d()/d[NO2]
  dqdci = +k_f * sc[0];
  J[713] -= dqdci; // dwdot[H2]/d[NO2]
  J[715] += dqdci; // dwdot[H]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[2];
  J[744] -= dqdci; // dwdot[H2]/d[HONO]
  J[746] += dqdci; // dwdot[H]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 132: H + HONO <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 56000 * exp(0.86 * logT - (2516.0833290236) * invT);
  dlnkfdT = 0.86 * invT + (2516.0833290236) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[21] += q; // HNO
  wdot[24] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[83] += dqdci; // dwdot[HNO]/d[H]
  J[86] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[148] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[653] -= dqdci; // dwdot[H]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[675] -= dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[746] -= dqdci; // dwdot[H]/d[HONO]
  J[748] += dqdci; // dwdot[OH]/d[HONO]
  J[765] += dqdci; // dwdot[HNO]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 133: H + HONO <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 8.1 * exp(1.89 * logT - (1937.38416334817) * invT);
  dlnkfdT = 1.89 * invT + (1937.38416334817) * invT2;
  // reverse
  phi_r = sc[6] * sc[8];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[8] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[6] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // H2O
  wdot[8] += q;  // NO
  wdot[24] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[68] += dqdci; // dwdot[H2O]/d[H]
  J[70] += dqdci; // dwdot[NO]/d[H]
  J[86] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[188] -= dqdci; // dwdot[H]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[194] += dqdci; // dwdot[NO]/d[H2O]
  J[210] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[250] -= dqdci; // dwdot[H]/d[NO]
  J[254] += dqdci; // dwdot[H2O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[272] -= dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[746] -= dqdci; // dwdot[H]/d[HONO]
  J[750] += dqdci; // dwdot[H2O]/d[HONO]
  J[752] += dqdci; // dwdot[NO]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 134: HONO + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[24];
  k_f = 12000000 * exp(-(2999.17132819613) * invT);
  dlnkfdT = (2999.17132819613) * invT2;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[24]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[23] += q; // NO2
  wdot[24] -= q; // HONO
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[116] += dqdci; // dwdot[NO2]/d[O]
  J[117] -= dqdci; // dwdot[HONO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[148] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[716] -= dqdci; // dwdot[O]/d[NO2]
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[737] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[3];
  J[747] -= dqdci; // dwdot[O]/d[HONO]
  J[748] += dqdci; // dwdot[OH]/d[HONO]
  J[767] += dqdci; // dwdot[NO2]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 135: HONO + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  dlnkfdT = (-261.672666218454) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[23] += q; // NO2
  wdot[24] -= q; // HONO
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[148] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] += dqdci; // dwdot[NO2]/d[H2O]
  J[210] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[717] -= dqdci; // dwdot[OH]/d[NO2]
  J[719] += dqdci; // dwdot[H2O]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[737] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[4];
  J[748] -= dqdci; // dwdot[OH]/d[HONO]
  J[750] += dqdci; // dwdot[H2O]/d[HONO]
  J[767] += dqdci; // dwdot[NO2]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT

  // reaction 136: HONO + NO2 <=> HONO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[24];
  k_f = 200000 * exp(-(16455.1849718143) * invT);
  dlnkfdT = (16455.1849718143) * invT2;
  // reverse
  phi_r = sc[8] * sc[27];
  Kc = exp(-g_RT[8] + g_RT[23] + g_RT[24] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[24]) + (h_RT[8] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // NO
  wdot[23] -= q; // NO2
  wdot[24] -= q; // HONO
  wdot[27] += q; // HONO2
  // d()/d[NO]
  dqdci = -k_r * sc[27];
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[271] -= dqdci; // dwdot[NO2]/d[NO]
  J[272] -= dqdci; // dwdot[HONO]/d[NO]
  J[275] += dqdci; // dwdot[HONO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[24];
  J[721] += dqdci; // dwdot[NO]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] -= dqdci; // dwdot[HONO]/d[NO2]
  J[740] += dqdci; // dwdot[HONO2]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[23];
  J[752] += dqdci; // dwdot[NO]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] -= dqdci; // dwdot[HONO]/d[HONO]
  J[771] += dqdci; // dwdot[HONO2]/d[HONO]
  // d()/d[HONO2]
  dqdci = -k_r * sc[8];
  J[845] += dqdci; // dwdot[NO]/d[HONO2]
  J[860] -= dqdci; // dwdot[NO2]/d[HONO2]
  J[861] -= dqdci; // dwdot[HONO]/d[HONO2]
  J[864] += dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] -= dqdT; // dwdot[HONO]/dT
  J[957] += dqdT; // dwdot[HONO2]/dT

  // reaction 137: 2 HONO <=> H2O + NO + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[24] * sc[24]);
  k_f = 3.5e-07 * exp(3.64 * logT - (6109.0503228693) * invT);
  dlnkfdT = 3.64 * invT + (6109.0503228693) * invT2;
  // reverse
  phi_r = sc[6] * sc[8] * sc[23];
  Kc = refC * exp(-g_RT[6] - g_RT[8] - g_RT[23] + 2.000000 * g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[24]) + (h_RT[6] + h_RT[8] + h_RT[23]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;      // H2O
  wdot[8] += q;      // NO
  wdot[23] += q;     // NO2
  wdot[24] -= 2 * q; // HONO
  // d()/d[H2O]
  dqdci = -k_r * sc[8] * sc[23];
  J[192] += dqdci;      // dwdot[H2O]/d[H2O]
  J[194] += dqdci;      // dwdot[NO]/d[H2O]
  J[209] += dqdci;      // dwdot[NO2]/d[H2O]
  J[210] += -2 * dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[6] * sc[23];
  J[254] += dqdci;      // dwdot[H2O]/d[NO]
  J[256] += dqdci;      // dwdot[NO]/d[NO]
  J[271] += dqdci;      // dwdot[NO2]/d[NO]
  J[272] += -2 * dqdci; // dwdot[HONO]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[6] * sc[8];
  J[719] += dqdci;      // dwdot[H2O]/d[NO2]
  J[721] += dqdci;      // dwdot[NO]/d[NO2]
  J[736] += dqdci;      // dwdot[NO2]/d[NO2]
  J[737] += -2 * dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * 2.000000 * sc[24];
  J[750] += dqdci;      // dwdot[H2O]/d[HONO]
  J[752] += dqdci;      // dwdot[NO]/d[HONO]
  J[767] += dqdci;      // dwdot[NO2]/d[HONO]
  J[768] += -2 * dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[936] += dqdT;      // dwdot[H2O]/dT
  J[938] += dqdT;      // dwdot[NO]/dT
  J[953] += dqdT;      // dwdot[NO2]/dT
  J[954] += -2 * dqdT; // dwdot[HONO]/dT

  // reaction 139: H2 + NO2 <=> H + HNO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[23];
  k_f = 0.00024 * exp(3.15 * logT - (15650.0383065268) * invT);
  dlnkfdT = 3.15 * invT + (15650.0383065268) * invT2;
  // reverse
  phi_r = sc[2] * sc[25];
  Kc = exp(g_RT[0] - g_RT[2] + g_RT[23] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[23]) + (h_RT[2] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[2] += q;  // H
  wdot[23] -= q; // NO2
  wdot[25] += q; // HNO2
  // d()/d[H2]
  dqdci = +k_f * sc[23];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[2] += dqdci;  // dwdot[H]/d[H2]
  J[23] -= dqdci; // dwdot[NO2]/d[H2]
  J[25] += dqdci; // dwdot[HNO2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[25];
  J[62] -= dqdci; // dwdot[H2]/d[H]
  J[64] += dqdci; // dwdot[H]/d[H]
  J[85] -= dqdci; // dwdot[NO2]/d[H]
  J[87] += dqdci; // dwdot[HNO2]/d[H]
  // d()/d[NO2]
  dqdci = +k_f * sc[0];
  J[713] -= dqdci; // dwdot[H2]/d[NO2]
  J[715] += dqdci; // dwdot[H]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[738] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[2];
  J[775] -= dqdci; // dwdot[H2]/d[HNO2]
  J[777] += dqdci; // dwdot[H]/d[HNO2]
  J[798] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[800] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[930] -= dqdT; // dwdot[H2]/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HNO2]/dT

  // reaction 140: HNO2 + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[25];
  k_f = 170 * exp(1.5 * logT - (1006.43333160944) * invT);
  dlnkfdT = 1.5 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[25]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[23] += q; // NO2
  wdot[25] -= q; // HNO2
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[116] += dqdci; // dwdot[NO2]/d[O]
  J[118] -= dqdci; // dwdot[HNO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[149] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[716] -= dqdci; // dwdot[O]/d[NO2]
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[738] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[3];
  J[778] -= dqdci; // dwdot[O]/d[HNO2]
  J[779] += dqdci; // dwdot[OH]/d[HNO2]
  J[798] += dqdci; // dwdot[NO2]/d[HNO2]
  J[800] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HNO2]/dT

  // reaction 141: HNO2 + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[25];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[23] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[25]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[23] += q; // NO2
  wdot[25] -= q; // HNO2
  // d()/d[OH]
  dqdci = +k_f * sc[25];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[149] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] += dqdci; // dwdot[NO2]/d[H2O]
  J[211] -= dqdci; // dwdot[HNO2]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[717] -= dqdci; // dwdot[OH]/d[NO2]
  J[719] += dqdci; // dwdot[H2O]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[738] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[4];
  J[779] -= dqdci; // dwdot[OH]/d[HNO2]
  J[781] += dqdci; // dwdot[H2O]/d[HNO2]
  J[798] += dqdci; // dwdot[NO2]/d[HNO2]
  J[800] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HNO2]/dT

  // reaction 143: H + NO3 <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[26];
  k_f = 60000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[23] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[26]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[23] += q; // NO2
  wdot[26] -= q; // NO3
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[85] += dqdci; // dwdot[NO2]/d[H]
  J[88] -= dqdci; // dwdot[NO3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[150] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[715] -= dqdci; // dwdot[H]/d[NO2]
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[739] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[2];
  J[808] -= dqdci; // dwdot[H]/d[NO3]
  J[810] += dqdci; // dwdot[OH]/d[NO3]
  J[829] += dqdci; // dwdot[NO2]/d[NO3]
  J[832] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[NO3]/dT

  // reaction 144: NO3 + O <=> NO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[26];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[3] - g_RT[23] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[26]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[3] -= q;  // O
  wdot[23] += q; // NO2
  wdot[26] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[23];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[34] -= dqdci; // dwdot[O]/d[O2]
  J[54] += dqdci; // dwdot[NO2]/d[O2]
  J[57] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[94] += dqdci;  // dwdot[O2]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[116] += dqdci; // dwdot[NO2]/d[O]
  J[119] -= dqdci; // dwdot[NO3]/d[O]
  // d()/d[NO2]
  dqdci = -k_r * sc[1];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[716] -= dqdci; // dwdot[O]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[739] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[3];
  J[807] += dqdci; // dwdot[O2]/d[NO3]
  J[809] -= dqdci; // dwdot[O]/d[NO3]
  J[829] += dqdci; // dwdot[NO2]/d[NO3]
  J[832] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[NO3]/dT

  // reaction 145: NO3 + OH <=> HO2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[26];
  k_f = 14000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[26]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // HO2
  wdot[23] += q; // NO2
  wdot[26] -= q; // NO3
  // d()/d[OH]
  dqdci = +k_f * sc[26];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[HO2]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[150] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[23];
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[178] += dqdci; // dwdot[NO2]/d[HO2]
  J[181] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[717] -= dqdci; // dwdot[OH]/d[NO2]
  J[718] += dqdci; // dwdot[HO2]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[739] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[4];
  J[810] -= dqdci; // dwdot[OH]/d[NO3]
  J[811] += dqdci; // dwdot[HO2]/d[NO3]
  J[829] += dqdci; // dwdot[NO2]/d[NO3]
  J[832] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[NO3]/dT

  // reaction 146: HO2 + NO3 <=> NO2 + O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[26];
  k_f = 1500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[4] * sc[23];
  Kc = refC * exp(-g_RT[1] - g_RT[4] + g_RT[5] - g_RT[23] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[5] + h_RT[26]) + (h_RT[1] + h_RT[4] + h_RT[23]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[4] += q;  // OH
  wdot[5] -= q;  // HO2
  wdot[23] += q; // NO2
  wdot[26] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[4] * sc[23];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[35] += dqdci; // dwdot[OH]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[54] += dqdci; // dwdot[NO2]/d[O2]
  J[57] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[1] * sc[23];
  J[125] += dqdci; // dwdot[O2]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[HO2]/d[OH]
  J[147] += dqdci; // dwdot[NO2]/d[OH]
  J[150] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[26];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[178] += dqdci; // dwdot[NO2]/d[HO2]
  J[181] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[NO2]
  dqdci = -k_r * sc[1] * sc[4];
  J[714] += dqdci; // dwdot[O2]/d[NO2]
  J[717] += dqdci; // dwdot[OH]/d[NO2]
  J[718] -= dqdci; // dwdot[HO2]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[739] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[5];
  J[807] += dqdci; // dwdot[O2]/d[NO3]
  J[810] += dqdci; // dwdot[OH]/d[NO3]
  J[811] -= dqdci; // dwdot[HO2]/d[NO3]
  J[829] += dqdci; // dwdot[NO2]/d[NO3]
  J[832] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[NO3]/dT

  // reaction 149: H + HONO2 <=> H2 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 560 * exp(1.5 * logT - (8252.7533191974) * invT);
  dlnkfdT = 1.5 * invT + (8252.7533191974) * invT2;
  // reverse
  phi_r = sc[0] * sc[26];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[0] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[26] += q; // NO3
  wdot[27] -= q; // HONO2
  // d()/d[H2]
  dqdci = -k_r * sc[26];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[26] += dqdci; // dwdot[NO3]/d[H2]
  J[27] -= dqdci; // dwdot[HONO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[88] += dqdci; // dwdot[NO3]/d[H]
  J[89] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[NO3]
  dqdci = -k_r * sc[0];
  J[806] += dqdci; // dwdot[H2]/d[NO3]
  J[808] -= dqdci; // dwdot[H]/d[NO3]
  J[832] += dqdci; // dwdot[NO3]/d[NO3]
  J[833] -= dqdci; // dwdot[HONO2]/d[NO3]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[837] += dqdci; // dwdot[H2]/d[HONO2]
  J[839] -= dqdci; // dwdot[H]/d[HONO2]
  J[863] += dqdci; // dwdot[NO3]/d[HONO2]
  J[864] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[956] += dqdT; // dwdot[NO3]/dT
  J[957] -= dqdT; // dwdot[HONO2]/dT

  // reaction 150: H + HONO2 <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 6.1e-05 * exp(3.3 * logT - (3162.71674458266) * invT);
  dlnkfdT = 3.3 * invT + (3162.71674458266) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // H2O
  wdot[23] += q; // NO2
  wdot[27] -= q; // HONO2
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[68] += dqdci; // dwdot[H2O]/d[H]
  J[85] += dqdci; // dwdot[NO2]/d[H]
  J[89] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[188] -= dqdci; // dwdot[H]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] += dqdci; // dwdot[NO2]/d[H2O]
  J[213] -= dqdci; // dwdot[HONO2]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[715] -= dqdci; // dwdot[H]/d[NO2]
  J[719] += dqdci; // dwdot[H2O]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[740] -= dqdci; // dwdot[HONO2]/d[NO2]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[839] -= dqdci; // dwdot[H]/d[HONO2]
  J[843] += dqdci; // dwdot[H2O]/d[HONO2]
  J[860] += dqdci; // dwdot[NO2]/d[HONO2]
  J[864] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[957] -= dqdT; // dwdot[HONO2]/dT

  // reaction 151: H + HONO2 <=> HONO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 0.38 * exp(2.3 * logT - (3510.43946065372) * invT);
  dlnkfdT = 2.3 * invT + (3510.43946065372) * invT2;
  // reverse
  phi_r = sc[4] * sc[24];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[24] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[4] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[24] += q; // HONO
  wdot[27] -= q; // HONO2
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[86] += dqdci; // dwdot[HONO]/d[H]
  J[89] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[24];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[148] += dqdci; // dwdot[HONO]/d[OH]
  J[151] -= dqdci; // dwdot[HONO2]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[4];
  J[746] -= dqdci; // dwdot[H]/d[HONO]
  J[748] += dqdci; // dwdot[OH]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  J[771] -= dqdci; // dwdot[HONO2]/d[HONO]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[839] -= dqdci; // dwdot[H]/d[HONO2]
  J[841] += dqdci; // dwdot[OH]/d[HONO2]
  J[861] += dqdci; // dwdot[HONO]/d[HONO2]
  J[864] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[954] += dqdT; // dwdot[HONO]/dT
  J[957] -= dqdT; // dwdot[HONO2]/dT

  // reaction 152: HONO2 + OH <=> H2O + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[27];
  k_f = 10000 * exp(-(-623.988665597852) * invT);
  dlnkfdT = (-623.988665597852) * invT2;
  // reverse
  phi_r = sc[6] * sc[26];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[27]) + (h_RT[6] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[26] += q; // NO3
  wdot[27] -= q; // HONO2
  // d()/d[OH]
  dqdci = +k_f * sc[27];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[150] += dqdci; // dwdot[NO3]/d[OH]
  J[151] -= dqdci; // dwdot[HONO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[26];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[212] += dqdci; // dwdot[NO3]/d[H2O]
  J[213] -= dqdci; // dwdot[HONO2]/d[H2O]
  // d()/d[NO3]
  dqdci = -k_r * sc[6];
  J[810] -= dqdci; // dwdot[OH]/d[NO3]
  J[812] += dqdci; // dwdot[H2O]/d[NO3]
  J[832] += dqdci; // dwdot[NO3]/d[NO3]
  J[833] -= dqdci; // dwdot[HONO2]/d[NO3]
  // d()/d[HONO2]
  dqdci = +k_f * sc[4];
  J[841] -= dqdci; // dwdot[OH]/d[HONO2]
  J[843] += dqdci; // dwdot[H2O]/d[HONO2]
  J[863] += dqdci; // dwdot[NO3]/d[HONO2]
  J[864] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[956] += dqdT; // dwdot[NO3]/dT
  J[957] -= dqdT; // dwdot[HONO2]/dT

  // reaction 154: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 64 * exp(1.835 * logT - (6789.39925503728) * invT);
  dlnkfdT = 1.835 * invT + (6789.39925503728) * invT2;
  // reverse
  phi_r = sc[4] * sc[29];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[4] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[4] += q;  // OH
  wdot[28] -= q; // N2O
  wdot[29] += q; // N2
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[66] += dqdci; // dwdot[OH]/d[H]
  J[90] -= dqdci; // dwdot[N2O]/d[H]
  J[91] += dqdci; // dwdot[N2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[29];
  J[126] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[152] -= dqdci; // dwdot[N2O]/d[OH]
  J[153] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[870] -= dqdci; // dwdot[H]/d[N2O]
  J[872] += dqdci; // dwdot[OH]/d[N2O]
  J[896] -= dqdci; // dwdot[N2O]/d[N2O]
  J[897] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[901] -= dqdci; // dwdot[H]/d[N2]
  J[903] += dqdci; // dwdot[OH]/d[N2]
  J[927] -= dqdci; // dwdot[N2O]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 155: N2O + O <=> 2 NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[28];
  k_f = 92000000 * exp(-(13928.5340928088) * invT);
  dlnkfdT = (13928.5340928088) * invT2;
  // reverse
  phi_r = (sc[8] * sc[8]);
  Kc = exp(g_RT[3] - 2.000000 * g_RT[8] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[28]) + (2.000000 * h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;     // O
  wdot[8] += 2 * q; // NO
  wdot[28] -= q;    // N2O
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[96] -= dqdci;      // dwdot[O]/d[O]
  J[101] += 2 * dqdci; // dwdot[NO]/d[O]
  J[121] -= dqdci;     // dwdot[N2O]/d[O]
  // d()/d[NO]
  dqdci = -k_r * 2.000000 * sc[8];
  J[251] -= dqdci;     // dwdot[O]/d[NO]
  J[256] += 2 * dqdci; // dwdot[NO]/d[NO]
  J[276] -= dqdci;     // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[3];
  J[871] -= dqdci;     // dwdot[O]/d[N2O]
  J[876] += 2 * dqdci; // dwdot[NO]/d[N2O]
  J[896] -= dqdci;     // dwdot[N2O]/d[N2O]
  // d()/dT
  J[933] -= dqdT;     // dwdot[O]/dT
  J[938] += 2 * dqdT; // dwdot[NO]/dT
  J[958] -= dqdT;     // dwdot[N2O]/dT

  // reaction 156: N2O + O <=> N2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[28];
  k_f = 92000000 * exp(-(13928.5340928088) * invT);
  dlnkfdT = (13928.5340928088) * invT2;
  // reverse
  phi_r = sc[1] * sc[29];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[28]) + (h_RT[1] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[3] -= q;  // O
  wdot[28] -= q; // N2O
  wdot[29] += q; // N2
  // d()/d[O2]
  dqdci = -k_r * sc[29];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[34] -= dqdci; // dwdot[O]/d[O2]
  J[59] -= dqdci; // dwdot[N2O]/d[O2]
  J[60] += dqdci; // dwdot[N2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[94] += dqdci;  // dwdot[O2]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[121] -= dqdci; // dwdot[N2O]/d[O]
  J[122] += dqdci; // dwdot[N2]/d[O]
  // d()/d[N2O]
  dqdci = +k_f * sc[3];
  J[869] += dqdci; // dwdot[O2]/d[N2O]
  J[871] -= dqdci; // dwdot[O]/d[N2O]
  J[896] -= dqdci; // dwdot[N2O]/d[N2O]
  J[897] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[900] += dqdci; // dwdot[O2]/d[N2]
  J[902] -= dqdci; // dwdot[O]/d[N2]
  J[927] -= dqdci; // dwdot[N2O]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 157: N2O + OH <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 1.3e-08 * exp(4.72 * logT - (18397.6013018206) * invT);
  dlnkfdT = 4.72 * invT + (18397.6013018206) * invT2;
  // reverse
  phi_r = sc[5] * sc[29];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[5] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // HO2
  wdot[28] -= q; // N2O
  wdot[29] += q; // N2
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[HO2]/d[OH]
  J[152] -= dqdci; // dwdot[N2O]/d[OH]
  J[153] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[29];
  J[159] -= dqdci; // dwdot[OH]/d[HO2]
  J[160] += dqdci; // dwdot[HO2]/d[HO2]
  J[183] -= dqdci; // dwdot[N2O]/d[HO2]
  J[184] += dqdci; // dwdot[N2]/d[HO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[872] -= dqdci; // dwdot[OH]/d[N2O]
  J[873] += dqdci; // dwdot[HO2]/d[N2O]
  J[896] -= dqdci; // dwdot[N2O]/d[N2O]
  J[897] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[903] -= dqdci; // dwdot[OH]/d[N2]
  J[904] += dqdci; // dwdot[HO2]/d[N2]
  J[927] -= dqdci; // dwdot[N2O]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[HO2]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 158: N2O + OH <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 1.2e-10 * exp(4.33 * logT - (12620.6739783824) * invT);
  dlnkfdT = 4.33 * invT + (12620.6739783824) * invT2;
  // reverse
  phi_r = sc[8] * sc[21];
  Kc = exp(g_RT[4] - g_RT[8] - g_RT[21] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[8] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[8] += q;  // NO
  wdot[21] += q; // HNO
  wdot[28] -= q; // N2O
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[152] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[21];
  J[252] -= dqdci; // dwdot[OH]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[269] += dqdci; // dwdot[HNO]/d[NO]
  J[276] -= dqdci; // dwdot[N2O]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[8];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[659] += dqdci; // dwdot[NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[679] -= dqdci; // dwdot[N2O]/d[HNO]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[872] -= dqdci; // dwdot[OH]/d[N2O]
  J[876] += dqdci; // dwdot[NO]/d[N2O]
  J[889] += dqdci; // dwdot[HNO]/d[N2O]
  J[896] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT

  // reaction 159: N2O + NO <=> N2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[28];
  k_f = 0.53 * exp(2.23 * logT - (23288.8672934424) * invT);
  dlnkfdT = 2.23 * invT + (23288.8672934424) * invT2;
  // reverse
  phi_r = sc[23] * sc[29];
  Kc = exp(g_RT[8] - g_RT[23] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[28]) + (h_RT[23] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // NO
  wdot[23] += q; // NO2
  wdot[28] -= q; // N2O
  wdot[29] += q; // N2
  // d()/d[NO]
  dqdci = +k_f * sc[28];
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[271] += dqdci; // dwdot[NO2]/d[NO]
  J[276] -= dqdci; // dwdot[N2O]/d[NO]
  J[277] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[29];
  J[721] -= dqdci; // dwdot[NO]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  J[741] -= dqdci; // dwdot[N2O]/d[NO2]
  J[742] += dqdci; // dwdot[N2]/d[NO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[8];
  J[876] -= dqdci; // dwdot[NO]/d[N2O]
  J[891] += dqdci; // dwdot[NO2]/d[N2O]
  J[896] -= dqdci; // dwdot[N2O]/d[N2O]
  J[897] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[23];
  J[907] -= dqdci; // dwdot[NO]/d[N2]
  J[922] += dqdci; // dwdot[NO2]/d[N2]
  J[927] -= dqdci; // dwdot[N2O]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[953] += dqdT; // dwdot[NO2]/dT
  J[958] -= dqdT; // dwdot[N2O]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 160: 2 NH2 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 170 * exp(1.62 * logT - (5929.40197317701) * invT);
  dlnkfdT = 1.62 * invT + (5929.40197317701) * invT2;
  // reverse
  phi_r = sc[0] * sc[16];
  Kc = exp(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[0] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // H2
  wdot[10] -= 2 * q; // NH2
  wdot[16] += q;     // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[16];
  J[0] += dqdci;       // dwdot[H2]/d[H2]
  J[10] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[16] += dqdci;      // dwdot[N2H2]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[310] += dqdci;      // dwdot[H2]/d[NH2]
  J[320] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[326] += dqdci;      // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[0];
  J[496] += dqdci;      // dwdot[H2]/d[N2H2]
  J[506] += -2 * dqdci; // dwdot[NH2]/d[N2H2]
  J[512] += dqdci;      // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[930] += dqdT;      // dwdot[H2]/dT
  J[940] += -2 * dqdT; // dwdot[NH2]/dT
  J[946] += dqdT;      // dwdot[N2H2]/dT

  // reaction 161: 2 NH2 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 0.072 * exp(1.88 * logT - (4429.31309241314) * invT);
  dlnkfdT = 1.88 * invT + (4429.31309241314) * invT2;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = exp(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[0] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // H2
  wdot[10] -= 2 * q; // NH2
  wdot[17] += q;     // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;       // dwdot[H2]/d[H2]
  J[10] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[17] += dqdci;      // dwdot[H2NN]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[310] += dqdci;      // dwdot[H2]/d[NH2]
  J[320] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[327] += dqdci;      // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[0];
  J[527] += dqdci;      // dwdot[H2]/d[H2NN]
  J[537] += -2 * dqdci; // dwdot[NH2]/d[H2NN]
  J[544] += dqdci;      // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[930] += dqdT;      // dwdot[H2]/dT
  J[940] += -2 * dqdT; // dwdot[NH2]/dT
  J[947] += dqdT;      // dwdot[H2NN]/dT

  // reaction 162: NH + NH2 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[11];
  k_f = 430000000 * exp(-0.272 * logT - (-38.7476832669634) * invT);
  dlnkfdT = -0.272 * invT + (-38.7476832669634) * invT2;
  // reverse
  phi_r = sc[2] * sc[16];
  Kc = exp(-g_RT[2] + g_RT[10] + g_RT[11] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[11]) + (h_RT[2] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[10] -= q; // NH2
  wdot[11] -= q; // NH
  wdot[16] += q; // N2H2
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci; // dwdot[NH2]/d[H]
  J[73] -= dqdci; // dwdot[NH]/d[H]
  J[78] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NH2]
  dqdci = +k_f * sc[11];
  J[312] += dqdci; // dwdot[H]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[326] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[343] += dqdci; // dwdot[H]/d[NH]
  J[351] -= dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[357] += dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[498] += dqdci; // dwdot[H]/d[N2H2]
  J[506] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[507] -= dqdci; // dwdot[NH]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 163: HNOH + NH2 <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 1e-05 * exp(3.46 * logT - (-235.002182930804) * invT);
  dlnkfdT = 3.46 * invT + (-235.002182930804) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[10] - g_RT[15] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH2
  wdot[15] += q; // N2H3
  wdot[20] -= q; // HNOH
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH2]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  J[144] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[314] += dqdci; // dwdot[OH]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[325] += dqdci; // dwdot[N2H3]/d[NH2]
  J[330] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[4];
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[475] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[485] -= dqdci; // dwdot[HNOH]/d[N2H3]
  // d()/d[HNOH]
  dqdci = +k_f * sc[10];
  J[624] += dqdci; // dwdot[OH]/d[HNOH]
  J[630] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[635] += dqdci; // dwdot[N2H3]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT

  // reaction 164: HNOH + NH2 <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 88000000000 * exp(-1.08 * logT - (560.080149040653) * invT);
  dlnkfdT = -1.08 * invT + (560.080149040653) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(-g_RT[6] + g_RT[10] - g_RT[17] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O
  wdot[10] -= q; // NH2
  wdot[17] += q; // H2NN
  wdot[20] -= q; // HNOH
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[196] -= dqdci; // dwdot[NH2]/d[H2O]
  J[203] += dqdci; // dwdot[H2NN]/d[H2O]
  J[206] -= dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[316] += dqdci; // dwdot[H2O]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[327] += dqdci; // dwdot[H2NN]/d[NH2]
  J[330] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[6];
  J[533] += dqdci; // dwdot[H2O]/d[H2NN]
  J[537] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  J[547] -= dqdci; // dwdot[HNOH]/d[H2NN]
  // d()/d[HNOH]
  dqdci = +k_f * sc[10];
  J[626] += dqdci; // dwdot[H2O]/d[HNOH]
  J[630] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[637] += dqdci; // dwdot[H2NN]/d[HNOH]
  J[640] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT
  J[950] -= dqdT; // dwdot[HNOH]/dT

  // reaction 166: N2H4 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14];
  k_f = 140000000000000 * exp(-(37696.4636520974) * invT);
  dlnkfdT = (37696.4636520974) * invT2;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = refC * exp(-g_RT[0] + g_RT[14] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14]) + (h_RT[0] + h_RT[17]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[14] -= q; // N2H4
  wdot[17] += q; // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[14] -= dqdci; // dwdot[N2H4]/d[H2]
  J[17] += dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[N2H4]
  dqdci = +k_f;
  J[434] += dqdci; // dwdot[H2]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[451] += dqdci; // dwdot[H2NN]/d[N2H4]
  // d()/d[H2NN]
  dqdci = -k_r * sc[0];
  J[527] += dqdci; // dwdot[H2]/d[H2NN]
  J[541] -= dqdci; // dwdot[N2H4]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 167: H + N2H4 <=> H2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 7000000 * exp(-(1258.0416645118) * invT);
  dlnkfdT = (1258.0416645118) * invT2;
  // reverse
  phi_r = sc[0] * sc[15];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[0] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[14] -= dqdci; // dwdot[N2H4]/d[H2]
  J[15] += dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[N2H4]/d[H]
  J[77] += dqdci; // dwdot[N2H3]/d[H]
  // d()/d[N2H4]
  dqdci = +k_f * sc[2];
  J[434] += dqdci; // dwdot[H2]/d[N2H4]
  J[436] -= dqdci; // dwdot[H]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[0];
  J[465] += dqdci; // dwdot[H2]/d[N2H3]
  J[467] -= dqdci; // dwdot[H]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT

  // reaction 168: H + N2H4 <=> NH2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 0.23 * exp(1.42 * logT - (4127.38309293031) * invT);
  dlnkfdT = 1.42 * invT + (4127.38309293031) * invT2;
  // reverse
  phi_r = sc[9] * sc[10];
  Kc = exp(g_RT[2] - g_RT[9] - g_RT[10] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[9] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[9] += q;  // NH3
  wdot[10] += q; // NH2
  wdot[14] -= q; // N2H4
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[NH3]/d[H]
  J[72] += dqdci; // dwdot[NH2]/d[H]
  J[76] -= dqdci; // dwdot[N2H4]/d[H]
  // d()/d[NH3]
  dqdci = -k_r * sc[10];
  J[281] -= dqdci; // dwdot[H]/d[NH3]
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] += dqdci; // dwdot[NH2]/d[NH3]
  J[293] -= dqdci; // dwdot[N2H4]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[9];
  J[312] -= dqdci; // dwdot[H]/d[NH2]
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[324] -= dqdci; // dwdot[N2H4]/d[NH2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[2];
  J[436] -= dqdci; // dwdot[H]/d[N2H4]
  J[443] += dqdci; // dwdot[NH3]/d[N2H4]
  J[444] += dqdci; // dwdot[NH2]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT

  // reaction 169: N2H4 + O <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 150000 * exp(-(-639.085165571994) * invT);
  dlnkfdT = (-639.085165571994) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[107] -= dqdci; // dwdot[N2H4]/d[O]
  J[108] += dqdci; // dwdot[N2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[N2H4]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H4]
  dqdci = +k_f * sc[3];
  J[437] -= dqdci; // dwdot[O]/d[N2H4]
  J[438] += dqdci; // dwdot[OH]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[4];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT

  // reaction 170: N2H4 + O <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 290000 * exp(-(-639.085165571994) * invT);
  dlnkfdT = (-639.085165571994) * invT2;
  // reverse
  phi_r = sc[6] * sc[16];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[14] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[6] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[6] += q;  // H2O
  wdot[14] -= q; // N2H4
  wdot[16] += q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[99] += dqdci;  // dwdot[H2O]/d[O]
  J[107] -= dqdci; // dwdot[N2H4]/d[O]
  J[109] += dqdci; // dwdot[N2H2]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[189] -= dqdci; // dwdot[O]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[200] -= dqdci; // dwdot[N2H4]/d[H2O]
  J[202] += dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[N2H4]
  dqdci = +k_f * sc[3];
  J[437] -= dqdci; // dwdot[O]/d[N2H4]
  J[440] += dqdci; // dwdot[H2O]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[450] += dqdci; // dwdot[N2H2]/d[N2H4]
  // d()/d[N2H2]
  dqdci = -k_r * sc[6];
  J[499] -= dqdci; // dwdot[O]/d[N2H2]
  J[502] += dqdci; // dwdot[H2O]/d[N2H2]
  J[510] -= dqdci; // dwdot[N2H4]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 171: N2H4 + OH <=> H2O + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  dlnkfdT = (-160.022899725901) * invT2;
  // reverse
  phi_r = sc[6] * sc[15];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[6] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[138] -= dqdci; // dwdot[N2H4]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[200] -= dqdci; // dwdot[N2H4]/d[H2O]
  J[201] += dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[438] -= dqdci; // dwdot[OH]/d[N2H4]
  J[440] += dqdci; // dwdot[H2O]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[6];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[471] += dqdci; // dwdot[H2O]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT

  // reaction 172: N2H4 + NH2 <=> N2H3 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 7.6e-07 * exp(4 * logT - (2037.02106317751) * invT);
  dlnkfdT = 4 * invT + (2037.02106317751) * invT2;
  // reverse
  phi_r = sc[9] * sc[15];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[9] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  // d()/d[NH3]
  dqdci = -k_r * sc[15];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[293] -= dqdci; // dwdot[N2H4]/d[NH3]
  J[294] += dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[14];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[324] -= dqdci; // dwdot[N2H4]/d[NH2]
  J[325] += dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[10];
  J[443] += dqdci; // dwdot[NH3]/d[N2H4]
  J[444] -= dqdci; // dwdot[NH2]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[9];
  J[474] += dqdci; // dwdot[NH3]/d[N2H3]
  J[475] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT

  // reaction 173: N2H4 + NO <=> HNO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[14];
  k_f = 6e-05 * exp(3.16 * logT - (15521.7180567466) * invT);
  dlnkfdT = 3.16 * invT + (15521.7180567466) * invT2;
  // reverse
  phi_r = sc[15] * sc[21];
  Kc = exp(g_RT[8] + g_RT[14] - g_RT[15] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[14]) + (h_RT[15] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // NO
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  wdot[21] += q; // HNO
  // d()/d[NO]
  dqdci = +k_f * sc[14];
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[262] -= dqdci; // dwdot[N2H4]/d[NO]
  J[263] += dqdci; // dwdot[N2H3]/d[NO]
  J[269] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[N2H4]
  dqdci = +k_f * sc[8];
  J[442] -= dqdci; // dwdot[NO]/d[N2H4]
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[455] += dqdci; // dwdot[HNO]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[21];
  J[473] -= dqdci; // dwdot[NO]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[15];
  J[659] -= dqdci; // dwdot[NO]/d[HNO]
  J[665] -= dqdci; // dwdot[N2H4]/d[HNO]
  J[666] += dqdci; // dwdot[N2H3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 174: N2H4 + NO2 <=> HONO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[23];
  k_f = 8.2e-05 * exp(3.13 * logT - (4458.49965902982) * invT);
  dlnkfdT = 3.13 * invT + (4458.49965902982) * invT2;
  // reverse
  phi_r = sc[15] * sc[24];
  Kc = exp(g_RT[14] - g_RT[15] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[23]) + (h_RT[15] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  wdot[23] -= q; // NO2
  wdot[24] += q; // HONO
  // d()/d[N2H4]
  dqdci = +k_f * sc[23];
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[457] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[458] += dqdci; // dwdot[HONO]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[24];
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[488] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[489] += dqdci; // dwdot[HONO]/d[N2H3]
  // d()/d[NO2]
  dqdci = +k_f * sc[14];
  J[727] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[728] += dqdci; // dwdot[N2H3]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[737] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[15];
  J[758] -= dqdci; // dwdot[N2H4]/d[HONO]
  J[759] += dqdci; // dwdot[N2H3]/d[HONO]
  J[767] -= dqdci; // dwdot[NO2]/d[HONO]
  J[768] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[954] += dqdT; // dwdot[HONO]/dT

  // reaction 175: N2H4 + NO2 <=> HNO2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[23];
  k_f = 2.4e-08 * exp(4.14 * logT - (3998.5596264843) * invT);
  dlnkfdT = 4.14 * invT + (3998.5596264843) * invT2;
  // reverse
  phi_r = sc[15] * sc[25];
  Kc = exp(g_RT[14] - g_RT[15] + g_RT[23] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[23]) + (h_RT[15] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q; // N2H4
  wdot[15] += q; // N2H3
  wdot[23] -= q; // NO2
  wdot[25] += q; // HNO2
  // d()/d[N2H4]
  dqdci = +k_f * sc[23];
  J[448] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[457] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[459] += dqdci; // dwdot[HNO2]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[25];
  J[479] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[488] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[490] += dqdci; // dwdot[HNO2]/d[N2H3]
  // d()/d[NO2]
  dqdci = +k_f * sc[14];
  J[727] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[728] += dqdci; // dwdot[N2H3]/d[NO2]
  J[736] -= dqdci; // dwdot[NO2]/d[NO2]
  J[738] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[15];
  J[789] -= dqdci; // dwdot[N2H4]/d[HNO2]
  J[790] += dqdci; // dwdot[N2H3]/d[HNO2]
  J[798] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[800] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[944] -= dqdT; // dwdot[N2H4]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[953] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HNO2]/dT

  // reaction 176: H + N2H2 <=> N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 130000000 * exp(-(1947.95171333007) * invT);
  dlnkfdT = (1947.95171333007) * invT2;
  // reverse
  phi_r = sc[15];
  Kc = refCinv * exp(g_RT[2] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H2
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[77] += dqdci; // dwdot[N2H3]/d[H]
  J[78] -= dqdci; // dwdot[N2H2]/d[H]
  // d()/d[N2H3]
  dqdci = -k_r;
  J[467] -= dqdci; // dwdot[H]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = +k_f * sc[2];
  J[498] -= dqdci; // dwdot[H]/d[N2H2]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 177: H + N2H3 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 240 * exp(1.5 * logT - (-5.0321666580472) * invT);
  dlnkfdT = 1.5 * invT + (-5.0321666580472) * invT2;
  // reverse
  phi_r = sc[0] * sc[16];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[0] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[16];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[15] -= dqdci; // dwdot[N2H3]/d[H2]
  J[16] += dqdci; // dwdot[N2H2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[N2H3]/d[H]
  J[78] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[N2H3]
  dqdci = +k_f * sc[2];
  J[465] += dqdci; // dwdot[H2]/d[N2H3]
  J[467] -= dqdci; // dwdot[H]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[0];
  J[496] += dqdci; // dwdot[H2]/d[N2H2]
  J[498] -= dqdci; // dwdot[H]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 178: N2H3 + O <=> N2H2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 170 * exp(1.5 * logT - (-325.077966109849) * invT);
  dlnkfdT = 1.5 * invT + (-325.077966109849) * invT2;
  // reverse
  phi_r = sc[4] * sc[16];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[4] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  J[109] += dqdci; // dwdot[N2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[140] += dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[4];
  J[499] -= dqdci; // dwdot[O]/d[N2H2]
  J[500] += dqdci; // dwdot[OH]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 179: N2H3 + O <=> HNO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[21];
  Kc = exp(g_RT[3] - g_RT[10] + g_RT[15] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[10] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[10] += q; // NH2
  wdot[15] -= q; // N2H3
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[103] += dqdci; // dwdot[NH2]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[21];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[331] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[475] += dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[10];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[661] += dqdci; // dwdot[NH2]/d[HNO]
  J[666] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 180: N2H3 + O => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] += q;  // H
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[10] += q; // NH2
  wdot[15] -= q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[95] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[103] += dqdci; // dwdot[NH2]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[467] += dqdci; // dwdot[H]/d[N2H3]
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[473] += dqdci; // dwdot[NO]/d[N2H3]
  J[475] += dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 181: N2H3 + OH <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 1.2 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[6] * sc[16];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[6] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[140] += dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[201] -= dqdci; // dwdot[N2H3]/d[H2O]
  J[202] += dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[471] += dqdci; // dwdot[H2O]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[6];
  J[500] -= dqdci; // dwdot[OH]/d[N2H2]
  J[502] += dqdci; // dwdot[H2O]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 182: N2H3 + OH <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[15] -= q; // N2H3
  wdot[17] += q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[141] += dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[201] -= dqdci; // dwdot[N2H3]/d[H2O]
  J[203] += dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[471] += dqdci; // dwdot[H2O]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[482] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[6];
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[533] += dqdci; // dwdot[H2O]/d[H2NN]
  J[542] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 183: N2H3 + OH <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 1000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[9] * sc[21];
  Kc = exp(g_RT[4] - g_RT[9] + g_RT[15] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[9] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[9] += q;  // NH3
  wdot[15] -= q; // N2H3
  wdot[21] += q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[NH3]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[283] -= dqdci; // dwdot[OH]/d[NH3]
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[294] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[300] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[474] += dqdci; // dwdot[NH3]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[660] += dqdci; // dwdot[NH3]/d[HNO]
  J[666] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 184: HO2 + N2H3 <=> H2O2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[15];
  k_f = 0.014 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[16];
  Kc = exp(g_RT[5] - g_RT[7] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[7] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[HO2]
  dqdci = +k_f * sc[15];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[170] -= dqdci; // dwdot[N2H3]/d[HO2]
  J[171] += dqdci; // dwdot[N2H2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[16];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[232] -= dqdci; // dwdot[N2H3]/d[H2O2]
  J[233] += dqdci; // dwdot[N2H2]/d[H2O2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[5];
  J[470] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[472] += dqdci; // dwdot[H2O2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[7];
  J[501] -= dqdci; // dwdot[HO2]/d[N2H2]
  J[503] += dqdci; // dwdot[H2O2]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 185: HO2 + N2H3 <=> N2H4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[15];
  k_f = 0.92 * exp(1.94 * logT - (1069.83863150083) * invT);
  dlnkfdT = 1.94 * invT + (1069.83863150083) * invT2;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[5] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // O2
  wdot[5] -= q;  // HO2
  wdot[14] += q; // N2H4
  wdot[15] -= q; // N2H3
  // d()/d[O2]
  dqdci = -k_r * sc[14];
  J[32] += dqdci; // dwdot[O2]/d[O2]
  J[36] -= dqdci; // dwdot[HO2]/d[O2]
  J[45] += dqdci; // dwdot[N2H4]/d[O2]
  J[46] -= dqdci; // dwdot[N2H3]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[15];
  J[156] += dqdci; // dwdot[O2]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[169] += dqdci; // dwdot[N2H4]/d[HO2]
  J[170] -= dqdci; // dwdot[N2H3]/d[HO2]
  // d()/d[N2H4]
  dqdci = -k_r * sc[1];
  J[435] += dqdci; // dwdot[O2]/d[N2H4]
  J[439] -= dqdci; // dwdot[HO2]/d[N2H4]
  J[448] += dqdci; // dwdot[N2H4]/d[N2H4]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = +k_f * sc[5];
  J[466] += dqdci; // dwdot[O2]/d[N2H3]
  J[470] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H4]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[931] += dqdT; // dwdot[O2]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[944] += dqdT; // dwdot[N2H4]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 186: N2H3 + NH2 <=> N2H2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 0.92 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[9] * sc[16];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[9] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[NH3]
  dqdci = -k_r * sc[16];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[294] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[295] += dqdci; // dwdot[N2H2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[326] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[10];
  J[474] += dqdci; // dwdot[NH3]/d[N2H3]
  J[475] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[9];
  J[505] += dqdci; // dwdot[NH3]/d[N2H2]
  J[506] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 187: N2H3 + NH2 <=> H2NN + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[17];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[9] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[15] -= q; // N2H3
  wdot[17] += q; // H2NN
  // d()/d[NH3]
  dqdci = -k_r * sc[17];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[294] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[296] += dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[327] += dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[10];
  J[474] += dqdci; // dwdot[NH3]/d[N2H3]
  J[475] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[482] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[9];
  J[536] += dqdci; // dwdot[NH3]/d[H2NN]
  J[537] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[542] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 188: N2H3 + NH <=> N2H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[16];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[10] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H2
  // d()/d[NH2]
  dqdci = -k_r * sc[16];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[326] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[15];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[356] -= dqdci; // dwdot[N2H3]/d[NH]
  J[357] += dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[11];
  J[475] += dqdci; // dwdot[NH2]/d[N2H3]
  J[476] -= dqdci; // dwdot[NH]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[10];
  J[506] += dqdci; // dwdot[NH2]/d[N2H2]
  J[507] -= dqdci; // dwdot[NH]/d[N2H2]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H2]/dT

  // reaction 190: H + N2H2 <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 110000000 * exp(-(1574.06173063716) * invT);
  dlnkfdT = (1574.06173063716) * invT2;
  // reverse
  phi_r = sc[0] * sc[13];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[0] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[13] += dqdci; // dwdot[NNH]/d[H2]
  J[16] -= dqdci; // dwdot[N2H2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[75] += dqdci; // dwdot[NNH]/d[H]
  J[78] -= dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[0];
  J[403] += dqdci; // dwdot[H2]/d[NNH]
  J[405] -= dqdci; // dwdot[H]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[2];
  J[496] += dqdci; // dwdot[H2]/d[N2H2]
  J[498] -= dqdci; // dwdot[H]/d[N2H2]
  J[509] += dqdci; // dwdot[NNH]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 191: N2H2 + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 330 * exp(1.5 * logT - (250.098682904946) * invT);
  dlnkfdT = 1.5 * invT + (250.098682904946) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] += dqdci; // dwdot[NNH]/d[O]
  J[109] -= dqdci; // dwdot[N2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[140] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[3];
  J[499] -= dqdci; // dwdot[O]/d[N2H2]
  J[500] += dqdci; // dwdot[OH]/d[N2H2]
  J[509] += dqdci; // dwdot[NNH]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 192: N2H2 + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[10];
  Kc = exp(g_RT[3] - g_RT[8] - g_RT[10] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[8] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[10] += q; // NH2
  wdot[16] -= q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[103] += dqdci; // dwdot[NH2]/d[O]
  J[109] -= dqdci; // dwdot[N2H2]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[10];
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[258] += dqdci; // dwdot[NH2]/d[NO]
  J[264] -= dqdci; // dwdot[N2H2]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[8];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[318] += dqdci; // dwdot[NO]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[326] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[3];
  J[499] -= dqdci; // dwdot[O]/d[N2H2]
  J[504] += dqdci; // dwdot[NO]/d[N2H2]
  J[506] += dqdci; // dwdot[NH2]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 193: N2H2 + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 5.9e-05 * exp(3.4 * logT - (684.374665494419) * invT);
  dlnkfdT = 3.4 * invT + (684.374665494419) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[140] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[13];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[199] += dqdci; // dwdot[NNH]/d[H2O]
  J[202] -= dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[409] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[4];
  J[500] -= dqdci; // dwdot[OH]/d[N2H2]
  J[502] += dqdci; // dwdot[H2O]/d[N2H2]
  J[509] += dqdci; // dwdot[NNH]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 194: N2H2 + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 8.8e-08 * exp(4.05 * logT - (810.178831945599) * invT);
  dlnkfdT = 4.05 * invT + (810.178831945599) * invT2;
  // reverse
  phi_r = sc[9] * sc[13];
  Kc = exp(-g_RT[9] + g_RT[10] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[9] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // d()/d[NH3]
  dqdci = -k_r * sc[13];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[292] += dqdci; // dwdot[NNH]/d[NH3]
  J[295] -= dqdci; // dwdot[N2H2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[16];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[323] += dqdci; // dwdot[NNH]/d[NH2]
  J[326] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[9];
  J[412] += dqdci; // dwdot[NH3]/d[NNH]
  J[413] -= dqdci; // dwdot[NH2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[10];
  J[505] += dqdci; // dwdot[NH3]/d[N2H2]
  J[506] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[509] += dqdci; // dwdot[NNH]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 195: N2H2 + NH <=> NH2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[16];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[10] * sc[13];
  Kc = exp(-g_RT[10] + g_RT[11] - g_RT[13] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[16]) + (h_RT[10] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NH2
  wdot[11] -= q; // NH
  wdot[13] += q; // NNH
  wdot[16] -= q; // N2H2
  // d()/d[NH2]
  dqdci = -k_r * sc[13];
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[321] -= dqdci; // dwdot[NH]/d[NH2]
  J[323] += dqdci; // dwdot[NNH]/d[NH2]
  J[326] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[16];
  J[351] += dqdci; // dwdot[NH2]/d[NH]
  J[352] -= dqdci; // dwdot[NH]/d[NH]
  J[354] += dqdci; // dwdot[NNH]/d[NH]
  J[357] -= dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[NNH]
  dqdci = -k_r * sc[10];
  J[413] += dqdci; // dwdot[NH2]/d[NNH]
  J[414] -= dqdci; // dwdot[NH]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[419] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[11];
  J[506] += dqdci; // dwdot[NH2]/d[N2H2]
  J[507] -= dqdci; // dwdot[NH]/d[N2H2]
  J[509] += dqdci; // dwdot[NNH]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[941] -= dqdT; // dwdot[NH]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT

  // reaction 196: N2H2 + NO <=> N2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[16];
  k_f = 4000000 * exp(-(5999.34908972387) * invT);
  dlnkfdT = (5999.34908972387) * invT2;
  // reverse
  phi_r = sc[10] * sc[28];
  Kc = exp(g_RT[8] - g_RT[10] + g_RT[16] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[16]) + (h_RT[10] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // NO
  wdot[10] += q; // NH2
  wdot[16] -= q; // N2H2
  wdot[28] += q; // N2O
  // d()/d[NO]
  dqdci = +k_f * sc[16];
  J[256] -= dqdci; // dwdot[NO]/d[NO]
  J[258] += dqdci; // dwdot[NH2]/d[NO]
  J[264] -= dqdci; // dwdot[N2H2]/d[NO]
  J[276] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[28];
  J[318] -= dqdci; // dwdot[NO]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[326] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[338] += dqdci; // dwdot[N2O]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[8];
  J[504] -= dqdci; // dwdot[NO]/d[N2H2]
  J[506] += dqdci; // dwdot[NH2]/d[N2H2]
  J[512] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[524] += dqdci; // dwdot[N2O]/d[N2H2]
  // d()/d[N2O]
  dqdci = -k_r * sc[10];
  J[876] -= dqdci; // dwdot[NO]/d[N2O]
  J[878] += dqdci; // dwdot[NH2]/d[N2O]
  J[884] -= dqdci; // dwdot[N2H2]/d[N2O]
  J[896] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[938] -= dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[946] -= dqdT; // dwdot[N2H2]/dT
  J[958] += dqdT; // dwdot[N2O]/dT

  // reaction 197: H2NN <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 3.4e+26 * exp(-4.83 * logT - (23262.7000268206) * invT);
  dlnkfdT = -4.83 * invT + (23262.7000268206) * invT2;
  // reverse
  phi_r = sc[2] * sc[13];
  Kc = refC * exp(-g_RT[2] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[2] + h_RT[13]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[64] += dqdci; // dwdot[H]/d[H]
  J[75] += dqdci; // dwdot[NNH]/d[H]
  J[79] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[405] += dqdci; // dwdot[H]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[529] += dqdci; // dwdot[H]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 198: H2NN <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 250000000000000 * exp(-(26562.2917045021) * invT);
  dlnkfdT = (26562.2917045021) * invT2;
  // reverse
  phi_r = sc[0] * sc[29];
  Kc = refC * exp(-g_RT[0] + g_RT[17] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[0] + h_RT[29]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[17] -= q; // H2NN
  wdot[29] += q; // N2
  // d()/d[H2]
  dqdci = -k_r * sc[29];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[17] -= dqdci; // dwdot[H2NN]/d[H2]
  J[29] += dqdci; // dwdot[N2]/d[H2]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[527] += dqdci; // dwdot[H2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[556] += dqdci; // dwdot[N2]/d[H2NN]
  // d()/d[N2]
  dqdci = -k_r * sc[0];
  J[899] += dqdci; // dwdot[H2]/d[N2]
  J[916] -= dqdci; // dwdot[H2NN]/d[N2]
  J[928] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[959] += dqdT; // dwdot[N2]/dT

  // reaction 199: H2NN <=> N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 130000000000000 * exp(-(23616.4613428813) * invT);
  dlnkfdT = (23616.4613428813) * invT2;
  // reverse
  phi_r = sc[16];
  Kc = exp(-g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // N2H2
  wdot[17] -= q; // H2NN
  // d()/d[N2H2]
  dqdci = -k_r;
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[513] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[543] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[946] += dqdT; // dwdot[N2H2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 200: H + H2NN <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 480 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[0] * sc[13];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[0] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // H
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[H]/d[H2]
  J[13] += dqdci; // dwdot[NNH]/d[H2]
  J[17] -= dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[62] += dqdci; // dwdot[H2]/d[H]
  J[64] -= dqdci; // dwdot[H]/d[H]
  J[75] += dqdci; // dwdot[NNH]/d[H]
  J[79] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[0];
  J[403] += dqdci; // dwdot[H2]/d[NNH]
  J[405] -= dqdci; // dwdot[H]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[527] += dqdci; // dwdot[H2]/d[H2NN]
  J[529] -= dqdci; // dwdot[H]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[930] += dqdT; // dwdot[H2]/dT
  J[932] -= dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 201: H + H2NN <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[16];
  Kc = exp(g_RT[2] - g_RT[2] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[2] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // N2H2
  wdot[17] -= q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[17] - k_r * sc[16];
  J[78] += dqdci; // dwdot[N2H2]/d[H]
  J[79] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[512] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[513] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[543] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[946] += dqdT; // dwdot[N2H2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 202: H2NN + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 330 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] += dqdci; // dwdot[NNH]/d[O]
  J[110] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[530] -= dqdci; // dwdot[O]/d[H2NN]
  J[531] += dqdci; // dwdot[OH]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 203: H2NN + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[10];
  Kc = exp(g_RT[3] - g_RT[8] - g_RT[10] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[8] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] += q;  // NO
  wdot[10] += q; // NH2
  wdot[17] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[NO]/d[O]
  J[103] += dqdci; // dwdot[NH2]/d[O]
  J[110] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[10];
  J[251] -= dqdci; // dwdot[O]/d[NO]
  J[256] += dqdci; // dwdot[NO]/d[NO]
  J[258] += dqdci; // dwdot[NH2]/d[NO]
  J[265] -= dqdci; // dwdot[H2NN]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[8];
  J[313] -= dqdci; // dwdot[O]/d[NH2]
  J[318] += dqdci; // dwdot[NO]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[327] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[530] -= dqdci; // dwdot[O]/d[H2NN]
  J[535] += dqdci; // dwdot[NO]/d[H2NN]
  J[537] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 204: H2NN + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[H2O]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[13];
  J[190] -= dqdci; // dwdot[OH]/d[H2O]
  J[192] += dqdci; // dwdot[H2O]/d[H2O]
  J[199] += dqdci; // dwdot[NNH]/d[H2O]
  J[203] -= dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[409] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[533] += dqdci; // dwdot[H2O]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[H2O]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 205: H2NN + OH => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // OH
  wdot[8] += q;  // NO
  wdot[10] += q; // NH2
  wdot[17] -= q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[126] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[NO]/d[OH]
  J[134] += dqdci; // dwdot[NH2]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[529] += dqdci; // dwdot[H]/d[H2NN]
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[535] += dqdci; // dwdot[NO]/d[H2NN]
  J[537] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[932] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 206: H2NN + HO2 => NH2 + NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[17];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // HO2
  wdot[8] += q;  // NO
  wdot[10] += q; // NH2
  wdot[17] -= q; // H2NN
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[159] += dqdci; // dwdot[OH]/d[HO2]
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[163] += dqdci; // dwdot[NO]/d[HO2]
  J[165] += dqdci; // dwdot[NH2]/d[HO2]
  J[172] -= dqdci; // dwdot[H2NN]/d[HO2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[5];
  J[531] += dqdci; // dwdot[OH]/d[H2NN]
  J[532] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[535] += dqdci; // dwdot[NO]/d[H2NN]
  J[537] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[NO]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 207: H2NN + HO2 <=> H2O2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[17];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[13];
  Kc = exp(g_RT[5] - g_RT[7] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[17]) + (h_RT[7] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[160] -= dqdci; // dwdot[HO2]/d[HO2]
  J[162] += dqdci; // dwdot[H2O2]/d[HO2]
  J[168] += dqdci; // dwdot[NNH]/d[HO2]
  J[172] -= dqdci; // dwdot[H2NN]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[13];
  J[222] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[230] += dqdci; // dwdot[NNH]/d[H2O2]
  J[234] -= dqdci; // dwdot[H2NN]/d[H2O2]
  // d()/d[NNH]
  dqdci = -k_r * sc[7];
  J[408] -= dqdci; // dwdot[HO2]/d[NNH]
  J[410] += dqdci; // dwdot[H2O2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[5];
  J[532] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[534] += dqdci; // dwdot[H2O2]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[935] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 208: H2NN + O2 <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 1500000 * exp(-(2999.67454486193) * invT);
  dlnkfdT = (2999.67454486193) * invT2;
  // reverse
  phi_r = sc[10] * sc[23];
  Kc = exp(g_RT[1] - g_RT[10] + g_RT[17] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[10] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // O2
  wdot[10] += q; // NH2
  wdot[17] -= q; // H2NN
  wdot[23] += q; // NO2
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[32] -= dqdci; // dwdot[O2]/d[O2]
  J[41] += dqdci; // dwdot[NH2]/d[O2]
  J[48] -= dqdci; // dwdot[H2NN]/d[O2]
  J[54] += dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NH2]
  dqdci = -k_r * sc[23];
  J[311] -= dqdci; // dwdot[O2]/d[NH2]
  J[320] += dqdci; // dwdot[NH2]/d[NH2]
  J[327] -= dqdci; // dwdot[H2NN]/d[NH2]
  J[333] += dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[1];
  J[528] -= dqdci; // dwdot[O2]/d[H2NN]
  J[537] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[550] += dqdci; // dwdot[NO2]/d[H2NN]
  // d()/d[NO2]
  dqdci = -k_r * sc[10];
  J[714] -= dqdci; // dwdot[O2]/d[NO2]
  J[723] += dqdci; // dwdot[NH2]/d[NO2]
  J[730] -= dqdci; // dwdot[H2NN]/d[NO2]
  J[736] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[931] -= dqdT; // dwdot[O2]/dT
  J[940] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[953] += dqdT; // dwdot[NO2]/dT

  // reaction 209: H2NN + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[17];
  k_f = 1.8 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[9] * sc[13];
  Kc = exp(-g_RT[9] + g_RT[10] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[17]) + (h_RT[9] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NH3
  wdot[10] -= q; // NH2
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[NH3]
  dqdci = -k_r * sc[13];
  J[288] += dqdci; // dwdot[NH3]/d[NH3]
  J[289] -= dqdci; // dwdot[NH2]/d[NH3]
  J[292] += dqdci; // dwdot[NNH]/d[NH3]
  J[296] -= dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[17];
  J[319] += dqdci; // dwdot[NH3]/d[NH2]
  J[320] -= dqdci; // dwdot[NH2]/d[NH2]
  J[323] += dqdci; // dwdot[NNH]/d[NH2]
  J[327] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[9];
  J[412] += dqdci; // dwdot[NH3]/d[NNH]
  J[413] -= dqdci; // dwdot[NH2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[10];
  J[536] += dqdci; // dwdot[NH3]/d[H2NN]
  J[537] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[939] += dqdT; // dwdot[NH3]/dT
  J[940] -= dqdT; // dwdot[NH2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  amrex::Real c_R[30], dcRdT[30], e_RT[30];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 30; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[930 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 30; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 30; ++m) {
      dehmixdc += eh_RT[m] * J[k * 31 + m];
    }
    J[k * 31 + 30] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[960] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[30];

  for (int k = 0; k < 30; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 30; k++) {
    J[930 + k] *= 1.e-6;
    J[k * 31 + 30] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 122;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 18150;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 30;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 2.01600000E+00;
  WT[1] = 3.19980000E+01;
  WT[2] = 1.00800000E+00;
  WT[3] = 1.59990000E+01;
  WT[4] = 1.70070000E+01;
  WT[5] = 3.30060000E+01;
  WT[6] = 1.80150000E+01;
  WT[7] = 3.40140000E+01;
  WT[8] = 3.00060000E+01;
  WT[9] = 1.70310000E+01;
  WT[10] = 1.60230000E+01;
  WT[11] = 1.50150000E+01;
  WT[12] = 1.40070000E+01;
  WT[13] = 2.90220000E+01;
  WT[14] = 3.20460000E+01;
  WT[15] = 3.10380000E+01;
  WT[16] = 3.00300000E+01;
  WT[17] = 3.00300000E+01;
  WT[18] = 3.30300000E+01;
  WT[19] = 3.20220000E+01;
  WT[20] = 3.20220000E+01;
  WT[21] = 3.10140000E+01;
  WT[22] = 3.10140000E+01;
  WT[23] = 4.60050000E+01;
  WT[24] = 4.70130000E+01;
  WT[25] = 4.70130000E+01;
  WT[26] = 6.20040000E+01;
  WT[27] = 6.30120000E+01;
  WT[28] = 4.40130000E+01;
  WT[29] = 2.80140000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 3.80000000E+01;
  EPS[1] = 1.07400000E+02;
  EPS[2] = 1.45000000E+02;
  EPS[3] = 8.00000000E+01;
  EPS[4] = 8.00000000E+01;
  EPS[5] = 1.07400000E+02;
  EPS[6] = 5.72400000E+02;
  EPS[7] = 1.07400000E+02;
  EPS[8] = 1.39320000E+02;
  EPS[9] = 4.81000000E+02;
  EPS[10] = 8.00000000E+01;
  EPS[11] = 8.00000000E+01;
  EPS[12] = 7.14000000E+01;
  EPS[13] = 7.14000000E+01;
  EPS[14] = 2.05000000E+02;
  EPS[15] = 2.00000000E+02;
  EPS[16] = 7.14000000E+01;
  EPS[17] = 7.14000000E+01;
  EPS[18] = 1.16700000E+02;
  EPS[19] = 1.16700000E+02;
  EPS[20] = 1.16700000E+02;
  EPS[21] = 1.16700000E+02;
  EPS[22] = 1.16700000E+02;
  EPS[23] = 3.33590000E+02;
  EPS[24] = 3.50000000E+02;
  EPS[25] = 3.50000000E+02;
  EPS[26] = 4.00000000E+02;
  EPS[27] = 4.00000000E+02;
  EPS[28] = 2.32400000E+02;
  EPS[29] = 9.75300000E+01;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 2.92000000E+00;
  SIG[1] = 3.45800000E+00;
  SIG[2] = 2.05000000E+00;
  SIG[3] = 2.75000000E+00;
  SIG[4] = 2.75000000E+00;
  SIG[5] = 3.45800000E+00;
  SIG[6] = 2.60500000E+00;
  SIG[7] = 3.45800000E+00;
  SIG[8] = 3.33900000E+00;
  SIG[9] = 2.92000000E+00;
  SIG[10] = 2.65000000E+00;
  SIG[11] = 2.65000000E+00;
  SIG[12] = 3.29800000E+00;
  SIG[13] = 3.79800000E+00;
  SIG[14] = 4.23000000E+00;
  SIG[15] = 3.90000000E+00;
  SIG[16] = 3.79800000E+00;
  SIG[17] = 3.79800000E+00;
  SIG[18] = 3.49200000E+00;
  SIG[19] = 3.49200000E+00;
  SIG[20] = 3.49200000E+00;
  SIG[21] = 3.49200000E+00;
  SIG[22] = 3.49200000E+00;
  SIG[23] = 3.85200000E+00;
  SIG[24] = 3.95000000E+00;
  SIG[25] = 3.95000000E+00;
  SIG[26] = 4.20000000E+00;
  SIG[27] = 4.20000000E+00;
  SIG[28] = 3.82800000E+00;
  SIG[29] = 3.62100000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 0.00000000E+00;
  DIP[6] = 1.84400000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 0.00000000E+00;
  DIP[14] = 0.00000000E+00;
  DIP[15] = 0.00000000E+00;
  DIP[16] = 0.00000000E+00;
  DIP[17] = 0.00000000E+00;
  DIP[18] = 0.00000000E+00;
  DIP[19] = 0.00000000E+00;
  DIP[20] = 0.00000000E+00;
  DIP[21] = 0.00000000E+00;
  DIP[22] = 0.00000000E+00;
  DIP[23] = 0.00000000E+00;
  DIP[24] = 0.00000000E+00;
  DIP[25] = 0.00000000E+00;
  DIP[26] = 0.00000000E+00;
  DIP[27] = 0.00000000E+00;
  DIP[28] = 0.00000000E+00;
  DIP[29] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 7.90000000E-01;
  POL[1] = 1.60000000E+00;
  POL[2] = 0.00000000E+00;
  POL[3] = 0.00000000E+00;
  POL[4] = 0.00000000E+00;
  POL[5] = 0.00000000E+00;
  POL[6] = 0.00000000E+00;
  POL[7] = 0.00000000E+00;
  POL[8] = 0.00000000E+00;
  POL[9] = 0.00000000E+00;
  POL[10] = 0.00000000E+00;
  POL[11] = 0.00000000E+00;
  POL[12] = 0.00000000E+00;
  POL[13] = 0.00000000E+00;
  POL[14] = 0.00000000E+00;
  POL[15] = 0.00000000E+00;
  POL[16] = 0.00000000E+00;
  POL[17] = 0.00000000E+00;
  POL[18] = 0.00000000E+00;
  POL[19] = 0.00000000E+00;
  POL[20] = 0.00000000E+00;
  POL[21] = 0.00000000E+00;
  POL[22] = 0.00000000E+00;
  POL[23] = 0.00000000E+00;
  POL[24] = 0.00000000E+00;
  POL[25] = 0.00000000E+00;
  POL[26] = 0.00000000E+00;
  POL[27] = 0.00000000E+00;
  POL[28] = 0.00000000E+00;
  POL[29] = 1.76000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 2.80000000E+02;
  ZROT[1] = 3.80000000E+00;
  ZROT[2] = 0.00000000E+00;
  ZROT[3] = 0.00000000E+00;
  ZROT[4] = 0.00000000E+00;
  ZROT[5] = 1.00000000E+00;
  ZROT[6] = 4.00000000E+00;
  ZROT[7] = 3.80000000E+00;
  ZROT[8] = 0.00000000E+00;
  ZROT[9] = 0.00000000E+00;
  ZROT[10] = 0.00000000E+00;
  ZROT[11] = 0.00000000E+00;
  ZROT[12] = 0.00000000E+00;
  ZROT[13] = 0.00000000E+00;
  ZROT[14] = 0.00000000E+00;
  ZROT[15] = 0.00000000E+00;
  ZROT[16] = 0.00000000E+00;
  ZROT[17] = 0.00000000E+00;
  ZROT[18] = 0.00000000E+00;
  ZROT[19] = 0.00000000E+00;
  ZROT[20] = 0.00000000E+00;
  ZROT[21] = 0.00000000E+00;
  ZROT[22] = 0.00000000E+00;
  ZROT[23] = 0.00000000E+00;
  ZROT[24] = 0.00000000E+00;
  ZROT[25] = 0.00000000E+00;
  ZROT[26] = 0.00000000E+00;
  ZROT[27] = 0.00000000E+00;
  ZROT[28] = 0.00000000E+00;
  ZROT[29] = 4.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 1;
  NLIN[1] = 1;
  NLIN[2] = 0;
  NLIN[3] = 0;
  NLIN[4] = 1;
  NLIN[5] = 2;
  NLIN[6] = 2;
  NLIN[7] = 2;
  NLIN[8] = 1;
  NLIN[9] = 1;
  NLIN[10] = 2;
  NLIN[11] = 1;
  NLIN[12] = 0;
  NLIN[13] = 2;
  NLIN[14] = 2;
  NLIN[15] = 2;
  NLIN[16] = 2;
  NLIN[17] = 2;
  NLIN[18] = 1;
  NLIN[19] = 2;
  NLIN[20] = 2;
  NLIN[21] = 1;
  NLIN[22] = 1;
  NLIN[23] = 2;
  NLIN[24] = 2;
  NLIN[25] = 2;
  NLIN[26] = 1;
  NLIN[27] = 1;
  NLIN[28] = 2;
  NLIN[29] = 1;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -1.41228032E+01;
  COFETA[1] = 1.12547274E+00;
  COFETA[2] = -6.76255034E-02;
  COFETA[3] = 3.16059742E-03;
  COFETA[4] = -1.82581805E+01;
  COFETA[5] = 3.15294008E+00;
  COFETA[6] = -3.40106313E-01;
  COFETA[7] = 1.53659864E-02;
  COFETA[8] = -2.12806331E+01;
  COFETA[9] = 4.03005747E+00;
  COFETA[10] = -4.51962353E-01;
  COFETA[11] = 2.01268811E-02;
  COFETA[12] = -1.60733596E+01;
  COFETA[13] = 2.34853449E+00;
  COFETA[14] = -2.33829873E-01;
  COFETA[15] = 1.06843433E-02;
  COFETA[16] = -1.60428102E+01;
  COFETA[17] = 2.34853449E+00;
  COFETA[18] = -2.33829873E-01;
  COFETA[19] = 1.06843433E-02;
  COFETA[20] = -1.82426726E+01;
  COFETA[21] = 3.15294008E+00;
  COFETA[22] = -3.40106313E-01;
  COFETA[23] = 1.53659864E-02;
  COFETA[24] = -1.07110032E+01;
  COFETA[25] = -1.30573340E+00;
  COFETA[26] = 4.10294496E-01;
  COFETA[27] = -2.35821838E-02;
  COFETA[28] = -1.82276311E+01;
  COFETA[29] = 3.15294008E+00;
  COFETA[30] = -3.40106313E-01;
  COFETA[31] = 1.53659864E-02;
  COFETA[32] = -2.02352603E+01;
  COFETA[33] = 3.91015112E+00;
  COFETA[34] = -4.36889080E-01;
  COFETA[35] = 1.94941265E-02;
  COFETA[36] = -1.49066860E+01;
  COFETA[37] = 6.53716348E-01;
  COFETA[38] = 1.23690893E-01;
  COFETA[39] = -1.05236386E-02;
  COFETA[40] = -1.59985276E+01;
  COFETA[41] = 2.34853449E+00;
  COFETA[42] = -2.33829873E-01;
  COFETA[43] = 1.06843433E-02;
  COFETA[44] = -1.60310153E+01;
  COFETA[45] = 2.34853449E+00;
  COFETA[46] = -2.33829873E-01;
  COFETA[47] = 1.06843433E-02;
  COFETA[48] = -1.58693435E+01;
  COFETA[49] = 2.10116438E+00;
  COFETA[50] = -2.00797956E-01;
  COFETA[51] = 9.21449230E-03;
  COFETA[52] = -1.57874118E+01;
  COFETA[53] = 2.10116438E+00;
  COFETA[54] = -2.00797956E-01;
  COFETA[55] = 9.21449230E-03;
  COFETA[56] = -2.29729670E+01;
  COFETA[57] = 4.66432826E+00;
  COFETA[58] = -5.19757764E-01;
  COFETA[59] = 2.24435258E-02;
  COFETA[60] = -2.27464304E+01;
  COFETA[61] = 4.64768653E+00;
  COFETA[62] = -5.19267587E-01;
  COFETA[63] = 2.24932522E-02;
  COFETA[64] = -1.57703404E+01;
  COFETA[65] = 2.10116438E+00;
  COFETA[66] = -2.00797956E-01;
  COFETA[67] = 9.21449230E-03;
  COFETA[68] = -1.57703404E+01;
  COFETA[69] = 2.10116438E+00;
  COFETA[70] = -2.00797956E-01;
  COFETA[71] = 9.21449230E-03;
  COFETA[72] = -1.89321774E+01;
  COFETA[73] = 3.40942490E+00;
  COFETA[74] = -3.73456225E-01;
  COFETA[75] = 1.68128351E-02;
  COFETA[76] = -1.89476740E+01;
  COFETA[77] = 3.40942490E+00;
  COFETA[78] = -3.73456225E-01;
  COFETA[79] = 1.68128351E-02;
  COFETA[80] = -1.89476740E+01;
  COFETA[81] = 3.40942490E+00;
  COFETA[82] = -3.73456225E-01;
  COFETA[83] = 1.68128351E-02;
  COFETA[84] = -1.89636662E+01;
  COFETA[85] = 3.40942490E+00;
  COFETA[86] = -3.73456225E-01;
  COFETA[87] = 1.68128351E-02;
  COFETA[88] = -1.89636662E+01;
  COFETA[89] = 3.40942490E+00;
  COFETA[90] = -3.73456225E-01;
  COFETA[91] = 1.68128351E-02;
  COFETA[92] = -2.11419442E+01;
  COFETA[93] = 3.62831987E+00;
  COFETA[94] = -3.29929821E-01;
  COFETA[95] = 1.18934489E-02;
  COFETA[96] = -2.06709404E+01;
  COFETA[97] = 3.36561129E+00;
  COFETA[98] = -2.88203744E-01;
  COFETA[99] = 9.76980718E-03;
  COFETA[100] = -2.06709404E+01;
  COFETA[101] = 3.36561129E+00;
  COFETA[102] = -2.88203744E-01;
  COFETA[103] = 9.76980718E-03;
  COFETA[104] = -1.86362212E+01;
  COFETA[105] = 2.37697990E+00;
  COFETA[106] = -1.35658812E-01;
  COFETA[107] = 2.16026933E-03;
  COFETA[108] = -1.86281580E+01;
  COFETA[109] = 2.37697990E+00;
  COFETA[110] = -1.35658812E-01;
  COFETA[111] = 2.16026933E-03;
  COFETA[112] = -2.29102849E+01;
  COFETA[113] = 4.69644120E+00;
  COFETA[114] = -5.14303943E-01;
  COFETA[115] = 2.17998387E-02;
  COFETA[116] = -1.77381848E+01;
  COFETA[117] = 2.89373921E+00;
  COFETA[118] = -3.06394467E-01;
  COFETA[119] = 1.39040277E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = 2.33597100E+00;
  COFLAM[1] = 2.48728557E+00;
  COFLAM[2] = -3.03705415E-01;
  COFLAM[3] = 1.71404786E-02;
  COFLAM[4] = 1.49346439E+00;
  COFLAM[5] = 1.42762585E+00;
  COFLAM[6] = -6.42489163E-02;
  COFLAM[7] = 1.84431880E-03;
  COFLAM[8] = -1.73075242E+00;
  COFLAM[9] = 4.03005747E+00;
  COFLAM[10] = -4.51962353E-01;
  COFLAM[11] = 2.01268811E-02;
  COFLAM[12] = 7.11963049E-01;
  COFLAM[13] = 2.34853449E+00;
  COFLAM[14] = -2.33829873E-01;
  COFLAM[15] = 1.06843433E-02;
  COFLAM[16] = 7.56594591E+00;
  COFLAM[17] = -4.12899564E-01;
  COFLAM[18] = 1.30728695E-01;
  COFLAM[19] = -4.27101872E-03;
  COFLAM[20] = 3.54101199E+00;
  COFLAM[21] = 3.21790091E-01;
  COFLAM[22] = 1.24621348E-01;
  COFLAM[23] = -7.70910029E-03;
  COFLAM[24] = 1.71195373E+01;
  COFLAM[25] = -6.26703415E+00;
  COFLAM[26] = 1.14284618E+00;
  COFLAM[27] = -5.76317113E-02;
  COFLAM[28] = 3.10125511E+00;
  COFLAM[29] = 3.85392619E-01;
  COFLAM[30] = 1.47173301E-01;
  COFLAM[31] = -1.01680057E-02;
  COFLAM[32] = 7.90801447E+00;
  COFLAM[33] = -1.51681552E+00;
  COFLAM[34] = 3.80215951E-01;
  COFLAM[35] = -2.03429598E-02;
  COFLAM[36] = 1.68256346E+01;
  COFLAM[37] = -6.54138629E+00;
  COFLAM[38] = 1.25748129E+00;
  COFLAM[39] = -6.67947417E-02;
  COFLAM[40] = 1.72412892E+01;
  COFLAM[41] = -5.07519466E+00;
  COFLAM[42] = 8.71839902E-01;
  COFLAM[43] = -4.19345898E-02;
  COFLAM[44] = 7.19439313E+00;
  COFLAM[45] = -2.98198013E-01;
  COFLAM[46] = 1.27080277E-01;
  COFLAM[47] = -4.55911003E-03;
  COFLAM[48] = 1.04894816E+00;
  COFLAM[49] = 2.10116438E+00;
  COFLAM[50] = -2.00797956E-01;
  COFLAM[51] = 9.21449230E-03;
  COFLAM[52] = 1.52864691E+01;
  COFLAM[53] = -4.97554813E+00;
  COFLAM[54] = 9.12467478E-01;
  COFLAM[55] = -4.67345320E-02;
  COFLAM[56] = -3.71835329E+00;
  COFLAM[57] = 2.23570076E+00;
  COFLAM[58] = 7.75312504E-03;
  COFLAM[59] = -8.51883672E-03;
  COFLAM[60] = -2.26269885E-01;
  COFLAM[61] = 8.72729322E-01;
  COFLAM[62] = 1.83710439E-01;
  COFLAM[63] = -1.60320625E-02;
  COFLAM[64] = 2.81282083E+01;
  COFLAM[65] = -1.12224296E+01;
  COFLAM[66] = 1.89519680E+00;
  COFLAM[67] = -9.61714455E-02;
  COFLAM[68] = 1.96129291E+01;
  COFLAM[69] = -7.35906121E+00;
  COFLAM[70] = 1.32399926E+00;
  COFLAM[71] = -6.87508594E-02;
  COFLAM[72] = 3.55110747E+00;
  COFLAM[73] = -2.62224967E-01;
  COFLAM[74] = 3.04553944E-01;
  COFLAM[75] = -2.01561904E-02;
  COFLAM[76] = 8.62257083E+00;
  COFLAM[77] = -2.34654455E+00;
  COFLAM[78] = 5.77801659E-01;
  COFLAM[79] = -3.22118567E-02;
  COFLAM[80] = 4.80860512E+00;
  COFLAM[81] = -7.53995569E-01;
  COFLAM[82] = 3.57836276E-01;
  COFLAM[83] = -2.21531298E-02;
  COFLAM[84] = 1.40626515E+01;
  COFLAM[85] = -4.29915534E+00;
  COFLAM[86] = 7.82704885E-01;
  COFLAM[87] = -3.81461606E-02;
  COFLAM[88] = 2.90533431E+00;
  COFLAM[89] = 4.63729354E-01;
  COFLAM[90] = 1.27732935E-01;
  COFLAM[91] = -9.28393067E-03;
  COFLAM[92] = -4.58386872E+00;
  COFLAM[93] = 2.79475282E+00;
  COFLAM[94] = -1.23534097E-01;
  COFLAM[95] = -6.64742829E-04;
  COFLAM[96] = -6.76386791E+00;
  COFLAM[97] = 3.61980207E+00;
  COFLAM[98] = -2.16784493E-01;
  COFLAM[99] = 2.77940774E-03;
  COFLAM[100] = 1.36488322E+00;
  COFLAM[101] = -3.74183556E-01;
  COFLAM[102] = 4.09912293E-01;
  COFLAM[103] = -2.90456113E-02;
  COFLAM[104] = -9.86022586E+00;
  COFLAM[105] = 4.91528844E+00;
  COFLAM[106] = -4.08983702E-01;
  COFLAM[107] = 1.22061396E-02;
  COFLAM[108] = -1.48288694E+01;
  COFLAM[109] = 6.66387461E+00;
  COFLAM[110] = -5.95900034E-01;
  COFLAM[111] = 1.82628919E-02;
  COFLAM[112] = -8.61168629E+00;
  COFLAM[113] = 4.79280190E+00;
  COFLAM[114] = -4.29247345E-01;
  COFLAM[115] = 1.44646527E-02;
  COFLAM[116] = 8.47052053E+00;
  COFLAM[117] = -1.59343468E+00;
  COFLAM[118] = 3.67087730E-01;
  COFLAM[119] = -1.86448773E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.04990599E+01;
  COFD[1] = 2.26732153E+00;
  COFD[2] = -8.61408081E-02;
  COFD[3] = 4.02311798E-03;
  COFD[4] = -1.24644297E+01;
  COFD[5] = 2.81929703E+00;
  COFD[6] = -1.58997419E-01;
  COFD[7] = 7.22675698E-03;
  COFD[8] = -1.21757680E+01;
  COFD[9] = 3.10189444E+00;
  COFD[10] = -1.96763337E-01;
  COFD[11] = 8.91077792E-03;
  COFD[12] = -1.15394122E+01;
  COFD[13] = 2.55800063E+00;
  COFD[14] = -1.23269730E-01;
  COFD[15] = 5.59599793E-03;
  COFD[16] = -1.15427396E+01;
  COFD[17] = 2.55800063E+00;
  COFD[18] = -1.23269730E-01;
  COFD[19] = 5.59599793E-03;
  COFD[20] = -1.24653356E+01;
  COFD[21] = 2.81929703E+00;
  COFD[22] = -1.58997419E-01;
  COFD[23] = 7.22675698E-03;
  COFD[24] = -1.76500570E+01;
  COFD[25] = 4.83341414E+00;
  COFD[26] = -4.13936120E-01;
  COFD[27] = 1.80124116E-02;
  COFD[28] = -1.24661893E+01;
  COFD[29] = 2.81929703E+00;
  COFD[30] = -1.58997419E-01;
  COFD[31] = 7.22675698E-03;
  COFD[32] = -1.30578352E+01;
  COFD[33] = 3.06509866E+00;
  COFD[34] = -1.91896125E-01;
  COFD[35] = 8.69596065E-03;
  COFD[36] = -1.63743901E+01;
  COFD[37] = 4.36132704E+00;
  COFD[38] = -3.57872134E-01;
  COFD[39] = 1.57964031E-02;
  COFD[40] = -1.15039079E+01;
  COFD[41] = 2.55800063E+00;
  COFD[42] = -1.23269730E-01;
  COFD[43] = 5.59599793E-03;
  COFD[44] = -1.15001705E+01;
  COFD[45] = 2.55800063E+00;
  COFD[46] = -1.23269730E-01;
  COFD[47] = 5.59599793E-03;
  COFD[48] = -1.14512279E+01;
  COFD[49] = 2.45139089E+00;
  COFD[50] = -1.08437807E-01;
  COFD[51] = 4.90682837E-03;
  COFD[52] = -1.16395672E+01;
  COFD[53] = 2.45139089E+00;
  COFD[54] = -1.08437807E-01;
  COFD[55] = 4.90682837E-03;
  COFD[56] = -1.43372209E+01;
  COFD[57] = 3.45118074E+00;
  COFD[58] = -2.42595847E-01;
  COFD[59] = 1.09176859E-02;
  COFD[60] = -1.41727359E+01;
  COFD[61] = 3.42504312E+00;
  COFD[62] = -2.39198002E-01;
  COFD[63] = 1.07702803E-02;
  COFD[64] = -1.16406585E+01;
  COFD[65] = 2.45139089E+00;
  COFD[66] = -1.08437807E-01;
  COFD[67] = 4.90682837E-03;
  COFD[68] = -1.16406585E+01;
  COFD[69] = 2.45139089E+00;
  COFD[70] = -1.08437807E-01;
  COFD[71] = 4.90682837E-03;
  COFD[72] = -1.26378997E+01;
  COFD[73] = 2.88062866E+00;
  COFD[74] = -1.67071255E-01;
  COFD[75] = 7.58146324E-03;
  COFD[76] = -1.26369951E+01;
  COFD[77] = 2.88062866E+00;
  COFD[78] = -1.67071255E-01;
  COFD[79] = 7.58146324E-03;
  COFD[80] = -1.26369951E+01;
  COFD[81] = 2.88062866E+00;
  COFD[82] = -1.67071255E-01;
  COFD[83] = 7.58146324E-03;
  COFD[84] = -1.26360335E+01;
  COFD[85] = 2.88062866E+00;
  COFD[86] = -1.67071255E-01;
  COFD[87] = 7.58146324E-03;
  COFD[88] = -1.26360335E+01;
  COFD[89] = 2.88062866E+00;
  COFD[90] = -1.67071255E-01;
  COFD[91] = 7.58146324E-03;
  COFD[92] = -1.55610577E+01;
  COFD[93] = 3.94122260E+00;
  COFD[94] = -3.04959455E-01;
  COFD[95] = 1.35673989E-02;
  COFD[96] = -1.57537997E+01;
  COFD[97] = 4.00294157E+00;
  COFD[98] = -3.12933722E-01;
  COFD[99] = 1.39120599E-02;
  COFD[100] = -1.57537997E+01;
  COFD[101] = 4.00294157E+00;
  COFD[102] = -3.12933722E-01;
  COFD[103] = 1.39120599E-02;
  COFD[104] = -1.62239563E+01;
  COFD[105] = 4.14752768E+00;
  COFD[106] = -3.31167968E-01;
  COFD[107] = 1.46808520E-02;
  COFD[108] = -1.62242082E+01;
  COFD[109] = 4.14752768E+00;
  COFD[110] = -3.31167968E-01;
  COFD[111] = 1.46808520E-02;
  COFD[112] = -1.45501106E+01;
  COFD[113] = 3.57062617E+00;
  COFD[114] = -2.57920745E-01;
  COFD[115] = 1.15740264E-02;
  COFD[116] = -1.23361495E+01;
  COFD[117] = 2.75315266E+00;
  COFD[118] = -1.50257362E-01;
  COFD[119] = 6.84125771E-03;
  COFD[120] = -1.24644297E+01;
  COFD[121] = 2.81929703E+00;
  COFD[122] = -1.58997419E-01;
  COFD[123] = 7.22675698E-03;
  COFD[124] = -1.63566588E+01;
  COFD[125] = 3.82801980E+00;
  COFD[126] = -2.90506588E-01;
  COFD[127] = 1.29507729E-02;
  COFD[128] = -1.54214377E+01;
  COFD[129] = 4.16714450E+00;
  COFD[130] = -3.33485966E-01;
  COFD[131] = 1.47716776E-02;
  COFD[132] = -1.51735107E+01;
  COFD[133] = 3.54673926E+00;
  COFD[134] = -2.54900443E-01;
  COFD[135] = 1.14466286E-02;
  COFD[136] = -1.51936682E+01;
  COFD[137] = 3.54673926E+00;
  COFD[138] = -2.54900443E-01;
  COFD[139] = 1.14466286E-02;
  COFD[140] = -1.63643527E+01;
  COFD[141] = 3.82801980E+00;
  COFD[142] = -2.90506588E-01;
  COFD[143] = 1.29507729E-02;
  COFD[144] = -1.98338541E+01;
  COFD[145] = 4.98279938E+00;
  COFD[146] = -4.03496082E-01;
  COFD[147] = 1.63274725E-02;
  COFD[148] = -1.63717003E+01;
  COFD[149] = 3.82801980E+00;
  COFD[150] = -2.90506588E-01;
  COFD[151] = 1.29507729E-02;
  COFD[152] = -1.71285245E+01;
  COFD[153] = 4.13429358E+00;
  COFD[154] = -3.29582141E-01;
  COFD[155] = 1.46176681E-02;
  COFD[156] = -1.98554609E+01;
  COFD[157] = 5.10183770E+00;
  COFD[158] = -4.34283869E-01;
  COFD[159] = 1.82934402E-02;
  COFD[160] = -1.51415314E+01;
  COFD[161] = 3.54673926E+00;
  COFD[162] = -2.54900443E-01;
  COFD[163] = 1.14466286E-02;
  COFD[164] = -1.51196508E+01;
  COFD[165] = 3.54673926E+00;
  COFD[166] = -2.54900443E-01;
  COFD[167] = 1.14466286E-02;
  COFD[168] = -1.49976437E+01;
  COFD[169] = 3.43432294E+00;
  COFD[170] = -2.40398689E-01;
  COFD[171] = 1.08220935E-02;
  COFD[172] = -1.53634618E+01;
  COFD[173] = 3.43432294E+00;
  COFD[174] = -2.40398689E-01;
  COFD[175] = 1.08220935E-02;
  COFD[176] = -1.86432219E+01;
  COFD[177] = 4.58973997E+00;
  COFD[178] = -3.86396661E-01;
  COFD[179] = 1.69894521E-02;
  COFD[180] = -1.84585119E+01;
  COFD[181] = 4.55714003E+00;
  COFD[182] = -3.82304130E-01;
  COFD[183] = 1.68173362E-02;
  COFD[184] = -1.53723411E+01;
  COFD[185] = 3.43432294E+00;
  COFD[186] = -2.40398689E-01;
  COFD[187] = 1.08220935E-02;
  COFD[188] = -1.53723411E+01;
  COFD[189] = 3.43432294E+00;
  COFD[190] = -2.40398689E-01;
  COFD[191] = 1.08220935E-02;
  COFD[192] = -1.66388020E+01;
  COFD[193] = 3.92641057E+00;
  COFD[194] = -3.03041624E-01;
  COFD[195] = 1.34843019E-02;
  COFD[196] = -1.66311167E+01;
  COFD[197] = 3.92641057E+00;
  COFD[198] = -3.03041624E-01;
  COFD[199] = 1.34843019E-02;
  COFD[200] = -1.66311167E+01;
  COFD[201] = 3.92641057E+00;
  COFD[202] = -3.03041624E-01;
  COFD[203] = 1.34843019E-02;
  COFD[204] = -1.66230596E+01;
  COFD[205] = 3.92641057E+00;
  COFD[206] = -3.03041624E-01;
  COFD[207] = 1.34843019E-02;
  COFD[208] = -1.66230596E+01;
  COFD[209] = 3.92641057E+00;
  COFD[210] = -3.03041624E-01;
  COFD[211] = 1.34843019E-02;
  COFD[212] = -1.98776585E+01;
  COFD[213] = 4.99728320E+00;
  COFD[214] = -4.31232778E-01;
  COFD[215] = 1.85977437E-02;
  COFD[216] = -1.99984200E+01;
  COFD[217] = 5.02165654E+00;
  COFD[218] = -4.33273988E-01;
  COFD[219] = 1.86397032E-02;
  COFD[220] = -1.99984200E+01;
  COFD[221] = 5.02165654E+00;
  COFD[222] = -4.33273988E-01;
  COFD[223] = 1.86397032E-02;
  COFD[224] = -2.02940915E+01;
  COFD[225] = 5.05608877E+00;
  COFD[226] = -4.33916802E-01;
  COFD[227] = 1.85080064E-02;
  COFD[228] = -2.02968216E+01;
  COFD[229] = 5.05608877E+00;
  COFD[230] = -4.33916802E-01;
  COFD[231] = 1.85080064E-02;
  COFD[232] = -1.89380489E+01;
  COFD[233] = 4.70017385E+00;
  COFD[234] = -3.99010079E-01;
  COFD[235] = 1.74642383E-02;
  COFD[236] = -1.60613819E+01;
  COFD[237] = 3.71236773E+00;
  COFD[238] = -2.75612682E-01;
  COFD[239] = 1.23100131E-02;
  COFD[240] = -1.21757680E+01;
  COFD[241] = 3.10189444E+00;
  COFD[242] = -1.96763337E-01;
  COFD[243] = 8.91077792E-03;
  COFD[244] = -1.54214377E+01;
  COFD[245] = 4.16714450E+00;
  COFD[246] = -3.33485966E-01;
  COFD[247] = 1.47716776E-02;
  COFD[248] = -1.54874027E+01;
  COFD[249] = 4.52748569E+00;
  COFD[250] = -3.78558416E-01;
  COFD[251] = 1.66588204E-02;
  COFD[252] = -1.42311295E+01;
  COFD[253] = 3.83461834E+00;
  COFD[254] = -2.91346712E-01;
  COFD[255] = 1.29864869E-02;
  COFD[256] = -1.42328890E+01;
  COFD[257] = 3.83461834E+00;
  COFD[258] = -2.91346712E-01;
  COFD[259] = 1.29864869E-02;
  COFD[260] = -1.54219042E+01;
  COFD[261] = 4.16714450E+00;
  COFD[262] = -3.33485966E-01;
  COFD[263] = 1.47716776E-02;
  COFD[264] = -1.79459464E+01;
  COFD[265] = 4.90812804E+00;
  COFD[266] = -3.89562266E-01;
  COFD[267] = 1.55498193E-02;
  COFD[268] = -1.54223435E+01;
  COFD[269] = 4.16714450E+00;
  COFD[270] = -3.33485966E-01;
  COFD[271] = 1.47716776E-02;
  COFD[272] = -1.62182010E+01;
  COFD[273] = 4.47380359E+00;
  COFD[274] = -3.71802774E-01;
  COFD[275] = 1.63740157E-02;
  COFD[276] = -1.82726876E+01;
  COFD[277] = 5.05914185E+00;
  COFD[278] = -4.17676371E-01;
  COFD[279] = 1.71189139E-02;
  COFD[280] = -1.41890671E+01;
  COFD[281] = 3.83461834E+00;
  COFD[282] = -2.91346712E-01;
  COFD[283] = 1.29864869E-02;
  COFD[284] = -1.41870843E+01;
  COFD[285] = 3.83461834E+00;
  COFD[286] = -2.91346712E-01;
  COFD[287] = 1.29864869E-02;
  COFD[288] = -1.40848690E+01;
  COFD[289] = 3.70003870E+00;
  COFD[290] = -2.74031258E-01;
  COFD[291] = 1.22422674E-02;
  COFD[292] = -1.42812980E+01;
  COFD[293] = 3.70003870E+00;
  COFD[294] = -2.74031258E-01;
  COFD[295] = 1.22422674E-02;
  COFD[296] = -1.76471868E+01;
  COFD[297] = 4.85888742E+00;
  COFD[298] = -4.16924100E-01;
  COFD[299] = 1.81289471E-02;
  COFD[300] = -1.74595260E+01;
  COFD[301] = 4.83157593E+00;
  COFD[302] = -4.13711451E-01;
  COFD[303] = 1.80032208E-02;
  COFD[304] = -1.42818617E+01;
  COFD[305] = 3.70003870E+00;
  COFD[306] = -2.74031258E-01;
  COFD[307] = 1.22422674E-02;
  COFD[308] = -1.42818617E+01;
  COFD[309] = 3.70003870E+00;
  COFD[310] = -2.74031258E-01;
  COFD[311] = 1.22422674E-02;
  COFD[312] = -1.57082437E+01;
  COFD[313] = 4.26760732E+00;
  COFD[314] = -3.46098875E-01;
  COFD[315] = 1.53012333E-02;
  COFD[316] = -1.57077779E+01;
  COFD[317] = 4.26760732E+00;
  COFD[318] = -3.46098875E-01;
  COFD[319] = 1.53012333E-02;
  COFD[320] = -1.57077779E+01;
  COFD[321] = 4.26760732E+00;
  COFD[322] = -3.46098875E-01;
  COFD[323] = 1.53012333E-02;
  COFD[324] = -1.57072822E+01;
  COFD[325] = 4.26760732E+00;
  COFD[326] = -3.46098875E-01;
  COFD[327] = 1.53012333E-02;
  COFD[328] = -1.57072822E+01;
  COFD[329] = 4.26760732E+00;
  COFD[330] = -3.46098875E-01;
  COFD[331] = 1.53012333E-02;
  COFD[332] = -1.83971422E+01;
  COFD[333] = 5.08450371E+00;
  COFD[334] = -4.34067856E-01;
  COFD[335] = 1.83677750E-02;
  COFD[336] = -1.84947678E+01;
  COFD[337] = 5.09594363E+00;
  COFD[338] = -4.34051486E-01;
  COFD[339] = 1.83051728E-02;
  COFD[340] = -1.84947678E+01;
  COFD[341] = 5.09594363E+00;
  COFD[342] = -4.34051486E-01;
  COFD[343] = 1.83051728E-02;
  COFD[344] = -1.87088900E+01;
  COFD[345] = 5.10571650E+00;
  COFD[346] = -4.30792656E-01;
  COFD[347] = 1.79773036E-02;
  COFD[348] = -1.87090179E+01;
  COFD[349] = 5.10571650E+00;
  COFD[350] = -4.30792656E-01;
  COFD[351] = 1.79773036E-02;
  COFD[352] = -1.78359091E+01;
  COFD[353] = 4.95976558E+00;
  COFD[354] = -4.27732001E-01;
  COFD[355] = 1.85030487E-02;
  COFD[356] = -1.52282485E+01;
  COFD[357] = 4.07848496E+00;
  COFD[358] = -3.22647626E-01;
  COFD[359] = 1.43298383E-02;
  COFD[360] = -1.15394122E+01;
  COFD[361] = 2.55800063E+00;
  COFD[362] = -1.23269730E-01;
  COFD[363] = 5.59599793E-03;
  COFD[364] = -1.51735107E+01;
  COFD[365] = 3.54673926E+00;
  COFD[366] = -2.54900443E-01;
  COFD[367] = 1.14466286E-02;
  COFD[368] = -1.42311295E+01;
  COFD[369] = 3.83461834E+00;
  COFD[370] = -2.91346712E-01;
  COFD[371] = 1.29864869E-02;
  COFD[372] = -1.39320868E+01;
  COFD[373] = 3.21909911E+00;
  COFD[374] = -2.11850626E-01;
  COFD[375] = 9.55839253E-03;
  COFD[376] = -1.39471282E+01;
  COFD[377] = 3.21909911E+00;
  COFD[378] = -2.11850626E-01;
  COFD[379] = 9.55839253E-03;
  COFD[380] = -1.51786267E+01;
  COFD[381] = 3.54673926E+00;
  COFD[382] = -2.54900443E-01;
  COFD[383] = 1.14466286E-02;
  COFD[384] = -1.92060802E+01;
  COFD[385] = 5.07198371E+00;
  COFD[386] = -4.34157597E-01;
  COFD[387] = 1.84430801E-02;
  COFD[388] = -1.51834878E+01;
  COFD[389] = 3.54673926E+00;
  COFD[390] = -2.54900443E-01;
  COFD[391] = 1.14466286E-02;
  COFD[392] = -1.57777529E+01;
  COFD[393] = 3.78663124E+00;
  COFD[394] = -2.85202205E-01;
  COFD[395] = 1.27237385E-02;
  COFD[396] = -1.90761585E+01;
  COFD[397] = 5.02767971E+00;
  COFD[398] = -4.33406285E-01;
  COFD[399] = 1.86183022E-02;
  COFD[400] = -1.38957631E+01;
  COFD[401] = 3.21909911E+00;
  COFD[402] = -2.11850626E-01;
  COFD[403] = 9.55839253E-03;
  COFD[404] = -1.38792676E+01;
  COFD[405] = 3.21909911E+00;
  COFD[406] = -2.11850626E-01;
  COFD[407] = 9.55839253E-03;
  COFD[408] = -1.38496362E+01;
  COFD[409] = 3.13068087E+00;
  COFD[410] = -2.00477755E-01;
  COFD[411] = 9.07054904E-03;
  COFD[412] = -1.41698829E+01;
  COFD[413] = 3.13068087E+00;
  COFD[414] = -2.00477755E-01;
  COFD[415] = 9.07054904E-03;
  COFD[416] = -1.72582608E+01;
  COFD[417] = 4.22856403E+00;
  COFD[418] = -3.41184773E-01;
  COFD[419] = 1.50943174E-02;
  COFD[420] = -1.70754569E+01;
  COFD[421] = 4.19909678E+00;
  COFD[422] = -3.37493433E-01;
  COFD[423] = 1.49397054E-02;
  COFD[424] = -1.41758829E+01;
  COFD[425] = 3.13068087E+00;
  COFD[426] = -2.00477755E-01;
  COFD[427] = 9.07054904E-03;
  COFD[428] = -1.41758829E+01;
  COFD[429] = 3.13068087E+00;
  COFD[430] = -2.00477755E-01;
  COFD[431] = 9.07054904E-03;
  COFD[432] = -1.53803793E+01;
  COFD[433] = 3.61618043E+00;
  COFD[434] = -2.63626979E-01;
  COFD[435] = 1.18123303E-02;
  COFD[436] = -1.53752695E+01;
  COFD[437] = 3.61618043E+00;
  COFD[438] = -2.63626979E-01;
  COFD[439] = 1.18123303E-02;
  COFD[440] = -1.53752695E+01;
  COFD[441] = 3.61618043E+00;
  COFD[442] = -2.63626979E-01;
  COFD[443] = 1.18123303E-02;
  COFD[444] = -1.53698844E+01;
  COFD[445] = 3.61618043E+00;
  COFD[446] = -2.63626979E-01;
  COFD[447] = 1.18123303E-02;
  COFD[448] = -1.53698844E+01;
  COFD[449] = 3.61618043E+00;
  COFD[450] = -2.63626979E-01;
  COFD[451] = 1.18123303E-02;
  COFD[452] = -1.86733098E+01;
  COFD[453] = 4.74926712E+00;
  COFD[454] = -4.04227356E-01;
  COFD[455] = 1.76416526E-02;
  COFD[456] = -1.88185092E+01;
  COFD[457] = 4.78477078E+00;
  COFD[458] = -4.07957791E-01;
  COFD[459] = 1.77663128E-02;
  COFD[460] = -1.88185092E+01;
  COFD[461] = 4.78477078E+00;
  COFD[462] = -4.07957791E-01;
  COFD[463] = 1.77663128E-02;
  COFD[464] = -1.93332949E+01;
  COFD[465] = 4.92428527E+00;
  COFD[466] = -4.24144048E-01;
  COFD[467] = 1.83894817E-02;
  COFD[468] = -1.93349381E+01;
  COFD[469] = 4.92428527E+00;
  COFD[470] = -4.24144048E-01;
  COFD[471] = 1.83894817E-02;
  COFD[472] = -1.76029792E+01;
  COFD[473] = 4.38093272E+00;
  COFD[474] = -3.60316345E-01;
  COFD[475] = 1.58984540E-02;
  COFD[476] = -1.49513692E+01;
  COFD[477] = 3.45291069E+00;
  COFD[478] = -2.42822180E-01;
  COFD[479] = 1.09275752E-02;
  COFD[480] = -1.15427396E+01;
  COFD[481] = 2.55800063E+00;
  COFD[482] = -1.23269730E-01;
  COFD[483] = 5.59599793E-03;
  COFD[484] = -1.51936682E+01;
  COFD[485] = 3.54673926E+00;
  COFD[486] = -2.54900443E-01;
  COFD[487] = 1.14466286E-02;
  COFD[488] = -1.42328890E+01;
  COFD[489] = 3.83461834E+00;
  COFD[490] = -2.91346712E-01;
  COFD[491] = 1.29864869E-02;
  COFD[492] = -1.39471282E+01;
  COFD[493] = 3.21909911E+00;
  COFD[494] = -2.11850626E-01;
  COFD[495] = 9.55839253E-03;
  COFD[496] = -1.39626362E+01;
  COFD[497] = 3.21909911E+00;
  COFD[498] = -2.11850626E-01;
  COFD[499] = 9.55839253E-03;
  COFD[500] = -1.51989958E+01;
  COFD[501] = 3.54673926E+00;
  COFD[502] = -2.54900443E-01;
  COFD[503] = 1.14466286E-02;
  COFD[504] = -1.92220275E+01;
  COFD[505] = 5.07198371E+00;
  COFD[506] = -4.34157597E-01;
  COFD[507] = 1.84430801E-02;
  COFD[508] = -1.52040601E+01;
  COFD[509] = 3.54673926E+00;
  COFD[510] = -2.54900443E-01;
  COFD[511] = 1.14466286E-02;
  COFD[512] = -1.57974653E+01;
  COFD[513] = 3.78663124E+00;
  COFD[514] = -2.85202205E-01;
  COFD[515] = 1.27237385E-02;
  COFD[516] = -1.90916772E+01;
  COFD[517] = 5.02767971E+00;
  COFD[518] = -4.33406285E-01;
  COFD[519] = 1.86183022E-02;
  COFD[520] = -1.39108160E+01;
  COFD[521] = 3.21909911E+00;
  COFD[522] = -2.11850626E-01;
  COFD[523] = 9.55839253E-03;
  COFD[524] = -1.38938248E+01;
  COFD[525] = 3.21909911E+00;
  COFD[526] = -2.11850626E-01;
  COFD[527] = 9.55839253E-03;
  COFD[528] = -1.38636649E+01;
  COFD[529] = 3.13068087E+00;
  COFD[530] = -2.00477755E-01;
  COFD[531] = 9.07054904E-03;
  COFD[532] = -1.41893610E+01;
  COFD[533] = 3.13068087E+00;
  COFD[534] = -2.00477755E-01;
  COFD[535] = 9.07054904E-03;
  COFD[536] = -1.72784285E+01;
  COFD[537] = 4.22856403E+00;
  COFD[538] = -3.41184773E-01;
  COFD[539] = 1.50943174E-02;
  COFD[540] = -1.70954045E+01;
  COFD[541] = 4.19909678E+00;
  COFD[542] = -3.37493433E-01;
  COFD[543] = 1.49397054E-02;
  COFD[544] = -1.41956009E+01;
  COFD[545] = 3.13068087E+00;
  COFD[546] = -2.00477755E-01;
  COFD[547] = 9.07054904E-03;
  COFD[548] = -1.41956009E+01;
  COFD[549] = 3.13068087E+00;
  COFD[550] = -2.00477755E-01;
  COFD[551] = 9.07054904E-03;
  COFD[552] = -1.54007533E+01;
  COFD[553] = 3.61618043E+00;
  COFD[554] = -2.63626979E-01;
  COFD[555] = 1.18123303E-02;
  COFD[556] = -1.53954322E+01;
  COFD[557] = 3.61618043E+00;
  COFD[558] = -2.63626979E-01;
  COFD[559] = 1.18123303E-02;
  COFD[560] = -1.53954322E+01;
  COFD[561] = 3.61618043E+00;
  COFD[562] = -2.63626979E-01;
  COFD[563] = 1.18123303E-02;
  COFD[564] = -1.53898267E+01;
  COFD[565] = 3.61618043E+00;
  COFD[566] = -2.63626979E-01;
  COFD[567] = 1.18123303E-02;
  COFD[568] = -1.53898267E+01;
  COFD[569] = 3.61618043E+00;
  COFD[570] = -2.63626979E-01;
  COFD[571] = 1.18123303E-02;
  COFD[572] = -1.86957961E+01;
  COFD[573] = 4.74926712E+00;
  COFD[574] = -4.04227356E-01;
  COFD[575] = 1.76416526E-02;
  COFD[576] = -1.88411234E+01;
  COFD[577] = 4.78477078E+00;
  COFD[578] = -4.07957791E-01;
  COFD[579] = 1.77663128E-02;
  COFD[580] = -1.88411234E+01;
  COFD[581] = 4.78477078E+00;
  COFD[582] = -4.07957791E-01;
  COFD[583] = 1.77663128E-02;
  COFD[584] = -1.93574244E+01;
  COFD[585] = 4.92428527E+00;
  COFD[586] = -4.24144048E-01;
  COFD[587] = 1.83894817E-02;
  COFD[588] = -1.93591490E+01;
  COFD[589] = 4.92428527E+00;
  COFD[590] = -4.24144048E-01;
  COFD[591] = 1.83894817E-02;
  COFD[592] = -1.76252000E+01;
  COFD[593] = 4.38093272E+00;
  COFD[594] = -3.60316345E-01;
  COFD[595] = 1.58984540E-02;
  COFD[596] = -1.49705966E+01;
  COFD[597] = 3.45291069E+00;
  COFD[598] = -2.42822180E-01;
  COFD[599] = 1.09275752E-02;
  COFD[600] = -1.24653356E+01;
  COFD[601] = 2.81929703E+00;
  COFD[602] = -1.58997419E-01;
  COFD[603] = 7.22675698E-03;
  COFD[604] = -1.63643527E+01;
  COFD[605] = 3.82801980E+00;
  COFD[606] = -2.90506588E-01;
  COFD[607] = 1.29507729E-02;
  COFD[608] = -1.54219042E+01;
  COFD[609] = 4.16714450E+00;
  COFD[610] = -3.33485966E-01;
  COFD[611] = 1.47716776E-02;
  COFD[612] = -1.51786267E+01;
  COFD[613] = 3.54673926E+00;
  COFD[614] = -2.54900443E-01;
  COFD[615] = 1.14466286E-02;
  COFD[616] = -1.51989958E+01;
  COFD[617] = 3.54673926E+00;
  COFD[618] = -2.54900443E-01;
  COFD[619] = 1.14466286E-02;
  COFD[620] = -1.63721668E+01;
  COFD[621] = 3.82801980E+00;
  COFD[622] = -2.90506588E-01;
  COFD[623] = 1.29507729E-02;
  COFD[624] = -1.98686869E+01;
  COFD[625] = 5.08008414E+00;
  COFD[626] = -4.25050712E-01;
  COFD[627] = 1.76283296E-02;
  COFD[628] = -1.63796310E+01;
  COFD[629] = 3.82801980E+00;
  COFD[630] = -2.90506588E-01;
  COFD[631] = 1.29507729E-02;
  COFD[632] = -1.71359694E+01;
  COFD[633] = 4.13429358E+00;
  COFD[634] = -3.29582141E-01;
  COFD[635] = 1.46176681E-02;
  COFD[636] = -1.98607935E+01;
  COFD[637] = 5.10183770E+00;
  COFD[638] = -4.34283869E-01;
  COFD[639] = 1.82934402E-02;
  COFD[640] = -1.51466526E+01;
  COFD[641] = 3.54673926E+00;
  COFD[642] = -2.54900443E-01;
  COFD[643] = 1.14466286E-02;
  COFD[644] = -1.51245516E+01;
  COFD[645] = 3.54673926E+00;
  COFD[646] = -2.54900443E-01;
  COFD[647] = 1.14466286E-02;
  COFD[648] = -1.50023146E+01;
  COFD[649] = 3.43432294E+00;
  COFD[650] = -2.40398689E-01;
  COFD[651] = 1.08220935E-02;
  COFD[652] = -1.53707777E+01;
  COFD[653] = 3.43432294E+00;
  COFD[654] = -2.40398689E-01;
  COFD[655] = 1.08220935E-02;
  COFD[656] = -1.86509216E+01;
  COFD[657] = 4.58973997E+00;
  COFD[658] = -3.86396661E-01;
  COFD[659] = 1.69894521E-02;
  COFD[660] = -1.84660877E+01;
  COFD[661] = 4.55714003E+00;
  COFD[662] = -3.82304130E-01;
  COFD[663] = 1.68173362E-02;
  COFD[664] = -1.53797890E+01;
  COFD[665] = 3.43432294E+00;
  COFD[666] = -2.40398689E-01;
  COFD[667] = 1.08220935E-02;
  COFD[668] = -1.53797890E+01;
  COFD[669] = 3.43432294E+00;
  COFD[670] = -2.40398689E-01;
  COFD[671] = 1.08220935E-02;
  COFD[672] = -1.66466189E+01;
  COFD[673] = 3.92641057E+00;
  COFD[674] = -3.03041624E-01;
  COFD[675] = 1.34843019E-02;
  COFD[676] = -1.66388134E+01;
  COFD[677] = 3.92641057E+00;
  COFD[678] = -3.03041624E-01;
  COFD[679] = 1.34843019E-02;
  COFD[680] = -1.66388134E+01;
  COFD[681] = 3.92641057E+00;
  COFD[682] = -3.03041624E-01;
  COFD[683] = 1.34843019E-02;
  COFD[684] = -1.66306324E+01;
  COFD[685] = 3.92641057E+00;
  COFD[686] = -3.03041624E-01;
  COFD[687] = 1.34843019E-02;
  COFD[688] = -1.66306324E+01;
  COFD[689] = 3.92641057E+00;
  COFD[690] = -3.03041624E-01;
  COFD[691] = 1.34843019E-02;
  COFD[692] = -1.98867465E+01;
  COFD[693] = 4.99728320E+00;
  COFD[694] = -4.31232778E-01;
  COFD[695] = 1.85977437E-02;
  COFD[696] = -2.00075895E+01;
  COFD[697] = 5.02165654E+00;
  COFD[698] = -4.33273988E-01;
  COFD[699] = 1.86397032E-02;
  COFD[700] = -2.00075895E+01;
  COFD[701] = 5.02165654E+00;
  COFD[702] = -4.33273988E-01;
  COFD[703] = 1.86397032E-02;
  COFD[704] = -2.03042665E+01;
  COFD[705] = 5.05608877E+00;
  COFD[706] = -4.33916802E-01;
  COFD[707] = 1.85080064E-02;
  COFD[708] = -2.03070528E+01;
  COFD[709] = 5.05608877E+00;
  COFD[710] = -4.33916802E-01;
  COFD[711] = 1.85080064E-02;
  COFD[712] = -1.89469698E+01;
  COFD[713] = 4.70017385E+00;
  COFD[714] = -3.99010079E-01;
  COFD[715] = 1.74642383E-02;
  COFD[716] = -1.60685613E+01;
  COFD[717] = 3.71236773E+00;
  COFD[718] = -2.75612682E-01;
  COFD[719] = 1.23100131E-02;
  COFD[720] = -1.76500570E+01;
  COFD[721] = 4.83341414E+00;
  COFD[722] = -4.13936120E-01;
  COFD[723] = 1.80124116E-02;
  COFD[724] = -1.98338541E+01;
  COFD[725] = 4.98279938E+00;
  COFD[726] = -4.03496082E-01;
  COFD[727] = 1.63274725E-02;
  COFD[728] = -1.79459464E+01;
  COFD[729] = 4.90812804E+00;
  COFD[730] = -3.89562266E-01;
  COFD[731] = 1.55498193E-02;
  COFD[732] = -1.92060802E+01;
  COFD[733] = 5.07198371E+00;
  COFD[734] = -4.34157597E-01;
  COFD[735] = 1.84430801E-02;
  COFD[736] = -1.92220275E+01;
  COFD[737] = 5.07198371E+00;
  COFD[738] = -4.34157597E-01;
  COFD[739] = 1.84430801E-02;
  COFD[740] = -1.98686869E+01;
  COFD[741] = 5.08008414E+00;
  COFD[742] = -4.25050712E-01;
  COFD[743] = 1.76283296E-02;
  COFD[744] = -1.06845780E+01;
  COFD[745] = 3.97634560E-01;
  COFD[746] = 3.18105907E-01;
  COFD[747] = -1.95868568E-02;
  COFD[748] = -1.98739464E+01;
  COFD[749] = 5.08008414E+00;
  COFD[750] = -4.25050712E-01;
  COFD[751] = 1.76283296E-02;
  COFD[752] = -1.96956369E+01;
  COFD[753] = 4.93468186E+00;
  COFD[754] = -3.94811418E-01;
  COFD[755] = 1.58506272E-02;
  COFD[756] = -1.36621996E+01;
  COFD[757] = 1.97700949E+00;
  COFD[758] = 7.07665266E-02;
  COFD[759] = -7.61137578E-03;
  COFD[760] = -1.91687756E+01;
  COFD[761] = 5.07198371E+00;
  COFD[762] = -4.34157597E-01;
  COFD[763] = 1.84430801E-02;
  COFD[764] = -1.91513185E+01;
  COFD[765] = 5.07198371E+00;
  COFD[766] = -4.34157597E-01;
  COFD[767] = 1.84430801E-02;
  COFD[768] = -1.92128459E+01;
  COFD[769] = 5.04266002E+00;
  COFD[770] = -4.33607391E-01;
  COFD[771] = 1.85541793E-02;
  COFD[772] = -1.95474506E+01;
  COFD[773] = 5.04266002E+00;
  COFD[774] = -4.33607391E-01;
  COFD[775] = 1.85541793E-02;
  COFD[776] = -1.92386332E+01;
  COFD[777] = 4.46256606E+00;
  COFD[778] = -3.12846009E-01;
  COFD[779] = 1.14536573E-02;
  COFD[780] = -1.91959729E+01;
  COFD[781] = 4.49891559E+00;
  COFD[782] = -3.18945742E-01;
  COFD[783] = 1.17738080E-02;
  COFD[784] = -1.95539202E+01;
  COFD[785] = 5.04266002E+00;
  COFD[786] = -4.33607391E-01;
  COFD[787] = 1.85541793E-02;
  COFD[788] = -1.95539202E+01;
  COFD[789] = 5.04266002E+00;
  COFD[790] = -4.33607391E-01;
  COFD[791] = 1.85541793E-02;
  COFD[792] = -1.99242108E+01;
  COFD[793] = 5.07019743E+00;
  COFD[794] = -4.20771044E-01;
  COFD[795] = 1.73206308E-02;
  COFD[796] = -1.99186867E+01;
  COFD[797] = 5.07019743E+00;
  COFD[798] = -4.20771044E-01;
  COFD[799] = 1.73206308E-02;
  COFD[800] = -1.99186867E+01;
  COFD[801] = 5.07019743E+00;
  COFD[802] = -4.20771044E-01;
  COFD[803] = 1.73206308E-02;
  COFD[804] = -1.99128699E+01;
  COFD[805] = 5.07019743E+00;
  COFD[806] = -4.20771044E-01;
  COFD[807] = 1.73206308E-02;
  COFD[808] = -1.99128699E+01;
  COFD[809] = 5.07019743E+00;
  COFD[810] = -4.20771044E-01;
  COFD[811] = 1.73206308E-02;
  COFD[812] = -1.68175518E+01;
  COFD[813] = 3.25019671E+00;
  COFD[814] = -1.21866160E-01;
  COFD[815] = 1.81635548E-03;
  COFD[816] = -1.65526350E+01;
  COFD[817] = 3.10349438E+00;
  COFD[818] = -9.93256746E-02;
  COFD[819] = 6.99801450E-04;
  COFD[820] = -1.65526350E+01;
  COFD[821] = 3.10349438E+00;
  COFD[822] = -9.93256746E-02;
  COFD[823] = 6.99801450E-04;
  COFD[824] = -1.56840943E+01;
  COFD[825] = 2.63195728E+00;
  COFD[826] = -2.77536872E-02;
  COFD[827] = -2.81468315E-03;
  COFD[828] = -1.56858982E+01;
  COFD[829] = 2.63195728E+00;
  COFD[830] = -2.77536872E-02;
  COFD[831] = -2.81468315E-03;
  COFD[832] = -1.87002631E+01;
  COFD[833] = 4.21062259E+00;
  COFD[834] = -2.72117720E-01;
  COFD[835] = 9.36166287E-03;
  COFD[836] = -1.99665282E+01;
  COFD[837] = 5.06422780E+00;
  COFD[838] = -4.18763984E-01;
  COFD[839] = 1.71836367E-02;
  COFD[840] = -1.24661893E+01;
  COFD[841] = 2.81929703E+00;
  COFD[842] = -1.58997419E-01;
  COFD[843] = 7.22675698E-03;
  COFD[844] = -1.63717003E+01;
  COFD[845] = 3.82801980E+00;
  COFD[846] = -2.90506588E-01;
  COFD[847] = 1.29507729E-02;
  COFD[848] = -1.54223435E+01;
  COFD[849] = 4.16714450E+00;
  COFD[850] = -3.33485966E-01;
  COFD[851] = 1.47716776E-02;
  COFD[852] = -1.51834878E+01;
  COFD[853] = 3.54673926E+00;
  COFD[854] = -2.54900443E-01;
  COFD[855] = 1.14466286E-02;
  COFD[856] = -1.52040601E+01;
  COFD[857] = 3.54673926E+00;
  COFD[858] = -2.54900443E-01;
  COFD[859] = 1.14466286E-02;
  COFD[860] = -1.63796310E+01;
  COFD[861] = 3.82801980E+00;
  COFD[862] = -2.90506588E-01;
  COFD[863] = 1.29507729E-02;
  COFD[864] = -1.98739464E+01;
  COFD[865] = 5.08008414E+00;
  COFD[866] = -4.25050712E-01;
  COFD[867] = 1.76283296E-02;
  COFD[868] = -1.63872082E+01;
  COFD[869] = 3.82801980E+00;
  COFD[870] = -2.90506588E-01;
  COFD[871] = 1.29507729E-02;
  COFD[872] = -1.71430756E+01;
  COFD[873] = 4.13429358E+00;
  COFD[874] = -3.29582141E-01;
  COFD[875] = 1.46176681E-02;
  COFD[876] = -1.98658625E+01;
  COFD[877] = 5.10183770E+00;
  COFD[878] = -4.34283869E-01;
  COFD[879] = 1.82934402E-02;
  COFD[880] = -1.51515186E+01;
  COFD[881] = 3.54673926E+00;
  COFD[882] = -2.54900443E-01;
  COFD[883] = 1.14466286E-02;
  COFD[884] = -1.51292063E+01;
  COFD[885] = 3.54673926E+00;
  COFD[886] = -2.54900443E-01;
  COFD[887] = 1.14466286E-02;
  COFD[888] = -1.50067489E+01;
  COFD[889] = 3.43432294E+00;
  COFD[890] = -2.40398689E-01;
  COFD[891] = 1.08220935E-02;
  COFD[892] = -1.53777591E+01;
  COFD[893] = 3.43432294E+00;
  COFD[894] = -2.40398689E-01;
  COFD[895] = 1.08220935E-02;
  COFD[896] = -1.86582748E+01;
  COFD[897] = 4.58973997E+00;
  COFD[898] = -3.86396661E-01;
  COFD[899] = 1.69894521E-02;
  COFD[900] = -1.84733209E+01;
  COFD[901] = 4.55714003E+00;
  COFD[902] = -3.82304130E-01;
  COFD[903] = 1.68173362E-02;
  COFD[904] = -1.53868982E+01;
  COFD[905] = 3.43432294E+00;
  COFD[906] = -2.40398689E-01;
  COFD[907] = 1.08220935E-02;
  COFD[908] = -1.53868982E+01;
  COFD[909] = 3.43432294E+00;
  COFD[910] = -2.40398689E-01;
  COFD[911] = 1.08220935E-02;
  COFD[912] = -1.66540858E+01;
  COFD[913] = 3.92641057E+00;
  COFD[914] = -3.03041624E-01;
  COFD[915] = 1.34843019E-02;
  COFD[916] = -1.66461638E+01;
  COFD[917] = 3.92641057E+00;
  COFD[918] = -3.03041624E-01;
  COFD[919] = 1.34843019E-02;
  COFD[920] = -1.66461638E+01;
  COFD[921] = 3.92641057E+00;
  COFD[922] = -3.03041624E-01;
  COFD[923] = 1.34843019E-02;
  COFD[924] = -1.66378626E+01;
  COFD[925] = 3.92641057E+00;
  COFD[926] = -3.03041624E-01;
  COFD[927] = 1.34843019E-02;
  COFD[928] = -1.66378626E+01;
  COFD[929] = 3.92641057E+00;
  COFD[930] = -3.03041624E-01;
  COFD[931] = 1.34843019E-02;
  COFD[932] = -1.98954494E+01;
  COFD[933] = 4.99728320E+00;
  COFD[934] = -4.31232778E-01;
  COFD[935] = 1.85977437E-02;
  COFD[936] = -2.00163717E+01;
  COFD[937] = 5.02165654E+00;
  COFD[938] = -4.33273988E-01;
  COFD[939] = 1.86397032E-02;
  COFD[940] = -2.00163717E+01;
  COFD[941] = 5.02165654E+00;
  COFD[942] = -4.33273988E-01;
  COFD[943] = 1.86397032E-02;
  COFD[944] = -2.03140311E+01;
  COFD[945] = 5.05608877E+00;
  COFD[946] = -4.33916802E-01;
  COFD[947] = 1.85080064E-02;
  COFD[948] = -2.03168726E+01;
  COFD[949] = 5.05608877E+00;
  COFD[950] = -4.33916802E-01;
  COFD[951] = 1.85080064E-02;
  COFD[952] = -1.89555098E+01;
  COFD[953] = 4.70017385E+00;
  COFD[954] = -3.99010079E-01;
  COFD[955] = 1.74642383E-02;
  COFD[956] = -1.60754107E+01;
  COFD[957] = 3.71236773E+00;
  COFD[958] = -2.75612682E-01;
  COFD[959] = 1.23100131E-02;
  COFD[960] = -1.30578352E+01;
  COFD[961] = 3.06509866E+00;
  COFD[962] = -1.91896125E-01;
  COFD[963] = 8.69596065E-03;
  COFD[964] = -1.71285245E+01;
  COFD[965] = 4.13429358E+00;
  COFD[966] = -3.29582141E-01;
  COFD[967] = 1.46176681E-02;
  COFD[968] = -1.62182010E+01;
  COFD[969] = 4.47380359E+00;
  COFD[970] = -3.71802774E-01;
  COFD[971] = 1.63740157E-02;
  COFD[972] = -1.57777529E+01;
  COFD[973] = 3.78663124E+00;
  COFD[974] = -2.85202205E-01;
  COFD[975] = 1.27237385E-02;
  COFD[976] = -1.57974653E+01;
  COFD[977] = 3.78663124E+00;
  COFD[978] = -2.85202205E-01;
  COFD[979] = 1.27237385E-02;
  COFD[980] = -1.71359694E+01;
  COFD[981] = 4.13429358E+00;
  COFD[982] = -3.29582141E-01;
  COFD[983] = 1.46176681E-02;
  COFD[984] = -1.96956369E+01;
  COFD[985] = 4.93468186E+00;
  COFD[986] = -3.94811418E-01;
  COFD[987] = 1.58506272E-02;
  COFD[988] = -1.71430756E+01;
  COFD[989] = 4.13429358E+00;
  COFD[990] = -3.29582141E-01;
  COFD[991] = 1.46176681E-02;
  COFD[992] = -1.78890583E+01;
  COFD[993] = 4.42888437E+00;
  COFD[994] = -3.66250586E-01;
  COFD[995] = 1.61442910E-02;
  COFD[996] = -1.99432886E+01;
  COFD[997] = 5.06988339E+00;
  COFD[998] = -4.20617737E-01;
  COFD[999] = 1.73094448E-02;
  COFD[1000] = -1.57451228E+01;
  COFD[1001] = 3.78663124E+00;
  COFD[1002] = -2.85202205E-01;
  COFD[1003] = 1.27237385E-02;
  COFD[1004] = -1.57237063E+01;
  COFD[1005] = 3.78663124E+00;
  COFD[1006] = -2.85202205E-01;
  COFD[1007] = 1.27237385E-02;
  COFD[1008] = -1.55691313E+01;
  COFD[1009] = 3.66059188E+00;
  COFD[1010] = -2.69012876E-01;
  COFD[1011] = 1.20291678E-02;
  COFD[1012] = -1.59318813E+01;
  COFD[1013] = 3.66059188E+00;
  COFD[1014] = -2.69012876E-01;
  COFD[1015] = 1.20291678E-02;
  COFD[1016] = -1.92665905E+01;
  COFD[1017] = 4.81124617E+00;
  COFD[1018] = -4.11211619E-01;
  COFD[1019] = 1.79002513E-02;
  COFD[1020] = -1.90780221E+01;
  COFD[1021] = 4.77836191E+00;
  COFD[1022] = -4.07175409E-01;
  COFD[1023] = 1.77343779E-02;
  COFD[1024] = -1.59404864E+01;
  COFD[1025] = 3.66059188E+00;
  COFD[1026] = -2.69012876E-01;
  COFD[1027] = 1.20291678E-02;
  COFD[1028] = -1.59404864E+01;
  COFD[1029] = 3.66059188E+00;
  COFD[1030] = -2.69012876E-01;
  COFD[1031] = 1.20291678E-02;
  COFD[1032] = -1.73807134E+01;
  COFD[1033] = 4.21826574E+00;
  COFD[1034] = -3.39895198E-01;
  COFD[1035] = 1.50403279E-02;
  COFD[1036] = -1.73732769E+01;
  COFD[1037] = 4.21826574E+00;
  COFD[1038] = -3.39895198E-01;
  COFD[1039] = 1.50403279E-02;
  COFD[1040] = -1.73732769E+01;
  COFD[1041] = 4.21826574E+00;
  COFD[1042] = -3.39895198E-01;
  COFD[1043] = 1.50403279E-02;
  COFD[1044] = -1.73654768E+01;
  COFD[1045] = 4.21826574E+00;
  COFD[1046] = -3.39895198E-01;
  COFD[1047] = 1.50403279E-02;
  COFD[1048] = -1.73654768E+01;
  COFD[1049] = 4.21826574E+00;
  COFD[1050] = -3.39895198E-01;
  COFD[1051] = 1.50403279E-02;
  COFD[1052] = -2.01989417E+01;
  COFD[1053] = 5.07660334E+00;
  COFD[1054] = -4.34318917E-01;
  COFD[1055] = 1.84318552E-02;
  COFD[1056] = -2.02877902E+01;
  COFD[1057] = 5.08508436E+00;
  COFD[1058] = -4.33869874E-01;
  COFD[1059] = 1.83478099E-02;
  COFD[1060] = -2.02877902E+01;
  COFD[1061] = 5.08508436E+00;
  COFD[1062] = -4.33869874E-01;
  COFD[1063] = 1.83478099E-02;
  COFD[1064] = -2.05751015E+01;
  COFD[1065] = 5.11267713E+00;
  COFD[1066] = -4.33186524E-01;
  COFD[1067] = 1.81425679E-02;
  COFD[1068] = -2.05777168E+01;
  COFD[1069] = 5.11267713E+00;
  COFD[1070] = -4.33186524E-01;
  COFD[1071] = 1.81425679E-02;
  COFD[1072] = -1.95931934E+01;
  COFD[1073] = 4.93353492E+00;
  COFD[1074] = -4.25134704E-01;
  COFD[1075] = 1.84238308E-02;
  COFD[1076] = -1.68569214E+01;
  COFD[1077] = 4.02913840E+00;
  COFD[1078] = -3.16290979E-01;
  COFD[1079] = 1.40558694E-02;
  COFD[1080] = -1.63743901E+01;
  COFD[1081] = 4.36132704E+00;
  COFD[1082] = -3.57872134E-01;
  COFD[1083] = 1.57964031E-02;
  COFD[1084] = -1.98554609E+01;
  COFD[1085] = 5.10183770E+00;
  COFD[1086] = -4.34283869E-01;
  COFD[1087] = 1.82934402E-02;
  COFD[1088] = -1.82726876E+01;
  COFD[1089] = 5.05914185E+00;
  COFD[1090] = -4.17676371E-01;
  COFD[1091] = 1.71189139E-02;
  COFD[1092] = -1.90761585E+01;
  COFD[1093] = 5.02767971E+00;
  COFD[1094] = -4.33406285E-01;
  COFD[1095] = 1.86183022E-02;
  COFD[1096] = -1.90916772E+01;
  COFD[1097] = 5.02767971E+00;
  COFD[1098] = -4.33406285E-01;
  COFD[1099] = 1.86183022E-02;
  COFD[1100] = -1.98607935E+01;
  COFD[1101] = 5.10183770E+00;
  COFD[1102] = -4.34283869E-01;
  COFD[1103] = 1.82934402E-02;
  COFD[1104] = -1.36621996E+01;
  COFD[1105] = 1.97700949E+00;
  COFD[1106] = 7.07665266E-02;
  COFD[1107] = -7.61137578E-03;
  COFD[1108] = -1.98658625E+01;
  COFD[1109] = 5.10183770E+00;
  COFD[1110] = -4.34283869E-01;
  COFD[1111] = 1.82934402E-02;
  COFD[1112] = -1.99432886E+01;
  COFD[1113] = 5.06988339E+00;
  COFD[1114] = -4.20617737E-01;
  COFD[1115] = 1.73094448E-02;
  COFD[1116] = -1.50486353E+01;
  COFD[1117] = 2.59259803E+00;
  COFD[1118] = -2.18183363E-02;
  COFD[1119] = -3.10471874E-03;
  COFD[1120] = -1.90409566E+01;
  COFD[1121] = 5.02767971E+00;
  COFD[1122] = -4.33406285E-01;
  COFD[1123] = 1.86183022E-02;
  COFD[1124] = -1.90239540E+01;
  COFD[1125] = 5.02767971E+00;
  COFD[1126] = -4.33406285E-01;
  COFD[1127] = 1.86183022E-02;
  COFD[1128] = -1.90202792E+01;
  COFD[1129] = 4.97353903E+00;
  COFD[1130] = -4.29135734E-01;
  COFD[1131] = 1.85479821E-02;
  COFD[1132] = -1.93419217E+01;
  COFD[1133] = 4.97353903E+00;
  COFD[1134] = -4.29135734E-01;
  COFD[1135] = 1.85479821E-02;
  COFD[1136] = -1.97887430E+01;
  COFD[1137] = 4.73772588E+00;
  COFD[1138] = -3.58832296E-01;
  COFD[1139] = 1.38668924E-02;
  COFD[1140] = -1.97659082E+01;
  COFD[1141] = 4.78110053E+00;
  COFD[1142] = -3.66021647E-01;
  COFD[1143] = 1.42430641E-02;
  COFD[1144] = -1.93481672E+01;
  COFD[1145] = 4.97353903E+00;
  COFD[1146] = -4.29135734E-01;
  COFD[1147] = 1.85479821E-02;
  COFD[1148] = -1.93481672E+01;
  COFD[1149] = 4.97353903E+00;
  COFD[1150] = -4.29135734E-01;
  COFD[1151] = 1.85479821E-02;
  COFD[1152] = -1.99629178E+01;
  COFD[1153] = 5.11249977E+00;
  COFD[1154] = -4.32909999E-01;
  COFD[1155] = 1.81201425E-02;
  COFD[1156] = -1.99575918E+01;
  COFD[1157] = 5.11249977E+00;
  COFD[1158] = -4.32909999E-01;
  COFD[1159] = 1.81201425E-02;
  COFD[1160] = -1.99575918E+01;
  COFD[1161] = 5.11249977E+00;
  COFD[1162] = -4.32909999E-01;
  COFD[1163] = 1.81201425E-02;
  COFD[1164] = -1.99519812E+01;
  COFD[1165] = 5.11249977E+00;
  COFD[1166] = -4.32909999E-01;
  COFD[1167] = 1.81201425E-02;
  COFD[1168] = -1.99519812E+01;
  COFD[1169] = 5.11249977E+00;
  COFD[1170] = -4.32909999E-01;
  COFD[1171] = 1.81201425E-02;
  COFD[1172] = -1.78473524E+01;
  COFD[1173] = 3.72976485E+00;
  COFD[1174] = -1.96451739E-01;
  COFD[1175] = 5.54355576E-03;
  COFD[1176] = -1.76580536E+01;
  COFD[1177] = 3.61580769E+00;
  COFD[1178] = -1.78483654E-01;
  COFD[1179] = 4.63783692E-03;
  COFD[1180] = -1.76580536E+01;
  COFD[1181] = 3.61580769E+00;
  COFD[1182] = -1.78483654E-01;
  COFD[1183] = 4.63783692E-03;
  COFD[1184] = -1.69825870E+01;
  COFD[1185] = 3.22734843E+00;
  COFD[1186] = -1.18346476E-01;
  COFD[1187] = 1.64165498E-03;
  COFD[1188] = -1.69843136E+01;
  COFD[1189] = 3.22734843E+00;
  COFD[1190] = -1.18346476E-01;
  COFD[1191] = 1.64165498E-03;
  COFD[1192] = -1.93585544E+01;
  COFD[1193] = 4.53056710E+00;
  COFD[1194] = -3.24342968E-01;
  COFD[1195] = 1.20596526E-02;
  COFD[1196] = -1.97543794E+01;
  COFD[1197] = 5.07974048E+00;
  COFD[1198] = -4.34449890E-01;
  COFD[1199] = 1.84260535E-02;
  COFD[1200] = -1.15039079E+01;
  COFD[1201] = 2.55800063E+00;
  COFD[1202] = -1.23269730E-01;
  COFD[1203] = 5.59599793E-03;
  COFD[1204] = -1.51415314E+01;
  COFD[1205] = 3.54673926E+00;
  COFD[1206] = -2.54900443E-01;
  COFD[1207] = 1.14466286E-02;
  COFD[1208] = -1.41890671E+01;
  COFD[1209] = 3.83461834E+00;
  COFD[1210] = -2.91346712E-01;
  COFD[1211] = 1.29864869E-02;
  COFD[1212] = -1.38957631E+01;
  COFD[1213] = 3.21909911E+00;
  COFD[1214] = -2.11850626E-01;
  COFD[1215] = 9.55839253E-03;
  COFD[1216] = -1.39108160E+01;
  COFD[1217] = 3.21909911E+00;
  COFD[1218] = -2.11850626E-01;
  COFD[1219] = 9.55839253E-03;
  COFD[1220] = -1.51466526E+01;
  COFD[1221] = 3.54673926E+00;
  COFD[1222] = -2.54900443E-01;
  COFD[1223] = 1.14466286E-02;
  COFD[1224] = -1.91687756E+01;
  COFD[1225] = 5.07198371E+00;
  COFD[1226] = -4.34157597E-01;
  COFD[1227] = 1.84430801E-02;
  COFD[1228] = -1.51515186E+01;
  COFD[1229] = 3.54673926E+00;
  COFD[1230] = -2.54900443E-01;
  COFD[1231] = 1.14466286E-02;
  COFD[1232] = -1.57451228E+01;
  COFD[1233] = 3.78663124E+00;
  COFD[1234] = -2.85202205E-01;
  COFD[1235] = 1.27237385E-02;
  COFD[1236] = -1.90409566E+01;
  COFD[1237] = 5.02767971E+00;
  COFD[1238] = -4.33406285E-01;
  COFD[1239] = 1.86183022E-02;
  COFD[1240] = -1.38587537E+01;
  COFD[1241] = 3.21909911E+00;
  COFD[1242] = -2.11850626E-01;
  COFD[1243] = 9.55839253E-03;
  COFD[1244] = -1.38422461E+01;
  COFD[1245] = 3.21909911E+00;
  COFD[1246] = -2.11850626E-01;
  COFD[1247] = 9.55839253E-03;
  COFD[1248] = -1.38166407E+01;
  COFD[1249] = 3.13068087E+00;
  COFD[1250] = -2.00477755E-01;
  COFD[1251] = 9.07054904E-03;
  COFD[1252] = -1.41395866E+01;
  COFD[1253] = 3.13068087E+00;
  COFD[1254] = -2.00477755E-01;
  COFD[1255] = 9.07054904E-03;
  COFD[1256] = -1.72299000E+01;
  COFD[1257] = 4.22856403E+00;
  COFD[1258] = -3.41184773E-01;
  COFD[1259] = 1.50943174E-02;
  COFD[1260] = -1.70456477E+01;
  COFD[1261] = 4.19909678E+00;
  COFD[1262] = -3.37493433E-01;
  COFD[1263] = 1.49397054E-02;
  COFD[1264] = -1.41455925E+01;
  COFD[1265] = 3.13068087E+00;
  COFD[1266] = -2.00477755E-01;
  COFD[1267] = 9.07054904E-03;
  COFD[1268] = -1.41455925E+01;
  COFD[1269] = 3.13068087E+00;
  COFD[1270] = -2.00477755E-01;
  COFD[1271] = 9.07054904E-03;
  COFD[1272] = -1.53485836E+01;
  COFD[1273] = 3.61618043E+00;
  COFD[1274] = -2.63626979E-01;
  COFD[1275] = 1.18123303E-02;
  COFD[1276] = -1.53434687E+01;
  COFD[1277] = 3.61618043E+00;
  COFD[1278] = -2.63626979E-01;
  COFD[1279] = 1.18123303E-02;
  COFD[1280] = -1.53434687E+01;
  COFD[1281] = 3.61618043E+00;
  COFD[1282] = -2.63626979E-01;
  COFD[1283] = 1.18123303E-02;
  COFD[1284] = -1.53380783E+01;
  COFD[1285] = 3.61618043E+00;
  COFD[1286] = -2.63626979E-01;
  COFD[1287] = 1.18123303E-02;
  COFD[1288] = -1.53380783E+01;
  COFD[1289] = 3.61618043E+00;
  COFD[1290] = -2.63626979E-01;
  COFD[1291] = 1.18123303E-02;
  COFD[1292] = -1.86433402E+01;
  COFD[1293] = 4.74926712E+00;
  COFD[1294] = -4.04227356E-01;
  COFD[1295] = 1.76416526E-02;
  COFD[1296] = -1.87889925E+01;
  COFD[1297] = 4.78477078E+00;
  COFD[1298] = -4.07957791E-01;
  COFD[1299] = 1.77663128E-02;
  COFD[1300] = -1.87889925E+01;
  COFD[1301] = 4.78477078E+00;
  COFD[1302] = -4.07957791E-01;
  COFD[1303] = 1.77663128E-02;
  COFD[1304] = -1.93049045E+01;
  COFD[1305] = 4.92428527E+00;
  COFD[1306] = -4.24144048E-01;
  COFD[1307] = 1.83894817E-02;
  COFD[1308] = -1.93065497E+01;
  COFD[1309] = 4.92428527E+00;
  COFD[1310] = -4.24144048E-01;
  COFD[1311] = 1.83894817E-02;
  COFD[1312] = -1.75728909E+01;
  COFD[1313] = 4.38093272E+00;
  COFD[1314] = -3.60316345E-01;
  COFD[1315] = 1.58984540E-02;
  COFD[1316] = -1.49202049E+01;
  COFD[1317] = 3.45291069E+00;
  COFD[1318] = -2.42822180E-01;
  COFD[1319] = 1.09275752E-02;
  COFD[1320] = -1.15001705E+01;
  COFD[1321] = 2.55800063E+00;
  COFD[1322] = -1.23269730E-01;
  COFD[1323] = 5.59599793E-03;
  COFD[1324] = -1.51196508E+01;
  COFD[1325] = 3.54673926E+00;
  COFD[1326] = -2.54900443E-01;
  COFD[1327] = 1.14466286E-02;
  COFD[1328] = -1.41870843E+01;
  COFD[1329] = 3.83461834E+00;
  COFD[1330] = -2.91346712E-01;
  COFD[1331] = 1.29864869E-02;
  COFD[1332] = -1.38792676E+01;
  COFD[1333] = 3.21909911E+00;
  COFD[1334] = -2.11850626E-01;
  COFD[1335] = 9.55839253E-03;
  COFD[1336] = -1.38938248E+01;
  COFD[1337] = 3.21909911E+00;
  COFD[1338] = -2.11850626E-01;
  COFD[1339] = 9.55839253E-03;
  COFD[1340] = -1.51245516E+01;
  COFD[1341] = 3.54673926E+00;
  COFD[1342] = -2.54900443E-01;
  COFD[1343] = 1.14466286E-02;
  COFD[1344] = -1.91513185E+01;
  COFD[1345] = 5.07198371E+00;
  COFD[1346] = -4.34157597E-01;
  COFD[1347] = 1.84430801E-02;
  COFD[1348] = -1.51292063E+01;
  COFD[1349] = 3.54673926E+00;
  COFD[1350] = -2.54900443E-01;
  COFD[1351] = 1.14466286E-02;
  COFD[1352] = -1.57237063E+01;
  COFD[1353] = 3.78663124E+00;
  COFD[1354] = -2.85202205E-01;
  COFD[1355] = 1.27237385E-02;
  COFD[1356] = -1.90239540E+01;
  COFD[1357] = 5.02767971E+00;
  COFD[1358] = -4.33406285E-01;
  COFD[1359] = 1.86183022E-02;
  COFD[1360] = -1.38422461E+01;
  COFD[1361] = 3.21909911E+00;
  COFD[1362] = -2.11850626E-01;
  COFD[1363] = 9.55839253E-03;
  COFD[1364] = -1.38262660E+01;
  COFD[1365] = 3.21909911E+00;
  COFD[1366] = -2.11850626E-01;
  COFD[1367] = 9.55839253E-03;
  COFD[1368] = -1.38012243E+01;
  COFD[1369] = 3.13068087E+00;
  COFD[1370] = -2.00477755E-01;
  COFD[1371] = 9.07054904E-03;
  COFD[1372] = -1.41184147E+01;
  COFD[1373] = 3.13068087E+00;
  COFD[1374] = -2.00477755E-01;
  COFD[1375] = 9.07054904E-03;
  COFD[1376] = -1.72080087E+01;
  COFD[1377] = 4.22856403E+00;
  COFD[1378] = -3.41184773E-01;
  COFD[1379] = 1.50943174E-02;
  COFD[1380] = -1.70239858E+01;
  COFD[1381] = 4.19909678E+00;
  COFD[1382] = -3.37493433E-01;
  COFD[1383] = 1.49397054E-02;
  COFD[1384] = -1.41241702E+01;
  COFD[1385] = 3.13068087E+00;
  COFD[1386] = -2.00477755E-01;
  COFD[1387] = 9.07054904E-03;
  COFD[1388] = -1.41241702E+01;
  COFD[1389] = 3.13068087E+00;
  COFD[1390] = -2.00477755E-01;
  COFD[1391] = 9.07054904E-03;
  COFD[1392] = -1.53264775E+01;
  COFD[1393] = 3.61618043E+00;
  COFD[1394] = -2.63626979E-01;
  COFD[1395] = 1.18123303E-02;
  COFD[1396] = -1.53215828E+01;
  COFD[1397] = 3.61618043E+00;
  COFD[1398] = -2.63626979E-01;
  COFD[1399] = 1.18123303E-02;
  COFD[1400] = -1.53215828E+01;
  COFD[1401] = 3.61618043E+00;
  COFD[1402] = -2.63626979E-01;
  COFD[1403] = 1.18123303E-02;
  COFD[1404] = -1.53164220E+01;
  COFD[1405] = 3.61618043E+00;
  COFD[1406] = -2.63626979E-01;
  COFD[1407] = 1.18123303E-02;
  COFD[1408] = -1.53164220E+01;
  COFD[1409] = 3.61618043E+00;
  COFD[1410] = -2.63626979E-01;
  COFD[1411] = 1.18123303E-02;
  COFD[1412] = -1.86190445E+01;
  COFD[1413] = 4.74926712E+00;
  COFD[1414] = -4.04227356E-01;
  COFD[1415] = 1.76416526E-02;
  COFD[1416] = -1.87645648E+01;
  COFD[1417] = 4.78477078E+00;
  COFD[1418] = -4.07957791E-01;
  COFD[1419] = 1.77663128E-02;
  COFD[1420] = -1.87645648E+01;
  COFD[1421] = 4.78477078E+00;
  COFD[1422] = -4.07957791E-01;
  COFD[1423] = 1.77663128E-02;
  COFD[1424] = -1.92789182E+01;
  COFD[1425] = 4.92428527E+00;
  COFD[1426] = -4.24144048E-01;
  COFD[1427] = 1.83894817E-02;
  COFD[1428] = -1.92804799E+01;
  COFD[1429] = 4.92428527E+00;
  COFD[1430] = -4.24144048E-01;
  COFD[1431] = 1.83894817E-02;
  COFD[1432] = -1.75488694E+01;
  COFD[1433] = 4.38093272E+00;
  COFD[1434] = -3.60316345E-01;
  COFD[1435] = 1.58984540E-02;
  COFD[1436] = -1.48992951E+01;
  COFD[1437] = 3.45291069E+00;
  COFD[1438] = -2.42822180E-01;
  COFD[1439] = 1.09275752E-02;
  COFD[1440] = -1.14512279E+01;
  COFD[1441] = 2.45139089E+00;
  COFD[1442] = -1.08437807E-01;
  COFD[1443] = 4.90682837E-03;
  COFD[1444] = -1.49976437E+01;
  COFD[1445] = 3.43432294E+00;
  COFD[1446] = -2.40398689E-01;
  COFD[1447] = 1.08220935E-02;
  COFD[1448] = -1.40848690E+01;
  COFD[1449] = 3.70003870E+00;
  COFD[1450] = -2.74031258E-01;
  COFD[1451] = 1.22422674E-02;
  COFD[1452] = -1.38496362E+01;
  COFD[1453] = 3.13068087E+00;
  COFD[1454] = -2.00477755E-01;
  COFD[1455] = 9.07054904E-03;
  COFD[1456] = -1.38636649E+01;
  COFD[1457] = 3.13068087E+00;
  COFD[1458] = -2.00477755E-01;
  COFD[1459] = 9.07054904E-03;
  COFD[1460] = -1.50023146E+01;
  COFD[1461] = 3.43432294E+00;
  COFD[1462] = -2.40398689E-01;
  COFD[1463] = 1.08220935E-02;
  COFD[1464] = -1.92128459E+01;
  COFD[1465] = 5.04266002E+00;
  COFD[1466] = -4.33607391E-01;
  COFD[1467] = 1.85541793E-02;
  COFD[1468] = -1.50067489E+01;
  COFD[1469] = 3.43432294E+00;
  COFD[1470] = -2.40398689E-01;
  COFD[1471] = 1.08220935E-02;
  COFD[1472] = -1.55691313E+01;
  COFD[1473] = 3.66059188E+00;
  COFD[1474] = -2.69012876E-01;
  COFD[1475] = 1.20291678E-02;
  COFD[1476] = -1.90202792E+01;
  COFD[1477] = 4.97353903E+00;
  COFD[1478] = -4.29135734E-01;
  COFD[1479] = 1.85479821E-02;
  COFD[1480] = -1.38166407E+01;
  COFD[1481] = 3.13068087E+00;
  COFD[1482] = -2.00477755E-01;
  COFD[1483] = 9.07054904E-03;
  COFD[1484] = -1.38012243E+01;
  COFD[1485] = 3.13068087E+00;
  COFD[1486] = -2.00477755E-01;
  COFD[1487] = 9.07054904E-03;
  COFD[1488] = -1.37291886E+01;
  COFD[1489] = 3.03109250E+00;
  COFD[1490] = -1.87396261E-01;
  COFD[1491] = 8.49727012E-03;
  COFD[1492] = -1.40249878E+01;
  COFD[1493] = 3.03109250E+00;
  COFD[1494] = -1.87396261E-01;
  COFD[1495] = 8.49727012E-03;
  COFD[1496] = -1.70449829E+01;
  COFD[1497] = 4.11427851E+00;
  COFD[1498] = -3.27138372E-01;
  COFD[1499] = 1.45181890E-02;
  COFD[1500] = -1.68819482E+01;
  COFD[1501] = 4.08944620E+00;
  COFD[1502] = -3.24042480E-01;
  COFD[1503] = 1.43892310E-02;
  COFD[1504] = -1.40304812E+01;
  COFD[1505] = 3.03109250E+00;
  COFD[1506] = -1.87396261E-01;
  COFD[1507] = 8.49727012E-03;
  COFD[1508] = -1.40304812E+01;
  COFD[1509] = 3.03109250E+00;
  COFD[1510] = -1.87396261E-01;
  COFD[1511] = 8.49727012E-03;
  COFD[1512] = -1.52354332E+01;
  COFD[1513] = 3.51822289E+00;
  COFD[1514] = -2.51252276E-01;
  COFD[1515] = 1.12908198E-02;
  COFD[1516] = -1.52307681E+01;
  COFD[1517] = 3.51822289E+00;
  COFD[1518] = -2.51252276E-01;
  COFD[1519] = 1.12908198E-02;
  COFD[1520] = -1.52307681E+01;
  COFD[1521] = 3.51822289E+00;
  COFD[1522] = -2.51252276E-01;
  COFD[1523] = 1.12908198E-02;
  COFD[1524] = -1.52258472E+01;
  COFD[1525] = 3.51822289E+00;
  COFD[1526] = -2.51252276E-01;
  COFD[1527] = 1.12908198E-02;
  COFD[1528] = -1.52258472E+01;
  COFD[1529] = 3.51822289E+00;
  COFD[1530] = -2.51252276E-01;
  COFD[1531] = 1.12908198E-02;
  COFD[1532] = -1.85179036E+01;
  COFD[1533] = 4.66474827E+00;
  COFD[1534] = -3.95139197E-01;
  COFD[1535] = 1.73269044E-02;
  COFD[1536] = -1.86600404E+01;
  COFD[1537] = 4.70102276E+00;
  COFD[1538] = -3.99099565E-01;
  COFD[1539] = 1.74672450E-02;
  COFD[1540] = -1.86600404E+01;
  COFD[1541] = 4.70102276E+00;
  COFD[1542] = -3.99099565E-01;
  COFD[1543] = 1.74672450E-02;
  COFD[1544] = -1.90953037E+01;
  COFD[1545] = 4.81121806E+00;
  COFD[1546] = -4.11208159E-01;
  COFD[1547] = 1.79001086E-02;
  COFD[1548] = -1.90967798E+01;
  COFD[1549] = 4.81121806E+00;
  COFD[1550] = -4.11208159E-01;
  COFD[1551] = 1.79001086E-02;
  COFD[1552] = -1.73363480E+01;
  COFD[1553] = 4.24280031E+00;
  COFD[1554] = -3.42971692E-01;
  COFD[1555] = 1.51693290E-02;
  COFD[1556] = -1.47434595E+01;
  COFD[1557] = 3.32669990E+00;
  COFD[1558] = -2.26245876E-01;
  COFD[1559] = 1.02009489E-02;
  COFD[1560] = -1.16395672E+01;
  COFD[1561] = 2.45139089E+00;
  COFD[1562] = -1.08437807E-01;
  COFD[1563] = 4.90682837E-03;
  COFD[1564] = -1.53634618E+01;
  COFD[1565] = 3.43432294E+00;
  COFD[1566] = -2.40398689E-01;
  COFD[1567] = 1.08220935E-02;
  COFD[1568] = -1.42812980E+01;
  COFD[1569] = 3.70003870E+00;
  COFD[1570] = -2.74031258E-01;
  COFD[1571] = 1.22422674E-02;
  COFD[1572] = -1.41698829E+01;
  COFD[1573] = 3.13068087E+00;
  COFD[1574] = -2.00477755E-01;
  COFD[1575] = 9.07054904E-03;
  COFD[1576] = -1.41893610E+01;
  COFD[1577] = 3.13068087E+00;
  COFD[1578] = -2.00477755E-01;
  COFD[1579] = 9.07054904E-03;
  COFD[1580] = -1.53707777E+01;
  COFD[1581] = 3.43432294E+00;
  COFD[1582] = -2.40398689E-01;
  COFD[1583] = 1.08220935E-02;
  COFD[1584] = -1.95474506E+01;
  COFD[1585] = 5.04266002E+00;
  COFD[1586] = -4.33607391E-01;
  COFD[1587] = 1.85541793E-02;
  COFD[1588] = -1.53777591E+01;
  COFD[1589] = 3.43432294E+00;
  COFD[1590] = -2.40398689E-01;
  COFD[1591] = 1.08220935E-02;
  COFD[1592] = -1.59318813E+01;
  COFD[1593] = 3.66059188E+00;
  COFD[1594] = -2.69012876E-01;
  COFD[1595] = 1.20291678E-02;
  COFD[1596] = -1.93419217E+01;
  COFD[1597] = 4.97353903E+00;
  COFD[1598] = -4.29135734E-01;
  COFD[1599] = 1.85479821E-02;
  COFD[1600] = -1.41395866E+01;
  COFD[1601] = 3.13068087E+00;
  COFD[1602] = -2.00477755E-01;
  COFD[1603] = 9.07054904E-03;
  COFD[1604] = -1.41184147E+01;
  COFD[1605] = 3.13068087E+00;
  COFD[1606] = -2.00477755E-01;
  COFD[1607] = 9.07054904E-03;
  COFD[1608] = -1.40249878E+01;
  COFD[1609] = 3.03109250E+00;
  COFD[1610] = -1.87396261E-01;
  COFD[1611] = 8.49727012E-03;
  COFD[1612] = -1.43757538E+01;
  COFD[1613] = 3.03109250E+00;
  COFD[1614] = -1.87396261E-01;
  COFD[1615] = 8.49727012E-03;
  COFD[1616] = -1.73967459E+01;
  COFD[1617] = 4.11427851E+00;
  COFD[1618] = -3.27138372E-01;
  COFD[1619] = 1.45181890E-02;
  COFD[1620] = -1.72366703E+01;
  COFD[1621] = 4.08944620E+00;
  COFD[1622] = -3.24042480E-01;
  COFD[1623] = 1.43892310E-02;
  COFD[1624] = -1.43842166E+01;
  COFD[1625] = 3.03109250E+00;
  COFD[1626] = -1.87396261E-01;
  COFD[1627] = 8.49727012E-03;
  COFD[1628] = -1.43842166E+01;
  COFD[1629] = 3.03109250E+00;
  COFD[1630] = -1.87396261E-01;
  COFD[1631] = 8.49727012E-03;
  COFD[1632] = -1.56032678E+01;
  COFD[1633] = 3.51822289E+00;
  COFD[1634] = -2.51252276E-01;
  COFD[1635] = 1.12908198E-02;
  COFD[1636] = -1.55959601E+01;
  COFD[1637] = 3.51822289E+00;
  COFD[1638] = -2.51252276E-01;
  COFD[1639] = 1.12908198E-02;
  COFD[1640] = -1.55959601E+01;
  COFD[1641] = 3.51822289E+00;
  COFD[1642] = -2.51252276E-01;
  COFD[1643] = 1.12908198E-02;
  COFD[1644] = -1.55882932E+01;
  COFD[1645] = 3.51822289E+00;
  COFD[1646] = -2.51252276E-01;
  COFD[1647] = 1.12908198E-02;
  COFD[1648] = -1.55882932E+01;
  COFD[1649] = 3.51822289E+00;
  COFD[1650] = -2.51252276E-01;
  COFD[1651] = 1.12908198E-02;
  COFD[1652] = -1.89056869E+01;
  COFD[1653] = 4.66474827E+00;
  COFD[1654] = -3.95139197E-01;
  COFD[1655] = 1.73269044E-02;
  COFD[1656] = -1.90477112E+01;
  COFD[1657] = 4.70102276E+00;
  COFD[1658] = -3.99099565E-01;
  COFD[1659] = 1.74672450E-02;
  COFD[1660] = -1.90477112E+01;
  COFD[1661] = 4.70102276E+00;
  COFD[1662] = -3.99099565E-01;
  COFD[1663] = 1.74672450E-02;
  COFD[1664] = -1.94985290E+01;
  COFD[1665] = 4.81121806E+00;
  COFD[1666] = -4.11208159E-01;
  COFD[1667] = 1.79001086E-02;
  COFD[1668] = -1.95010857E+01;
  COFD[1669] = 4.81121806E+00;
  COFD[1670] = -4.11208159E-01;
  COFD[1671] = 1.79001086E-02;
  COFD[1672] = -1.77211477E+01;
  COFD[1673] = 4.24280031E+00;
  COFD[1674] = -3.42971692E-01;
  COFD[1675] = 1.51693290E-02;
  COFD[1676] = -1.50944975E+01;
  COFD[1677] = 3.32669990E+00;
  COFD[1678] = -2.26245876E-01;
  COFD[1679] = 1.02009489E-02;
  COFD[1680] = -1.43372209E+01;
  COFD[1681] = 3.45118074E+00;
  COFD[1682] = -2.42595847E-01;
  COFD[1683] = 1.09176859E-02;
  COFD[1684] = -1.86432219E+01;
  COFD[1685] = 4.58973997E+00;
  COFD[1686] = -3.86396661E-01;
  COFD[1687] = 1.69894521E-02;
  COFD[1688] = -1.76471868E+01;
  COFD[1689] = 4.85888742E+00;
  COFD[1690] = -4.16924100E-01;
  COFD[1691] = 1.81289471E-02;
  COFD[1692] = -1.72582608E+01;
  COFD[1693] = 4.22856403E+00;
  COFD[1694] = -3.41184773E-01;
  COFD[1695] = 1.50943174E-02;
  COFD[1696] = -1.72784285E+01;
  COFD[1697] = 4.22856403E+00;
  COFD[1698] = -3.41184773E-01;
  COFD[1699] = 1.50943174E-02;
  COFD[1700] = -1.86509216E+01;
  COFD[1701] = 4.58973997E+00;
  COFD[1702] = -3.86396661E-01;
  COFD[1703] = 1.69894521E-02;
  COFD[1704] = -1.92386332E+01;
  COFD[1705] = 4.46256606E+00;
  COFD[1706] = -3.12846009E-01;
  COFD[1707] = 1.14536573E-02;
  COFD[1708] = -1.86582748E+01;
  COFD[1709] = 4.58973997E+00;
  COFD[1710] = -3.86396661E-01;
  COFD[1711] = 1.69894521E-02;
  COFD[1712] = -1.92665905E+01;
  COFD[1713] = 4.81124617E+00;
  COFD[1714] = -4.11211619E-01;
  COFD[1715] = 1.79002513E-02;
  COFD[1716] = -1.97887430E+01;
  COFD[1717] = 4.73772588E+00;
  COFD[1718] = -3.58832296E-01;
  COFD[1719] = 1.38668924E-02;
  COFD[1720] = -1.72299000E+01;
  COFD[1721] = 4.22856403E+00;
  COFD[1722] = -3.41184773E-01;
  COFD[1723] = 1.50943174E-02;
  COFD[1724] = -1.72080087E+01;
  COFD[1725] = 4.22856403E+00;
  COFD[1726] = -3.41184773E-01;
  COFD[1727] = 1.50943174E-02;
  COFD[1728] = -1.70449829E+01;
  COFD[1729] = 4.11427851E+00;
  COFD[1730] = -3.27138372E-01;
  COFD[1731] = 1.45181890E-02;
  COFD[1732] = -1.73967459E+01;
  COFD[1733] = 4.11427851E+00;
  COFD[1734] = -3.27138372E-01;
  COFD[1735] = 1.45181890E-02;
  COFD[1736] = -2.03268436E+01;
  COFD[1737] = 5.05074237E+00;
  COFD[1738] = -4.33861571E-01;
  COFD[1739] = 1.85321315E-02;
  COFD[1740] = -2.02044108E+01;
  COFD[1741] = 5.04361226E+00;
  COFD[1742] = -4.33639989E-01;
  COFD[1743] = 1.85518029E-02;
  COFD[1744] = -1.74056316E+01;
  COFD[1745] = 4.11427851E+00;
  COFD[1746] = -3.27138372E-01;
  COFD[1747] = 1.45181890E-02;
  COFD[1748] = -1.74056316E+01;
  COFD[1749] = 4.11427851E+00;
  COFD[1750] = -3.27138372E-01;
  COFD[1751] = 1.45181890E-02;
  COFD[1752] = -1.88902854E+01;
  COFD[1753] = 4.66831189E+00;
  COFD[1754] = -3.95537976E-01;
  COFD[1755] = 1.73415312E-02;
  COFD[1756] = -1.88825943E+01;
  COFD[1757] = 4.66831189E+00;
  COFD[1758] = -3.95537976E-01;
  COFD[1759] = 1.73415312E-02;
  COFD[1760] = -1.88825943E+01;
  COFD[1761] = 4.66831189E+00;
  COFD[1762] = -3.95537976E-01;
  COFD[1763] = 1.73415312E-02;
  COFD[1764] = -1.88745312E+01;
  COFD[1765] = 4.66831189E+00;
  COFD[1766] = -3.95537976E-01;
  COFD[1767] = 1.73415312E-02;
  COFD[1768] = -1.88745312E+01;
  COFD[1769] = 4.66831189E+00;
  COFD[1770] = -3.95537976E-01;
  COFD[1771] = 1.73415312E-02;
  COFD[1772] = -2.07403148E+01;
  COFD[1773] = 5.06681901E+00;
  COFD[1774] = -4.19487221E-01;
  COFD[1775] = 1.72307854E-02;
  COFD[1776] = -2.07473111E+01;
  COFD[1777] = 5.03966902E+00;
  COFD[1778] = -4.13827526E-01;
  COFD[1779] = 1.68975479E-02;
  COFD[1780] = -2.07473111E+01;
  COFD[1781] = 5.03966902E+00;
  COFD[1782] = -4.13827526E-01;
  COFD[1783] = 1.68975479E-02;
  COFD[1784] = -2.06833931E+01;
  COFD[1785] = 4.91319664E+00;
  COFD[1786] = -3.90730083E-01;
  COFD[1787] = 1.56209960E-02;
  COFD[1788] = -2.06861259E+01;
  COFD[1789] = 4.91319664E+00;
  COFD[1790] = -3.90730083E-01;
  COFD[1791] = 1.56209960E-02;
  COFD[1792] = -2.04709982E+01;
  COFD[1793] = 5.08287798E+00;
  COFD[1794] = -4.34364213E-01;
  COFD[1795] = 1.84017776E-02;
  COFD[1796] = -1.83021646E+01;
  COFD[1797] = 4.46170204E+00;
  COFD[1798] = -3.70299101E-01;
  COFD[1799] = 1.63114719E-02;
  COFD[1800] = -1.41727359E+01;
  COFD[1801] = 3.42504312E+00;
  COFD[1802] = -2.39198002E-01;
  COFD[1803] = 1.07702803E-02;
  COFD[1804] = -1.84585119E+01;
  COFD[1805] = 4.55714003E+00;
  COFD[1806] = -3.82304130E-01;
  COFD[1807] = 1.68173362E-02;
  COFD[1808] = -1.74595260E+01;
  COFD[1809] = 4.83157593E+00;
  COFD[1810] = -4.13711451E-01;
  COFD[1811] = 1.80032208E-02;
  COFD[1812] = -1.70754569E+01;
  COFD[1813] = 4.19909678E+00;
  COFD[1814] = -3.37493433E-01;
  COFD[1815] = 1.49397054E-02;
  COFD[1816] = -1.70954045E+01;
  COFD[1817] = 4.19909678E+00;
  COFD[1818] = -3.37493433E-01;
  COFD[1819] = 1.49397054E-02;
  COFD[1820] = -1.84660877E+01;
  COFD[1821] = 4.55714003E+00;
  COFD[1822] = -3.82304130E-01;
  COFD[1823] = 1.68173362E-02;
  COFD[1824] = -1.91959729E+01;
  COFD[1825] = 4.49891559E+00;
  COFD[1826] = -3.18945742E-01;
  COFD[1827] = 1.17738080E-02;
  COFD[1828] = -1.84733209E+01;
  COFD[1829] = 4.55714003E+00;
  COFD[1830] = -3.82304130E-01;
  COFD[1831] = 1.68173362E-02;
  COFD[1832] = -1.90780221E+01;
  COFD[1833] = 4.77836191E+00;
  COFD[1834] = -4.07175409E-01;
  COFD[1835] = 1.77343779E-02;
  COFD[1836] = -1.97659082E+01;
  COFD[1837] = 4.78110053E+00;
  COFD[1838] = -3.66021647E-01;
  COFD[1839] = 1.42430641E-02;
  COFD[1840] = -1.70456477E+01;
  COFD[1841] = 4.19909678E+00;
  COFD[1842] = -3.37493433E-01;
  COFD[1843] = 1.49397054E-02;
  COFD[1844] = -1.70239858E+01;
  COFD[1845] = 4.19909678E+00;
  COFD[1846] = -3.37493433E-01;
  COFD[1847] = 1.49397054E-02;
  COFD[1848] = -1.68819482E+01;
  COFD[1849] = 4.08944620E+00;
  COFD[1850] = -3.24042480E-01;
  COFD[1851] = 1.43892310E-02;
  COFD[1852] = -1.72366703E+01;
  COFD[1853] = 4.08944620E+00;
  COFD[1854] = -3.24042480E-01;
  COFD[1855] = 1.43892310E-02;
  COFD[1856] = -2.02044108E+01;
  COFD[1857] = 5.04361226E+00;
  COFD[1858] = -4.33639989E-01;
  COFD[1859] = 1.85518029E-02;
  COFD[1860] = -2.00754294E+01;
  COFD[1861] = 5.03497105E+00;
  COFD[1862] = -4.33194880E-01;
  COFD[1863] = 1.85605189E-02;
  COFD[1864] = -1.72454197E+01;
  COFD[1865] = 4.08944620E+00;
  COFD[1866] = -3.24042480E-01;
  COFD[1867] = 1.43892310E-02;
  COFD[1868] = -1.72454197E+01;
  COFD[1869] = 4.08944620E+00;
  COFD[1870] = -3.24042480E-01;
  COFD[1871] = 1.43892310E-02;
  COFD[1872] = -1.87300048E+01;
  COFD[1873] = 4.64657086E+00;
  COFD[1874] = -3.93051861E-01;
  COFD[1875] = 1.72478156E-02;
  COFD[1876] = -1.87224375E+01;
  COFD[1877] = 4.64657086E+00;
  COFD[1878] = -3.93051861E-01;
  COFD[1879] = 1.72478156E-02;
  COFD[1880] = -1.87224375E+01;
  COFD[1881] = 4.64657086E+00;
  COFD[1882] = -3.93051861E-01;
  COFD[1883] = 1.72478156E-02;
  COFD[1884] = -1.87145022E+01;
  COFD[1885] = 4.64657086E+00;
  COFD[1886] = -3.93051861E-01;
  COFD[1887] = 1.72478156E-02;
  COFD[1888] = -1.87145022E+01;
  COFD[1889] = 4.64657086E+00;
  COFD[1890] = -3.93051861E-01;
  COFD[1891] = 1.72478156E-02;
  COFD[1892] = -2.06356357E+01;
  COFD[1893] = 5.07030471E+00;
  COFD[1894] = -4.20827541E-01;
  COFD[1895] = 1.73247966E-02;
  COFD[1896] = -2.06742737E+01;
  COFD[1897] = 5.05714490E+00;
  COFD[1898] = -4.17257087E-01;
  COFD[1899] = 1.70941651E-02;
  COFD[1900] = -2.06742737E+01;
  COFD[1901] = 5.05714490E+00;
  COFD[1902] = -4.17257087E-01;
  COFD[1903] = 1.70941651E-02;
  COFD[1904] = -2.06153837E+01;
  COFD[1905] = 4.93204352E+00;
  COFD[1906] = -3.94320627E-01;
  COFD[1907] = 1.58233034E-02;
  COFD[1908] = -2.06180590E+01;
  COFD[1909] = 4.93204352E+00;
  COFD[1910] = -3.94320627E-01;
  COFD[1911] = 1.58233034E-02;
  COFD[1912] = -2.03442498E+01;
  COFD[1913] = 5.07663244E+00;
  COFD[1914] = -4.34319960E-01;
  COFD[1915] = 1.84317867E-02;
  COFD[1916] = -1.81319885E+01;
  COFD[1917] = 4.43405790E+00;
  COFD[1918] = -3.66882237E-01;
  COFD[1919] = 1.61700748E-02;
  COFD[1920] = -1.16406585E+01;
  COFD[1921] = 2.45139089E+00;
  COFD[1922] = -1.08437807E-01;
  COFD[1923] = 4.90682837E-03;
  COFD[1924] = -1.53723411E+01;
  COFD[1925] = 3.43432294E+00;
  COFD[1926] = -2.40398689E-01;
  COFD[1927] = 1.08220935E-02;
  COFD[1928] = -1.42818617E+01;
  COFD[1929] = 3.70003870E+00;
  COFD[1930] = -2.74031258E-01;
  COFD[1931] = 1.22422674E-02;
  COFD[1932] = -1.41758829E+01;
  COFD[1933] = 3.13068087E+00;
  COFD[1934] = -2.00477755E-01;
  COFD[1935] = 9.07054904E-03;
  COFD[1936] = -1.41956009E+01;
  COFD[1937] = 3.13068087E+00;
  COFD[1938] = -2.00477755E-01;
  COFD[1939] = 9.07054904E-03;
  COFD[1940] = -1.53797890E+01;
  COFD[1941] = 3.43432294E+00;
  COFD[1942] = -2.40398689E-01;
  COFD[1943] = 1.08220935E-02;
  COFD[1944] = -1.95539202E+01;
  COFD[1945] = 5.04266002E+00;
  COFD[1946] = -4.33607391E-01;
  COFD[1947] = 1.85541793E-02;
  COFD[1948] = -1.53868982E+01;
  COFD[1949] = 3.43432294E+00;
  COFD[1950] = -2.40398689E-01;
  COFD[1951] = 1.08220935E-02;
  COFD[1952] = -1.59404864E+01;
  COFD[1953] = 3.66059188E+00;
  COFD[1954] = -2.69012876E-01;
  COFD[1955] = 1.20291678E-02;
  COFD[1956] = -1.93481672E+01;
  COFD[1957] = 4.97353903E+00;
  COFD[1958] = -4.29135734E-01;
  COFD[1959] = 1.85479821E-02;
  COFD[1960] = -1.41455925E+01;
  COFD[1961] = 3.13068087E+00;
  COFD[1962] = -2.00477755E-01;
  COFD[1963] = 9.07054904E-03;
  COFD[1964] = -1.41241702E+01;
  COFD[1965] = 3.13068087E+00;
  COFD[1966] = -2.00477755E-01;
  COFD[1967] = 9.07054904E-03;
  COFD[1968] = -1.40304812E+01;
  COFD[1969] = 3.03109250E+00;
  COFD[1970] = -1.87396261E-01;
  COFD[1971] = 8.49727012E-03;
  COFD[1972] = -1.43842166E+01;
  COFD[1973] = 3.03109250E+00;
  COFD[1974] = -1.87396261E-01;
  COFD[1975] = 8.49727012E-03;
  COFD[1976] = -1.74056316E+01;
  COFD[1977] = 4.11427851E+00;
  COFD[1978] = -3.27138372E-01;
  COFD[1979] = 1.45181890E-02;
  COFD[1980] = -1.72454197E+01;
  COFD[1981] = 4.08944620E+00;
  COFD[1982] = -3.24042480E-01;
  COFD[1983] = 1.43892310E-02;
  COFD[1984] = -1.43928252E+01;
  COFD[1985] = 3.03109250E+00;
  COFD[1986] = -1.87396261E-01;
  COFD[1987] = 8.49727012E-03;
  COFD[1988] = -1.43928252E+01;
  COFD[1989] = 3.03109250E+00;
  COFD[1990] = -1.87396261E-01;
  COFD[1991] = 8.49727012E-03;
  COFD[1992] = -1.56122822E+01;
  COFD[1993] = 3.51822289E+00;
  COFD[1994] = -2.51252276E-01;
  COFD[1995] = 1.12908198E-02;
  COFD[1996] = -1.56048426E+01;
  COFD[1997] = 3.51822289E+00;
  COFD[1998] = -2.51252276E-01;
  COFD[1999] = 1.12908198E-02;
  COFD[2000] = -1.56048426E+01;
  COFD[2001] = 3.51822289E+00;
  COFD[2002] = -2.51252276E-01;
  COFD[2003] = 1.12908198E-02;
  COFD[2004] = -1.55970393E+01;
  COFD[2005] = 3.51822289E+00;
  COFD[2006] = -2.51252276E-01;
  COFD[2007] = 1.12908198E-02;
  COFD[2008] = -1.55970393E+01;
  COFD[2009] = 3.51822289E+00;
  COFD[2010] = -2.51252276E-01;
  COFD[2011] = 1.12908198E-02;
  COFD[2012] = -1.89160854E+01;
  COFD[2013] = 4.66474827E+00;
  COFD[2014] = -3.95139197E-01;
  COFD[2015] = 1.73269044E-02;
  COFD[2016] = -1.90581976E+01;
  COFD[2017] = 4.70102276E+00;
  COFD[2018] = -3.99099565E-01;
  COFD[2019] = 1.74672450E-02;
  COFD[2020] = -1.90581976E+01;
  COFD[2021] = 4.70102276E+00;
  COFD[2022] = -3.99099565E-01;
  COFD[2023] = 1.74672450E-02;
  COFD[2024] = -1.95100939E+01;
  COFD[2025] = 4.81121806E+00;
  COFD[2026] = -4.11208159E-01;
  COFD[2027] = 1.79001086E-02;
  COFD[2028] = -1.95127106E+01;
  COFD[2029] = 4.81121806E+00;
  COFD[2030] = -4.11208159E-01;
  COFD[2031] = 1.79001086E-02;
  COFD[2032] = -1.77313655E+01;
  COFD[2033] = 4.24280031E+00;
  COFD[2034] = -3.42971692E-01;
  COFD[2035] = 1.51693290E-02;
  COFD[2036] = -1.51028095E+01;
  COFD[2037] = 3.32669990E+00;
  COFD[2038] = -2.26245876E-01;
  COFD[2039] = 1.02009489E-02;
  COFD[2040] = -1.16406585E+01;
  COFD[2041] = 2.45139089E+00;
  COFD[2042] = -1.08437807E-01;
  COFD[2043] = 4.90682837E-03;
  COFD[2044] = -1.53723411E+01;
  COFD[2045] = 3.43432294E+00;
  COFD[2046] = -2.40398689E-01;
  COFD[2047] = 1.08220935E-02;
  COFD[2048] = -1.42818617E+01;
  COFD[2049] = 3.70003870E+00;
  COFD[2050] = -2.74031258E-01;
  COFD[2051] = 1.22422674E-02;
  COFD[2052] = -1.41758829E+01;
  COFD[2053] = 3.13068087E+00;
  COFD[2054] = -2.00477755E-01;
  COFD[2055] = 9.07054904E-03;
  COFD[2056] = -1.41956009E+01;
  COFD[2057] = 3.13068087E+00;
  COFD[2058] = -2.00477755E-01;
  COFD[2059] = 9.07054904E-03;
  COFD[2060] = -1.53797890E+01;
  COFD[2061] = 3.43432294E+00;
  COFD[2062] = -2.40398689E-01;
  COFD[2063] = 1.08220935E-02;
  COFD[2064] = -1.95539202E+01;
  COFD[2065] = 5.04266002E+00;
  COFD[2066] = -4.33607391E-01;
  COFD[2067] = 1.85541793E-02;
  COFD[2068] = -1.53868982E+01;
  COFD[2069] = 3.43432294E+00;
  COFD[2070] = -2.40398689E-01;
  COFD[2071] = 1.08220935E-02;
  COFD[2072] = -1.59404864E+01;
  COFD[2073] = 3.66059188E+00;
  COFD[2074] = -2.69012876E-01;
  COFD[2075] = 1.20291678E-02;
  COFD[2076] = -1.93481672E+01;
  COFD[2077] = 4.97353903E+00;
  COFD[2078] = -4.29135734E-01;
  COFD[2079] = 1.85479821E-02;
  COFD[2080] = -1.41455925E+01;
  COFD[2081] = 3.13068087E+00;
  COFD[2082] = -2.00477755E-01;
  COFD[2083] = 9.07054904E-03;
  COFD[2084] = -1.41241702E+01;
  COFD[2085] = 3.13068087E+00;
  COFD[2086] = -2.00477755E-01;
  COFD[2087] = 9.07054904E-03;
  COFD[2088] = -1.40304812E+01;
  COFD[2089] = 3.03109250E+00;
  COFD[2090] = -1.87396261E-01;
  COFD[2091] = 8.49727012E-03;
  COFD[2092] = -1.43842166E+01;
  COFD[2093] = 3.03109250E+00;
  COFD[2094] = -1.87396261E-01;
  COFD[2095] = 8.49727012E-03;
  COFD[2096] = -1.74056316E+01;
  COFD[2097] = 4.11427851E+00;
  COFD[2098] = -3.27138372E-01;
  COFD[2099] = 1.45181890E-02;
  COFD[2100] = -1.72454197E+01;
  COFD[2101] = 4.08944620E+00;
  COFD[2102] = -3.24042480E-01;
  COFD[2103] = 1.43892310E-02;
  COFD[2104] = -1.43928252E+01;
  COFD[2105] = 3.03109250E+00;
  COFD[2106] = -1.87396261E-01;
  COFD[2107] = 8.49727012E-03;
  COFD[2108] = -1.43928252E+01;
  COFD[2109] = 3.03109250E+00;
  COFD[2110] = -1.87396261E-01;
  COFD[2111] = 8.49727012E-03;
  COFD[2112] = -1.56122822E+01;
  COFD[2113] = 3.51822289E+00;
  COFD[2114] = -2.51252276E-01;
  COFD[2115] = 1.12908198E-02;
  COFD[2116] = -1.56048426E+01;
  COFD[2117] = 3.51822289E+00;
  COFD[2118] = -2.51252276E-01;
  COFD[2119] = 1.12908198E-02;
  COFD[2120] = -1.56048426E+01;
  COFD[2121] = 3.51822289E+00;
  COFD[2122] = -2.51252276E-01;
  COFD[2123] = 1.12908198E-02;
  COFD[2124] = -1.55970393E+01;
  COFD[2125] = 3.51822289E+00;
  COFD[2126] = -2.51252276E-01;
  COFD[2127] = 1.12908198E-02;
  COFD[2128] = -1.55970393E+01;
  COFD[2129] = 3.51822289E+00;
  COFD[2130] = -2.51252276E-01;
  COFD[2131] = 1.12908198E-02;
  COFD[2132] = -1.89160854E+01;
  COFD[2133] = 4.66474827E+00;
  COFD[2134] = -3.95139197E-01;
  COFD[2135] = 1.73269044E-02;
  COFD[2136] = -1.90581976E+01;
  COFD[2137] = 4.70102276E+00;
  COFD[2138] = -3.99099565E-01;
  COFD[2139] = 1.74672450E-02;
  COFD[2140] = -1.90581976E+01;
  COFD[2141] = 4.70102276E+00;
  COFD[2142] = -3.99099565E-01;
  COFD[2143] = 1.74672450E-02;
  COFD[2144] = -1.95100939E+01;
  COFD[2145] = 4.81121806E+00;
  COFD[2146] = -4.11208159E-01;
  COFD[2147] = 1.79001086E-02;
  COFD[2148] = -1.95127106E+01;
  COFD[2149] = 4.81121806E+00;
  COFD[2150] = -4.11208159E-01;
  COFD[2151] = 1.79001086E-02;
  COFD[2152] = -1.77313655E+01;
  COFD[2153] = 4.24280031E+00;
  COFD[2154] = -3.42971692E-01;
  COFD[2155] = 1.51693290E-02;
  COFD[2156] = -1.51028095E+01;
  COFD[2157] = 3.32669990E+00;
  COFD[2158] = -2.26245876E-01;
  COFD[2159] = 1.02009489E-02;
  COFD[2160] = -1.26378997E+01;
  COFD[2161] = 2.88062866E+00;
  COFD[2162] = -1.67071255E-01;
  COFD[2163] = 7.58146324E-03;
  COFD[2164] = -1.66388020E+01;
  COFD[2165] = 3.92641057E+00;
  COFD[2166] = -3.03041624E-01;
  COFD[2167] = 1.34843019E-02;
  COFD[2168] = -1.57082437E+01;
  COFD[2169] = 4.26760732E+00;
  COFD[2170] = -3.46098875E-01;
  COFD[2171] = 1.53012333E-02;
  COFD[2172] = -1.53803793E+01;
  COFD[2173] = 3.61618043E+00;
  COFD[2174] = -2.63626979E-01;
  COFD[2175] = 1.18123303E-02;
  COFD[2176] = -1.54007533E+01;
  COFD[2177] = 3.61618043E+00;
  COFD[2178] = -2.63626979E-01;
  COFD[2179] = 1.18123303E-02;
  COFD[2180] = -1.66466189E+01;
  COFD[2181] = 3.92641057E+00;
  COFD[2182] = -3.03041624E-01;
  COFD[2183] = 1.34843019E-02;
  COFD[2184] = -1.99242108E+01;
  COFD[2185] = 5.07019743E+00;
  COFD[2186] = -4.20771044E-01;
  COFD[2187] = 1.73206308E-02;
  COFD[2188] = -1.66540858E+01;
  COFD[2189] = 3.92641057E+00;
  COFD[2190] = -3.03041624E-01;
  COFD[2191] = 1.34843019E-02;
  COFD[2192] = -1.73807134E+01;
  COFD[2193] = 4.21826574E+00;
  COFD[2194] = -3.39895198E-01;
  COFD[2195] = 1.50403279E-02;
  COFD[2196] = -1.99629178E+01;
  COFD[2197] = 5.11249977E+00;
  COFD[2198] = -4.32909999E-01;
  COFD[2199] = 1.81201425E-02;
  COFD[2200] = -1.53485836E+01;
  COFD[2201] = 3.61618043E+00;
  COFD[2202] = -2.63626979E-01;
  COFD[2203] = 1.18123303E-02;
  COFD[2204] = -1.53264775E+01;
  COFD[2205] = 3.61618043E+00;
  COFD[2206] = -2.63626979E-01;
  COFD[2207] = 1.18123303E-02;
  COFD[2208] = -1.52354332E+01;
  COFD[2209] = 3.51822289E+00;
  COFD[2210] = -2.51252276E-01;
  COFD[2211] = 1.12908198E-02;
  COFD[2212] = -1.56032678E+01;
  COFD[2213] = 3.51822289E+00;
  COFD[2214] = -2.51252276E-01;
  COFD[2215] = 1.12908198E-02;
  COFD[2216] = -1.88902854E+01;
  COFD[2217] = 4.66831189E+00;
  COFD[2218] = -3.95537976E-01;
  COFD[2219] = 1.73415312E-02;
  COFD[2220] = -1.87300048E+01;
  COFD[2221] = 4.64657086E+00;
  COFD[2222] = -3.93051861E-01;
  COFD[2223] = 1.72478156E-02;
  COFD[2224] = -1.56122822E+01;
  COFD[2225] = 3.51822289E+00;
  COFD[2226] = -2.51252276E-01;
  COFD[2227] = 1.12908198E-02;
  COFD[2228] = -1.56122822E+01;
  COFD[2229] = 3.51822289E+00;
  COFD[2230] = -2.51252276E-01;
  COFD[2231] = 1.12908198E-02;
  COFD[2232] = -1.69369081E+01;
  COFD[2233] = 4.03200874E+00;
  COFD[2234] = -3.16661037E-01;
  COFD[2235] = 1.40718252E-02;
  COFD[2236] = -1.69290998E+01;
  COFD[2237] = 4.03200874E+00;
  COFD[2238] = -3.16661037E-01;
  COFD[2239] = 1.40718252E-02;
  COFD[2240] = -1.69290998E+01;
  COFD[2241] = 4.03200874E+00;
  COFD[2242] = -3.16661037E-01;
  COFD[2243] = 1.40718252E-02;
  COFD[2244] = -1.69209159E+01;
  COFD[2245] = 4.03200874E+00;
  COFD[2246] = -3.16661037E-01;
  COFD[2247] = 1.40718252E-02;
  COFD[2248] = -1.69209159E+01;
  COFD[2249] = 4.03200874E+00;
  COFD[2250] = -3.16661037E-01;
  COFD[2251] = 1.40718252E-02;
  COFD[2252] = -2.00303439E+01;
  COFD[2253] = 5.02993474E+00;
  COFD[2254] = -4.33356097E-01;
  COFD[2255] = 1.86017649E-02;
  COFD[2256] = -2.01258131E+01;
  COFD[2257] = 5.04247989E+00;
  COFD[2258] = -4.33600957E-01;
  COFD[2259] = 1.85546055E-02;
  COFD[2260] = -2.01258131E+01;
  COFD[2261] = 5.04247989E+00;
  COFD[2262] = -4.33600957E-01;
  COFD[2263] = 1.85546055E-02;
  COFD[2264] = -2.04258758E+01;
  COFD[2265] = 5.07801327E+00;
  COFD[2266] = -4.34370827E-01;
  COFD[2267] = 1.84286495E-02;
  COFD[2268] = -2.04286635E+01;
  COFD[2269] = 5.07801327E+00;
  COFD[2270] = -4.34370827E-01;
  COFD[2271] = 1.84286495E-02;
  COFD[2272] = -1.91464874E+01;
  COFD[2273] = 4.75991278E+00;
  COFD[2274] = -4.05296156E-01;
  COFD[2275] = 1.76746877E-02;
  COFD[2276] = -1.63432638E+01;
  COFD[2277] = 3.81213432E+00;
  COFD[2278] = -2.88477875E-01;
  COFD[2279] = 1.28642729E-02;
  COFD[2280] = -1.26369951E+01;
  COFD[2281] = 2.88062866E+00;
  COFD[2282] = -1.67071255E-01;
  COFD[2283] = 7.58146324E-03;
  COFD[2284] = -1.66311167E+01;
  COFD[2285] = 3.92641057E+00;
  COFD[2286] = -3.03041624E-01;
  COFD[2287] = 1.34843019E-02;
  COFD[2288] = -1.57077779E+01;
  COFD[2289] = 4.26760732E+00;
  COFD[2290] = -3.46098875E-01;
  COFD[2291] = 1.53012333E-02;
  COFD[2292] = -1.53752695E+01;
  COFD[2293] = 3.61618043E+00;
  COFD[2294] = -2.63626979E-01;
  COFD[2295] = 1.18123303E-02;
  COFD[2296] = -1.53954322E+01;
  COFD[2297] = 3.61618043E+00;
  COFD[2298] = -2.63626979E-01;
  COFD[2299] = 1.18123303E-02;
  COFD[2300] = -1.66388134E+01;
  COFD[2301] = 3.92641057E+00;
  COFD[2302] = -3.03041624E-01;
  COFD[2303] = 1.34843019E-02;
  COFD[2304] = -1.99186867E+01;
  COFD[2305] = 5.07019743E+00;
  COFD[2306] = -4.20771044E-01;
  COFD[2307] = 1.73206308E-02;
  COFD[2308] = -1.66461638E+01;
  COFD[2309] = 3.92641057E+00;
  COFD[2310] = -3.03041624E-01;
  COFD[2311] = 1.34843019E-02;
  COFD[2312] = -1.73732769E+01;
  COFD[2313] = 4.21826574E+00;
  COFD[2314] = -3.39895198E-01;
  COFD[2315] = 1.50403279E-02;
  COFD[2316] = -1.99575918E+01;
  COFD[2317] = 5.11249977E+00;
  COFD[2318] = -4.32909999E-01;
  COFD[2319] = 1.81201425E-02;
  COFD[2320] = -1.53434687E+01;
  COFD[2321] = 3.61618043E+00;
  COFD[2322] = -2.63626979E-01;
  COFD[2323] = 1.18123303E-02;
  COFD[2324] = -1.53215828E+01;
  COFD[2325] = 3.61618043E+00;
  COFD[2326] = -2.63626979E-01;
  COFD[2327] = 1.18123303E-02;
  COFD[2328] = -1.52307681E+01;
  COFD[2329] = 3.51822289E+00;
  COFD[2330] = -2.51252276E-01;
  COFD[2331] = 1.12908198E-02;
  COFD[2332] = -1.55959601E+01;
  COFD[2333] = 3.51822289E+00;
  COFD[2334] = -2.51252276E-01;
  COFD[2335] = 1.12908198E-02;
  COFD[2336] = -1.88825943E+01;
  COFD[2337] = 4.66831189E+00;
  COFD[2338] = -3.95537976E-01;
  COFD[2339] = 1.73415312E-02;
  COFD[2340] = -1.87224375E+01;
  COFD[2341] = 4.64657086E+00;
  COFD[2342] = -3.93051861E-01;
  COFD[2343] = 1.72478156E-02;
  COFD[2344] = -1.56048426E+01;
  COFD[2345] = 3.51822289E+00;
  COFD[2346] = -2.51252276E-01;
  COFD[2347] = 1.12908198E-02;
  COFD[2348] = -1.56048426E+01;
  COFD[2349] = 3.51822289E+00;
  COFD[2350] = -2.51252276E-01;
  COFD[2351] = 1.12908198E-02;
  COFD[2352] = -1.69290998E+01;
  COFD[2353] = 4.03200874E+00;
  COFD[2354] = -3.16661037E-01;
  COFD[2355] = 1.40718252E-02;
  COFD[2356] = -1.69214116E+01;
  COFD[2357] = 4.03200874E+00;
  COFD[2358] = -3.16661037E-01;
  COFD[2359] = 1.40718252E-02;
  COFD[2360] = -1.69214116E+01;
  COFD[2361] = 4.03200874E+00;
  COFD[2362] = -3.16661037E-01;
  COFD[2363] = 1.40718252E-02;
  COFD[2364] = -1.69133515E+01;
  COFD[2365] = 4.03200874E+00;
  COFD[2366] = -3.16661037E-01;
  COFD[2367] = 1.40718252E-02;
  COFD[2368] = -1.69133515E+01;
  COFD[2369] = 4.03200874E+00;
  COFD[2370] = -3.16661037E-01;
  COFD[2371] = 1.40718252E-02;
  COFD[2372] = -2.00212653E+01;
  COFD[2373] = 5.02993474E+00;
  COFD[2374] = -4.33356097E-01;
  COFD[2375] = 1.86017649E-02;
  COFD[2376] = -2.01166531E+01;
  COFD[2377] = 5.04247989E+00;
  COFD[2378] = -4.33600957E-01;
  COFD[2379] = 1.85546055E-02;
  COFD[2380] = -2.01166531E+01;
  COFD[2381] = 5.04247989E+00;
  COFD[2382] = -4.33600957E-01;
  COFD[2383] = 1.85546055E-02;
  COFD[2384] = -2.04157110E+01;
  COFD[2385] = 5.07801327E+00;
  COFD[2386] = -4.34370827E-01;
  COFD[2387] = 1.84286495E-02;
  COFD[2388] = -2.04184424E+01;
  COFD[2389] = 5.07801327E+00;
  COFD[2390] = -4.34370827E-01;
  COFD[2391] = 1.84286495E-02;
  COFD[2392] = -1.91375759E+01;
  COFD[2393] = 4.75991278E+00;
  COFD[2394] = -4.05296156E-01;
  COFD[2395] = 1.76746877E-02;
  COFD[2396] = -1.63360925E+01;
  COFD[2397] = 3.81213432E+00;
  COFD[2398] = -2.88477875E-01;
  COFD[2399] = 1.28642729E-02;
  COFD[2400] = -1.26369951E+01;
  COFD[2401] = 2.88062866E+00;
  COFD[2402] = -1.67071255E-01;
  COFD[2403] = 7.58146324E-03;
  COFD[2404] = -1.66311167E+01;
  COFD[2405] = 3.92641057E+00;
  COFD[2406] = -3.03041624E-01;
  COFD[2407] = 1.34843019E-02;
  COFD[2408] = -1.57077779E+01;
  COFD[2409] = 4.26760732E+00;
  COFD[2410] = -3.46098875E-01;
  COFD[2411] = 1.53012333E-02;
  COFD[2412] = -1.53752695E+01;
  COFD[2413] = 3.61618043E+00;
  COFD[2414] = -2.63626979E-01;
  COFD[2415] = 1.18123303E-02;
  COFD[2416] = -1.53954322E+01;
  COFD[2417] = 3.61618043E+00;
  COFD[2418] = -2.63626979E-01;
  COFD[2419] = 1.18123303E-02;
  COFD[2420] = -1.66388134E+01;
  COFD[2421] = 3.92641057E+00;
  COFD[2422] = -3.03041624E-01;
  COFD[2423] = 1.34843019E-02;
  COFD[2424] = -1.99186867E+01;
  COFD[2425] = 5.07019743E+00;
  COFD[2426] = -4.20771044E-01;
  COFD[2427] = 1.73206308E-02;
  COFD[2428] = -1.66461638E+01;
  COFD[2429] = 3.92641057E+00;
  COFD[2430] = -3.03041624E-01;
  COFD[2431] = 1.34843019E-02;
  COFD[2432] = -1.73732769E+01;
  COFD[2433] = 4.21826574E+00;
  COFD[2434] = -3.39895198E-01;
  COFD[2435] = 1.50403279E-02;
  COFD[2436] = -1.99575918E+01;
  COFD[2437] = 5.11249977E+00;
  COFD[2438] = -4.32909999E-01;
  COFD[2439] = 1.81201425E-02;
  COFD[2440] = -1.53434687E+01;
  COFD[2441] = 3.61618043E+00;
  COFD[2442] = -2.63626979E-01;
  COFD[2443] = 1.18123303E-02;
  COFD[2444] = -1.53215828E+01;
  COFD[2445] = 3.61618043E+00;
  COFD[2446] = -2.63626979E-01;
  COFD[2447] = 1.18123303E-02;
  COFD[2448] = -1.52307681E+01;
  COFD[2449] = 3.51822289E+00;
  COFD[2450] = -2.51252276E-01;
  COFD[2451] = 1.12908198E-02;
  COFD[2452] = -1.55959601E+01;
  COFD[2453] = 3.51822289E+00;
  COFD[2454] = -2.51252276E-01;
  COFD[2455] = 1.12908198E-02;
  COFD[2456] = -1.88825943E+01;
  COFD[2457] = 4.66831189E+00;
  COFD[2458] = -3.95537976E-01;
  COFD[2459] = 1.73415312E-02;
  COFD[2460] = -1.87224375E+01;
  COFD[2461] = 4.64657086E+00;
  COFD[2462] = -3.93051861E-01;
  COFD[2463] = 1.72478156E-02;
  COFD[2464] = -1.56048426E+01;
  COFD[2465] = 3.51822289E+00;
  COFD[2466] = -2.51252276E-01;
  COFD[2467] = 1.12908198E-02;
  COFD[2468] = -1.56048426E+01;
  COFD[2469] = 3.51822289E+00;
  COFD[2470] = -2.51252276E-01;
  COFD[2471] = 1.12908198E-02;
  COFD[2472] = -1.69290998E+01;
  COFD[2473] = 4.03200874E+00;
  COFD[2474] = -3.16661037E-01;
  COFD[2475] = 1.40718252E-02;
  COFD[2476] = -1.69214116E+01;
  COFD[2477] = 4.03200874E+00;
  COFD[2478] = -3.16661037E-01;
  COFD[2479] = 1.40718252E-02;
  COFD[2480] = -1.69214116E+01;
  COFD[2481] = 4.03200874E+00;
  COFD[2482] = -3.16661037E-01;
  COFD[2483] = 1.40718252E-02;
  COFD[2484] = -1.69133515E+01;
  COFD[2485] = 4.03200874E+00;
  COFD[2486] = -3.16661037E-01;
  COFD[2487] = 1.40718252E-02;
  COFD[2488] = -1.69133515E+01;
  COFD[2489] = 4.03200874E+00;
  COFD[2490] = -3.16661037E-01;
  COFD[2491] = 1.40718252E-02;
  COFD[2492] = -2.00212653E+01;
  COFD[2493] = 5.02993474E+00;
  COFD[2494] = -4.33356097E-01;
  COFD[2495] = 1.86017649E-02;
  COFD[2496] = -2.01166531E+01;
  COFD[2497] = 5.04247989E+00;
  COFD[2498] = -4.33600957E-01;
  COFD[2499] = 1.85546055E-02;
  COFD[2500] = -2.01166531E+01;
  COFD[2501] = 5.04247989E+00;
  COFD[2502] = -4.33600957E-01;
  COFD[2503] = 1.85546055E-02;
  COFD[2504] = -2.04157110E+01;
  COFD[2505] = 5.07801327E+00;
  COFD[2506] = -4.34370827E-01;
  COFD[2507] = 1.84286495E-02;
  COFD[2508] = -2.04184424E+01;
  COFD[2509] = 5.07801327E+00;
  COFD[2510] = -4.34370827E-01;
  COFD[2511] = 1.84286495E-02;
  COFD[2512] = -1.91375759E+01;
  COFD[2513] = 4.75991278E+00;
  COFD[2514] = -4.05296156E-01;
  COFD[2515] = 1.76746877E-02;
  COFD[2516] = -1.63360925E+01;
  COFD[2517] = 3.81213432E+00;
  COFD[2518] = -2.88477875E-01;
  COFD[2519] = 1.28642729E-02;
  COFD[2520] = -1.26360335E+01;
  COFD[2521] = 2.88062866E+00;
  COFD[2522] = -1.67071255E-01;
  COFD[2523] = 7.58146324E-03;
  COFD[2524] = -1.66230596E+01;
  COFD[2525] = 3.92641057E+00;
  COFD[2526] = -3.03041624E-01;
  COFD[2527] = 1.34843019E-02;
  COFD[2528] = -1.57072822E+01;
  COFD[2529] = 4.26760732E+00;
  COFD[2530] = -3.46098875E-01;
  COFD[2531] = 1.53012333E-02;
  COFD[2532] = -1.53698844E+01;
  COFD[2533] = 3.61618043E+00;
  COFD[2534] = -2.63626979E-01;
  COFD[2535] = 1.18123303E-02;
  COFD[2536] = -1.53898267E+01;
  COFD[2537] = 3.61618043E+00;
  COFD[2538] = -2.63626979E-01;
  COFD[2539] = 1.18123303E-02;
  COFD[2540] = -1.66306324E+01;
  COFD[2541] = 3.92641057E+00;
  COFD[2542] = -3.03041624E-01;
  COFD[2543] = 1.34843019E-02;
  COFD[2544] = -1.99128699E+01;
  COFD[2545] = 5.07019743E+00;
  COFD[2546] = -4.20771044E-01;
  COFD[2547] = 1.73206308E-02;
  COFD[2548] = -1.66378626E+01;
  COFD[2549] = 3.92641057E+00;
  COFD[2550] = -3.03041624E-01;
  COFD[2551] = 1.34843019E-02;
  COFD[2552] = -1.73654768E+01;
  COFD[2553] = 4.21826574E+00;
  COFD[2554] = -3.39895198E-01;
  COFD[2555] = 1.50403279E-02;
  COFD[2556] = -1.99519812E+01;
  COFD[2557] = 5.11249977E+00;
  COFD[2558] = -4.32909999E-01;
  COFD[2559] = 1.81201425E-02;
  COFD[2560] = -1.53380783E+01;
  COFD[2561] = 3.61618043E+00;
  COFD[2562] = -2.63626979E-01;
  COFD[2563] = 1.18123303E-02;
  COFD[2564] = -1.53164220E+01;
  COFD[2565] = 3.61618043E+00;
  COFD[2566] = -2.63626979E-01;
  COFD[2567] = 1.18123303E-02;
  COFD[2568] = -1.52258472E+01;
  COFD[2569] = 3.51822289E+00;
  COFD[2570] = -2.51252276E-01;
  COFD[2571] = 1.12908198E-02;
  COFD[2572] = -1.55882932E+01;
  COFD[2573] = 3.51822289E+00;
  COFD[2574] = -2.51252276E-01;
  COFD[2575] = 1.12908198E-02;
  COFD[2576] = -1.88745312E+01;
  COFD[2577] = 4.66831189E+00;
  COFD[2578] = -3.95537976E-01;
  COFD[2579] = 1.73415312E-02;
  COFD[2580] = -1.87145022E+01;
  COFD[2581] = 4.64657086E+00;
  COFD[2582] = -3.93051861E-01;
  COFD[2583] = 1.72478156E-02;
  COFD[2584] = -1.55970393E+01;
  COFD[2585] = 3.51822289E+00;
  COFD[2586] = -2.51252276E-01;
  COFD[2587] = 1.12908198E-02;
  COFD[2588] = -1.55970393E+01;
  COFD[2589] = 3.51822289E+00;
  COFD[2590] = -2.51252276E-01;
  COFD[2591] = 1.12908198E-02;
  COFD[2592] = -1.69209159E+01;
  COFD[2593] = 4.03200874E+00;
  COFD[2594] = -3.16661037E-01;
  COFD[2595] = 1.40718252E-02;
  COFD[2596] = -1.69133515E+01;
  COFD[2597] = 4.03200874E+00;
  COFD[2598] = -3.16661037E-01;
  COFD[2599] = 1.40718252E-02;
  COFD[2600] = -1.69133515E+01;
  COFD[2601] = 4.03200874E+00;
  COFD[2602] = -3.16661037E-01;
  COFD[2603] = 1.40718252E-02;
  COFD[2604] = -1.69054193E+01;
  COFD[2605] = 4.03200874E+00;
  COFD[2606] = -3.16661037E-01;
  COFD[2607] = 1.40718252E-02;
  COFD[2608] = -1.69054193E+01;
  COFD[2609] = 4.03200874E+00;
  COFD[2610] = -3.16661037E-01;
  COFD[2611] = 1.40718252E-02;
  COFD[2612] = -2.00117745E+01;
  COFD[2613] = 5.02993474E+00;
  COFD[2614] = -4.33356097E-01;
  COFD[2615] = 1.86017649E-02;
  COFD[2616] = -2.01070788E+01;
  COFD[2617] = 5.04247989E+00;
  COFD[2618] = -4.33600957E-01;
  COFD[2619] = 1.85546055E-02;
  COFD[2620] = -2.01070788E+01;
  COFD[2621] = 5.04247989E+00;
  COFD[2622] = -4.33600957E-01;
  COFD[2623] = 1.85546055E-02;
  COFD[2624] = -2.04051079E+01;
  COFD[2625] = 5.07801327E+00;
  COFD[2626] = -4.34370827E-01;
  COFD[2627] = 1.84286495E-02;
  COFD[2628] = -2.04077819E+01;
  COFD[2629] = 5.07801327E+00;
  COFD[2630] = -4.34370827E-01;
  COFD[2631] = 1.84286495E-02;
  COFD[2632] = -1.91282565E+01;
  COFD[2633] = 4.75991278E+00;
  COFD[2634] = -4.05296156E-01;
  COFD[2635] = 1.76746877E-02;
  COFD[2636] = -1.63285665E+01;
  COFD[2637] = 3.81213432E+00;
  COFD[2638] = -2.88477875E-01;
  COFD[2639] = 1.28642729E-02;
  COFD[2640] = -1.26360335E+01;
  COFD[2641] = 2.88062866E+00;
  COFD[2642] = -1.67071255E-01;
  COFD[2643] = 7.58146324E-03;
  COFD[2644] = -1.66230596E+01;
  COFD[2645] = 3.92641057E+00;
  COFD[2646] = -3.03041624E-01;
  COFD[2647] = 1.34843019E-02;
  COFD[2648] = -1.57072822E+01;
  COFD[2649] = 4.26760732E+00;
  COFD[2650] = -3.46098875E-01;
  COFD[2651] = 1.53012333E-02;
  COFD[2652] = -1.53698844E+01;
  COFD[2653] = 3.61618043E+00;
  COFD[2654] = -2.63626979E-01;
  COFD[2655] = 1.18123303E-02;
  COFD[2656] = -1.53898267E+01;
  COFD[2657] = 3.61618043E+00;
  COFD[2658] = -2.63626979E-01;
  COFD[2659] = 1.18123303E-02;
  COFD[2660] = -1.66306324E+01;
  COFD[2661] = 3.92641057E+00;
  COFD[2662] = -3.03041624E-01;
  COFD[2663] = 1.34843019E-02;
  COFD[2664] = -1.99128699E+01;
  COFD[2665] = 5.07019743E+00;
  COFD[2666] = -4.20771044E-01;
  COFD[2667] = 1.73206308E-02;
  COFD[2668] = -1.66378626E+01;
  COFD[2669] = 3.92641057E+00;
  COFD[2670] = -3.03041624E-01;
  COFD[2671] = 1.34843019E-02;
  COFD[2672] = -1.73654768E+01;
  COFD[2673] = 4.21826574E+00;
  COFD[2674] = -3.39895198E-01;
  COFD[2675] = 1.50403279E-02;
  COFD[2676] = -1.99519812E+01;
  COFD[2677] = 5.11249977E+00;
  COFD[2678] = -4.32909999E-01;
  COFD[2679] = 1.81201425E-02;
  COFD[2680] = -1.53380783E+01;
  COFD[2681] = 3.61618043E+00;
  COFD[2682] = -2.63626979E-01;
  COFD[2683] = 1.18123303E-02;
  COFD[2684] = -1.53164220E+01;
  COFD[2685] = 3.61618043E+00;
  COFD[2686] = -2.63626979E-01;
  COFD[2687] = 1.18123303E-02;
  COFD[2688] = -1.52258472E+01;
  COFD[2689] = 3.51822289E+00;
  COFD[2690] = -2.51252276E-01;
  COFD[2691] = 1.12908198E-02;
  COFD[2692] = -1.55882932E+01;
  COFD[2693] = 3.51822289E+00;
  COFD[2694] = -2.51252276E-01;
  COFD[2695] = 1.12908198E-02;
  COFD[2696] = -1.88745312E+01;
  COFD[2697] = 4.66831189E+00;
  COFD[2698] = -3.95537976E-01;
  COFD[2699] = 1.73415312E-02;
  COFD[2700] = -1.87145022E+01;
  COFD[2701] = 4.64657086E+00;
  COFD[2702] = -3.93051861E-01;
  COFD[2703] = 1.72478156E-02;
  COFD[2704] = -1.55970393E+01;
  COFD[2705] = 3.51822289E+00;
  COFD[2706] = -2.51252276E-01;
  COFD[2707] = 1.12908198E-02;
  COFD[2708] = -1.55970393E+01;
  COFD[2709] = 3.51822289E+00;
  COFD[2710] = -2.51252276E-01;
  COFD[2711] = 1.12908198E-02;
  COFD[2712] = -1.69209159E+01;
  COFD[2713] = 4.03200874E+00;
  COFD[2714] = -3.16661037E-01;
  COFD[2715] = 1.40718252E-02;
  COFD[2716] = -1.69133515E+01;
  COFD[2717] = 4.03200874E+00;
  COFD[2718] = -3.16661037E-01;
  COFD[2719] = 1.40718252E-02;
  COFD[2720] = -1.69133515E+01;
  COFD[2721] = 4.03200874E+00;
  COFD[2722] = -3.16661037E-01;
  COFD[2723] = 1.40718252E-02;
  COFD[2724] = -1.69054193E+01;
  COFD[2725] = 4.03200874E+00;
  COFD[2726] = -3.16661037E-01;
  COFD[2727] = 1.40718252E-02;
  COFD[2728] = -1.69054193E+01;
  COFD[2729] = 4.03200874E+00;
  COFD[2730] = -3.16661037E-01;
  COFD[2731] = 1.40718252E-02;
  COFD[2732] = -2.00117745E+01;
  COFD[2733] = 5.02993474E+00;
  COFD[2734] = -4.33356097E-01;
  COFD[2735] = 1.86017649E-02;
  COFD[2736] = -2.01070788E+01;
  COFD[2737] = 5.04247989E+00;
  COFD[2738] = -4.33600957E-01;
  COFD[2739] = 1.85546055E-02;
  COFD[2740] = -2.01070788E+01;
  COFD[2741] = 5.04247989E+00;
  COFD[2742] = -4.33600957E-01;
  COFD[2743] = 1.85546055E-02;
  COFD[2744] = -2.04051079E+01;
  COFD[2745] = 5.07801327E+00;
  COFD[2746] = -4.34370827E-01;
  COFD[2747] = 1.84286495E-02;
  COFD[2748] = -2.04077819E+01;
  COFD[2749] = 5.07801327E+00;
  COFD[2750] = -4.34370827E-01;
  COFD[2751] = 1.84286495E-02;
  COFD[2752] = -1.91282565E+01;
  COFD[2753] = 4.75991278E+00;
  COFD[2754] = -4.05296156E-01;
  COFD[2755] = 1.76746877E-02;
  COFD[2756] = -1.63285665E+01;
  COFD[2757] = 3.81213432E+00;
  COFD[2758] = -2.88477875E-01;
  COFD[2759] = 1.28642729E-02;
  COFD[2760] = -1.55610577E+01;
  COFD[2761] = 3.94122260E+00;
  COFD[2762] = -3.04959455E-01;
  COFD[2763] = 1.35673989E-02;
  COFD[2764] = -1.98776585E+01;
  COFD[2765] = 4.99728320E+00;
  COFD[2766] = -4.31232778E-01;
  COFD[2767] = 1.85977437E-02;
  COFD[2768] = -1.83971422E+01;
  COFD[2769] = 5.08450371E+00;
  COFD[2770] = -4.34067856E-01;
  COFD[2771] = 1.83677750E-02;
  COFD[2772] = -1.86733098E+01;
  COFD[2773] = 4.74926712E+00;
  COFD[2774] = -4.04227356E-01;
  COFD[2775] = 1.76416526E-02;
  COFD[2776] = -1.86957961E+01;
  COFD[2777] = 4.74926712E+00;
  COFD[2778] = -4.04227356E-01;
  COFD[2779] = 1.76416526E-02;
  COFD[2780] = -1.98867465E+01;
  COFD[2781] = 4.99728320E+00;
  COFD[2782] = -4.31232778E-01;
  COFD[2783] = 1.85977437E-02;
  COFD[2784] = -1.68175518E+01;
  COFD[2785] = 3.25019671E+00;
  COFD[2786] = -1.21866160E-01;
  COFD[2787] = 1.81635548E-03;
  COFD[2788] = -1.98954494E+01;
  COFD[2789] = 4.99728320E+00;
  COFD[2790] = -4.31232778E-01;
  COFD[2791] = 1.85977437E-02;
  COFD[2792] = -2.01989417E+01;
  COFD[2793] = 5.07660334E+00;
  COFD[2794] = -4.34318917E-01;
  COFD[2795] = 1.84318552E-02;
  COFD[2796] = -1.78473524E+01;
  COFD[2797] = 3.72976485E+00;
  COFD[2798] = -1.96451739E-01;
  COFD[2799] = 5.54355576E-03;
  COFD[2800] = -1.86433402E+01;
  COFD[2801] = 4.74926712E+00;
  COFD[2802] = -4.04227356E-01;
  COFD[2803] = 1.76416526E-02;
  COFD[2804] = -1.86190445E+01;
  COFD[2805] = 4.74926712E+00;
  COFD[2806] = -4.04227356E-01;
  COFD[2807] = 1.76416526E-02;
  COFD[2808] = -1.85179036E+01;
  COFD[2809] = 4.66474827E+00;
  COFD[2810] = -3.95139197E-01;
  COFD[2811] = 1.73269044E-02;
  COFD[2812] = -1.89056869E+01;
  COFD[2813] = 4.66474827E+00;
  COFD[2814] = -3.95139197E-01;
  COFD[2815] = 1.73269044E-02;
  COFD[2816] = -2.07403148E+01;
  COFD[2817] = 5.06681901E+00;
  COFD[2818] = -4.19487221E-01;
  COFD[2819] = 1.72307854E-02;
  COFD[2820] = -2.06356357E+01;
  COFD[2821] = 5.07030471E+00;
  COFD[2822] = -4.20827541E-01;
  COFD[2823] = 1.73247966E-02;
  COFD[2824] = -1.89160854E+01;
  COFD[2825] = 4.66474827E+00;
  COFD[2826] = -3.95139197E-01;
  COFD[2827] = 1.73269044E-02;
  COFD[2828] = -1.89160854E+01;
  COFD[2829] = 4.66474827E+00;
  COFD[2830] = -3.95139197E-01;
  COFD[2831] = 1.73269044E-02;
  COFD[2832] = -2.00303439E+01;
  COFD[2833] = 5.02993474E+00;
  COFD[2834] = -4.33356097E-01;
  COFD[2835] = 1.86017649E-02;
  COFD[2836] = -2.00212653E+01;
  COFD[2837] = 5.02993474E+00;
  COFD[2838] = -4.33356097E-01;
  COFD[2839] = 1.86017649E-02;
  COFD[2840] = -2.00212653E+01;
  COFD[2841] = 5.02993474E+00;
  COFD[2842] = -4.33356097E-01;
  COFD[2843] = 1.86017649E-02;
  COFD[2844] = -2.00117745E+01;
  COFD[2845] = 5.02993474E+00;
  COFD[2846] = -4.33356097E-01;
  COFD[2847] = 1.86017649E-02;
  COFD[2848] = -2.00117745E+01;
  COFD[2849] = 5.02993474E+00;
  COFD[2850] = -4.33356097E-01;
  COFD[2851] = 1.86017649E-02;
  COFD[2852] = -1.99474560E+01;
  COFD[2853] = 4.53668859E+00;
  COFD[2854] = -3.25388063E-01;
  COFD[2855] = 1.21151053E-02;
  COFD[2856] = -1.98674467E+01;
  COFD[2857] = 4.47035518E+00;
  COFD[2858] = -3.14144025E-01;
  COFD[2859] = 1.15215320E-02;
  COFD[2860] = -1.98674467E+01;
  COFD[2861] = 4.47035518E+00;
  COFD[2862] = -3.14144025E-01;
  COFD[2863] = 1.15215320E-02;
  COFD[2864] = -1.94977822E+01;
  COFD[2865] = 4.20324443E+00;
  COFD[2866] = -2.70947557E-01;
  COFD[2867] = 9.30227948E-03;
  COFD[2868] = -1.95012007E+01;
  COFD[2869] = 4.20324443E+00;
  COFD[2870] = -2.70947557E-01;
  COFD[2871] = 9.30227948E-03;
  COFD[2872] = -2.05919105E+01;
  COFD[2873] = 4.96148136E+00;
  COFD[2874] = -3.99678261E-01;
  COFD[2875] = 1.61185234E-02;
  COFD[2876] = -1.96766989E+01;
  COFD[2877] = 4.93739539E+00;
  COFD[2878] = -4.25550583E-01;
  COFD[2879] = 1.84383787E-02;
  COFD[2880] = -1.57537997E+01;
  COFD[2881] = 4.00294157E+00;
  COFD[2882] = -3.12933722E-01;
  COFD[2883] = 1.39120599E-02;
  COFD[2884] = -1.99984200E+01;
  COFD[2885] = 5.02165654E+00;
  COFD[2886] = -4.33273988E-01;
  COFD[2887] = 1.86397032E-02;
  COFD[2888] = -1.84947678E+01;
  COFD[2889] = 5.09594363E+00;
  COFD[2890] = -4.34051486E-01;
  COFD[2891] = 1.83051728E-02;
  COFD[2892] = -1.88185092E+01;
  COFD[2893] = 4.78477078E+00;
  COFD[2894] = -4.07957791E-01;
  COFD[2895] = 1.77663128E-02;
  COFD[2896] = -1.88411234E+01;
  COFD[2897] = 4.78477078E+00;
  COFD[2898] = -4.07957791E-01;
  COFD[2899] = 1.77663128E-02;
  COFD[2900] = -2.00075895E+01;
  COFD[2901] = 5.02165654E+00;
  COFD[2902] = -4.33273988E-01;
  COFD[2903] = 1.86397032E-02;
  COFD[2904] = -1.65526350E+01;
  COFD[2905] = 3.10349438E+00;
  COFD[2906] = -9.93256746E-02;
  COFD[2907] = 6.99801450E-04;
  COFD[2908] = -2.00163717E+01;
  COFD[2909] = 5.02165654E+00;
  COFD[2910] = -4.33273988E-01;
  COFD[2911] = 1.86397032E-02;
  COFD[2912] = -2.02877902E+01;
  COFD[2913] = 5.08508436E+00;
  COFD[2914] = -4.33869874E-01;
  COFD[2915] = 1.83478099E-02;
  COFD[2916] = -1.76580536E+01;
  COFD[2917] = 3.61580769E+00;
  COFD[2918] = -1.78483654E-01;
  COFD[2919] = 4.63783692E-03;
  COFD[2920] = -1.87889925E+01;
  COFD[2921] = 4.78477078E+00;
  COFD[2922] = -4.07957791E-01;
  COFD[2923] = 1.77663128E-02;
  COFD[2924] = -1.87645648E+01;
  COFD[2925] = 4.78477078E+00;
  COFD[2926] = -4.07957791E-01;
  COFD[2927] = 1.77663128E-02;
  COFD[2928] = -1.86600404E+01;
  COFD[2929] = 4.70102276E+00;
  COFD[2930] = -3.99099565E-01;
  COFD[2931] = 1.74672450E-02;
  COFD[2932] = -1.90477112E+01;
  COFD[2933] = 4.70102276E+00;
  COFD[2934] = -3.99099565E-01;
  COFD[2935] = 1.74672450E-02;
  COFD[2936] = -2.07473111E+01;
  COFD[2937] = 5.03966902E+00;
  COFD[2938] = -4.13827526E-01;
  COFD[2939] = 1.68975479E-02;
  COFD[2940] = -2.06742737E+01;
  COFD[2941] = 5.05714490E+00;
  COFD[2942] = -4.17257087E-01;
  COFD[2943] = 1.70941651E-02;
  COFD[2944] = -1.90581976E+01;
  COFD[2945] = 4.70102276E+00;
  COFD[2946] = -3.99099565E-01;
  COFD[2947] = 1.74672450E-02;
  COFD[2948] = -1.90581976E+01;
  COFD[2949] = 4.70102276E+00;
  COFD[2950] = -3.99099565E-01;
  COFD[2951] = 1.74672450E-02;
  COFD[2952] = -2.01258131E+01;
  COFD[2953] = 5.04247989E+00;
  COFD[2954] = -4.33600957E-01;
  COFD[2955] = 1.85546055E-02;
  COFD[2956] = -2.01166531E+01;
  COFD[2957] = 5.04247989E+00;
  COFD[2958] = -4.33600957E-01;
  COFD[2959] = 1.85546055E-02;
  COFD[2960] = -2.01166531E+01;
  COFD[2961] = 5.04247989E+00;
  COFD[2962] = -4.33600957E-01;
  COFD[2963] = 1.85546055E-02;
  COFD[2964] = -2.01070788E+01;
  COFD[2965] = 5.04247989E+00;
  COFD[2966] = -4.33600957E-01;
  COFD[2967] = 1.85546055E-02;
  COFD[2968] = -2.01070788E+01;
  COFD[2969] = 5.04247989E+00;
  COFD[2970] = -4.33600957E-01;
  COFD[2971] = 1.85546055E-02;
  COFD[2972] = -1.98674467E+01;
  COFD[2973] = 4.47035518E+00;
  COFD[2974] = -3.14144025E-01;
  COFD[2975] = 1.15215320E-02;
  COFD[2976] = -1.97511253E+01;
  COFD[2977] = 4.38812396E+00;
  COFD[2978] = -3.00586373E-01;
  COFD[2979] = 1.08166327E-02;
  COFD[2980] = -1.97511253E+01;
  COFD[2981] = 4.38812396E+00;
  COFD[2982] = -3.00586373E-01;
  COFD[2983] = 1.08166327E-02;
  COFD[2984] = -1.93128088E+01;
  COFD[2985] = 4.09097056E+00;
  COFD[2986] = -2.53072659E-01;
  COFD[2987] = 8.39287900E-03;
  COFD[2988] = -1.93162701E+01;
  COFD[2989] = 4.09097056E+00;
  COFD[2990] = -2.53072659E-01;
  COFD[2991] = 8.39287900E-03;
  COFD[2992] = -2.05629984E+01;
  COFD[2993] = 4.91793425E+00;
  COFD[2994] = -3.91702134E-01;
  COFD[2995] = 1.56776152E-02;
  COFD[2996] = -1.98126969E+01;
  COFD[2997] = 4.96916776E+00;
  COFD[2998] = -4.28692228E-01;
  COFD[2999] = 1.85338951E-02;
  COFD[3000] = -1.57537997E+01;
  COFD[3001] = 4.00294157E+00;
  COFD[3002] = -3.12933722E-01;
  COFD[3003] = 1.39120599E-02;
  COFD[3004] = -1.99984200E+01;
  COFD[3005] = 5.02165654E+00;
  COFD[3006] = -4.33273988E-01;
  COFD[3007] = 1.86397032E-02;
  COFD[3008] = -1.84947678E+01;
  COFD[3009] = 5.09594363E+00;
  COFD[3010] = -4.34051486E-01;
  COFD[3011] = 1.83051728E-02;
  COFD[3012] = -1.88185092E+01;
  COFD[3013] = 4.78477078E+00;
  COFD[3014] = -4.07957791E-01;
  COFD[3015] = 1.77663128E-02;
  COFD[3016] = -1.88411234E+01;
  COFD[3017] = 4.78477078E+00;
  COFD[3018] = -4.07957791E-01;
  COFD[3019] = 1.77663128E-02;
  COFD[3020] = -2.00075895E+01;
  COFD[3021] = 5.02165654E+00;
  COFD[3022] = -4.33273988E-01;
  COFD[3023] = 1.86397032E-02;
  COFD[3024] = -1.65526350E+01;
  COFD[3025] = 3.10349438E+00;
  COFD[3026] = -9.93256746E-02;
  COFD[3027] = 6.99801450E-04;
  COFD[3028] = -2.00163717E+01;
  COFD[3029] = 5.02165654E+00;
  COFD[3030] = -4.33273988E-01;
  COFD[3031] = 1.86397032E-02;
  COFD[3032] = -2.02877902E+01;
  COFD[3033] = 5.08508436E+00;
  COFD[3034] = -4.33869874E-01;
  COFD[3035] = 1.83478099E-02;
  COFD[3036] = -1.76580536E+01;
  COFD[3037] = 3.61580769E+00;
  COFD[3038] = -1.78483654E-01;
  COFD[3039] = 4.63783692E-03;
  COFD[3040] = -1.87889925E+01;
  COFD[3041] = 4.78477078E+00;
  COFD[3042] = -4.07957791E-01;
  COFD[3043] = 1.77663128E-02;
  COFD[3044] = -1.87645648E+01;
  COFD[3045] = 4.78477078E+00;
  COFD[3046] = -4.07957791E-01;
  COFD[3047] = 1.77663128E-02;
  COFD[3048] = -1.86600404E+01;
  COFD[3049] = 4.70102276E+00;
  COFD[3050] = -3.99099565E-01;
  COFD[3051] = 1.74672450E-02;
  COFD[3052] = -1.90477112E+01;
  COFD[3053] = 4.70102276E+00;
  COFD[3054] = -3.99099565E-01;
  COFD[3055] = 1.74672450E-02;
  COFD[3056] = -2.07473111E+01;
  COFD[3057] = 5.03966902E+00;
  COFD[3058] = -4.13827526E-01;
  COFD[3059] = 1.68975479E-02;
  COFD[3060] = -2.06742737E+01;
  COFD[3061] = 5.05714490E+00;
  COFD[3062] = -4.17257087E-01;
  COFD[3063] = 1.70941651E-02;
  COFD[3064] = -1.90581976E+01;
  COFD[3065] = 4.70102276E+00;
  COFD[3066] = -3.99099565E-01;
  COFD[3067] = 1.74672450E-02;
  COFD[3068] = -1.90581976E+01;
  COFD[3069] = 4.70102276E+00;
  COFD[3070] = -3.99099565E-01;
  COFD[3071] = 1.74672450E-02;
  COFD[3072] = -2.01258131E+01;
  COFD[3073] = 5.04247989E+00;
  COFD[3074] = -4.33600957E-01;
  COFD[3075] = 1.85546055E-02;
  COFD[3076] = -2.01166531E+01;
  COFD[3077] = 5.04247989E+00;
  COFD[3078] = -4.33600957E-01;
  COFD[3079] = 1.85546055E-02;
  COFD[3080] = -2.01166531E+01;
  COFD[3081] = 5.04247989E+00;
  COFD[3082] = -4.33600957E-01;
  COFD[3083] = 1.85546055E-02;
  COFD[3084] = -2.01070788E+01;
  COFD[3085] = 5.04247989E+00;
  COFD[3086] = -4.33600957E-01;
  COFD[3087] = 1.85546055E-02;
  COFD[3088] = -2.01070788E+01;
  COFD[3089] = 5.04247989E+00;
  COFD[3090] = -4.33600957E-01;
  COFD[3091] = 1.85546055E-02;
  COFD[3092] = -1.98674467E+01;
  COFD[3093] = 4.47035518E+00;
  COFD[3094] = -3.14144025E-01;
  COFD[3095] = 1.15215320E-02;
  COFD[3096] = -1.97511253E+01;
  COFD[3097] = 4.38812396E+00;
  COFD[3098] = -3.00586373E-01;
  COFD[3099] = 1.08166327E-02;
  COFD[3100] = -1.97511253E+01;
  COFD[3101] = 4.38812396E+00;
  COFD[3102] = -3.00586373E-01;
  COFD[3103] = 1.08166327E-02;
  COFD[3104] = -1.93128088E+01;
  COFD[3105] = 4.09097056E+00;
  COFD[3106] = -2.53072659E-01;
  COFD[3107] = 8.39287900E-03;
  COFD[3108] = -1.93162701E+01;
  COFD[3109] = 4.09097056E+00;
  COFD[3110] = -2.53072659E-01;
  COFD[3111] = 8.39287900E-03;
  COFD[3112] = -2.05629984E+01;
  COFD[3113] = 4.91793425E+00;
  COFD[3114] = -3.91702134E-01;
  COFD[3115] = 1.56776152E-02;
  COFD[3116] = -1.98126969E+01;
  COFD[3117] = 4.96916776E+00;
  COFD[3118] = -4.28692228E-01;
  COFD[3119] = 1.85338951E-02;
  COFD[3120] = -1.62239563E+01;
  COFD[3121] = 4.14752768E+00;
  COFD[3122] = -3.31167968E-01;
  COFD[3123] = 1.46808520E-02;
  COFD[3124] = -2.02940915E+01;
  COFD[3125] = 5.05608877E+00;
  COFD[3126] = -4.33916802E-01;
  COFD[3127] = 1.85080064E-02;
  COFD[3128] = -1.87088900E+01;
  COFD[3129] = 5.10571650E+00;
  COFD[3130] = -4.30792656E-01;
  COFD[3131] = 1.79773036E-02;
  COFD[3132] = -1.93332949E+01;
  COFD[3133] = 4.92428527E+00;
  COFD[3134] = -4.24144048E-01;
  COFD[3135] = 1.83894817E-02;
  COFD[3136] = -1.93574244E+01;
  COFD[3137] = 4.92428527E+00;
  COFD[3138] = -4.24144048E-01;
  COFD[3139] = 1.83894817E-02;
  COFD[3140] = -2.03042665E+01;
  COFD[3141] = 5.05608877E+00;
  COFD[3142] = -4.33916802E-01;
  COFD[3143] = 1.85080064E-02;
  COFD[3144] = -1.56840943E+01;
  COFD[3145] = 2.63195728E+00;
  COFD[3146] = -2.77536872E-02;
  COFD[3147] = -2.81468315E-03;
  COFD[3148] = -2.03140311E+01;
  COFD[3149] = 5.05608877E+00;
  COFD[3150] = -4.33916802E-01;
  COFD[3151] = 1.85080064E-02;
  COFD[3152] = -2.05751015E+01;
  COFD[3153] = 5.11267713E+00;
  COFD[3154] = -4.33186524E-01;
  COFD[3155] = 1.81425679E-02;
  COFD[3156] = -1.69825870E+01;
  COFD[3157] = 3.22734843E+00;
  COFD[3158] = -1.18346476E-01;
  COFD[3159] = 1.64165498E-03;
  COFD[3160] = -1.93049045E+01;
  COFD[3161] = 4.92428527E+00;
  COFD[3162] = -4.24144048E-01;
  COFD[3163] = 1.83894817E-02;
  COFD[3164] = -1.92789182E+01;
  COFD[3165] = 4.92428527E+00;
  COFD[3166] = -4.24144048E-01;
  COFD[3167] = 1.83894817E-02;
  COFD[3168] = -1.90953037E+01;
  COFD[3169] = 4.81121806E+00;
  COFD[3170] = -4.11208159E-01;
  COFD[3171] = 1.79001086E-02;
  COFD[3172] = -1.94985290E+01;
  COFD[3173] = 4.81121806E+00;
  COFD[3174] = -4.11208159E-01;
  COFD[3175] = 1.79001086E-02;
  COFD[3176] = -2.06833931E+01;
  COFD[3177] = 4.91319664E+00;
  COFD[3178] = -3.90730083E-01;
  COFD[3179] = 1.56209960E-02;
  COFD[3180] = -2.06153837E+01;
  COFD[3181] = 4.93204352E+00;
  COFD[3182] = -3.94320627E-01;
  COFD[3183] = 1.58233034E-02;
  COFD[3184] = -1.95100939E+01;
  COFD[3185] = 4.81121806E+00;
  COFD[3186] = -4.11208159E-01;
  COFD[3187] = 1.79001086E-02;
  COFD[3188] = -1.95100939E+01;
  COFD[3189] = 4.81121806E+00;
  COFD[3190] = -4.11208159E-01;
  COFD[3191] = 1.79001086E-02;
  COFD[3192] = -2.04258758E+01;
  COFD[3193] = 5.07801327E+00;
  COFD[3194] = -4.34370827E-01;
  COFD[3195] = 1.84286495E-02;
  COFD[3196] = -2.04157110E+01;
  COFD[3197] = 5.07801327E+00;
  COFD[3198] = -4.34370827E-01;
  COFD[3199] = 1.84286495E-02;
  COFD[3200] = -2.04157110E+01;
  COFD[3201] = 5.07801327E+00;
  COFD[3202] = -4.34370827E-01;
  COFD[3203] = 1.84286495E-02;
  COFD[3204] = -2.04051079E+01;
  COFD[3205] = 5.07801327E+00;
  COFD[3206] = -4.34370827E-01;
  COFD[3207] = 1.84286495E-02;
  COFD[3208] = -2.04051079E+01;
  COFD[3209] = 5.07801327E+00;
  COFD[3210] = -4.34370827E-01;
  COFD[3211] = 1.84286495E-02;
  COFD[3212] = -1.94977822E+01;
  COFD[3213] = 4.20324443E+00;
  COFD[3214] = -2.70947557E-01;
  COFD[3215] = 9.30227948E-03;
  COFD[3216] = -1.93128088E+01;
  COFD[3217] = 4.09097056E+00;
  COFD[3218] = -2.53072659E-01;
  COFD[3219] = 8.39287900E-03;
  COFD[3220] = -1.93128088E+01;
  COFD[3221] = 4.09097056E+00;
  COFD[3222] = -2.53072659E-01;
  COFD[3223] = 8.39287900E-03;
  COFD[3224] = -1.87466478E+01;
  COFD[3225] = 3.73578593E+00;
  COFD[3226] = -1.97409456E-01;
  COFD[3227] = 5.59204650E-03;
  COFD[3228] = -1.87506631E+01;
  COFD[3229] = 3.73578593E+00;
  COFD[3230] = -1.97409456E-01;
  COFD[3231] = 5.59204650E-03;
  COFD[3232] = -2.05988528E+01;
  COFD[3233] = 4.82964775E+00;
  COFD[3234] = -3.74265275E-01;
  COFD[3235] = 1.46801515E-02;
  COFD[3236] = -2.01605334E+01;
  COFD[3237] = 5.03035610E+00;
  COFD[3238] = -4.33348553E-01;
  COFD[3239] = 1.85988308E-02;
  COFD[3240] = -1.62242082E+01;
  COFD[3241] = 4.14752768E+00;
  COFD[3242] = -3.31167968E-01;
  COFD[3243] = 1.46808520E-02;
  COFD[3244] = -2.02968216E+01;
  COFD[3245] = 5.05608877E+00;
  COFD[3246] = -4.33916802E-01;
  COFD[3247] = 1.85080064E-02;
  COFD[3248] = -1.87090179E+01;
  COFD[3249] = 5.10571650E+00;
  COFD[3250] = -4.30792656E-01;
  COFD[3251] = 1.79773036E-02;
  COFD[3252] = -1.93349381E+01;
  COFD[3253] = 4.92428527E+00;
  COFD[3254] = -4.24144048E-01;
  COFD[3255] = 1.83894817E-02;
  COFD[3256] = -1.93591490E+01;
  COFD[3257] = 4.92428527E+00;
  COFD[3258] = -4.24144048E-01;
  COFD[3259] = 1.83894817E-02;
  COFD[3260] = -2.03070528E+01;
  COFD[3261] = 5.05608877E+00;
  COFD[3262] = -4.33916802E-01;
  COFD[3263] = 1.85080064E-02;
  COFD[3264] = -1.56858982E+01;
  COFD[3265] = 2.63195728E+00;
  COFD[3266] = -2.77536872E-02;
  COFD[3267] = -2.81468315E-03;
  COFD[3268] = -2.03168726E+01;
  COFD[3269] = 5.05608877E+00;
  COFD[3270] = -4.33916802E-01;
  COFD[3271] = 1.85080064E-02;
  COFD[3272] = -2.05777168E+01;
  COFD[3273] = 5.11267713E+00;
  COFD[3274] = -4.33186524E-01;
  COFD[3275] = 1.81425679E-02;
  COFD[3276] = -1.69843136E+01;
  COFD[3277] = 3.22734843E+00;
  COFD[3278] = -1.18346476E-01;
  COFD[3279] = 1.64165498E-03;
  COFD[3280] = -1.93065497E+01;
  COFD[3281] = 4.92428527E+00;
  COFD[3282] = -4.24144048E-01;
  COFD[3283] = 1.83894817E-02;
  COFD[3284] = -1.92804799E+01;
  COFD[3285] = 4.92428527E+00;
  COFD[3286] = -4.24144048E-01;
  COFD[3287] = 1.83894817E-02;
  COFD[3288] = -1.90967798E+01;
  COFD[3289] = 4.81121806E+00;
  COFD[3290] = -4.11208159E-01;
  COFD[3291] = 1.79001086E-02;
  COFD[3292] = -1.95010857E+01;
  COFD[3293] = 4.81121806E+00;
  COFD[3294] = -4.11208159E-01;
  COFD[3295] = 1.79001086E-02;
  COFD[3296] = -2.06861259E+01;
  COFD[3297] = 4.91319664E+00;
  COFD[3298] = -3.90730083E-01;
  COFD[3299] = 1.56209960E-02;
  COFD[3300] = -2.06180590E+01;
  COFD[3301] = 4.93204352E+00;
  COFD[3302] = -3.94320627E-01;
  COFD[3303] = 1.58233034E-02;
  COFD[3304] = -1.95127106E+01;
  COFD[3305] = 4.81121806E+00;
  COFD[3306] = -4.11208159E-01;
  COFD[3307] = 1.79001086E-02;
  COFD[3308] = -1.95127106E+01;
  COFD[3309] = 4.81121806E+00;
  COFD[3310] = -4.11208159E-01;
  COFD[3311] = 1.79001086E-02;
  COFD[3312] = -2.04286635E+01;
  COFD[3313] = 5.07801327E+00;
  COFD[3314] = -4.34370827E-01;
  COFD[3315] = 1.84286495E-02;
  COFD[3316] = -2.04184424E+01;
  COFD[3317] = 5.07801327E+00;
  COFD[3318] = -4.34370827E-01;
  COFD[3319] = 1.84286495E-02;
  COFD[3320] = -2.04184424E+01;
  COFD[3321] = 5.07801327E+00;
  COFD[3322] = -4.34370827E-01;
  COFD[3323] = 1.84286495E-02;
  COFD[3324] = -2.04077819E+01;
  COFD[3325] = 5.07801327E+00;
  COFD[3326] = -4.34370827E-01;
  COFD[3327] = 1.84286495E-02;
  COFD[3328] = -2.04077819E+01;
  COFD[3329] = 5.07801327E+00;
  COFD[3330] = -4.34370827E-01;
  COFD[3331] = 1.84286495E-02;
  COFD[3332] = -1.95012007E+01;
  COFD[3333] = 4.20324443E+00;
  COFD[3334] = -2.70947557E-01;
  COFD[3335] = 9.30227948E-03;
  COFD[3336] = -1.93162701E+01;
  COFD[3337] = 4.09097056E+00;
  COFD[3338] = -2.53072659E-01;
  COFD[3339] = 8.39287900E-03;
  COFD[3340] = -1.93162701E+01;
  COFD[3341] = 4.09097056E+00;
  COFD[3342] = -2.53072659E-01;
  COFD[3343] = 8.39287900E-03;
  COFD[3344] = -1.87506631E+01;
  COFD[3345] = 3.73578593E+00;
  COFD[3346] = -1.97409456E-01;
  COFD[3347] = 5.59204650E-03;
  COFD[3348] = -1.87547109E+01;
  COFD[3349] = 3.73578593E+00;
  COFD[3350] = -1.97409456E-01;
  COFD[3351] = 5.59204650E-03;
  COFD[3352] = -2.06021844E+01;
  COFD[3353] = 4.82964775E+00;
  COFD[3354] = -3.74265275E-01;
  COFD[3355] = 1.46801515E-02;
  COFD[3356] = -2.01630288E+01;
  COFD[3357] = 5.03035610E+00;
  COFD[3358] = -4.33348553E-01;
  COFD[3359] = 1.85988308E-02;
  COFD[3360] = -1.45501106E+01;
  COFD[3361] = 3.57062617E+00;
  COFD[3362] = -2.57920745E-01;
  COFD[3363] = 1.15740264E-02;
  COFD[3364] = -1.89380489E+01;
  COFD[3365] = 4.70017385E+00;
  COFD[3366] = -3.99010079E-01;
  COFD[3367] = 1.74642383E-02;
  COFD[3368] = -1.78359091E+01;
  COFD[3369] = 4.95976558E+00;
  COFD[3370] = -4.27732001E-01;
  COFD[3371] = 1.85030487E-02;
  COFD[3372] = -1.76029792E+01;
  COFD[3373] = 4.38093272E+00;
  COFD[3374] = -3.60316345E-01;
  COFD[3375] = 1.58984540E-02;
  COFD[3376] = -1.76252000E+01;
  COFD[3377] = 4.38093272E+00;
  COFD[3378] = -3.60316345E-01;
  COFD[3379] = 1.58984540E-02;
  COFD[3380] = -1.89469698E+01;
  COFD[3381] = 4.70017385E+00;
  COFD[3382] = -3.99010079E-01;
  COFD[3383] = 1.74642383E-02;
  COFD[3384] = -1.87002631E+01;
  COFD[3385] = 4.21062259E+00;
  COFD[3386] = -2.72117720E-01;
  COFD[3387] = 9.36166287E-03;
  COFD[3388] = -1.89555098E+01;
  COFD[3389] = 4.70017385E+00;
  COFD[3390] = -3.99010079E-01;
  COFD[3391] = 1.74642383E-02;
  COFD[3392] = -1.95931934E+01;
  COFD[3393] = 4.93353492E+00;
  COFD[3394] = -4.25134704E-01;
  COFD[3395] = 1.84238308E-02;
  COFD[3396] = -1.93585544E+01;
  COFD[3397] = 4.53056710E+00;
  COFD[3398] = -3.24342968E-01;
  COFD[3399] = 1.20596526E-02;
  COFD[3400] = -1.75728909E+01;
  COFD[3401] = 4.38093272E+00;
  COFD[3402] = -3.60316345E-01;
  COFD[3403] = 1.58984540E-02;
  COFD[3404] = -1.75488694E+01;
  COFD[3405] = 4.38093272E+00;
  COFD[3406] = -3.60316345E-01;
  COFD[3407] = 1.58984540E-02;
  COFD[3408] = -1.73363480E+01;
  COFD[3409] = 4.24280031E+00;
  COFD[3410] = -3.42971692E-01;
  COFD[3411] = 1.51693290E-02;
  COFD[3412] = -1.77211477E+01;
  COFD[3413] = 4.24280031E+00;
  COFD[3414] = -3.42971692E-01;
  COFD[3415] = 1.51693290E-02;
  COFD[3416] = -2.04709982E+01;
  COFD[3417] = 5.08287798E+00;
  COFD[3418] = -4.34364213E-01;
  COFD[3419] = 1.84017776E-02;
  COFD[3420] = -2.03442498E+01;
  COFD[3421] = 5.07663244E+00;
  COFD[3422] = -4.34319960E-01;
  COFD[3423] = 1.84317867E-02;
  COFD[3424] = -1.77313655E+01;
  COFD[3425] = 4.24280031E+00;
  COFD[3426] = -3.42971692E-01;
  COFD[3427] = 1.51693290E-02;
  COFD[3428] = -1.77313655E+01;
  COFD[3429] = 4.24280031E+00;
  COFD[3430] = -3.42971692E-01;
  COFD[3431] = 1.51693290E-02;
  COFD[3432] = -1.91464874E+01;
  COFD[3433] = 4.75991278E+00;
  COFD[3434] = -4.05296156E-01;
  COFD[3435] = 1.76746877E-02;
  COFD[3436] = -1.91375759E+01;
  COFD[3437] = 4.75991278E+00;
  COFD[3438] = -4.05296156E-01;
  COFD[3439] = 1.76746877E-02;
  COFD[3440] = -1.91375759E+01;
  COFD[3441] = 4.75991278E+00;
  COFD[3442] = -4.05296156E-01;
  COFD[3443] = 1.76746877E-02;
  COFD[3444] = -1.91282565E+01;
  COFD[3445] = 4.75991278E+00;
  COFD[3446] = -4.05296156E-01;
  COFD[3447] = 1.76746877E-02;
  COFD[3448] = -1.91282565E+01;
  COFD[3449] = 4.75991278E+00;
  COFD[3450] = -4.05296156E-01;
  COFD[3451] = 1.76746877E-02;
  COFD[3452] = -2.05919105E+01;
  COFD[3453] = 4.96148136E+00;
  COFD[3454] = -3.99678261E-01;
  COFD[3455] = 1.61185234E-02;
  COFD[3456] = -2.05629984E+01;
  COFD[3457] = 4.91793425E+00;
  COFD[3458] = -3.91702134E-01;
  COFD[3459] = 1.56776152E-02;
  COFD[3460] = -2.05629984E+01;
  COFD[3461] = 4.91793425E+00;
  COFD[3462] = -3.91702134E-01;
  COFD[3463] = 1.56776152E-02;
  COFD[3464] = -2.05988528E+01;
  COFD[3465] = 4.82964775E+00;
  COFD[3466] = -3.74265275E-01;
  COFD[3467] = 1.46801515E-02;
  COFD[3468] = -2.06021844E+01;
  COFD[3469] = 4.82964775E+00;
  COFD[3470] = -3.74265275E-01;
  COFD[3471] = 1.46801515E-02;
  COFD[3472] = -2.06193089E+01;
  COFD[3473] = 5.11111865E+00;
  COFD[3474] = -4.34063622E-01;
  COFD[3475] = 1.82251651E-02;
  COFD[3476] = -1.87000252E+01;
  COFD[3477] = 4.61983256E+00;
  COFD[3478] = -3.89971404E-01;
  COFD[3479] = 1.71306317E-02;
  COFD[3480] = -1.23361495E+01;
  COFD[3481] = 2.75315266E+00;
  COFD[3482] = -1.50257362E-01;
  COFD[3483] = 6.84125771E-03;
  COFD[3484] = -1.60613819E+01;
  COFD[3485] = 3.71236773E+00;
  COFD[3486] = -2.75612682E-01;
  COFD[3487] = 1.23100131E-02;
  COFD[3488] = -1.52282485E+01;
  COFD[3489] = 4.07848496E+00;
  COFD[3490] = -3.22647626E-01;
  COFD[3491] = 1.43298383E-02;
  COFD[3492] = -1.49513692E+01;
  COFD[3493] = 3.45291069E+00;
  COFD[3494] = -2.42822180E-01;
  COFD[3495] = 1.09275752E-02;
  COFD[3496] = -1.49705966E+01;
  COFD[3497] = 3.45291069E+00;
  COFD[3498] = -2.42822180E-01;
  COFD[3499] = 1.09275752E-02;
  COFD[3500] = -1.60685613E+01;
  COFD[3501] = 3.71236773E+00;
  COFD[3502] = -2.75612682E-01;
  COFD[3503] = 1.23100131E-02;
  COFD[3504] = -1.99665282E+01;
  COFD[3505] = 5.06422780E+00;
  COFD[3506] = -4.18763984E-01;
  COFD[3507] = 1.71836367E-02;
  COFD[3508] = -1.60754107E+01;
  COFD[3509] = 3.71236773E+00;
  COFD[3510] = -2.75612682E-01;
  COFD[3511] = 1.23100131E-02;
  COFD[3512] = -1.68569214E+01;
  COFD[3513] = 4.02913840E+00;
  COFD[3514] = -3.16290979E-01;
  COFD[3515] = 1.40558694E-02;
  COFD[3516] = -1.97543794E+01;
  COFD[3517] = 5.07974048E+00;
  COFD[3518] = -4.34449890E-01;
  COFD[3519] = 1.84260535E-02;
  COFD[3520] = -1.49202049E+01;
  COFD[3521] = 3.45291069E+00;
  COFD[3522] = -2.42822180E-01;
  COFD[3523] = 1.09275752E-02;
  COFD[3524] = -1.48992951E+01;
  COFD[3525] = 3.45291069E+00;
  COFD[3526] = -2.42822180E-01;
  COFD[3527] = 1.09275752E-02;
  COFD[3528] = -1.47434595E+01;
  COFD[3529] = 3.32669990E+00;
  COFD[3530] = -2.26245876E-01;
  COFD[3531] = 1.02009489E-02;
  COFD[3532] = -1.50944975E+01;
  COFD[3533] = 3.32669990E+00;
  COFD[3534] = -2.26245876E-01;
  COFD[3535] = 1.02009489E-02;
  COFD[3536] = -1.83021646E+01;
  COFD[3537] = 4.46170204E+00;
  COFD[3538] = -3.70299101E-01;
  COFD[3539] = 1.63114719E-02;
  COFD[3540] = -1.81319885E+01;
  COFD[3541] = 4.43405790E+00;
  COFD[3542] = -3.66882237E-01;
  COFD[3543] = 1.61700748E-02;
  COFD[3544] = -1.51028095E+01;
  COFD[3545] = 3.32669990E+00;
  COFD[3546] = -2.26245876E-01;
  COFD[3547] = 1.02009489E-02;
  COFD[3548] = -1.51028095E+01;
  COFD[3549] = 3.32669990E+00;
  COFD[3550] = -2.26245876E-01;
  COFD[3551] = 1.02009489E-02;
  COFD[3552] = -1.63432638E+01;
  COFD[3553] = 3.81213432E+00;
  COFD[3554] = -2.88477875E-01;
  COFD[3555] = 1.28642729E-02;
  COFD[3556] = -1.63360925E+01;
  COFD[3557] = 3.81213432E+00;
  COFD[3558] = -2.88477875E-01;
  COFD[3559] = 1.28642729E-02;
  COFD[3560] = -1.63360925E+01;
  COFD[3561] = 3.81213432E+00;
  COFD[3562] = -2.88477875E-01;
  COFD[3563] = 1.28642729E-02;
  COFD[3564] = -1.63285665E+01;
  COFD[3565] = 3.81213432E+00;
  COFD[3566] = -2.88477875E-01;
  COFD[3567] = 1.28642729E-02;
  COFD[3568] = -1.63285665E+01;
  COFD[3569] = 3.81213432E+00;
  COFD[3570] = -2.88477875E-01;
  COFD[3571] = 1.28642729E-02;
  COFD[3572] = -1.96766989E+01;
  COFD[3573] = 4.93739539E+00;
  COFD[3574] = -4.25550583E-01;
  COFD[3575] = 1.84383787E-02;
  COFD[3576] = -1.98126969E+01;
  COFD[3577] = 4.96916776E+00;
  COFD[3578] = -4.28692228E-01;
  COFD[3579] = 1.85338951E-02;
  COFD[3580] = -1.98126969E+01;
  COFD[3581] = 4.96916776E+00;
  COFD[3582] = -4.28692228E-01;
  COFD[3583] = 1.85338951E-02;
  COFD[3584] = -2.01605334E+01;
  COFD[3585] = 5.03035610E+00;
  COFD[3586] = -4.33348553E-01;
  COFD[3587] = 1.85988308E-02;
  COFD[3588] = -2.01630288E+01;
  COFD[3589] = 5.03035610E+00;
  COFD[3590] = -4.33348553E-01;
  COFD[3591] = 1.85988308E-02;
  COFD[3592] = -1.87000252E+01;
  COFD[3593] = 4.61983256E+00;
  COFD[3594] = -3.89971404E-01;
  COFD[3595] = 1.71306317E-02;
  COFD[3596] = -1.58476764E+01;
  COFD[3597] = 3.63008569E+00;
  COFD[3598] = -2.65336160E-01;
  COFD[3599] = 1.18822150E-02;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 0;
  KTDIF[1] = 2;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 0.00000000E+00;
  COFTD[1] = 0.00000000E+00;
  COFTD[2] = 0.00000000E+00;
  COFTD[3] = 0.00000000E+00;
  COFTD[4] = 3.60135770E-01;
  COFTD[5] = 2.61070827E-04;
  COFTD[6] = -1.62068288E-07;
  COFTD[7] = 3.07982230E-11;
  COFTD[8] = -1.16421339E-01;
  COFTD[9] = -1.38692194E-04;
  COFTD[10] = 8.45719641E-08;
  COFTD[11] = -1.56452821E-11;
  COFTD[12] = 3.55782803E-01;
  COFTD[13] = 1.46255060E-04;
  COFTD[14] = -9.08905178E-08;
  COFTD[15] = 1.78130397E-11;
  COFTD[16] = 3.61218893E-01;
  COFTD[17] = 1.48489725E-04;
  COFTD[18] = -9.22792557E-08;
  COFTD[19] = 1.80852094E-11;
  COFTD[20] = 3.61529715E-01;
  COFTD[21] = 2.62081331E-04;
  COFTD[22] = -1.62695591E-07;
  COFTD[23] = 3.09174309E-11;
  COFTD[24] = -3.43472005E-02;
  COFTD[25] = 7.93709375E-04;
  COFTD[26] = -4.14025000E-07;
  COFTD[27] = 6.81882239E-11;
  COFTD[28] = 3.62845665E-01;
  COFTD[29] = 2.63035293E-04;
  COFTD[30] = -1.63287795E-07;
  COFTD[31] = 3.10299687E-11;
  COFTD[32] = 3.12574735E-01;
  COFTD[33] = 3.49398160E-04;
  COFTD[34] = -2.13661202E-07;
  COFTD[35] = 3.96591794E-11;
  COFTD[36] = 5.08366193E-02;
  COFTD[37] = 6.92435715E-04;
  COFTD[38] = -3.79497841E-07;
  COFTD[39] = 6.44887370E-11;
  COFTD[40] = 3.55919294E-01;
  COFTD[41] = 1.46311168E-04;
  COFTD[42] = -9.09253867E-08;
  COFTD[43] = 1.78198735E-11;
  COFTD[44] = 3.49855460E-01;
  COFTD[45] = 1.43818450E-04;
  COFTD[46] = -8.93762814E-08;
  COFTD[47] = 1.75162744E-11;
  COFTD[48] = 3.55560525E-01;
  COFTD[49] = 1.12653521E-04;
  COFTD[50] = -6.92376857E-08;
  COFTD[51] = 1.37526307E-11;
  COFTD[52] = 4.13398125E-01;
  COFTD[53] = 1.30978416E-04;
  COFTD[54] = -8.05003015E-08;
  COFTD[55] = 1.59897159E-11;
  COFTD[56] = 2.40072843E-01;
  COFTD[57] = 4.93286561E-04;
  COFTD[58] = -2.92622579E-07;
  COFTD[59] = 5.26884031E-11;
  COFTD[60] = 2.44121872E-01;
  COFTD[61] = 4.82287672E-04;
  COFTD[62] = -2.86697304E-07;
  COFTD[63] = 5.17157372E-11;
  COFTD[64] = 4.15339527E-01;
  COFTD[65] = 1.31593517E-04;
  COFTD[66] = -8.08783473E-08;
  COFTD[67] = 1.60648068E-11;
  COFTD[68] = 4.15339527E-01;
  COFTD[69] = 1.31593517E-04;
  COFTD[70] = -8.08783473E-08;
  COFTD[71] = 1.60648068E-11;
  COFTD[72] = 3.47751467E-01;
  COFTD[73] = 2.90765748E-04;
  COFTD[74] = -1.79784202E-07;
  COFTD[75] = 3.38983202E-11;
  COFTD[76] = 3.46412628E-01;
  COFTD[77] = 2.89646304E-04;
  COFTD[78] = -1.79092035E-07;
  COFTD[79] = 3.37678122E-11;
  COFTD[80] = 3.46412628E-01;
  COFTD[81] = 2.89646304E-04;
  COFTD[82] = -1.79092035E-07;
  COFTD[83] = 3.37678122E-11;
  COFTD[84] = 3.44992073E-01;
  COFTD[85] = 2.88458534E-04;
  COFTD[86] = -1.78357621E-07;
  COFTD[87] = 3.36293385E-11;
  COFTD[88] = 3.44992073E-01;
  COFTD[89] = 2.88458534E-04;
  COFTD[90] = -1.78357621E-07;
  COFTD[91] = 3.36293385E-11;
  COFTD[92] = 1.41603919E-01;
  COFTD[93] = 6.89942036E-04;
  COFTD[94] = -3.91791905E-07;
  COFTD[95] = 6.81995145E-11;
  COFTD[96] = 1.30971198E-01;
  COFTD[97] = 7.07512422E-04;
  COFTD[98] = -3.99957016E-07;
  COFTD[99] = 6.93994696E-11;
  COFTD[100] = 1.30971198E-01;
  COFTD[101] = 7.07512422E-04;
  COFTD[102] = -3.99957016E-07;
  COFTD[103] = 6.93994696E-11;
  COFTD[104] = 1.02784303E-01;
  COFTD[105] = 7.66767063E-04;
  COFTD[106] = -4.27950488E-07;
  COFTD[107] = 7.36068544E-11;
  COFTD[108] = 1.02891392E-01;
  COFTD[109] = 7.67565939E-04;
  COFTD[110] = -4.28396360E-07;
  COFTD[111] = 7.36835437E-11;
  COFTD[112] = 2.21469940E-01;
  COFTD[113] = 5.57597276E-04;
  COFTD[114] = -3.27205286E-07;
  COFTD[115] = 5.83835301E-11;
  COFTD[116] = 3.68671659E-01;
  COFTD[117] = 2.24724271E-04;
  COFTD[118] = -1.39945675E-07;
  COFTD[119] = 2.68489310E-11;
  COFTD[120] = 1.16421339E-01;
  COFTD[121] = 1.38692194E-04;
  COFTD[122] = -8.45719641E-08;
  COFTD[123] = 1.56452821E-11;
  COFTD[124] = 9.73789108E-02;
  COFTD[125] = 7.76092497E-04;
  COFTD[126] = -4.32136914E-07;
  COFTD[127] = 7.42088411E-11;
  COFTD[128] = 0.00000000E+00;
  COFTD[129] = 0.00000000E+00;
  COFTD[130] = 0.00000000E+00;
  COFTD[131] = 0.00000000E+00;
  COFTD[132] = 1.55560711E-01;
  COFTD[133] = 6.34290504E-04;
  COFTD[134] = -3.63175898E-07;
  COFTD[135] = 6.35944252E-11;
  COFTD[136] = 1.56731251E-01;
  COFTD[137] = 6.39063317E-04;
  COFTD[138] = -3.65908669E-07;
  COFTD[139] = 6.40729509E-11;
  COFTD[140] = 9.75666421E-02;
  COFTD[141] = 7.77588682E-04;
  COFTD[142] = -4.32970006E-07;
  COFTD[143] = 7.43519041E-11;
  COFTD[144] = -1.87070220E-01;
  COFTD[145] = 8.88869775E-04;
  COFTD[146] = -3.95576743E-07;
  COFTD[147] = 5.89380124E-11;
  COFTD[148] = 9.77435669E-02;
  COFTD[149] = 7.78998741E-04;
  COFTD[150] = -4.33755142E-07;
  COFTD[151] = 7.44867319E-11;
  COFTD[152] = 3.77289748E-02;
  COFTD[153] = 8.48923279E-04;
  COFTD[154] = -4.60552912E-07;
  COFTD[155] = 7.77483278E-11;
  COFTD[156] = -1.70874524E-01;
  COFTD[157] = 9.08890621E-04;
  COFTD[158] = -4.18728580E-07;
  COFTD[159] = 6.38249139E-11;
  COFTD[160] = 1.55590191E-01;
  COFTD[161] = 6.34410708E-04;
  COFTD[162] = -3.63244723E-07;
  COFTD[163] = 6.36064770E-11;
  COFTD[164] = 1.54275983E-01;
  COFTD[165] = 6.29052095E-04;
  COFTD[166] = -3.60176541E-07;
  COFTD[167] = 6.30692185E-11;
  COFTD[168] = 1.76920048E-01;
  COFTD[169] = 5.84525863E-04;
  COFTD[170] = -3.38180260E-07;
  COFTD[171] = 5.96764287E-11;
  COFTD[172] = 1.90639212E-01;
  COFTD[173] = 6.29852586E-04;
  COFTD[174] = -3.64404255E-07;
  COFTD[175] = 6.43040032E-11;
  COFTD[176] = -4.51168858E-02;
  COFTD[177] = 9.37090034E-04;
  COFTD[178] = -4.87513367E-07;
  COFTD[179] = 8.01588014E-11;
  COFTD[180] = -4.00084770E-02;
  COFTD[181] = 9.30975020E-04;
  COFTD[182] = -4.85706017E-07;
  COFTD[183] = 8.00018290E-11;
  COFTD[184] = 1.91084760E-01;
  COFTD[185] = 6.31324631E-04;
  COFTD[186] = -3.65255913E-07;
  COFTD[187] = 6.44542897E-11;
  COFTD[188] = 1.91084760E-01;
  COFTD[189] = 6.31324631E-04;
  COFTD[190] = -3.65255913E-07;
  COFTD[191] = 6.44542897E-11;
  COFTD[192] = 7.83691598E-02;
  COFTD[193] = 8.03499631E-04;
  COFTD[194] = -4.43767241E-07;
  COFTD[195] = 7.57925122E-11;
  COFTD[196] = 7.82185895E-02;
  COFTD[197] = 8.01955872E-04;
  COFTD[198] = -4.42914633E-07;
  COFTD[199] = 7.56468924E-11;
  COFTD[200] = 7.82185895E-02;
  COFTD[201] = 8.01955872E-04;
  COFTD[202] = -4.42914633E-07;
  COFTD[203] = 7.56468924E-11;
  COFTD[204] = 7.80585398E-02;
  COFTD[205] = 8.00314922E-04;
  COFTD[206] = -4.42008348E-07;
  COFTD[207] = 7.54921049E-11;
  COFTD[208] = 7.80585398E-02;
  COFTD[209] = 8.00314922E-04;
  COFTD[210] = -4.42008348E-07;
  COFTD[211] = 7.54921049E-11;
  COFTD[212] = -1.35493836E-01;
  COFTD[213] = 1.00027225E-03;
  COFTD[214] = -4.88983648E-07;
  COFTD[215] = 7.73759682E-11;
  COFTD[216] = -1.43042133E-01;
  COFTD[217] = 1.00128642E-03;
  COFTD[218] = -4.86066068E-07;
  COFTD[219] = 7.65811530E-11;
  COFTD[220] = -1.43042133E-01;
  COFTD[221] = 1.00128642E-03;
  COFTD[222] = -4.86066068E-07;
  COFTD[223] = 7.65811530E-11;
  COFTD[224] = -1.63788560E-01;
  COFTD[225] = 1.00746699E-03;
  COFTD[226] = -4.79105047E-07;
  COFTD[227] = 7.45196684E-11;
  COFTD[228] = -1.63873794E-01;
  COFTD[229] = 1.00799127E-03;
  COFTD[230] = -4.79354371E-07;
  COFTD[231] = 7.45584481E-11;
  COFTD[232] = -7.11133364E-02;
  COFTD[233] = 9.72199182E-04;
  COFTD[234] = -4.98351215E-07;
  COFTD[235] = 8.11963035E-11;
  COFTD[236] = 1.18664547E-01;
  COFTD[237] = 7.37969302E-04;
  COFTD[238] = -4.14747359E-07;
  COFTD[239] = 7.16749686E-11;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[30];
  amrex::Real SIG[30];
  amrex::Real wt[30];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: H2
  // Imported from NIST
  Tci[0] = 33.145000;
  ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] /
          (2.015880 * 2.015880 * 12.964000);
  bi[0] = 0.08664 * Rcst * Tci[0] / (2.015880 * 12.964000);
  acentric_i[0] = -0.219000;

  // species 1: O2
  // Imported from NIST
  Tci[1] = 154.581000;
  ai[1] = 1e6 * 0.42748 * Rcst * Rcst * Tci[1] * Tci[1] /
          (31.998800 * 31.998800 * 50.430466);
  bi[1] = 0.08664 * Rcst * Tci[1] / (31.998800 * 50.430466);
  acentric_i[1] = 0.022200;

  // species 2: H
  Tci[2] = 1.316 * EPS[2];
  ai[2] = (5.55 * avogadro * avogadro * EPS[2] * boltzmann * 1e-24 * SIG[2] *
           SIG[2] * SIG[2]) /
          (wt[2] * wt[2]);
  bi[2] = 0.855 * avogadro * 1e-24 * SIG[2] * SIG[2] * SIG[2] / (wt[2]);
  acentric_i[2] = 0.0;

  // species 3: O
  Tci[3] = 1.316 * EPS[3];
  ai[3] = (5.55 * avogadro * avogadro * EPS[3] * boltzmann * 1e-24 * SIG[3] *
           SIG[3] * SIG[3]) /
          (wt[3] * wt[3]);
  bi[3] = 0.855 * avogadro * 1e-24 * SIG[3] * SIG[3] * SIG[3] / (wt[3]);
  acentric_i[3] = 0.0;

  // species 4: OH
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann * 1e-24 * SIG[4] *
           SIG[4] * SIG[4]) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * 1e-24 * SIG[4] * SIG[4] * SIG[4] / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: HO2
  Tci[5] = 1.316 * EPS[5];
  ai[5] = (5.55 * avogadro * avogadro * EPS[5] * boltzmann * 1e-24 * SIG[5] *
           SIG[5] * SIG[5]) /
          (wt[5] * wt[5]);
  bi[5] = 0.855 * avogadro * 1e-24 * SIG[5] * SIG[5] * SIG[5] / (wt[5]);
  acentric_i[5] = 0.0;

  // species 6: H2O
  // Imported from NIST
  Tci[6] = 647.096000;
  ai[6] = 1e6 * 0.42748 * Rcst * Rcst * Tci[6] * Tci[6] /
          (18.015340 * 18.015340 * 220.640000);
  bi[6] = 0.08664 * Rcst * Tci[6] / (18.015340 * 220.640000);
  acentric_i[6] = 0.344300;

  // species 7: H2O2
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann * 1e-24 * SIG[7] *
           SIG[7] * SIG[7]) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: NO
  // Imported from NIST
  Tci[8] = 180.000000;
  ai[8] = 1e6 * 0.42748 * Rcst * Rcst * Tci[8] * Tci[8] /
          (30.006000 * 30.006000 * 64.800000);
  bi[8] = 0.08664 * Rcst * Tci[8] / (30.006000 * 64.800000);
  acentric_i[8] = 0.582000;

  // species 9: NH3
  Tci[9] = 1.316 * EPS[9];
  ai[9] = (5.55 * avogadro * avogadro * EPS[9] * boltzmann * 1e-24 * SIG[9] *
           SIG[9] * SIG[9]) /
          (wt[9] * wt[9]);
  bi[9] = 0.855 * avogadro * 1e-24 * SIG[9] * SIG[9] * SIG[9] / (wt[9]);
  acentric_i[9] = 0.0;

  // species 10: NH2
  Tci[10] = 1.316 * EPS[10];
  ai[10] = (5.55 * avogadro * avogadro * EPS[10] * boltzmann * 1e-24 * SIG[10] *
            SIG[10] * SIG[10]) /
           (wt[10] * wt[10]);
  bi[10] = 0.855 * avogadro * 1e-24 * SIG[10] * SIG[10] * SIG[10] / (wt[10]);
  acentric_i[10] = 0.0;

  // species 11: NH
  Tci[11] = 1.316 * EPS[11];
  ai[11] = (5.55 * avogadro * avogadro * EPS[11] * boltzmann * 1e-24 * SIG[11] *
            SIG[11] * SIG[11]) /
           (wt[11] * wt[11]);
  bi[11] = 0.855 * avogadro * 1e-24 * SIG[11] * SIG[11] * SIG[11] / (wt[11]);
  acentric_i[11] = 0.0;

  // species 12: N
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann * 1e-24 * SIG[12] *
            SIG[12] * SIG[12]) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: NNH
  Tci[13] = 1.316 * EPS[13];
  ai[13] = (5.55 * avogadro * avogadro * EPS[13] * boltzmann * 1e-24 * SIG[13] *
            SIG[13] * SIG[13]) /
           (wt[13] * wt[13]);
  bi[13] = 0.855 * avogadro * 1e-24 * SIG[13] * SIG[13] * SIG[13] / (wt[13]);
  acentric_i[13] = 0.0;

  // species 14: N2H4
  Tci[14] = 1.316 * EPS[14];
  ai[14] = (5.55 * avogadro * avogadro * EPS[14] * boltzmann * 1e-24 * SIG[14] *
            SIG[14] * SIG[14]) /
           (wt[14] * wt[14]);
  bi[14] = 0.855 * avogadro * 1e-24 * SIG[14] * SIG[14] * SIG[14] / (wt[14]);
  acentric_i[14] = 0.0;

  // species 15: N2H3
  Tci[15] = 1.316 * EPS[15];
  ai[15] = (5.55 * avogadro * avogadro * EPS[15] * boltzmann * 1e-24 * SIG[15] *
            SIG[15] * SIG[15]) /
           (wt[15] * wt[15]);
  bi[15] = 0.855 * avogadro * 1e-24 * SIG[15] * SIG[15] * SIG[15] / (wt[15]);
  acentric_i[15] = 0.0;

  // species 16: N2H2
  Tci[16] = 1.316 * EPS[16];
  ai[16] = (5.55 * avogadro * avogadro * EPS[16] * boltzmann * 1e-24 * SIG[16] *
            SIG[16] * SIG[16]) /
           (wt[16] * wt[16]);
  bi[16] = 0.855 * avogadro * 1e-24 * SIG[16] * SIG[16] * SIG[16] / (wt[16]);
  acentric_i[16] = 0.0;

  // species 17: H2NN
  Tci[17] = 1.316 * EPS[17];
  ai[17] = (5.55 * avogadro * avogadro * EPS[17] * boltzmann * 1e-24 * SIG[17] *
            SIG[17] * SIG[17]) /
           (wt[17] * wt[17]);
  bi[17] = 0.855 * avogadro * 1e-24 * SIG[17] * SIG[17] * SIG[17] / (wt[17]);
  acentric_i[17] = 0.0;

  // species 18: NH2OH
  Tci[18] = 1.316 * EPS[18];
  ai[18] = (5.55 * avogadro * avogadro * EPS[18] * boltzmann * 1e-24 * SIG[18] *
            SIG[18] * SIG[18]) /
           (wt[18] * wt[18]);
  bi[18] = 0.855 * avogadro * 1e-24 * SIG[18] * SIG[18] * SIG[18] / (wt[18]);
  acentric_i[18] = 0.0;

  // species 19: H2NO
  Tci[19] = 1.316 * EPS[19];
  ai[19] = (5.55 * avogadro * avogadro * EPS[19] * boltzmann * 1e-24 * SIG[19] *
            SIG[19] * SIG[19]) /
           (wt[19] * wt[19]);
  bi[19] = 0.855 * avogadro * 1e-24 * SIG[19] * SIG[19] * SIG[19] / (wt[19]);
  acentric_i[19] = 0.0;

  // species 20: HNOH
  Tci[20] = 1.316 * EPS[20];
  ai[20] = (5.55 * avogadro * avogadro * EPS[20] * boltzmann * 1e-24 * SIG[20] *
            SIG[20] * SIG[20]) /
           (wt[20] * wt[20]);
  bi[20] = 0.855 * avogadro * 1e-24 * SIG[20] * SIG[20] * SIG[20] / (wt[20]);
  acentric_i[20] = 0.0;

  // species 21: HNO
  Tci[21] = 1.316 * EPS[21];
  ai[21] = (5.55 * avogadro * avogadro * EPS[21] * boltzmann * 1e-24 * SIG[21] *
            SIG[21] * SIG[21]) /
           (wt[21] * wt[21]);
  bi[21] = 0.855 * avogadro * 1e-24 * SIG[21] * SIG[21] * SIG[21] / (wt[21]);
  acentric_i[21] = 0.0;

  // species 22: HON
  Tci[22] = 1.316 * EPS[22];
  ai[22] = (5.55 * avogadro * avogadro * EPS[22] * boltzmann * 1e-24 * SIG[22] *
            SIG[22] * SIG[22]) /
           (wt[22] * wt[22]);
  bi[22] = 0.855 * avogadro * 1e-24 * SIG[22] * SIG[22] * SIG[22] / (wt[22]);
  acentric_i[22] = 0.0;

  // species 23: NO2
  Tci[23] = 1.316 * EPS[23];
  ai[23] = (5.55 * avogadro * avogadro * EPS[23] * boltzmann * 1e-24 * SIG[23] *
            SIG[23] * SIG[23]) /
           (wt[23] * wt[23]);
  bi[23] = 0.855 * avogadro * 1e-24 * SIG[23] * SIG[23] * SIG[23] / (wt[23]);
  acentric_i[23] = 0.0;

  // species 24: HONO
  Tci[24] = 1.316 * EPS[24];
  ai[24] = (5.55 * avogadro * avogadro * EPS[24] * boltzmann * 1e-24 * SIG[24] *
            SIG[24] * SIG[24]) /
           (wt[24] * wt[24]);
  bi[24] = 0.855 * avogadro * 1e-24 * SIG[24] * SIG[24] * SIG[24] / (wt[24]);
  acentric_i[24] = 0.0;

  // species 25: HNO2
  Tci[25] = 1.316 * EPS[25];
  ai[25] = (5.55 * avogadro * avogadro * EPS[25] * boltzmann * 1e-24 * SIG[25] *
            SIG[25] * SIG[25]) /
           (wt[25] * wt[25]);
  bi[25] = 0.855 * avogadro * 1e-24 * SIG[25] * SIG[25] * SIG[25] / (wt[25]);
  acentric_i[25] = 0.0;

  // species 26: NO3
  Tci[26] = 1.316 * EPS[26];
  ai[26] = (5.55 * avogadro * avogadro * EPS[26] * boltzmann * 1e-24 * SIG[26] *
            SIG[26] * SIG[26]) /
           (wt[26] * wt[26]);
  bi[26] = 0.855 * avogadro * 1e-24 * SIG[26] * SIG[26] * SIG[26] / (wt[26]);
  acentric_i[26] = 0.0;

  // species 27: HONO2
  Tci[27] = 1.316 * EPS[27];
  ai[27] = (5.55 * avogadro * avogadro * EPS[27] * boltzmann * 1e-24 * SIG[27] *
            SIG[27] * SIG[27]) /
           (wt[27] * wt[27]);
  bi[27] = 0.855 * avogadro * 1e-24 * SIG[27] * SIG[27] * SIG[27] / (wt[27]);
  acentric_i[27] = 0.0;

  // species 28: N2O
  // Imported from NIST
  Tci[28] = 309.600000;
  ai[28] = 1e6 * 0.42748 * Rcst * Rcst * Tci[28] * Tci[28] /
           (44.013000 * 44.013000 * 72.550000);
  bi[28] = 0.08664 * Rcst * Tci[28] / (44.013000 * 72.550000);
  acentric_i[28] = 0.162000;

  // species 29: N2
  // Imported from NIST
  Tci[29] = 126.192000;
  ai[29] = 1e6 * 0.42748 * Rcst * Rcst * Tci[29] * Tci[29] /
           (28.013400 * 28.013400 * 33.958000);
  bi[29] = 0.08664 * Rcst * Tci[29] / (28.013400 * 33.958000);
  acentric_i[29] = 0.037200;
}

// compute the critical parameter quantities for each species for SRK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS_SRK(
  amrex::Real* sqrtOneOverTc,
  amrex::Real* sqrtAsti,
  amrex::Real* Bi,
  amrex::Real* Fomega)
{

  // species 0: H2
  // Imported from NIST
  sqrtOneOverTc[0] = 1.7369646834812e-01;
  sqrtAsti[0] = 2.4824229305911e+05;
  Bi[0] = 9.1362254169923e+00;
  Fomega[0] = 1.3798618890700e-01;

  // species 1: O2
  // Imported from NIST
  sqrtOneOverTc[1] = 8.0430717653241e-02;
  sqrtAsti[1] = 3.6980081924740e+04;
  Bi[1] = 6.9005216444999e-01;
  Fomega[1] = 5.1945301904908e-01;

  // species 2: H
  // Computed from Lennard-Jones
  sqrtOneOverTc[2] = 7.2391579785311e-02;
  sqrtAsti[2] = 5.8451221185793e+05;
  Bi[2] = 4.4006634563410e+00;
  Fomega[2] = 4.8508000000000e-01;

  // species 3: O
  // Computed from Lennard-Jones
  sqrtOneOverTc[3] = 9.7460146948181e-02;
  sqrtAsti[3] = 4.2500156012386e+04;
  Bi[3] = 6.6930234851885e-01;
  Fomega[3] = 4.8508000000000e-01;

  // species 4: OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[4] = 9.7460146948181e-02;
  sqrtAsti[4] = 3.9981183985545e+04;
  Bi[4] = 6.2963299076575e-01;
  Fomega[4] = 4.8508000000000e-01;

  // species 5: HO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[5] = 8.4114315417892e-02;
  sqrtAsti[5] = 3.3657825710980e+04;
  Bi[5] = 6.4505861132042e-01;
  Fomega[5] = 4.8508000000000e-01;

  // species 6: H2O
  // Imported from NIST
  sqrtOneOverTc[6] = 3.9311140369715e-02;
  sqrtAsti[6] = 1.3145468419592e+05;
  Bi[6] = 1.1727204136223e+00;
  Fomega[6] = 1.0013577274636e+00;

  // species 7: H2O2
  // Computed from Lennard-Jones
  sqrtOneOverTc[7] = 8.4114315417892e-02;
  sqrtAsti[7] = 3.2660380884830e+04;
  Bi[7] = 6.2594239211036e-01;
  Fomega[7] = 4.8508000000000e-01;

  // species 8: NO
  // Imported from NIST
  sqrtOneOverTc[8] = 7.4535599249993e-02;
  sqrtAsti[8] = 4.0510614916903e+04;
  Bi[8] = 6.6687106751983e-01;
  Fomega[8] = 1.3368144381880e+00;

  // species 9: NH3
  // Computed from Lennard-Jones
  sqrtOneOverTc[9] = 3.9746557257596e-02;
  sqrtAsti[9] = 1.0711394012187e+05;
  Bi[9] = 7.5270623103672e-01;
  Fomega[9] = 4.8508000000000e-01;

  // species 10: NH2
  // Computed from Lennard-Jones
  sqrtOneOverTc[10] = 9.7460146948181e-02;
  sqrtAsti[10] = 4.0142951449185e+04;
  Bi[10] = 5.9801337160150e-01;
  Fomega[10] = 4.8508000000000e-01;

  // species 11: NH
  // Computed from Lennard-Jones
  sqrtOneOverTc[11] = 9.7460146948181e-02;
  sqrtAsti[11] = 4.2837862875144e+04;
  Bi[11] = 6.3815972382091e-01;
  Fomega[11] = 4.8508000000000e-01;

  // species 12: N
  // Computed from Lennard-Jones
  sqrtOneOverTc[12] = 1.0316275924140e-01;
  sqrtAsti[12] = 6.0230890290396e+04;
  Bi[12] = 1.3186329724611e+00;
  Fomega[12] = 4.8508000000000e-01;

  // species 13: NNH
  // Computed from Lennard-Jones
  sqrtOneOverTc[13] = 1.0316275924140e-01;
  sqrtAsti[13] = 3.5924732016994e+04;
  Bi[13] = 9.7197400314873e-01;
  Fomega[13] = 4.8508000000000e-01;

  // species 14: N2H4
  // Computed from Lennard-Jones
  sqrtOneOverTc[14] = 6.0882871132455e-02;
  sqrtAsti[14] = 6.4796713909941e+04;
  Bi[14] = 1.2160862543432e+00;
  Fomega[14] = 4.8508000000000e-01;

  // species 15: N2H3
  // Computed from Lennard-Jones
  sqrtOneOverTc[15] = 6.1639209090192e-02;
  sqrtAsti[15] = 5.8500221172854e+04;
  Bi[15] = 9.8405007346676e-01;
  Fomega[15] = 4.8508000000000e-01;

  // species 16: N2H2
  // Computed from Lennard-Jones
  sqrtOneOverTc[16] = 1.0316275924140e-01;
  sqrtAsti[16] = 3.4718866886354e+04;
  Bi[16] = 9.3934830234373e-01;
  Fomega[16] = 4.8508000000000e-01;

  // species 17: H2NN
  // Computed from Lennard-Jones
  sqrtOneOverTc[17] = 1.0316275924140e-01;
  sqrtAsti[17] = 3.4718866886354e+04;
  Bi[17] = 9.3934830234373e-01;
  Fomega[17] = 4.8508000000000e-01;

  // species 18: NH2OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[18] = 8.0693142212399e-02;
  sqrtAsti[18] = 3.5577672688948e+04;
  Bi[18] = 6.6379081274838e-01;
  Fomega[18] = 4.8508000000000e-01;

  // species 19: H2NO
  // Computed from Lennard-Jones
  sqrtOneOverTc[19] = 8.0693142212399e-02;
  sqrtAsti[19] = 3.6697599429016e+04;
  Bi[19] = 6.8468585800634e-01;
  Fomega[19] = 4.8508000000000e-01;

  // species 20: HNOH
  // Computed from Lennard-Jones
  sqrtOneOverTc[20] = 8.0693142212399e-02;
  sqrtAsti[20] = 3.6697599429016e+04;
  Bi[20] = 6.8468585800634e-01;
  Fomega[20] = 4.8508000000000e-01;

  // species 21: HNO
  // Computed from Lennard-Jones
  sqrtOneOverTc[21] = 8.0693142212399e-02;
  sqrtAsti[21] = 3.7890324657121e+04;
  Bi[21] = 7.0693914184172e-01;
  Fomega[21] = 4.8508000000000e-01;

  // species 22: HON
  // Computed from Lennard-Jones
  sqrtOneOverTc[22] = 8.0693142212399e-02;
  sqrtAsti[22] = 3.7890324657121e+04;
  Bi[22] = 7.0693914184172e-01;
  Fomega[22] = 4.8508000000000e-01;

  // species 23: NO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[23] = 4.7727154637225e-02;
  sqrtAsti[23] = 5.0034575873633e+04;
  Bi[23] = 6.3969198037883e-01;
  Fomega[23] = 4.8508000000000e-01;

  // species 24: HONO
  // Computed from Lennard-Jones
  sqrtOneOverTc[24] = 4.6594862360960e-02;
  sqrtAsti[24] = 5.2077608058913e+04;
  Bi[24] = 6.7497925819441e-01;
  Fomega[24] = 4.8508000000000e-01;

  // species 25: HNO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[25] = 4.6594862360960e-02;
  sqrtAsti[25] = 5.2077608058913e+04;
  Bi[25] = 6.7497925819441e-01;
  Fomega[25] = 4.8508000000000e-01;

  // species 26: NO3
  // Computed from Lennard-Jones
  sqrtOneOverTc[26] = 4.3585502734650e-02;
  sqrtAsti[26] = 4.6283218529771e+04;
  Bi[26] = 6.1524100004940e-01;
  Fomega[26] = 4.8508000000000e-01;

  // species 27: HONO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[27] = 4.3585502734650e-02;
  sqrtAsti[27] = 4.5542828060051e+04;
  Bi[27] = 6.0539901871172e-01;
  Fomega[27] = 4.8508000000000e-01;

  // species 28: N2O
  // Imported from NIST
  sqrtOneOverTc[28] = 5.6832861622539e-02;
  sqrtAsti[28] = 4.4894507333531e+04;
  Bi[28] = 6.9844955486412e-01;
  Fomega[28] = 7.3247646842800e-01;

  // species 29: N2
  // Imported from NIST
  sqrtOneOverTc[29] = 8.9019282240563e-02;
  sqrtAsti[29] = 4.2022983929562e+04;
  Bi[29] = 9.5560052221563e-01;
  Fomega[29] = 5.4259343186608e-01;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
