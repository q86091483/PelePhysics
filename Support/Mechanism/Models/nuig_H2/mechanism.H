#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  N
1  H
2  O
*/

// Species
#define N2_ID 0
#define H2_ID 1
#define H_ID 2
#define O2_ID 3
#define O_ID 4
#define H2O_ID 5
#define OH_ID 6
#define OHV_ID 7
#define H2O2_ID 8
#define HO2_ID 9
#define NO_ID 10
#define NH3_ID 11
#define NH2_ID 12
#define NH_ID 13
#define N_ID 14
#define NNH_ID 15
#define N2H4_ID 16
#define N2H3_ID 17
#define N2H2_ID 18
#define H2NN_ID 19
#define NH2OH_ID 20
#define H2NO_ID 21
#define HNOH_ID 22
#define HNO_ID 23
#define HON_ID 24
#define NO2_ID 25
#define HONO_ID 26
#define HNO2_ID 27
#define NO3_ID 28
#define HONO2_ID 29
#define N2O_ID 30
#define HNO3_ID 31

#define NUM_ELEMENTS 3
#define NUM_SPECIES 32
#define NUM_IONS 0
#define NUM_REACTIONS 235

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(const int i, int& nspec, int* ki, int* nu);
void CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 3;
  kk = 32;
  ii = 235;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_imw[32] = {
  0.0356964374955379, // N2
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0312519532470779, // O2
  0.0625039064941559, // O
  0.0555092978073827, // H2O
  0.0587993179279120, // OH
  0.0587993179279120, // OHV
  0.0293996589639560, // H2O2
  0.0302975216627280, // HO2
  0.0333266679997334, // NO
  0.0587164582232400, // NH3
  0.0624102852150034, // NH2
  0.0666000666000666, // NH
  0.0713928749910759, // N
  0.0344566191165323, // NNH
  0.0312051426075017, // N2H4
  0.0322185707842000, // N2H3
  0.0333000333000333, // N2H2
  0.0333000333000333, // H2NN
  0.0302755071147442, // NH2OH
  0.0312285303853601, // H2NO
  0.0312285303853601, // HNOH
  0.0322435029341588, // HNO
  0.0322435029341588, // HON
  0.0217367677426367, // NO2
  0.0212707123561568, // HONO
  0.0212707123561568, // HNO2
  0.0161279917424682, // NO3
  0.0158699930172031, // HONO2
  0.0227205598345943, // N2O
  0.0158699930172031, // HNO3
};
#endif
const amrex::Real h_global_imw[32] = {
  0.0356964374955379, // N2
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0312519532470779, // O2
  0.0625039064941559, // O
  0.0555092978073827, // H2O
  0.0587993179279120, // OH
  0.0587993179279120, // OHV
  0.0293996589639560, // H2O2
  0.0302975216627280, // HO2
  0.0333266679997334, // NO
  0.0587164582232400, // NH3
  0.0624102852150034, // NH2
  0.0666000666000666, // NH
  0.0713928749910759, // N
  0.0344566191165323, // NNH
  0.0312051426075017, // N2H4
  0.0322185707842000, // N2H3
  0.0333000333000333, // N2H2
  0.0333000333000333, // H2NN
  0.0302755071147442, // NH2OH
  0.0312285303853601, // H2NO
  0.0312285303853601, // HNOH
  0.0322435029341588, // HNO
  0.0322435029341588, // HON
  0.0217367677426367, // NO2
  0.0212707123561568, // HONO
  0.0212707123561568, // HNO2
  0.0161279917424682, // NO3
  0.0158699930172031, // HONO2
  0.0227205598345943, // N2O
  0.0158699930172031, // HNO3
};

//  molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_mw[32] = {
  28.014000, // N2
  2.016000,  // H2
  1.008000,  // H
  31.998000, // O2
  15.999000, // O
  18.015000, // H2O
  17.007000, // OH
  17.007000, // OHV
  34.014000, // H2O2
  33.006000, // HO2
  30.006000, // NO
  17.031000, // NH3
  16.023000, // NH2
  15.015000, // NH
  14.007000, // N
  29.022000, // NNH
  32.046000, // N2H4
  31.038000, // N2H3
  30.030000, // N2H2
  30.030000, // H2NN
  33.030000, // NH2OH
  32.022000, // H2NO
  32.022000, // HNOH
  31.014000, // HNO
  31.014000, // HON
  46.005000, // NO2
  47.013000, // HONO
  47.013000, // HNO2
  62.004000, // NO3
  63.012000, // HONO2
  44.013000, // N2O
  63.012000, // HNO3
};
#endif
const amrex::Real h_global_mw[32] = {
  28.014000, // N2
  2.016000,  // H2
  1.008000,  // H
  31.998000, // O2
  15.999000, // O
  18.015000, // H2O
  17.007000, // OH
  17.007000, // OHV
  34.014000, // H2O2
  33.006000, // HO2
  30.006000, // NO
  17.031000, // NH3
  16.023000, // NH2
  15.015000, // NH
  14.007000, // N
  29.022000, // NNH
  32.046000, // N2H4
  31.038000, // N2H3
  30.030000, // N2H2
  30.030000, // H2NN
  33.030000, // NH2OH
  32.022000, // H2NO
  32.022000, // HNOH
  31.014000, // HNO
  31.014000, // HON
  46.005000, // NO2
  47.013000, // HONO
  47.013000, // HNO2
  62.004000, // NO3
  63.012000, // HONO2
  44.013000, // N2O
  63.012000, // HNO3
};

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 0.0356964374955379;  // N2
  imw_new[1] = 0.4960317460317460;  // H2
  imw_new[2] = 0.9920634920634921;  // H
  imw_new[3] = 0.0312519532470779;  // O2
  imw_new[4] = 0.0625039064941559;  // O
  imw_new[5] = 0.0555092978073827;  // H2O
  imw_new[6] = 0.0587993179279120;  // OH
  imw_new[7] = 0.0587993179279120;  // OHV
  imw_new[8] = 0.0293996589639560;  // H2O2
  imw_new[9] = 0.0302975216627280;  // HO2
  imw_new[10] = 0.0333266679997334; // NO
  imw_new[11] = 0.0587164582232400; // NH3
  imw_new[12] = 0.0624102852150034; // NH2
  imw_new[13] = 0.0666000666000666; // NH
  imw_new[14] = 0.0713928749910759; // N
  imw_new[15] = 0.0344566191165323; // NNH
  imw_new[16] = 0.0312051426075017; // N2H4
  imw_new[17] = 0.0322185707842000; // N2H3
  imw_new[18] = 0.0333000333000333; // N2H2
  imw_new[19] = 0.0333000333000333; // H2NN
  imw_new[20] = 0.0302755071147442; // NH2OH
  imw_new[21] = 0.0312285303853601; // H2NO
  imw_new[22] = 0.0312285303853601; // HNOH
  imw_new[23] = 0.0322435029341588; // HNO
  imw_new[24] = 0.0322435029341588; // HON
  imw_new[25] = 0.0217367677426367; // NO2
  imw_new[26] = 0.0212707123561568; // HONO
  imw_new[27] = 0.0212707123561568; // HNO2
  imw_new[28] = 0.0161279917424682; // NO3
  imw_new[29] = 0.0158699930172031; // HONO2
  imw_new[30] = 0.0227205598345943; // N2O
  imw_new[31] = 0.0158699930172031; // HNO3
}

//  inverse molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
imw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_imw[n];
#else
  return h_global_imw[n];
#endif
}
//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 28.014000;  // N2
  mw_new[1] = 2.016000;   // H2
  mw_new[2] = 1.008000;   // H
  mw_new[3] = 31.998000;  // O2
  mw_new[4] = 15.999000;  // O
  mw_new[5] = 18.015000;  // H2O
  mw_new[6] = 17.007000;  // OH
  mw_new[7] = 17.007000;  // OHV
  mw_new[8] = 34.014000;  // H2O2
  mw_new[9] = 33.006000;  // HO2
  mw_new[10] = 30.006000; // NO
  mw_new[11] = 17.031000; // NH3
  mw_new[12] = 16.023000; // NH2
  mw_new[13] = 15.015000; // NH
  mw_new[14] = 14.007000; // N
  mw_new[15] = 29.022000; // NNH
  mw_new[16] = 32.046000; // N2H4
  mw_new[17] = 31.038000; // N2H3
  mw_new[18] = 30.030000; // N2H2
  mw_new[19] = 30.030000; // H2NN
  mw_new[20] = 33.030000; // NH2OH
  mw_new[21] = 32.022000; // H2NO
  mw_new[22] = 32.022000; // HNOH
  mw_new[23] = 31.014000; // HNO
  mw_new[24] = 31.014000; // HON
  mw_new[25] = 46.005000; // NO2
  mw_new[26] = 47.013000; // HONO
  mw_new[27] = 47.013000; // HNO2
  mw_new[28] = 62.004000; // NO3
  mw_new[29] = 63.012000; // HONO2
  mw_new[30] = 44.013000; // N2O
  mw_new[31] = 63.012000; // HNO3
}

//  molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
mw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_mw[n];
#else
  return h_global_mw[n];
#endif
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with no change across T
  // species 2: H
  species[2] = +1.50000000e+00;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +2.53100528e+00 - 1.23660988e-04 * T - 5.02999433e-07 * T2 +
                 2.43530612e-09 * T3 - 1.40881235e-12 * T4;
    // species 1: H2
    species[1] = +1.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
                 2.01572094e-08 * T3 - 7.37611761e-12 * T4;
    // species 3: O2
    species[3] = +2.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
                 9.68129509e-09 * T3 + 3.24372837e-12 * T4;
    // species 4: O
    species[4] = +2.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
                 6.12806624e-09 * T3 + 2.11265971e-12 * T4;
    // species 5: H2O
    species[5] = +3.19863520e+00 - 2.03640170e-03 * T + 6.52034160e-06 * T2 -
                 5.48792690e-09 * T3 + 1.77196800e-12 * T4;
    // species 6: OH
    species[6] = +2.99198424e+00 - 2.40106655e-03 * T + 4.61664033e-06 * T2 -
                 3.87916306e-09 * T3 + 1.36319502e-12 * T4;
    // species 7: OHV
    species[7] = +2.63726600e+00 + 1.85091000e-04 * T - 1.67616460e-06 * T2 +
                 2.38720200e-09 * T3 - 8.43144200e-13 * T4;
    // species 8: H2O2
    species[8] = +3.31515149e+00 - 8.47390622e-04 * T + 1.76404323e-05 * T2 -
                 2.26762944e-08 * T3 + 9.08950158e-12 * T4;
    // species 9: HO2
    species[9] = +3.30179807e+00 - 4.74912097e-03 * T + 2.11582905e-05 * T2 -
                 2.42763914e-08 * T3 + 9.29225225e-12 * T4;
    // species 10: NO
    species[10] = +3.15036687e+00 - 4.08890008e-03 * T + 9.38071726e-06 * T2 -
                  7.50908901e-09 * T3 + 2.11742798e-12 * T4;
    // species 11: NH3
    species[11] = +2.26650510e+00 + 3.05892867e-03 * T + 5.78755223e-07 * T2 +
                  9.49077412e-10 * T3 - 9.02221969e-13 * T4;
    // species 12: NH2
    species[12] = +2.97883538e+00 - 5.13888088e-04 * T + 2.68436156e-06 * T2 -
                  9.18832600e-10 * T3 - 9.82251152e-14 * T4;
    // species 13: NH
    species[13] = +2.44697209e+00 + 5.57847818e-04 * T - 2.00289360e-06 * T2 +
                  2.85952922e-09 * T3 - 1.12434284e-12 * T4;
    // species 14: N
    species[14] = +1.49976643e+00 + 5.02149594e-07 * T + 1.93091211e-09 * T2 -
                  4.94632629e-12 * T3 + 2.74089506e-15 * T4;
    // species 15: NNH
    species[15] = +3.09254871e+00 - 2.37173287e-03 * T + 1.15311297e-05 * T2 -
                  1.06308423e-08 * T3 + 3.23937580e-12 * T4;
    // species 16: N2H4
    species[16] = -5.74570550e-02 + 2.13488271e-02 * T - 1.88705886e-05 * T2 +
                  1.00963087e-08 * T3 - 2.30996292e-12 * T4;
    // species 17: N2H3
    species[17] = +2.80271862e+00 + 5.52764141e-03 * T + 6.84860021e-07 * T2 -
                  2.00296493e-09 * T3 + 6.21445742e-13 * T4;
    // species 18: N2H2
    species[18] = +3.91066031e+00 - 1.07791880e-02 * T + 3.86516489e-05 * T2 -
                  3.86501698e-08 * T3 + 1.34852134e-11 * T4;
    // species 19: H2NN
    species[19] = +2.87707453e+00 - 2.65244519e-03 * T + 1.86066175e-05 * T2 -
                  1.76694483e-08 * T3 + 5.38800676e-12 * T4;
    // species 20: NH2OH
    species[20] = +2.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
                  1.96668262e-08 * T3 + 8.82516590e-12 * T4;
    // species 21: H2NO
    species[21] = +2.93370869e+00 + 2.21175605e-03 * T + 5.86220201e-06 * T2 -
                  6.72931776e-09 * T3 + 2.17836171e-12 * T4;
    // species 22: HNOH
    species[22] = +2.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
                  3.15645120e-08 * T3 + 1.24084574e-11 * T4;
    // species 23: HNO
    species[23] = +3.51988078e+00 - 5.42507623e-03 * T + 1.70239636e-05 * T2 -
                  1.48708172e-08 * T3 + 4.44763498e-12 * T4;
    // species 24: HON
    species[24] = +3.15272450e+00 - 3.87826402e-03 * T + 2.05476031e-05 * T2 -
                  2.49049483e-08 * T3 + 9.87365462e-12 * T4;
    // species 25: NO2
    species[25] = +2.39100918e+00 + 2.62448348e-03 * T + 5.09790306e-06 * T2 -
                  7.62120493e-09 * T3 + 2.79960135e-12 * T4;
    // species 26: HONO
    species[26] = +2.49106617e+00 + 6.81116875e-03 * T - 1.30943120e-06 * T2 -
                  2.34197204e-09 * T3 + 1.18931535e-12 * T4;
    // species 27: HNO2
    species[27] = +1.86816457e+00 + 4.08036347e-03 * T + 9.55139253e-06 * T2 -
                  1.29604691e-08 * T3 + 4.57373772e-12 * T4;
    // species 28: NO3
    species[28] = +2.09446759e+00 + 1.51014573e-02 * T - 1.26448498e-05 * T2 +
                  3.67237581e-09 * T3 + 8.62184172e-14 * T4;
    // species 29: HONO2
    species[29] = +3.43707800e-02 + 2.44807579e-02 * T - 2.31762285e-05 * T2 +
                  1.03094550e-08 * T3 - 1.64107287e-12 * T4;
    // species 30: N2O
    species[30] = +1.49126356e+00 + 9.16224976e-03 * T - 8.24847853e-06 * T2 +
                  3.83289657e-09 * T3 - 7.19461784e-13 * T4;
    // species 31: HNO3
    species[31] = +5.59750560e-01 + 2.01502169e-02 * T - 1.15217296e-05 * T2 -
                  2.31891230e-09 * T3 + 3.17580552e-12 * T4;
  } else {
    // species 0: N2
    species[0] = +1.95257637e+00 + 1.39690040e-03 * T - 4.92631603e-07 * T2 +
                 7.86010195e-11 * T3 - 4.60755204e-15 * T4;
    // species 1: H2
    species[1] = +1.93286575e+00 + 8.26608026e-04 * T - 1.46402364e-07 * T2 +
                 1.54100414e-11 * T3 - 6.88804800e-16 * T4;
    // species 3: O2
    species[3] = +2.66096065e+00 + 6.56365811e-04 * T - 1.41149627e-07 * T2 +
                 2.05797935e-11 * T3 - 1.29913436e-15 * T4;
    // species 4: O
    species[4] = +1.54363697e+00 - 2.73162486e-05 * T - 4.19029520e-09 * T2 +
                 4.95481845e-12 * T3 - 4.79553694e-16 * T4;
    // species 5: H2O
    species[5] = +1.67703890e+00 + 2.97318160e-03 * T - 7.73768890e-07 * T2 +
                 9.44335140e-11 * T3 - 4.26899910e-15 * T4;
    // species 6: OH
    species[6] = +1.83853033e+00 + 1.10741289e-03 * T - 2.94000209e-07 * T2 +
                 4.20698729e-11 * T3 - 2.42289890e-15 * T4;
    // species 7: OHV
    species[7] = +1.88273000e+00 + 1.01397430e-03 * T - 2.27687700e-07 * T2 +
                 2.17468300e-11 * T3 - 5.12630500e-16 * T4;
    // species 8: H2O2
    species[8] = +3.57977305e+00 + 4.05326003e-03 * T - 1.29844730e-06 * T2 +
                 1.98211400e-10 * T3 - 1.13968792e-14 * T4;
    // species 9: HO2
    species[9] = +3.17228741e+00 + 1.88117627e-03 * T - 3.46277286e-07 * T2 +
                 1.94657549e-11 * T3 + 1.76256905e-16 * T4;
    // species 10: NO
    species[10] = +1.79462839e+00 + 2.12260586e-03 * T - 1.11936971e-06 * T2 +
                  2.79521018e-10 * T3 - 2.68625363e-14 * T4;
    // species 11: NH3
    species[11] = +7.09695800e-02 + 8.75466951e-03 * T - 3.33525419e-06 * T2 +
                  4.72015791e-10 * T3 - 1.13562571e-14 * T4;
    // species 12: NH2
    species[12] = +1.62839610e+00 + 3.44379888e-03 * T - 1.08606365e-06 * T2 +
                  1.50714038e-10 * T3 - 4.59423280e-15 * T4;
    // species 13: NH
    species[13] = +1.95100955e+00 + 9.09994439e-04 * T - 8.35582439e-08 * T2 -
                  5.17312027e-11 * T3 + 1.13981436e-14 * T4;
    // species 14: N
    species[14] = +1.41604245e+00 + 1.74663766e-04 * T - 1.18864562e-07 * T2 +
                  3.01850054e-11 * T3 - 2.03260159e-15 * T4;
    // species 15: NNH
    species[15] = +1.90981142e+00 + 4.44718211e-03 * T - 1.82919152e-06 * T2 +
                  3.64004342e-10 * T3 - 3.13273352e-14 * T4;
    // species 16: N2H4
    species[16] = +2.21893892e+00 + 1.23204128e-02 * T - 5.44372150e-06 * T2 +
                  1.22223350e-09 * T3 - 1.10736520e-13 * T4;
    // species 17: N2H3
    species[17] = +2.20302281e+00 + 7.99162955e-03 * T - 3.10892955e-06 * T2 +
                  5.91433018e-10 * T3 - 4.34549709e-14 * T4;
    // species 18: N2H2
    species[18] = +3.11151170e-01 + 9.00187208e-03 * T - 3.14911824e-06 * T2 +
                  4.81449581e-10 * T3 - 2.71897891e-14 * T4;
    // species 19: H2NN
    species[19] = +4.62576310e-01 + 1.01013888e-02 * T - 5.16789506e-06 * T2 +
                  1.27606779e-09 * T3 - 1.22332550e-13 * T4;
    // species 20: NH2OH
    species[20] = +2.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
                  4.37930933e-10 * T3 - 2.52724604e-14 * T4;
    // species 21: H2NO
    species[21] = +2.36485636e+00 + 6.13307432e-03 * T - 2.48863886e-06 * T2 +
                  4.83818467e-10 * T3 - 3.63995936e-14 * T4;
    // species 22: HNOH
    species[22] = +2.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
                  2.55371446e-10 * T3 - 1.48308561e-14 * T4;
    // species 23: HNO
    species[23] = +1.58819802e+00 + 4.87708822e-03 * T - 2.29243315e-06 * T2 +
                  5.82214028e-10 * T3 - 5.94811743e-14 * T4;
    // species 24: HON
    species[24] = +3.12044656e+00 + 2.28738122e-03 * T - 7.14685362e-07 * T2 +
                  1.03332384e-10 * T3 - 5.70484100e-15 * T4;
    // species 25: NO2
    species[25] = +2.65239279e+00 + 4.71632310e-03 * T - 2.74591748e-06 * T2 +
                  7.45382834e-10 * T3 - 7.63891108e-14 * T4;
    // species 26: HONO
    species[26] = +3.19966671e+00 + 5.94217338e-03 * T - 2.95404834e-06 * T2 +
                  7.19846187e-10 * T3 - 6.74909061e-14 * T4;
    // species 27: HNO2
    species[27] = +1.71886798e+00 + 9.23249468e-03 * T - 5.00922160e-06 * T2 +
                  1.30155189e-09 * T3 - 1.30503734e-13 * T4;
    // species 28: NO3
    species[28] = +5.38293838e+00 + 5.42422503e-03 * T - 3.34397780e-06 * T2 +
                  9.48445417e-10 * T3 - 1.01961714e-13 * T4;
    // species 29: HONO2
    species[29] = +4.28851491e+00 + 1.02507554e-02 * T - 6.01108580e-06 * T2 +
                  1.65260052e-09 * T3 - 1.73502753e-13 * T4;
    // species 30: N2O
    species[30] = +2.61316907e+00 + 5.15970465e-03 * T - 2.97227625e-06 * T2 +
                  8.00505298e-10 * T3 - 8.26331952e-14 * T4;
    // species 31: HNO3
    species[31] = +7.03061257e+00 + 4.46368336e-03 * T - 1.72272779e-06 * T2 +
                  2.91611606e-10 * T3 - 1.80487362e-14 * T4;
  }
}

// compute Cp/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with no change across T
  // species 2: H
  species[2] = +2.50000000e+00;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +3.53100528e+00 - 1.23660988e-04 * T - 5.02999433e-07 * T2 +
                 2.43530612e-09 * T3 - 1.40881235e-12 * T4;
    // species 1: H2
    species[1] = +2.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
                 2.01572094e-08 * T3 - 7.37611761e-12 * T4;
    // species 3: O2
    species[3] = +3.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
                 9.68129509e-09 * T3 + 3.24372837e-12 * T4;
    // species 4: O
    species[4] = +3.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
                 6.12806624e-09 * T3 + 2.11265971e-12 * T4;
    // species 5: H2O
    species[5] = +4.19863520e+00 - 2.03640170e-03 * T + 6.52034160e-06 * T2 -
                 5.48792690e-09 * T3 + 1.77196800e-12 * T4;
    // species 6: OH
    species[6] = +3.99198424e+00 - 2.40106655e-03 * T + 4.61664033e-06 * T2 -
                 3.87916306e-09 * T3 + 1.36319502e-12 * T4;
    // species 7: OHV
    species[7] = +3.63726600e+00 + 1.85091000e-04 * T - 1.67616460e-06 * T2 +
                 2.38720200e-09 * T3 - 8.43144200e-13 * T4;
    // species 8: H2O2
    species[8] = +4.31515149e+00 - 8.47390622e-04 * T + 1.76404323e-05 * T2 -
                 2.26762944e-08 * T3 + 9.08950158e-12 * T4;
    // species 9: HO2
    species[9] = +4.30179807e+00 - 4.74912097e-03 * T + 2.11582905e-05 * T2 -
                 2.42763914e-08 * T3 + 9.29225225e-12 * T4;
    // species 10: NO
    species[10] = +4.15036687e+00 - 4.08890008e-03 * T + 9.38071726e-06 * T2 -
                  7.50908901e-09 * T3 + 2.11742798e-12 * T4;
    // species 11: NH3
    species[11] = +3.26650510e+00 + 3.05892867e-03 * T + 5.78755223e-07 * T2 +
                  9.49077412e-10 * T3 - 9.02221969e-13 * T4;
    // species 12: NH2
    species[12] = +3.97883538e+00 - 5.13888088e-04 * T + 2.68436156e-06 * T2 -
                  9.18832600e-10 * T3 - 9.82251152e-14 * T4;
    // species 13: NH
    species[13] = +3.44697209e+00 + 5.57847818e-04 * T - 2.00289360e-06 * T2 +
                  2.85952922e-09 * T3 - 1.12434284e-12 * T4;
    // species 14: N
    species[14] = +2.49976643e+00 + 5.02149594e-07 * T + 1.93091211e-09 * T2 -
                  4.94632629e-12 * T3 + 2.74089506e-15 * T4;
    // species 15: NNH
    species[15] = +4.09254871e+00 - 2.37173287e-03 * T + 1.15311297e-05 * T2 -
                  1.06308423e-08 * T3 + 3.23937580e-12 * T4;
    // species 16: N2H4
    species[16] = +9.42542945e-01 + 2.13488271e-02 * T - 1.88705886e-05 * T2 +
                  1.00963087e-08 * T3 - 2.30996292e-12 * T4;
    // species 17: N2H3
    species[17] = +3.80271862e+00 + 5.52764141e-03 * T + 6.84860021e-07 * T2 -
                  2.00296493e-09 * T3 + 6.21445742e-13 * T4;
    // species 18: N2H2
    species[18] = +4.91066031e+00 - 1.07791880e-02 * T + 3.86516489e-05 * T2 -
                  3.86501698e-08 * T3 + 1.34852134e-11 * T4;
    // species 19: H2NN
    species[19] = +3.87707453e+00 - 2.65244519e-03 * T + 1.86066175e-05 * T2 -
                  1.76694483e-08 * T3 + 5.38800676e-12 * T4;
    // species 20: NH2OH
    species[20] = +3.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
                  1.96668262e-08 * T3 + 8.82516590e-12 * T4;
    // species 21: H2NO
    species[21] = +3.93370869e+00 + 2.21175605e-03 * T + 5.86220201e-06 * T2 -
                  6.72931776e-09 * T3 + 2.17836171e-12 * T4;
    // species 22: HNOH
    species[22] = +3.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
                  3.15645120e-08 * T3 + 1.24084574e-11 * T4;
    // species 23: HNO
    species[23] = +4.51988078e+00 - 5.42507623e-03 * T + 1.70239636e-05 * T2 -
                  1.48708172e-08 * T3 + 4.44763498e-12 * T4;
    // species 24: HON
    species[24] = +4.15272450e+00 - 3.87826402e-03 * T + 2.05476031e-05 * T2 -
                  2.49049483e-08 * T3 + 9.87365462e-12 * T4;
    // species 25: NO2
    species[25] = +3.39100918e+00 + 2.62448348e-03 * T + 5.09790306e-06 * T2 -
                  7.62120493e-09 * T3 + 2.79960135e-12 * T4;
    // species 26: HONO
    species[26] = +3.49106617e+00 + 6.81116875e-03 * T - 1.30943120e-06 * T2 -
                  2.34197204e-09 * T3 + 1.18931535e-12 * T4;
    // species 27: HNO2
    species[27] = +2.86816457e+00 + 4.08036347e-03 * T + 9.55139253e-06 * T2 -
                  1.29604691e-08 * T3 + 4.57373772e-12 * T4;
    // species 28: NO3
    species[28] = +3.09446759e+00 + 1.51014573e-02 * T - 1.26448498e-05 * T2 +
                  3.67237581e-09 * T3 + 8.62184172e-14 * T4;
    // species 29: HONO2
    species[29] = +1.03437078e+00 + 2.44807579e-02 * T - 2.31762285e-05 * T2 +
                  1.03094550e-08 * T3 - 1.64107287e-12 * T4;
    // species 30: N2O
    species[30] = +2.49126356e+00 + 9.16224976e-03 * T - 8.24847853e-06 * T2 +
                  3.83289657e-09 * T3 - 7.19461784e-13 * T4;
    // species 31: HNO3
    species[31] = +1.55975056e+00 + 2.01502169e-02 * T - 1.15217296e-05 * T2 -
                  2.31891230e-09 * T3 + 3.17580552e-12 * T4;
  } else {
    // species 0: N2
    species[0] = +2.95257637e+00 + 1.39690040e-03 * T - 4.92631603e-07 * T2 +
                 7.86010195e-11 * T3 - 4.60755204e-15 * T4;
    // species 1: H2
    species[1] = +2.93286575e+00 + 8.26608026e-04 * T - 1.46402364e-07 * T2 +
                 1.54100414e-11 * T3 - 6.88804800e-16 * T4;
    // species 3: O2
    species[3] = +3.66096065e+00 + 6.56365811e-04 * T - 1.41149627e-07 * T2 +
                 2.05797935e-11 * T3 - 1.29913436e-15 * T4;
    // species 4: O
    species[4] = +2.54363697e+00 - 2.73162486e-05 * T - 4.19029520e-09 * T2 +
                 4.95481845e-12 * T3 - 4.79553694e-16 * T4;
    // species 5: H2O
    species[5] = +2.67703890e+00 + 2.97318160e-03 * T - 7.73768890e-07 * T2 +
                 9.44335140e-11 * T3 - 4.26899910e-15 * T4;
    // species 6: OH
    species[6] = +2.83853033e+00 + 1.10741289e-03 * T - 2.94000209e-07 * T2 +
                 4.20698729e-11 * T3 - 2.42289890e-15 * T4;
    // species 7: OHV
    species[7] = +2.88273000e+00 + 1.01397430e-03 * T - 2.27687700e-07 * T2 +
                 2.17468300e-11 * T3 - 5.12630500e-16 * T4;
    // species 8: H2O2
    species[8] = +4.57977305e+00 + 4.05326003e-03 * T - 1.29844730e-06 * T2 +
                 1.98211400e-10 * T3 - 1.13968792e-14 * T4;
    // species 9: HO2
    species[9] = +4.17228741e+00 + 1.88117627e-03 * T - 3.46277286e-07 * T2 +
                 1.94657549e-11 * T3 + 1.76256905e-16 * T4;
    // species 10: NO
    species[10] = +2.79462839e+00 + 2.12260586e-03 * T - 1.11936971e-06 * T2 +
                  2.79521018e-10 * T3 - 2.68625363e-14 * T4;
    // species 11: NH3
    species[11] = +1.07096958e+00 + 8.75466951e-03 * T - 3.33525419e-06 * T2 +
                  4.72015791e-10 * T3 - 1.13562571e-14 * T4;
    // species 12: NH2
    species[12] = +2.62839610e+00 + 3.44379888e-03 * T - 1.08606365e-06 * T2 +
                  1.50714038e-10 * T3 - 4.59423280e-15 * T4;
    // species 13: NH
    species[13] = +2.95100955e+00 + 9.09994439e-04 * T - 8.35582439e-08 * T2 -
                  5.17312027e-11 * T3 + 1.13981436e-14 * T4;
    // species 14: N
    species[14] = +2.41604245e+00 + 1.74663766e-04 * T - 1.18864562e-07 * T2 +
                  3.01850054e-11 * T3 - 2.03260159e-15 * T4;
    // species 15: NNH
    species[15] = +2.90981142e+00 + 4.44718211e-03 * T - 1.82919152e-06 * T2 +
                  3.64004342e-10 * T3 - 3.13273352e-14 * T4;
    // species 16: N2H4
    species[16] = +3.21893892e+00 + 1.23204128e-02 * T - 5.44372150e-06 * T2 +
                  1.22223350e-09 * T3 - 1.10736520e-13 * T4;
    // species 17: N2H3
    species[17] = +3.20302281e+00 + 7.99162955e-03 * T - 3.10892955e-06 * T2 +
                  5.91433018e-10 * T3 - 4.34549709e-14 * T4;
    // species 18: N2H2
    species[18] = +1.31115117e+00 + 9.00187208e-03 * T - 3.14911824e-06 * T2 +
                  4.81449581e-10 * T3 - 2.71897891e-14 * T4;
    // species 19: H2NN
    species[19] = +1.46257631e+00 + 1.01013888e-02 * T - 5.16789506e-06 * T2 +
                  1.27606779e-09 * T3 - 1.22332550e-13 * T4;
    // species 20: NH2OH
    species[20] = +3.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
                  4.37930933e-10 * T3 - 2.52724604e-14 * T4;
    // species 21: H2NO
    species[21] = +3.36485636e+00 + 6.13307432e-03 * T - 2.48863886e-06 * T2 +
                  4.83818467e-10 * T3 - 3.63995936e-14 * T4;
    // species 22: HNOH
    species[22] = +3.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
                  2.55371446e-10 * T3 - 1.48308561e-14 * T4;
    // species 23: HNO
    species[23] = +2.58819802e+00 + 4.87708822e-03 * T - 2.29243315e-06 * T2 +
                  5.82214028e-10 * T3 - 5.94811743e-14 * T4;
    // species 24: HON
    species[24] = +4.12044656e+00 + 2.28738122e-03 * T - 7.14685362e-07 * T2 +
                  1.03332384e-10 * T3 - 5.70484100e-15 * T4;
    // species 25: NO2
    species[25] = +3.65239279e+00 + 4.71632310e-03 * T - 2.74591748e-06 * T2 +
                  7.45382834e-10 * T3 - 7.63891108e-14 * T4;
    // species 26: HONO
    species[26] = +4.19966671e+00 + 5.94217338e-03 * T - 2.95404834e-06 * T2 +
                  7.19846187e-10 * T3 - 6.74909061e-14 * T4;
    // species 27: HNO2
    species[27] = +2.71886798e+00 + 9.23249468e-03 * T - 5.00922160e-06 * T2 +
                  1.30155189e-09 * T3 - 1.30503734e-13 * T4;
    // species 28: NO3
    species[28] = +6.38293838e+00 + 5.42422503e-03 * T - 3.34397780e-06 * T2 +
                  9.48445417e-10 * T3 - 1.01961714e-13 * T4;
    // species 29: HONO2
    species[29] = +5.28851491e+00 + 1.02507554e-02 * T - 6.01108580e-06 * T2 +
                  1.65260052e-09 * T3 - 1.73502753e-13 * T4;
    // species 30: N2O
    species[30] = +3.61316907e+00 + 5.15970465e-03 * T - 2.97227625e-06 * T2 +
                  8.00505298e-10 * T3 - 8.26331952e-14 * T4;
    // species 31: HNO3
    species[31] = +8.03061257e+00 + 4.46368336e-03 * T - 1.72272779e-06 * T2 +
                  2.91611606e-10 * T3 - 1.80487362e-14 * T4;
  }
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with no change across T
  // species 2: H
  species[2] = +2.547366000000000e+04 * invT + 2.946682850000000e+00 -
               2.500000000000000e+00 * logT;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = -1.046976280000000e+03 * invT + 5.635349000000001e-01 -
                 3.531005280000000e+00 * logT + 6.183049400000000e-05 * T +
                 8.383323883333334e-08 * T2 - 2.029421766666667e-10 * T3 +
                 7.044061750000001e-14 * T4;
    // species 1: H2
    species[1] = -9.179351730000000e+02 * invT + 1.661320882000000e+00 -
                 2.344331120000000e+00 * logT - 3.990260375000000e-03 * T +
                 3.246358500000000e-06 * T2 - 1.679767450000000e-09 * T3 +
                 3.688058805000000e-13 * T4;
    // species 3: O2
    species[3] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                 3.782456360000000e+00 * logT + 1.498367080000000e-03 * T -
                 1.641217001666667e-06 * T2 + 8.067745908333334e-10 * T3 -
                 1.621864185000000e-13 * T4;
    // species 4: O
    species[4] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                 3.168267100000000e+00 * logT + 1.639659420000000e-03 * T -
                 1.107177326666667e-06 * T2 + 5.106721866666666e-10 * T3 -
                 1.056329855000000e-13 * T4;
    // species 5: H2O
    species[5] = -3.029372600000000e+04 * invT + 5.047644210000000e+00 -
                 4.198635200000000e+00 * logT + 1.018200850000000e-03 * T -
                 1.086723600000000e-06 * T2 + 4.573272416666666e-10 * T3 -
                 8.859840000000001e-14 * T4;
    // species 6: OH
    species[6] = +3.368898360000000e+03 * invT + 4.095982717000000e+00 -
                 3.991984240000000e+00 * logT + 1.200533275000000e-03 * T -
                 7.694400550000000e-07 * T2 + 3.232635883333333e-10 * T3 -
                 6.815975100000000e-14 * T4;
    // species 7: OHV
    species[7] = +5.002130000000000e+04 * invT + 2.278405500000000e+00 -
                 3.637266000000000e+00 * logT - 9.254550000000000e-05 * T +
                 2.793607666666667e-07 * T2 - 1.989335000000000e-10 * T3 +
                 4.215721000000000e-14 * T4;
    // species 8: H2O2
    species[8] = -1.770674370000000e+04 * invT + 1.041418300000000e+00 -
                 4.315151490000000e+00 * logT + 4.236953110000000e-04 * T -
                 2.940072050000000e-06 * T2 + 1.889691200000000e-09 * T3 -
                 4.544750790000000e-13 * T4;
    // species 9: HO2
    species[9] = +2.640184850000000e+02 * invT + 5.851358700000002e-01 -
                 4.301798070000000e+00 * logT + 2.374560485000000e-03 * T -
                 3.526381750000000e-06 * T2 + 2.023032616666667e-09 * T3 -
                 4.646126125000001e-13 * T4;
    // species 10: NO
    species[10] = +9.770186790000000e+03 * invT + 1.610656550000000e+00 -
                  4.150366870000000e+00 * logT + 2.044450040000000e-03 * T -
                  1.563452876666667e-06 * T2 + 6.257574174999999e-10 * T3 -
                  1.058713990000000e-13 * T4;
    // species 11: NH3
    species[11] = -6.365114050000000e+03 * invT - 3.214441100000003e-01 -
                  3.266505100000000e+00 * logT - 1.529464335000000e-03 * T -
                  9.645920383333333e-08 * T2 - 7.908978433333333e-11 * T3 +
                  4.511109845000000e-14 * T4;
    // species 12: NH2
    species[12] = +2.124866730000000e+04 * invT + 3.201215712000000e+00 -
                  3.978835380000000e+00 * logT + 2.569440440000000e-04 * T -
                  4.473935933333333e-07 * T2 + 7.656938333333334e-11 * T3 +
                  4.911255760000000e-15 * T4;
    // species 13: NH
    species[13] = +4.178992680000000e+04 * invT + 1.417063570000000e+00 -
                  3.446972090000000e+00 * logT - 2.789239090000000e-04 * T +
                  3.338156000000000e-07 * T2 - 2.382941016666667e-10 * T3 +
                  5.621714200000000e-14 * T4;
    // species 14: N
    species[14] = +5.607607100000000e+04 * invT - 1.695226830000000e+00 -
                  2.499766430000000e+00 * logT - 2.510747970000000e-07 * T -
                  3.218186850000000e-10 * T2 + 4.121938575000000e-13 * T3 -
                  1.370447530000000e-16 * T4;
    // species 15: NNH
    species[15] = +2.913749800000000e+04 * invT + 1.600428400000000e-01 -
                  4.092548710000000e+00 * logT + 1.185866435000000e-03 * T -
                  1.921854950000000e-06 * T2 + 8.859035250000000e-10 * T3 -
                  1.619687900000000e-13 * T4;
    // species 16: N2H4
    species[16] = +1.096526510000000e+04 * invT - 1.662941795500000e+01 -
                  9.425429450000000e-01 * logT - 1.067441355000000e-02 * T +
                  3.145098100000000e-06 * T2 - 8.413590583333334e-10 * T3 +
                  1.154981460000000e-13 * T4;
    // species 17: N2H3
    species[17] = +2.575228090000000e+04 * invT - 1.779419120000000e+00 -
                  3.802718620000000e+00 * logT - 2.763820705000000e-03 * T -
                  1.141433368333333e-07 * T2 + 1.669137441666667e-10 * T3 -
                  3.107228710000000e-14 * T4;
    // species 18: N2H2
    species[18] = +2.282419010000000e+04 * invT + 4.819632970400000e+00 -
                  4.910660310000000e+00 * logT + 5.389594000000000e-03 * T -
                  6.441941483333333e-06 * T2 + 3.220847483333334e-09 * T3 -
                  6.742606699999999e-13 * T4;
    // species 19: H2NN
    species[19] = +3.526374340000000e+04 * invT - 3.554224100000001e-01 -
                  3.877074530000000e+00 * logT + 1.326222595000000e-03 * T -
                  3.101102916666667e-06 * T2 + 1.472454025000000e-09 * T3 -
                  2.694003380000000e-13 * T4;
    // species 20: NH2OH
    species[20] = -6.581484810000000e+03 * invT - 4.722774790000000e+00 -
                  3.210160920000000e+00 * logT - 3.098358380000000e-03 * T -
                  1.843249133333333e-06 * T2 + 1.638902183333333e-09 * T3 -
                  4.412582950000000e-13 * T4;
    // species 21: H2NO
    species[21] = +6.595072150000000e+03 * invT - 4.865122200000003e-01 -
                  3.933708690000000e+00 * logT - 1.105878025000000e-03 * T -
                  9.770336683333334e-07 * T2 + 5.607764799999999e-10 * T3 -
                  1.089180855000000e-13 * T4;
    // species 22: HNOH
    species[22] = +1.091997900000000e+04 * invT - 1.603427350000000e+00 -
                  3.956082480000000e+00 * logT + 1.513055100000000e-03 * T -
                  4.281239933333333e-06 * T2 + 2.630376000000000e-09 * T3 -
                  6.204228700000000e-13 * T4;
    // species 23: HNO
    species[23] = +1.176379250000000e+04 * invT + 2.763695520000000e+00 -
                  4.519880780000000e+00 * logT + 2.712538115000000e-03 * T -
                  2.837327266666667e-06 * T2 + 1.239234766666667e-09 * T3 -
                  2.223817490000000e-13 * T4;
    // species 24: HON
    species[24] = +2.460370980000000e+04 * invT - 4.136387099999999e-01 -
                  4.152724500000000e+00 * logT + 1.939132010000000e-03 * T -
                  3.424600516666667e-06 * T2 + 2.075412358333333e-09 * T3 -
                  4.936827309999999e-13 * T4;
    // species 25: NO2
    species[25] = +2.781306790000000e+03 * invT - 5.181193570000000e+00 -
                  3.391009180000000e+00 * logT - 1.312241740000000e-03 * T -
                  8.496505099999999e-07 * T2 + 6.351004108333333e-10 * T3 -
                  1.399800675000000e-13 * T4;
    // species 26: HONO
    species[26] = -1.057228650000000e+04 * invT - 5.506971870000001e+00 -
                  3.491066170000000e+00 * logT - 3.405584375000000e-03 * T +
                  2.182385333333333e-07 * T2 + 1.951643366666667e-10 * T3 -
                  5.946576749999999e-14 * T4;
    // species 27: HNO2
    species[27] = -6.421603460000000e+03 * invT - 7.893355630000000e+00 -
                  2.868164570000000e+00 * logT - 2.040181735000000e-03 * T -
                  1.591898755000000e-06 * T2 + 1.080039091666667e-09 * T3 -
                  2.286868860000000e-13 * T4;
    // species 28: NO3
    species[28] = +7.186266320000000e+03 * invT - 7.337000910000000e+00 -
                  3.094467590000000e+00 * logT - 7.550728650000000e-03 * T +
                  2.107474966666667e-06 * T2 - 3.060313175000000e-10 * T3 -
                  4.310920860000000e-15 * T4;
    // species 29: HONO2
    species[29] = -1.755622240000000e+04 * invT - 1.880144502000000e+01 -
                  1.034370780000000e+00 * logT - 1.224037895000000e-02 * T +
                  3.862704750000000e-06 * T2 - 8.591212499999999e-10 * T3 +
                  8.205364350000000e-14 * T4;
    // species 30: N2O
    species[30] = +8.849386210000001e+03 * invT - 7.311359789999999e+00 -
                  2.491263560000000e+00 * logT - 4.581124880000000e-03 * T +
                  1.374746421666667e-06 * T2 - 3.194080475000000e-10 * T3 +
                  3.597308920000000e-14 * T4;
    // species 31: HNO3
    species[31] = -1.739558710000000e+04 * invT - 1.616971714000000e+01 -
                  1.559750560000000e+00 * logT - 1.007510845000000e-02 * T +
                  1.920288266666667e-06 * T2 + 1.932426916666667e-10 * T3 -
                  1.587902760000000e-13 * T4;
  } else {
    // species 0: N2
    species[0] = -9.239486879999999e+02 * invT - 2.919311250000000e+00 -
                 2.952576370000000e+00 * logT - 6.984502000000001e-04 * T +
                 8.210526716666667e-08 * T2 - 6.550084958333333e-12 * T3 +
                 2.303776020000000e-16 * T4;
    // species 1: H2
    species[1] = -8.130655810000000e+02 * invT + 3.957194400000000e+00 -
                 2.932865750000000e+00 * logT - 4.133040130000000e-04 * T +
                 2.440039400000000e-08 * T2 - 1.284170116666667e-12 * T3 +
                 3.444024000000000e-17 * T4;
    // species 3: O2
    species[3] = -1.215977180000000e+03 * invT + 2.455978599999997e-01 -
                 3.660960650000000e+00 * logT - 3.281829055000000e-04 * T +
                 2.352493783333333e-08 * T2 - 1.714982791666666e-12 * T3 +
                 6.495671800000001e-17 * T4;
    // species 4: O
    species[4] = +2.922601200000000e+04 * invT - 2.378657600000000e+00 -
                 2.543636970000000e+00 * logT + 1.365812430000000e-05 * T +
                 6.983825333333333e-10 * T2 - 4.129015375000000e-13 * T3 +
                 2.397768470000000e-17 * T4;
    // species 5: H2O
    species[5] = -2.988589400000000e+04 * invT - 4.205511100000001e+00 -
                 2.677038900000000e+00 * logT - 1.486590800000000e-03 * T +
                 1.289614816666667e-07 * T2 - 7.869459500000001e-12 * T3 +
                 2.134499550000000e-16 * T4;
    // species 6: OH
    species[6] = +3.697808080000000e+03 * invT - 3.006416189999999e+00 -
                 2.838530330000000e+00 * logT - 5.537064450000000e-04 * T +
                 4.900003483333333e-08 * T2 - 3.505822741666666e-12 * T3 +
                 1.211449450000000e-16 * T4;
    // species 7: OHV
    species[7] = +5.026500000000000e+04 * invT - 2.712982000000000e+00 -
                 2.882730000000000e+00 * logT - 5.069871500000000e-04 * T +
                 3.794795000000000e-08 * T2 - 1.812235833333334e-12 * T3 +
                 2.563152500000000e-17 * T4;
    // species 8: H2O2
    species[8] = -1.800717750000000e+04 * invT + 3.914802356000000e+00 -
                 4.579773050000000e+00 * logT - 2.026630015000000e-03 * T +
                 2.164078833333333e-07 * T2 - 1.651761666666667e-11 * T3 +
                 5.698439600000000e-16 * T4;
    // species 9: HO2
    species[9] = +3.102068390000000e+01 * invT + 1.214610690000000e+00 -
                 4.172287410000000e+00 * logT - 9.405881350000000e-04 * T +
                 5.771288100000000e-08 * T2 - 1.622146241666667e-12 * T3 -
                 8.812845250000000e-18 * T4;
    // species 10: NO
    species[10] = +1.000190690000000e+04 * invT - 6.088598350000000e+00 -
                  2.794628390000000e+00 * logT - 1.061302930000000e-03 * T +
                  1.865616183333333e-07 * T2 - 2.329341816666667e-11 * T3 +
                  1.343126815000000e-15 * T4;
    // species 11: NH3
    species[11] = -5.771686890000000e+03 * invT - 1.388076962000000e+01 -
                  1.070969580000000e+00 * logT - 4.377334755000000e-03 * T +
                  5.558756983333334e-07 * T2 - 3.933464925000000e-11 * T3 +
                  5.678128550000000e-16 * T4;
    // species 12: NH2
    species[12] = +2.159095860000000e+04 * invT - 5.025330030000000e+00 -
                  2.628396100000000e+00 * logT - 1.721899440000000e-03 * T +
                  1.810106083333333e-07 * T2 - 1.255950316666667e-11 * T3 +
                  2.297116400000000e-16 * T4;
    // species 13: NH
    species[13] = +4.197070450000000e+04 * invT - 1.879557390000000e+00 -
                  2.951009550000000e+00 * logT - 4.549972195000000e-04 * T +
                  1.392637398333333e-08 * T2 + 4.310933558333333e-12 * T3 -
                  5.699071800000000e-16 * T4;
    // species 14: N
    species[14] = +5.610515120000000e+04 * invT - 2.233014610000000e+00 -
                  2.416042450000000e+00 * logT - 8.733188300000000e-05 * T +
                  1.981076033333333e-08 * T2 - 2.515417116666667e-12 * T3 +
                  1.016300795000000e-16 * T4;
    // species 15: NNH
    species[15] = +2.926964720000000e+04 * invT - 6.206726699999999e+00 -
                  2.909811420000000e+00 * logT - 2.223591055000000e-03 * T +
                  3.048652533333333e-07 * T2 - 3.033369516666667e-11 * T3 +
                  1.566366760000000e-15 * T4;
    // species 16: N2H4
    species[16] = +1.050612740000000e+04 * invT - 3.351434900000001e+00 -
                  3.218938920000000e+00 * logT - 6.160206400000000e-03 * T +
                  9.072869166666667e-07 * T2 - 1.018527916666667e-10 * T3 +
                  5.536826000000000e-15 * T4;
    // species 17: N2H3
    species[17] = +2.586895980000000e+04 * invT - 5.255999330000000e+00 -
                  3.203022810000000e+00 * logT - 3.995814775000000e-03 * T +
                  5.181549249999999e-07 * T2 - 4.928608483333334e-11 * T3 +
                  2.172748545000000e-15 * T4;
    // species 18: N2H2
    species[18] = +2.338633410000000e+04 * invT - 1.509795553000000e+01 -
                  1.311151170000000e+00 * logT - 4.500936040000000e-03 * T +
                  5.248530400000001e-07 * T2 - 4.012079841666666e-11 * T3 +
                  1.359489455000000e-15 * T4;
    // species 19: H2NN
    species[19] = +3.559185100000000e+04 * invT - 1.364451859000000e+01 -
                  1.462576310000000e+00 * logT - 5.050694400000000e-03 * T +
                  8.613158433333334e-07 * T2 - 1.063389825000000e-10 * T3 +
                  6.116627500000000e-15 * T4;
    // species 20: NH2OH
    species[20] = -6.860184190000000e+03 * invT + 8.956365999999960e-02 -
                  3.881125020000000e+00 * logT - 4.078542240000000e-03 * T +
                  4.710259600000000e-07 * T2 - 3.649424441666666e-11 * T3 +
                  1.263623020000000e-15 * T4;
    // species 21: H2NO
    species[21] = +6.626547170000000e+03 * invT - 3.388270940000000e+00 -
                  3.364856360000000e+00 * logT - 3.066537160000000e-03 * T +
                  4.147731433333334e-07 * T2 - 4.031820558333333e-11 * T3 +
                  1.819979680000000e-15 * T4;
    // species 22: HNOH
    species[22] = +1.057801060000000e+04 * invT + 3.573909499999997e-01 -
                  3.983219330000000e+00 * logT - 2.444231870000000e-03 * T +
                  2.751443950000000e-07 * T2 - 2.128095383333333e-11 * T3 +
                  7.415428049999999e-16 * T4;
    // species 23: HNO
    species[23] = +1.202135740000000e+04 * invT - 7.843381579999999e+00 -
                  2.588198020000000e+00 * logT - 2.438544110000000e-03 * T +
                  3.820721916666667e-07 * T2 - 4.851783566666666e-11 * T3 +
                  2.974058715000000e-15 * T4;
    // species 24: HON
    species[24] = +2.436439630000000e+04 * invT + 7.318699100000003e-01 -
                  4.120446560000000e+00 * logT - 1.143690610000000e-03 * T +
                  1.191142270000000e-07 * T2 - 8.611031999999999e-12 * T3 +
                  2.852420500000000e-16 * T4;
    // species 25: NO2
    species[25] = +2.572161370000000e+03 * invT - 2.874441610000000e+00 -
                  3.652392790000000e+00 * logT - 2.358161550000000e-03 * T +
                  4.576529133333334e-07 * T2 - 6.211523616666667e-11 * T3 +
                  3.819455540000000e-15 * T4;
    // species 26: HONO
    species[26] = -1.081227690000000e+04 * invT - 8.884316200000004e-01 -
                  4.199666710000000e+00 * logT - 2.971086690000000e-03 * T +
                  4.923413900000000e-07 * T2 - 5.998718225000000e-11 * T3 +
                  3.374545305000000e-15 * T4;
    // species 27: HNO2
    species[27] = -6.619491390000000e+03 * invT - 7.624185720000000e+00 -
                  2.718867980000000e+00 * logT - 4.616247340000000e-03 * T +
                  8.348702666666667e-07 * T2 - 1.084626575000000e-10 * T3 +
                  6.525186700000000e-15 * T4;
    // species 28: NO3
    species[28] = +6.354739620000000e+03 * invT + 1.268560324000000e+01 -
                  6.382938380000000e+00 * logT - 2.712112515000000e-03 * T +
                  5.573296333333334e-07 * T2 - 7.903711808333334e-11 * T3 +
                  5.098085700000000e-15 * T4;
    // species 29: HONO2
    species[29] = -1.854637990000000e+04 * invT + 6.673128930000000e+00 -
                  5.288514910000000e+00 * logT - 5.125377700000000e-03 * T +
                  1.001847633333333e-06 * T2 - 1.377167100000000e-10 * T3 +
                  8.675137650000000e-15 * T4;
    // species 30: N2O
    species[30] = +8.600751259999999e+03 * invT - 6.556394999999999e-01 -
                  3.613169070000000e+00 * logT - 2.579852325000000e-03 * T +
                  4.953793750000000e-07 * T2 - 6.670877483333334e-11 * T3 +
                  4.131659760000000e-15 * T4;
    // species 31: HNO3
    species[31] = -1.930337640000000e+04 * invT + 2.428495467000000e+01 -
                  8.030612570000001e+00 * logT - 2.231841680000000e-03 * T +
                  2.871212983333333e-07 * T2 - 2.430096716666667e-11 * T3 +
                  9.024368099999999e-16 * T4;
  }
}

// compute the a/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with no change across T
  // species 2: H
  species[2] = +2.54736600e+04 * invT + 1.94668285e+00 - 2.50000000e+00 * logT;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = -1.04697628e+03 * invT - 4.36465100e-01 -
                 3.53100528e+00 * logT + 6.18304940e-05 * T +
                 8.38332388e-08 * T2 - 2.02942177e-10 * T3 +
                 7.04406175e-14 * T4;
    // species 1: H2
    species[1] = -9.17935173e+02 * invT + 6.61320882e-01 -
                 2.34433112e+00 * logT - 3.99026037e-03 * T +
                 3.24635850e-06 * T2 - 1.67976745e-09 * T3 +
                 3.68805881e-13 * T4;
    // species 3: O2
    species[3] = -1.06394356e+03 * invT - 8.75219370e-01 -
                 3.78245636e+00 * logT + 1.49836708e-03 * T -
                 1.64121700e-06 * T2 + 8.06774591e-10 * T3 -
                 1.62186418e-13 * T4;
    // species 4: O
    species[4] = +2.91222592e+04 * invT + 1.16333640e-01 -
                 3.16826710e+00 * logT + 1.63965942e-03 * T -
                 1.10717733e-06 * T2 + 5.10672187e-10 * T3 -
                 1.05632985e-13 * T4;
    // species 5: H2O
    species[5] = -3.02937260e+04 * invT + 4.04764421e+00 -
                 4.19863520e+00 * logT + 1.01820085e-03 * T -
                 1.08672360e-06 * T2 + 4.57327242e-10 * T3 -
                 8.85984000e-14 * T4;
    // species 6: OH
    species[6] = +3.36889836e+03 * invT + 3.09598272e+00 -
                 3.99198424e+00 * logT + 1.20053327e-03 * T -
                 7.69440055e-07 * T2 + 3.23263588e-10 * T3 -
                 6.81597510e-14 * T4;
    // species 7: OHV
    species[7] = +5.00213000e+04 * invT + 1.27840550e+00 -
                 3.63726600e+00 * logT - 9.25455000e-05 * T +
                 2.79360767e-07 * T2 - 1.98933500e-10 * T3 +
                 4.21572100e-14 * T4;
    // species 8: H2O2
    species[8] = -1.77067437e+04 * invT + 4.14183000e-02 -
                 4.31515149e+00 * logT + 4.23695311e-04 * T -
                 2.94007205e-06 * T2 + 1.88969120e-09 * T3 -
                 4.54475079e-13 * T4;
    // species 9: HO2
    species[9] = +2.64018485e+02 * invT - 4.14864130e-01 -
                 4.30179807e+00 * logT + 2.37456049e-03 * T -
                 3.52638175e-06 * T2 + 2.02303262e-09 * T3 -
                 4.64612613e-13 * T4;
    // species 10: NO
    species[10] = +9.77018679e+03 * invT + 6.10656550e-01 -
                  4.15036687e+00 * logT + 2.04445004e-03 * T -
                  1.56345288e-06 * T2 + 6.25757417e-10 * T3 -
                  1.05871399e-13 * T4;
    // species 11: NH3
    species[11] = -6.36511405e+03 * invT - 1.32144411e+00 -
                  3.26650510e+00 * logT - 1.52946434e-03 * T -
                  9.64592038e-08 * T2 - 7.90897843e-11 * T3 +
                  4.51110984e-14 * T4;
    // species 12: NH2
    species[12] = +2.12486673e+04 * invT + 2.20121571e+00 -
                  3.97883538e+00 * logT + 2.56944044e-04 * T -
                  4.47393593e-07 * T2 + 7.65693833e-11 * T3 +
                  4.91125576e-15 * T4;
    // species 13: NH
    species[13] = +4.17899268e+04 * invT + 4.17063570e-01 -
                  3.44697209e+00 * logT - 2.78923909e-04 * T +
                  3.33815600e-07 * T2 - 2.38294102e-10 * T3 +
                  5.62171420e-14 * T4;
    // species 14: N
    species[14] = +5.60760710e+04 * invT - 2.69522683e+00 -
                  2.49976643e+00 * logT - 2.51074797e-07 * T -
                  3.21818685e-10 * T2 + 4.12193857e-13 * T3 -
                  1.37044753e-16 * T4;
    // species 15: NNH
    species[15] = +2.91374980e+04 * invT - 8.39957160e-01 -
                  4.09254871e+00 * logT + 1.18586644e-03 * T -
                  1.92185495e-06 * T2 + 8.85903525e-10 * T3 -
                  1.61968790e-13 * T4;
    // species 16: N2H4
    species[16] = +1.09652651e+04 * invT - 1.76294180e+01 -
                  9.42542945e-01 * logT - 1.06744135e-02 * T +
                  3.14509810e-06 * T2 - 8.41359058e-10 * T3 +
                  1.15498146e-13 * T4;
    // species 17: N2H3
    species[17] = +2.57522809e+04 * invT - 2.77941912e+00 -
                  3.80271862e+00 * logT - 2.76382070e-03 * T -
                  1.14143337e-07 * T2 + 1.66913744e-10 * T3 -
                  3.10722871e-14 * T4;
    // species 18: N2H2
    species[18] = +2.28241901e+04 * invT + 3.81963297e+00 -
                  4.91066031e+00 * logT + 5.38959400e-03 * T -
                  6.44194148e-06 * T2 + 3.22084748e-09 * T3 -
                  6.74260670e-13 * T4;
    // species 19: H2NN
    species[19] = +3.52637434e+04 * invT - 1.35542241e+00 -
                  3.87707453e+00 * logT + 1.32622259e-03 * T -
                  3.10110292e-06 * T2 + 1.47245403e-09 * T3 -
                  2.69400338e-13 * T4;
    // species 20: NH2OH
    species[20] = -6.58148481e+03 * invT - 5.72277479e+00 -
                  3.21016092e+00 * logT - 3.09835838e-03 * T -
                  1.84324913e-06 * T2 + 1.63890218e-09 * T3 -
                  4.41258295e-13 * T4;
    // species 21: H2NO
    species[21] = +6.59507215e+03 * invT - 1.48651222e+00 -
                  3.93370869e+00 * logT - 1.10587802e-03 * T -
                  9.77033668e-07 * T2 + 5.60776480e-10 * T3 -
                  1.08918085e-13 * T4;
    // species 22: HNOH
    species[22] = +1.09199790e+04 * invT - 2.60342735e+00 -
                  3.95608248e+00 * logT + 1.51305510e-03 * T -
                  4.28123993e-06 * T2 + 2.63037600e-09 * T3 -
                  6.20422870e-13 * T4;
    // species 23: HNO
    species[23] = +1.17637925e+04 * invT + 1.76369552e+00 -
                  4.51988078e+00 * logT + 2.71253811e-03 * T -
                  2.83732727e-06 * T2 + 1.23923477e-09 * T3 -
                  2.22381749e-13 * T4;
    // species 24: HON
    species[24] = +2.46037098e+04 * invT - 1.41363871e+00 -
                  4.15272450e+00 * logT + 1.93913201e-03 * T -
                  3.42460052e-06 * T2 + 2.07541236e-09 * T3 -
                  4.93682731e-13 * T4;
    // species 25: NO2
    species[25] = +2.78130679e+03 * invT - 6.18119357e+00 -
                  3.39100918e+00 * logT - 1.31224174e-03 * T -
                  8.49650510e-07 * T2 + 6.35100411e-10 * T3 -
                  1.39980068e-13 * T4;
    // species 26: HONO
    species[26] = -1.05722865e+04 * invT - 6.50697187e+00 -
                  3.49106617e+00 * logT - 3.40558437e-03 * T +
                  2.18238533e-07 * T2 + 1.95164337e-10 * T3 -
                  5.94657675e-14 * T4;
    // species 27: HNO2
    species[27] = -6.42160346e+03 * invT - 8.89335563e+00 -
                  2.86816457e+00 * logT - 2.04018173e-03 * T -
                  1.59189875e-06 * T2 + 1.08003909e-09 * T3 -
                  2.28686886e-13 * T4;
    // species 28: NO3
    species[28] = +7.18626632e+03 * invT - 8.33700091e+00 -
                  3.09446759e+00 * logT - 7.55072865e-03 * T +
                  2.10747497e-06 * T2 - 3.06031318e-10 * T3 -
                  4.31092086e-15 * T4;
    // species 29: HONO2
    species[29] = -1.75562224e+04 * invT - 1.98014450e+01 -
                  1.03437078e+00 * logT - 1.22403790e-02 * T +
                  3.86270475e-06 * T2 - 8.59121250e-10 * T3 +
                  8.20536435e-14 * T4;
    // species 30: N2O
    species[30] = +8.84938621e+03 * invT - 8.31135979e+00 -
                  2.49126356e+00 * logT - 4.58112488e-03 * T +
                  1.37474642e-06 * T2 - 3.19408048e-10 * T3 +
                  3.59730892e-14 * T4;
    // species 31: HNO3
    species[31] = -1.73955871e+04 * invT - 1.71697171e+01 -
                  1.55975056e+00 * logT - 1.00751085e-02 * T +
                  1.92028827e-06 * T2 + 1.93242692e-10 * T3 -
                  1.58790276e-13 * T4;
  } else {
    // species 0: N2
    species[0] = -9.23948688e+02 * invT - 3.91931125e+00 -
                 2.95257637e+00 * logT - 6.98450200e-04 * T +
                 8.21052672e-08 * T2 - 6.55008496e-12 * T3 +
                 2.30377602e-16 * T4;
    // species 1: H2
    species[1] = -8.13065581e+02 * invT + 2.95719440e+00 -
                 2.93286575e+00 * logT - 4.13304013e-04 * T +
                 2.44003940e-08 * T2 - 1.28417012e-12 * T3 +
                 3.44402400e-17 * T4;
    // species 3: O2
    species[3] = -1.21597718e+03 * invT - 7.54402140e-01 -
                 3.66096065e+00 * logT - 3.28182906e-04 * T +
                 2.35249378e-08 * T2 - 1.71498279e-12 * T3 +
                 6.49567180e-17 * T4;
    // species 4: O
    species[4] = +2.92260120e+04 * invT - 3.37865760e+00 -
                 2.54363697e+00 * logT + 1.36581243e-05 * T +
                 6.98382533e-10 * T2 - 4.12901538e-13 * T3 +
                 2.39776847e-17 * T4;
    // species 5: H2O
    species[5] = -2.98858940e+04 * invT - 5.20551110e+00 -
                 2.67703890e+00 * logT - 1.48659080e-03 * T +
                 1.28961482e-07 * T2 - 7.86945950e-12 * T3 +
                 2.13449955e-16 * T4;
    // species 6: OH
    species[6] = +3.69780808e+03 * invT - 4.00641619e+00 -
                 2.83853033e+00 * logT - 5.53706445e-04 * T +
                 4.90000348e-08 * T2 - 3.50582274e-12 * T3 +
                 1.21144945e-16 * T4;
    // species 7: OHV
    species[7] = +5.02650000e+04 * invT - 3.71298200e+00 -
                 2.88273000e+00 * logT - 5.06987150e-04 * T +
                 3.79479500e-08 * T2 - 1.81223583e-12 * T3 +
                 2.56315250e-17 * T4;
    // species 8: H2O2
    species[8] = -1.80071775e+04 * invT + 2.91480236e+00 -
                 4.57977305e+00 * logT - 2.02663002e-03 * T +
                 2.16407883e-07 * T2 - 1.65176167e-11 * T3 +
                 5.69843960e-16 * T4;
    // species 9: HO2
    species[9] = +3.10206839e+01 * invT + 2.14610690e-01 -
                 4.17228741e+00 * logT - 9.40588135e-04 * T +
                 5.77128810e-08 * T2 - 1.62214624e-12 * T3 -
                 8.81284525e-18 * T4;
    // species 10: NO
    species[10] = +1.00019069e+04 * invT - 7.08859835e+00 -
                  2.79462839e+00 * logT - 1.06130293e-03 * T +
                  1.86561618e-07 * T2 - 2.32934182e-11 * T3 +
                  1.34312681e-15 * T4;
    // species 11: NH3
    species[11] = -5.77168689e+03 * invT - 1.48807696e+01 -
                  1.07096958e+00 * logT - 4.37733476e-03 * T +
                  5.55875698e-07 * T2 - 3.93346493e-11 * T3 +
                  5.67812855e-16 * T4;
    // species 12: NH2
    species[12] = +2.15909586e+04 * invT - 6.02533003e+00 -
                  2.62839610e+00 * logT - 1.72189944e-03 * T +
                  1.81010608e-07 * T2 - 1.25595032e-11 * T3 +
                  2.29711640e-16 * T4;
    // species 13: NH
    species[13] = +4.19707045e+04 * invT - 2.87955739e+00 -
                  2.95100955e+00 * logT - 4.54997219e-04 * T +
                  1.39263740e-08 * T2 + 4.31093356e-12 * T3 -
                  5.69907180e-16 * T4;
    // species 14: N
    species[14] = +5.61051512e+04 * invT - 3.23301461e+00 -
                  2.41604245e+00 * logT - 8.73318830e-05 * T +
                  1.98107603e-08 * T2 - 2.51541712e-12 * T3 +
                  1.01630079e-16 * T4;
    // species 15: NNH
    species[15] = +2.92696472e+04 * invT - 7.20672670e+00 -
                  2.90981142e+00 * logT - 2.22359105e-03 * T +
                  3.04865253e-07 * T2 - 3.03336952e-11 * T3 +
                  1.56636676e-15 * T4;
    // species 16: N2H4
    species[16] = +1.05061274e+04 * invT - 4.35143490e+00 -
                  3.21893892e+00 * logT - 6.16020640e-03 * T +
                  9.07286917e-07 * T2 - 1.01852792e-10 * T3 +
                  5.53682600e-15 * T4;
    // species 17: N2H3
    species[17] = +2.58689598e+04 * invT - 6.25599933e+00 -
                  3.20302281e+00 * logT - 3.99581478e-03 * T +
                  5.18154925e-07 * T2 - 4.92860848e-11 * T3 +
                  2.17274854e-15 * T4;
    // species 18: N2H2
    species[18] = +2.33863341e+04 * invT - 1.60979555e+01 -
                  1.31115117e+00 * logT - 4.50093604e-03 * T +
                  5.24853040e-07 * T2 - 4.01207984e-11 * T3 +
                  1.35948946e-15 * T4;
    // species 19: H2NN
    species[19] = +3.55918510e+04 * invT - 1.46445186e+01 -
                  1.46257631e+00 * logT - 5.05069440e-03 * T +
                  8.61315843e-07 * T2 - 1.06338982e-10 * T3 +
                  6.11662750e-15 * T4;
    // species 20: NH2OH
    species[20] = -6.86018419e+03 * invT - 9.10436340e-01 -
                  3.88112502e+00 * logT - 4.07854224e-03 * T +
                  4.71025960e-07 * T2 - 3.64942444e-11 * T3 +
                  1.26362302e-15 * T4;
    // species 21: H2NO
    species[21] = +6.62654717e+03 * invT - 4.38827094e+00 -
                  3.36485636e+00 * logT - 3.06653716e-03 * T +
                  4.14773143e-07 * T2 - 4.03182056e-11 * T3 +
                  1.81997968e-15 * T4;
    // species 22: HNOH
    species[22] = +1.05780106e+04 * invT - 6.42609050e-01 -
                  3.98321933e+00 * logT - 2.44423187e-03 * T +
                  2.75144395e-07 * T2 - 2.12809538e-11 * T3 +
                  7.41542805e-16 * T4;
    // species 23: HNO
    species[23] = +1.20213574e+04 * invT - 8.84338158e+00 -
                  2.58819802e+00 * logT - 2.43854411e-03 * T +
                  3.82072192e-07 * T2 - 4.85178357e-11 * T3 +
                  2.97405871e-15 * T4;
    // species 24: HON
    species[24] = +2.43643963e+04 * invT - 2.68130090e-01 -
                  4.12044656e+00 * logT - 1.14369061e-03 * T +
                  1.19114227e-07 * T2 - 8.61103200e-12 * T3 +
                  2.85242050e-16 * T4;
    // species 25: NO2
    species[25] = +2.57216137e+03 * invT - 3.87444161e+00 -
                  3.65239279e+00 * logT - 2.35816155e-03 * T +
                  4.57652913e-07 * T2 - 6.21152362e-11 * T3 +
                  3.81945554e-15 * T4;
    // species 26: HONO
    species[26] = -1.08122769e+04 * invT - 1.88843162e+00 -
                  4.19966671e+00 * logT - 2.97108669e-03 * T +
                  4.92341390e-07 * T2 - 5.99871823e-11 * T3 +
                  3.37454530e-15 * T4;
    // species 27: HNO2
    species[27] = -6.61949139e+03 * invT - 8.62418572e+00 -
                  2.71886798e+00 * logT - 4.61624734e-03 * T +
                  8.34870267e-07 * T2 - 1.08462658e-10 * T3 +
                  6.52518670e-15 * T4;
    // species 28: NO3
    species[28] = +6.35473962e+03 * invT + 1.16856032e+01 -
                  6.38293838e+00 * logT - 2.71211252e-03 * T +
                  5.57329633e-07 * T2 - 7.90371181e-11 * T3 +
                  5.09808570e-15 * T4;
    // species 29: HONO2
    species[29] = -1.85463799e+04 * invT + 5.67312893e+00 -
                  5.28851491e+00 * logT - 5.12537770e-03 * T +
                  1.00184763e-06 * T2 - 1.37716710e-10 * T3 +
                  8.67513765e-15 * T4;
    // species 30: N2O
    species[30] = +8.60075126e+03 * invT - 1.65563950e+00 -
                  3.61316907e+00 * logT - 2.57985233e-03 * T +
                  4.95379375e-07 * T2 - 6.67087748e-11 * T3 +
                  4.13165976e-15 * T4;
    // species 31: HNO3
    species[31] = -1.93033764e+04 * invT + 2.32849547e+01 -
                  8.03061257e+00 * logT - 2.23184168e-03 * T +
                  2.87121298e-07 * T2 - 2.43009672e-11 * T3 +
                  9.02436810e-16 * T4;
  }
}

// compute the e/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with no change across T
  // species 2: H
  species[2] = +1.50000000e+00 + 2.54736600e+04 * invT;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +2.53100528e+00 - 6.18304940e-05 * T - 1.67666478e-07 * T2 +
                 6.08826530e-10 * T3 - 2.81762470e-13 * T4 -
                 1.04697628e+03 * invT;
    // species 1: H2
    species[1] = +1.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
                 5.03930235e-09 * T3 - 1.47522352e-12 * T4 -
                 9.17935173e+02 * invT;
    // species 3: O2
    species[3] = +2.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
                 2.42032377e-09 * T3 + 6.48745674e-13 * T4 -
                 1.06394356e+03 * invT;
    // species 4: O
    species[4] = +2.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
                 1.53201656e-09 * T3 + 4.22531942e-13 * T4 +
                 2.91222592e+04 * invT;
    // species 5: H2O
    species[5] = +3.19863520e+00 - 1.01820085e-03 * T + 2.17344720e-06 * T2 -
                 1.37198172e-09 * T3 + 3.54393600e-13 * T4 -
                 3.02937260e+04 * invT;
    // species 6: OH
    species[6] = +2.99198424e+00 - 1.20053327e-03 * T + 1.53888011e-06 * T2 -
                 9.69790765e-10 * T3 + 2.72639004e-13 * T4 +
                 3.36889836e+03 * invT;
    // species 7: OHV
    species[7] = +2.63726600e+00 + 9.25455000e-05 * T - 5.58721533e-07 * T2 +
                 5.96800500e-10 * T3 - 1.68628840e-13 * T4 +
                 5.00213000e+04 * invT;
    // species 8: H2O2
    species[8] = +3.31515149e+00 - 4.23695311e-04 * T + 5.88014410e-06 * T2 -
                 5.66907360e-09 * T3 + 1.81790032e-12 * T4 -
                 1.77067437e+04 * invT;
    // species 9: HO2
    species[9] = +3.30179807e+00 - 2.37456049e-03 * T + 7.05276350e-06 * T2 -
                 6.06909785e-09 * T3 + 1.85845045e-12 * T4 +
                 2.64018485e+02 * invT;
    // species 10: NO
    species[10] = +3.15036687e+00 - 2.04445004e-03 * T + 3.12690575e-06 * T2 -
                  1.87727225e-09 * T3 + 4.23485596e-13 * T4 +
                  9.77018679e+03 * invT;
    // species 11: NH3
    species[11] = +2.26650510e+00 + 1.52946434e-03 * T + 1.92918408e-07 * T2 +
                  2.37269353e-10 * T3 - 1.80444394e-13 * T4 -
                  6.36511405e+03 * invT;
    // species 12: NH2
    species[12] = +2.97883538e+00 - 2.56944044e-04 * T + 8.94787187e-07 * T2 -
                  2.29708150e-10 * T3 - 1.96450230e-14 * T4 +
                  2.12486673e+04 * invT;
    // species 13: NH
    species[13] = +2.44697209e+00 + 2.78923909e-04 * T - 6.67631200e-07 * T2 +
                  7.14882305e-10 * T3 - 2.24868568e-13 * T4 +
                  4.17899268e+04 * invT;
    // species 14: N
    species[14] = +1.49976643e+00 + 2.51074797e-07 * T + 6.43637370e-10 * T2 -
                  1.23658157e-12 * T3 + 5.48179012e-16 * T4 +
                  5.60760710e+04 * invT;
    // species 15: NNH
    species[15] = +3.09254871e+00 - 1.18586644e-03 * T + 3.84370990e-06 * T2 -
                  2.65771058e-09 * T3 + 6.47875160e-13 * T4 +
                  2.91374980e+04 * invT;
    // species 16: N2H4
    species[16] = -5.74570550e-02 + 1.06744135e-02 * T - 6.29019620e-06 * T2 +
                  2.52407718e-09 * T3 - 4.61992584e-13 * T4 +
                  1.09652651e+04 * invT;
    // species 17: N2H3
    species[17] = +2.80271862e+00 + 2.76382070e-03 * T + 2.28286674e-07 * T2 -
                  5.00741233e-10 * T3 + 1.24289148e-13 * T4 +
                  2.57522809e+04 * invT;
    // species 18: N2H2
    species[18] = +3.91066031e+00 - 5.38959400e-03 * T + 1.28838830e-05 * T2 -
                  9.66254245e-09 * T3 + 2.69704268e-12 * T4 +
                  2.28241901e+04 * invT;
    // species 19: H2NN
    species[19] = +2.87707453e+00 - 1.32622259e-03 * T + 6.20220583e-06 * T2 -
                  4.41736207e-09 * T3 + 1.07760135e-12 * T4 +
                  3.52637434e+04 * invT;
    // species 20: NH2OH
    species[20] = +2.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
                  4.91670655e-09 * T3 + 1.76503318e-12 * T4 -
                  6.58148481e+03 * invT;
    // species 21: H2NO
    species[21] = +2.93370869e+00 + 1.10587802e-03 * T + 1.95406734e-06 * T2 -
                  1.68232944e-09 * T3 + 4.35672342e-13 * T4 +
                  6.59507215e+03 * invT;
    // species 22: HNOH
    species[22] = +2.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
                  7.89112800e-09 * T3 + 2.48169148e-12 * T4 +
                  1.09199790e+04 * invT;
    // species 23: HNO
    species[23] = +3.51988078e+00 - 2.71253811e-03 * T + 5.67465453e-06 * T2 -
                  3.71770430e-09 * T3 + 8.89526996e-13 * T4 +
                  1.17637925e+04 * invT;
    // species 24: HON
    species[24] = +3.15272450e+00 - 1.93913201e-03 * T + 6.84920103e-06 * T2 -
                  6.22623707e-09 * T3 + 1.97473092e-12 * T4 +
                  2.46037098e+04 * invT;
    // species 25: NO2
    species[25] = +2.39100918e+00 + 1.31224174e-03 * T + 1.69930102e-06 * T2 -
                  1.90530123e-09 * T3 + 5.59920270e-13 * T4 +
                  2.78130679e+03 * invT;
    // species 26: HONO
    species[26] = +2.49106617e+00 + 3.40558437e-03 * T - 4.36477067e-07 * T2 -
                  5.85493010e-10 * T3 + 2.37863070e-13 * T4 -
                  1.05722865e+04 * invT;
    // species 27: HNO2
    species[27] = +1.86816457e+00 + 2.04018173e-03 * T + 3.18379751e-06 * T2 -
                  3.24011728e-09 * T3 + 9.14747544e-13 * T4 -
                  6.42160346e+03 * invT;
    // species 28: NO3
    species[28] = +2.09446759e+00 + 7.55072865e-03 * T - 4.21494993e-06 * T2 +
                  9.18093952e-10 * T3 + 1.72436834e-14 * T4 +
                  7.18626632e+03 * invT;
    // species 29: HONO2
    species[29] = +3.43707800e-02 + 1.22403790e-02 * T - 7.72540950e-06 * T2 +
                  2.57736375e-09 * T3 - 3.28214574e-13 * T4 -
                  1.75562224e+04 * invT;
    // species 30: N2O
    species[30] = +1.49126356e+00 + 4.58112488e-03 * T - 2.74949284e-06 * T2 +
                  9.58224143e-10 * T3 - 1.43892357e-13 * T4 +
                  8.84938621e+03 * invT;
    // species 31: HNO3
    species[31] = +5.59750560e-01 + 1.00751085e-02 * T - 3.84057653e-06 * T2 -
                  5.79728075e-10 * T3 + 6.35161104e-13 * T4 -
                  1.73955871e+04 * invT;
  } else {
    // species 0: N2
    species[0] = +1.95257637e+00 + 6.98450200e-04 * T - 1.64210534e-07 * T2 +
                 1.96502549e-11 * T3 - 9.21510408e-16 * T4 -
                 9.23948688e+02 * invT;
    // species 1: H2
    species[1] = +1.93286575e+00 + 4.13304013e-04 * T - 4.88007880e-08 * T2 +
                 3.85251035e-12 * T3 - 1.37760960e-16 * T4 -
                 8.13065581e+02 * invT;
    // species 3: O2
    species[3] = +2.66096065e+00 + 3.28182906e-04 * T - 4.70498757e-08 * T2 +
                 5.14494837e-12 * T3 - 2.59826872e-16 * T4 -
                 1.21597718e+03 * invT;
    // species 4: O
    species[4] = +1.54363697e+00 - 1.36581243e-05 * T - 1.39676507e-09 * T2 +
                 1.23870461e-12 * T3 - 9.59107388e-17 * T4 +
                 2.92260120e+04 * invT;
    // species 5: H2O
    species[5] = +1.67703890e+00 + 1.48659080e-03 * T - 2.57922963e-07 * T2 +
                 2.36083785e-11 * T3 - 8.53799820e-16 * T4 -
                 2.98858940e+04 * invT;
    // species 6: OH
    species[6] = +1.83853033e+00 + 5.53706445e-04 * T - 9.80000697e-08 * T2 +
                 1.05174682e-11 * T3 - 4.84579780e-16 * T4 +
                 3.69780808e+03 * invT;
    // species 7: OHV
    species[7] = +1.88273000e+00 + 5.06987150e-04 * T - 7.58959000e-08 * T2 +
                 5.43670750e-12 * T3 - 1.02526100e-16 * T4 +
                 5.02650000e+04 * invT;
    // species 8: H2O2
    species[8] = +3.57977305e+00 + 2.02663002e-03 * T - 4.32815767e-07 * T2 +
                 4.95528500e-11 * T3 - 2.27937584e-15 * T4 -
                 1.80071775e+04 * invT;
    // species 9: HO2
    species[9] = +3.17228741e+00 + 9.40588135e-04 * T - 1.15425762e-07 * T2 +
                 4.86643873e-12 * T3 + 3.52513810e-17 * T4 +
                 3.10206839e+01 * invT;
    // species 10: NO
    species[10] = +1.79462839e+00 + 1.06130293e-03 * T - 3.73123237e-07 * T2 +
                  6.98802545e-11 * T3 - 5.37250726e-15 * T4 +
                  1.00019069e+04 * invT;
    // species 11: NH3
    species[11] = +7.09695800e-02 + 4.37733476e-03 * T - 1.11175140e-06 * T2 +
                  1.18003948e-10 * T3 - 2.27125142e-15 * T4 -
                  5.77168689e+03 * invT;
    // species 12: NH2
    species[12] = +1.62839610e+00 + 1.72189944e-03 * T - 3.62021217e-07 * T2 +
                  3.76785095e-11 * T3 - 9.18846560e-16 * T4 +
                  2.15909586e+04 * invT;
    // species 13: NH
    species[13] = +1.95100955e+00 + 4.54997219e-04 * T - 2.78527480e-08 * T2 -
                  1.29328007e-11 * T3 + 2.27962872e-15 * T4 +
                  4.19707045e+04 * invT;
    // species 14: N
    species[14] = +1.41604245e+00 + 8.73318830e-05 * T - 3.96215207e-08 * T2 +
                  7.54625135e-12 * T3 - 4.06520318e-16 * T4 +
                  5.61051512e+04 * invT;
    // species 15: NNH
    species[15] = +1.90981142e+00 + 2.22359105e-03 * T - 6.09730507e-07 * T2 +
                  9.10010855e-11 * T3 - 6.26546704e-15 * T4 +
                  2.92696472e+04 * invT;
    // species 16: N2H4
    species[16] = +2.21893892e+00 + 6.16020640e-03 * T - 1.81457383e-06 * T2 +
                  3.05558375e-10 * T3 - 2.21473040e-14 * T4 +
                  1.05061274e+04 * invT;
    // species 17: N2H3
    species[17] = +2.20302281e+00 + 3.99581478e-03 * T - 1.03630985e-06 * T2 +
                  1.47858255e-10 * T3 - 8.69099418e-15 * T4 +
                  2.58689598e+04 * invT;
    // species 18: N2H2
    species[18] = +3.11151170e-01 + 4.50093604e-03 * T - 1.04970608e-06 * T2 +
                  1.20362395e-10 * T3 - 5.43795782e-15 * T4 +
                  2.33863341e+04 * invT;
    // species 19: H2NN
    species[19] = +4.62576310e-01 + 5.05069440e-03 * T - 1.72263169e-06 * T2 +
                  3.19016947e-10 * T3 - 2.44665100e-14 * T4 +
                  3.55918510e+04 * invT;
    // species 20: NH2OH
    species[20] = +2.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
                  1.09482733e-10 * T3 - 5.05449208e-15 * T4 -
                  6.86018419e+03 * invT;
    // species 21: H2NO
    species[21] = +2.36485636e+00 + 3.06653716e-03 * T - 8.29546287e-07 * T2 +
                  1.20954617e-10 * T3 - 7.27991872e-15 * T4 +
                  6.62654717e+03 * invT;
    // species 22: HNOH
    species[22] = +2.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
                  6.38428615e-11 * T3 - 2.96617122e-15 * T4 +
                  1.05780106e+04 * invT;
    // species 23: HNO
    species[23] = +1.58819802e+00 + 2.43854411e-03 * T - 7.64144383e-07 * T2 +
                  1.45553507e-10 * T3 - 1.18962349e-14 * T4 +
                  1.20213574e+04 * invT;
    // species 24: HON
    species[24] = +3.12044656e+00 + 1.14369061e-03 * T - 2.38228454e-07 * T2 +
                  2.58330960e-11 * T3 - 1.14096820e-15 * T4 +
                  2.43643963e+04 * invT;
    // species 25: NO2
    species[25] = +2.65239279e+00 + 2.35816155e-03 * T - 9.15305827e-07 * T2 +
                  1.86345709e-10 * T3 - 1.52778222e-14 * T4 +
                  2.57216137e+03 * invT;
    // species 26: HONO
    species[26] = +3.19966671e+00 + 2.97108669e-03 * T - 9.84682780e-07 * T2 +
                  1.79961547e-10 * T3 - 1.34981812e-14 * T4 -
                  1.08122769e+04 * invT;
    // species 27: HNO2
    species[27] = +1.71886798e+00 + 4.61624734e-03 * T - 1.66974053e-06 * T2 +
                  3.25387973e-10 * T3 - 2.61007468e-14 * T4 -
                  6.61949139e+03 * invT;
    // species 28: NO3
    species[28] = +5.38293838e+00 + 2.71211252e-03 * T - 1.11465927e-06 * T2 +
                  2.37111354e-10 * T3 - 2.03923428e-14 * T4 +
                  6.35473962e+03 * invT;
    // species 29: HONO2
    species[29] = +4.28851491e+00 + 5.12537770e-03 * T - 2.00369527e-06 * T2 +
                  4.13150130e-10 * T3 - 3.47005506e-14 * T4 -
                  1.85463799e+04 * invT;
    // species 30: N2O
    species[30] = +2.61316907e+00 + 2.57985233e-03 * T - 9.90758750e-07 * T2 +
                  2.00126325e-10 * T3 - 1.65266390e-14 * T4 +
                  8.60075126e+03 * invT;
    // species 31: HNO3
    species[31] = +7.03061257e+00 + 2.23184168e-03 * T - 5.74242597e-07 * T2 +
                  7.29029015e-11 * T3 - 3.60974724e-15 * T4 -
                  1.93033764e+04 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with no change across T
  // species 2: H
  species[2] = +2.50000000e+00 + 2.54736600e+04 * invT;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +3.53100528e+00 - 6.18304940e-05 * T - 1.67666478e-07 * T2 +
                 6.08826530e-10 * T3 - 2.81762470e-13 * T4 -
                 1.04697628e+03 * invT;
    // species 1: H2
    species[1] = +2.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
                 5.03930235e-09 * T3 - 1.47522352e-12 * T4 -
                 9.17935173e+02 * invT;
    // species 3: O2
    species[3] = +3.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
                 2.42032377e-09 * T3 + 6.48745674e-13 * T4 -
                 1.06394356e+03 * invT;
    // species 4: O
    species[4] = +3.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
                 1.53201656e-09 * T3 + 4.22531942e-13 * T4 +
                 2.91222592e+04 * invT;
    // species 5: H2O
    species[5] = +4.19863520e+00 - 1.01820085e-03 * T + 2.17344720e-06 * T2 -
                 1.37198172e-09 * T3 + 3.54393600e-13 * T4 -
                 3.02937260e+04 * invT;
    // species 6: OH
    species[6] = +3.99198424e+00 - 1.20053327e-03 * T + 1.53888011e-06 * T2 -
                 9.69790765e-10 * T3 + 2.72639004e-13 * T4 +
                 3.36889836e+03 * invT;
    // species 7: OHV
    species[7] = +3.63726600e+00 + 9.25455000e-05 * T - 5.58721533e-07 * T2 +
                 5.96800500e-10 * T3 - 1.68628840e-13 * T4 +
                 5.00213000e+04 * invT;
    // species 8: H2O2
    species[8] = +4.31515149e+00 - 4.23695311e-04 * T + 5.88014410e-06 * T2 -
                 5.66907360e-09 * T3 + 1.81790032e-12 * T4 -
                 1.77067437e+04 * invT;
    // species 9: HO2
    species[9] = +4.30179807e+00 - 2.37456049e-03 * T + 7.05276350e-06 * T2 -
                 6.06909785e-09 * T3 + 1.85845045e-12 * T4 +
                 2.64018485e+02 * invT;
    // species 10: NO
    species[10] = +4.15036687e+00 - 2.04445004e-03 * T + 3.12690575e-06 * T2 -
                  1.87727225e-09 * T3 + 4.23485596e-13 * T4 +
                  9.77018679e+03 * invT;
    // species 11: NH3
    species[11] = +3.26650510e+00 + 1.52946434e-03 * T + 1.92918408e-07 * T2 +
                  2.37269353e-10 * T3 - 1.80444394e-13 * T4 -
                  6.36511405e+03 * invT;
    // species 12: NH2
    species[12] = +3.97883538e+00 - 2.56944044e-04 * T + 8.94787187e-07 * T2 -
                  2.29708150e-10 * T3 - 1.96450230e-14 * T4 +
                  2.12486673e+04 * invT;
    // species 13: NH
    species[13] = +3.44697209e+00 + 2.78923909e-04 * T - 6.67631200e-07 * T2 +
                  7.14882305e-10 * T3 - 2.24868568e-13 * T4 +
                  4.17899268e+04 * invT;
    // species 14: N
    species[14] = +2.49976643e+00 + 2.51074797e-07 * T + 6.43637370e-10 * T2 -
                  1.23658157e-12 * T3 + 5.48179012e-16 * T4 +
                  5.60760710e+04 * invT;
    // species 15: NNH
    species[15] = +4.09254871e+00 - 1.18586644e-03 * T + 3.84370990e-06 * T2 -
                  2.65771058e-09 * T3 + 6.47875160e-13 * T4 +
                  2.91374980e+04 * invT;
    // species 16: N2H4
    species[16] = +9.42542945e-01 + 1.06744135e-02 * T - 6.29019620e-06 * T2 +
                  2.52407718e-09 * T3 - 4.61992584e-13 * T4 +
                  1.09652651e+04 * invT;
    // species 17: N2H3
    species[17] = +3.80271862e+00 + 2.76382070e-03 * T + 2.28286674e-07 * T2 -
                  5.00741233e-10 * T3 + 1.24289148e-13 * T4 +
                  2.57522809e+04 * invT;
    // species 18: N2H2
    species[18] = +4.91066031e+00 - 5.38959400e-03 * T + 1.28838830e-05 * T2 -
                  9.66254245e-09 * T3 + 2.69704268e-12 * T4 +
                  2.28241901e+04 * invT;
    // species 19: H2NN
    species[19] = +3.87707453e+00 - 1.32622259e-03 * T + 6.20220583e-06 * T2 -
                  4.41736207e-09 * T3 + 1.07760135e-12 * T4 +
                  3.52637434e+04 * invT;
    // species 20: NH2OH
    species[20] = +3.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
                  4.91670655e-09 * T3 + 1.76503318e-12 * T4 -
                  6.58148481e+03 * invT;
    // species 21: H2NO
    species[21] = +3.93370869e+00 + 1.10587802e-03 * T + 1.95406734e-06 * T2 -
                  1.68232944e-09 * T3 + 4.35672342e-13 * T4 +
                  6.59507215e+03 * invT;
    // species 22: HNOH
    species[22] = +3.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
                  7.89112800e-09 * T3 + 2.48169148e-12 * T4 +
                  1.09199790e+04 * invT;
    // species 23: HNO
    species[23] = +4.51988078e+00 - 2.71253811e-03 * T + 5.67465453e-06 * T2 -
                  3.71770430e-09 * T3 + 8.89526996e-13 * T4 +
                  1.17637925e+04 * invT;
    // species 24: HON
    species[24] = +4.15272450e+00 - 1.93913201e-03 * T + 6.84920103e-06 * T2 -
                  6.22623707e-09 * T3 + 1.97473092e-12 * T4 +
                  2.46037098e+04 * invT;
    // species 25: NO2
    species[25] = +3.39100918e+00 + 1.31224174e-03 * T + 1.69930102e-06 * T2 -
                  1.90530123e-09 * T3 + 5.59920270e-13 * T4 +
                  2.78130679e+03 * invT;
    // species 26: HONO
    species[26] = +3.49106617e+00 + 3.40558437e-03 * T - 4.36477067e-07 * T2 -
                  5.85493010e-10 * T3 + 2.37863070e-13 * T4 -
                  1.05722865e+04 * invT;
    // species 27: HNO2
    species[27] = +2.86816457e+00 + 2.04018173e-03 * T + 3.18379751e-06 * T2 -
                  3.24011728e-09 * T3 + 9.14747544e-13 * T4 -
                  6.42160346e+03 * invT;
    // species 28: NO3
    species[28] = +3.09446759e+00 + 7.55072865e-03 * T - 4.21494993e-06 * T2 +
                  9.18093952e-10 * T3 + 1.72436834e-14 * T4 +
                  7.18626632e+03 * invT;
    // species 29: HONO2
    species[29] = +1.03437078e+00 + 1.22403790e-02 * T - 7.72540950e-06 * T2 +
                  2.57736375e-09 * T3 - 3.28214574e-13 * T4 -
                  1.75562224e+04 * invT;
    // species 30: N2O
    species[30] = +2.49126356e+00 + 4.58112488e-03 * T - 2.74949284e-06 * T2 +
                  9.58224143e-10 * T3 - 1.43892357e-13 * T4 +
                  8.84938621e+03 * invT;
    // species 31: HNO3
    species[31] = +1.55975056e+00 + 1.00751085e-02 * T - 3.84057653e-06 * T2 -
                  5.79728075e-10 * T3 + 6.35161104e-13 * T4 -
                  1.73955871e+04 * invT;
  } else {
    // species 0: N2
    species[0] = +2.95257637e+00 + 6.98450200e-04 * T - 1.64210534e-07 * T2 +
                 1.96502549e-11 * T3 - 9.21510408e-16 * T4 -
                 9.23948688e+02 * invT;
    // species 1: H2
    species[1] = +2.93286575e+00 + 4.13304013e-04 * T - 4.88007880e-08 * T2 +
                 3.85251035e-12 * T3 - 1.37760960e-16 * T4 -
                 8.13065581e+02 * invT;
    // species 3: O2
    species[3] = +3.66096065e+00 + 3.28182906e-04 * T - 4.70498757e-08 * T2 +
                 5.14494837e-12 * T3 - 2.59826872e-16 * T4 -
                 1.21597718e+03 * invT;
    // species 4: O
    species[4] = +2.54363697e+00 - 1.36581243e-05 * T - 1.39676507e-09 * T2 +
                 1.23870461e-12 * T3 - 9.59107388e-17 * T4 +
                 2.92260120e+04 * invT;
    // species 5: H2O
    species[5] = +2.67703890e+00 + 1.48659080e-03 * T - 2.57922963e-07 * T2 +
                 2.36083785e-11 * T3 - 8.53799820e-16 * T4 -
                 2.98858940e+04 * invT;
    // species 6: OH
    species[6] = +2.83853033e+00 + 5.53706445e-04 * T - 9.80000697e-08 * T2 +
                 1.05174682e-11 * T3 - 4.84579780e-16 * T4 +
                 3.69780808e+03 * invT;
    // species 7: OHV
    species[7] = +2.88273000e+00 + 5.06987150e-04 * T - 7.58959000e-08 * T2 +
                 5.43670750e-12 * T3 - 1.02526100e-16 * T4 +
                 5.02650000e+04 * invT;
    // species 8: H2O2
    species[8] = +4.57977305e+00 + 2.02663002e-03 * T - 4.32815767e-07 * T2 +
                 4.95528500e-11 * T3 - 2.27937584e-15 * T4 -
                 1.80071775e+04 * invT;
    // species 9: HO2
    species[9] = +4.17228741e+00 + 9.40588135e-04 * T - 1.15425762e-07 * T2 +
                 4.86643873e-12 * T3 + 3.52513810e-17 * T4 +
                 3.10206839e+01 * invT;
    // species 10: NO
    species[10] = +2.79462839e+00 + 1.06130293e-03 * T - 3.73123237e-07 * T2 +
                  6.98802545e-11 * T3 - 5.37250726e-15 * T4 +
                  1.00019069e+04 * invT;
    // species 11: NH3
    species[11] = +1.07096958e+00 + 4.37733476e-03 * T - 1.11175140e-06 * T2 +
                  1.18003948e-10 * T3 - 2.27125142e-15 * T4 -
                  5.77168689e+03 * invT;
    // species 12: NH2
    species[12] = +2.62839610e+00 + 1.72189944e-03 * T - 3.62021217e-07 * T2 +
                  3.76785095e-11 * T3 - 9.18846560e-16 * T4 +
                  2.15909586e+04 * invT;
    // species 13: NH
    species[13] = +2.95100955e+00 + 4.54997219e-04 * T - 2.78527480e-08 * T2 -
                  1.29328007e-11 * T3 + 2.27962872e-15 * T4 +
                  4.19707045e+04 * invT;
    // species 14: N
    species[14] = +2.41604245e+00 + 8.73318830e-05 * T - 3.96215207e-08 * T2 +
                  7.54625135e-12 * T3 - 4.06520318e-16 * T4 +
                  5.61051512e+04 * invT;
    // species 15: NNH
    species[15] = +2.90981142e+00 + 2.22359105e-03 * T - 6.09730507e-07 * T2 +
                  9.10010855e-11 * T3 - 6.26546704e-15 * T4 +
                  2.92696472e+04 * invT;
    // species 16: N2H4
    species[16] = +3.21893892e+00 + 6.16020640e-03 * T - 1.81457383e-06 * T2 +
                  3.05558375e-10 * T3 - 2.21473040e-14 * T4 +
                  1.05061274e+04 * invT;
    // species 17: N2H3
    species[17] = +3.20302281e+00 + 3.99581478e-03 * T - 1.03630985e-06 * T2 +
                  1.47858255e-10 * T3 - 8.69099418e-15 * T4 +
                  2.58689598e+04 * invT;
    // species 18: N2H2
    species[18] = +1.31115117e+00 + 4.50093604e-03 * T - 1.04970608e-06 * T2 +
                  1.20362395e-10 * T3 - 5.43795782e-15 * T4 +
                  2.33863341e+04 * invT;
    // species 19: H2NN
    species[19] = +1.46257631e+00 + 5.05069440e-03 * T - 1.72263169e-06 * T2 +
                  3.19016947e-10 * T3 - 2.44665100e-14 * T4 +
                  3.55918510e+04 * invT;
    // species 20: NH2OH
    species[20] = +3.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
                  1.09482733e-10 * T3 - 5.05449208e-15 * T4 -
                  6.86018419e+03 * invT;
    // species 21: H2NO
    species[21] = +3.36485636e+00 + 3.06653716e-03 * T - 8.29546287e-07 * T2 +
                  1.20954617e-10 * T3 - 7.27991872e-15 * T4 +
                  6.62654717e+03 * invT;
    // species 22: HNOH
    species[22] = +3.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
                  6.38428615e-11 * T3 - 2.96617122e-15 * T4 +
                  1.05780106e+04 * invT;
    // species 23: HNO
    species[23] = +2.58819802e+00 + 2.43854411e-03 * T - 7.64144383e-07 * T2 +
                  1.45553507e-10 * T3 - 1.18962349e-14 * T4 +
                  1.20213574e+04 * invT;
    // species 24: HON
    species[24] = +4.12044656e+00 + 1.14369061e-03 * T - 2.38228454e-07 * T2 +
                  2.58330960e-11 * T3 - 1.14096820e-15 * T4 +
                  2.43643963e+04 * invT;
    // species 25: NO2
    species[25] = +3.65239279e+00 + 2.35816155e-03 * T - 9.15305827e-07 * T2 +
                  1.86345709e-10 * T3 - 1.52778222e-14 * T4 +
                  2.57216137e+03 * invT;
    // species 26: HONO
    species[26] = +4.19966671e+00 + 2.97108669e-03 * T - 9.84682780e-07 * T2 +
                  1.79961547e-10 * T3 - 1.34981812e-14 * T4 -
                  1.08122769e+04 * invT;
    // species 27: HNO2
    species[27] = +2.71886798e+00 + 4.61624734e-03 * T - 1.66974053e-06 * T2 +
                  3.25387973e-10 * T3 - 2.61007468e-14 * T4 -
                  6.61949139e+03 * invT;
    // species 28: NO3
    species[28] = +6.38293838e+00 + 2.71211252e-03 * T - 1.11465927e-06 * T2 +
                  2.37111354e-10 * T3 - 2.03923428e-14 * T4 +
                  6.35473962e+03 * invT;
    // species 29: HONO2
    species[29] = +5.28851491e+00 + 5.12537770e-03 * T - 2.00369527e-06 * T2 +
                  4.13150130e-10 * T3 - 3.47005506e-14 * T4 -
                  1.85463799e+04 * invT;
    // species 30: N2O
    species[30] = +3.61316907e+00 + 2.57985233e-03 * T - 9.90758750e-07 * T2 +
                  2.00126325e-10 * T3 - 1.65266390e-14 * T4 +
                  8.60075126e+03 * invT;
    // species 31: HNO3
    species[31] = +8.03061257e+00 + 2.23184168e-03 * T - 5.74242597e-07 * T2 +
                  7.29029015e-11 * T3 - 3.60974724e-15 * T4 -
                  1.93033764e+04 * invT;
  }
}

// compute the S/R at the given temperature (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real logT = log(T);

  // species with no change across T
  // species 2: H
  species[2] = +2.50000000e+00 * logT - 4.46682850e-01;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +3.53100528e+00 * logT - 1.23660988e-04 * T -
                 2.51499717e-07 * T2 + 8.11768707e-10 * T3 -
                 3.52203088e-13 * T4 + 2.96747038e+00;
    // species 1: H2
    species[1] = +2.34433112e+00 * logT + 7.98052075e-03 * T -
                 9.73907550e-06 * T2 + 6.71906980e-09 * T3 -
                 1.84402940e-12 * T4 + 6.83010238e-01;
    // species 3: O2
    species[3] = +3.78245636e+00 * logT - 2.99673416e-03 * T +
                 4.92365101e-06 * T2 - 3.22709836e-09 * T3 +
                 8.10932092e-13 * T4 + 3.65767573e+00;
    // species 4: O
    species[4] = +3.16826710e+00 * logT - 3.27931884e-03 * T +
                 3.32153198e-06 * T2 - 2.04268875e-09 * T3 +
                 5.28164927e-13 * T4 + 2.05193346e+00;
    // species 5: H2O
    species[5] = +4.19863520e+00 * logT - 2.03640170e-03 * T +
                 3.26017080e-06 * T2 - 1.82930897e-09 * T3 +
                 4.42992000e-13 * T4 - 8.49009010e-01;
    // species 6: OH
    species[6] = +3.99198424e+00 * logT - 2.40106655e-03 * T +
                 2.30832017e-06 * T2 - 1.29305435e-09 * T3 +
                 3.40798755e-13 * T4 - 1.03998477e-01;
    // species 7: OHV
    species[7] = +3.63726600e+00 * logT + 1.85091000e-04 * T -
                 8.38082300e-07 * T2 + 7.95734000e-10 * T3 -
                 2.10786050e-13 * T4 + 1.35886050e+00;
    // species 8: H2O2
    species[8] = +4.31515149e+00 * logT - 8.47390622e-04 * T +
                 8.82021615e-06 * T2 - 7.55876480e-09 * T3 +
                 2.27237539e-12 * T4 + 3.27373319e+00;
    // species 9: HO2
    species[9] = +4.30179807e+00 * logT - 4.74912097e-03 * T +
                 1.05791453e-05 * T2 - 8.09213047e-09 * T3 +
                 2.32306306e-12 * T4 + 3.71666220e+00;
    // species 10: NO
    species[10] = +4.15036687e+00 * logT - 4.08890008e-03 * T +
                  4.69035863e-06 * T2 - 2.50302967e-09 * T3 +
                  5.29356995e-13 * T4 + 2.53971032e+00;
    // species 11: NH3
    species[11] = +3.26650510e+00 * logT + 3.05892867e-03 * T +
                  2.89377611e-07 * T2 + 3.16359137e-10 * T3 -
                  2.25555492e-13 * T4 + 3.58794921e+00;
    // species 12: NH2
    species[12] = +3.97883538e+00 * logT - 5.13888088e-04 * T +
                  1.34218078e-06 * T2 - 3.06277533e-10 * T3 -
                  2.45562788e-14 * T4 + 7.77619668e-01;
    // species 13: NH
    species[13] = +3.44697209e+00 * logT + 5.57847818e-04 * T -
                  1.00144680e-06 * T2 + 9.53176407e-10 * T3 -
                  2.81085710e-13 * T4 + 2.02990852e+00;
    // species 14: N
    species[14] = +2.49976643e+00 * logT + 5.02149594e-07 * T +
                  9.65456055e-10 * T2 - 1.64877543e-12 * T3 +
                  6.85223765e-16 * T4 + 4.19499326e+00;
    // species 15: NNH
    species[15] = +4.09254871e+00 * logT - 2.37173287e-03 * T +
                  5.76556485e-06 * T2 - 3.54361410e-09 * T3 +
                  8.09843950e-13 * T4 + 3.93250587e+00;
    // species 16: N2H4
    species[16] = +9.42542945e-01 * logT + 2.13488271e-02 * T -
                  9.43529430e-06 * T2 + 3.36543623e-09 * T3 -
                  5.77490730e-13 * T4 + 1.75719609e+01;
    // species 17: N2H3
    species[17] = +3.80271862e+00 * logT + 5.52764141e-03 * T +
                  3.42430011e-07 * T2 - 6.67654977e-10 * T3 +
                  1.55361435e-13 * T4 + 5.58213774e+00;
    // species 18: N2H2
    species[18] = +4.91066031e+00 * logT - 1.07791880e-02 * T +
                  1.93258244e-05 * T2 - 1.28833899e-08 * T3 +
                  3.37130335e-12 * T4 + 9.10273396e-02;
    // species 19: H2NN
    species[19] = +3.87707453e+00 * logT - 2.65244519e-03 * T +
                  9.30330875e-06 * T2 - 5.88981610e-09 * T3 +
                  1.34700169e-12 * T4 + 4.23249694e+00;
    // species 20: NH2OH
    species[20] = +3.21016092e+00 * logT + 6.19671676e-03 * T +
                  5.52974740e-06 * T2 - 6.55560873e-09 * T3 +
                  2.20629147e-12 * T4 + 7.93293571e+00;
    // species 21: H2NO
    species[21] = +3.93370869e+00 * logT + 2.21175605e-03 * T +
                  2.93110100e-06 * T2 - 2.24310592e-09 * T3 +
                  5.44590427e-13 * T4 + 4.42022091e+00;
    // species 22: HNOH
    species[22] = +3.95608248e+00 * logT - 3.02611020e-03 * T +
                  1.28437198e-05 * T2 - 1.05215040e-08 * T3 +
                  3.10211435e-12 * T4 + 5.55950983e+00;
    // species 23: HNO
    species[23] = +4.51988078e+00 * logT - 5.42507623e-03 * T +
                  8.51198180e-06 * T2 - 4.95693907e-09 * T3 +
                  1.11190875e-12 * T4 + 1.75618526e+00;
    // species 24: HON
    species[24] = +4.15272450e+00 * logT - 3.87826402e-03 * T +
                  1.02738015e-05 * T2 - 8.30164943e-09 * T3 +
                  2.46841365e-12 * T4 + 4.56636321e+00;
    // species 25: NO2
    species[25] = +3.39100918e+00 * logT + 2.62448348e-03 * T +
                  2.54895153e-06 * T2 - 2.54040164e-09 * T3 +
                  6.99900337e-13 * T4 + 8.57220275e+00;
    // species 26: HONO
    species[26] = +3.49106617e+00 * logT + 6.81116875e-03 * T -
                  6.54715600e-07 * T2 - 7.80657347e-10 * T3 +
                  2.97328837e-13 * T4 + 8.99803804e+00;
    // species 27: HNO2
    species[27] = +2.86816457e+00 * logT + 4.08036347e-03 * T +
                  4.77569627e-06 * T2 - 4.32015637e-09 * T3 +
                  1.14343443e-12 * T4 + 1.07615202e+01;
    // species 28: NO3
    species[28] = +3.09446759e+00 * logT + 1.51014573e-02 * T -
                  6.32242490e-06 * T2 + 1.22412527e-09 * T3 +
                  2.15546043e-14 * T4 + 1.04314685e+01;
    // species 29: HONO2
    species[29] = +1.03437078e+00 * logT + 2.44807579e-02 * T -
                  1.15881143e-05 * T2 + 3.43648500e-09 * T3 -
                  4.10268217e-13 * T4 + 1.98358158e+01;
    // species 30: N2O
    species[30] = +2.49126356e+00 * logT + 9.16224976e-03 * T -
                  4.12423926e-06 * T2 + 1.27763219e-09 * T3 -
                  1.79865446e-13 * T4 + 9.80262335e+00;
    // species 31: HNO3
    species[31] = +1.55975056e+00 * logT + 2.01502169e-02 * T -
                  5.76086480e-06 * T2 - 7.72970767e-10 * T3 +
                  7.93951380e-13 * T4 + 1.77294677e+01;
  } else {
    // species 0: N2
    species[0] = +2.95257637e+00 * logT + 1.39690040e-03 * T -
                 2.46315802e-07 * T2 + 2.62003398e-11 * T3 -
                 1.15188801e-15 * T4 + 5.87188762e+00;
    // species 1: H2
    species[1] = +2.93286575e+00 * logT + 8.26608026e-04 * T -
                 7.32011820e-08 * T2 + 5.13668047e-12 * T3 -
                 1.72201200e-16 * T4 - 1.02432865e+00;
    // species 3: O2
    species[3] = +3.66096065e+00 * logT + 6.56365811e-04 * T -
                 7.05748135e-08 * T2 + 6.85993117e-12 * T3 -
                 3.24783590e-16 * T4 + 3.41536279e+00;
    // species 4: O
    species[4] = +2.54363697e+00 * logT - 2.73162486e-05 * T -
                 2.09514760e-09 * T2 + 1.65160615e-12 * T3 -
                 1.19888423e-16 * T4 + 4.92229457e+00;
    // species 5: H2O
    species[5] = +2.67703890e+00 * logT + 2.97318160e-03 * T -
                 3.86884445e-07 * T2 + 3.14778380e-11 * T3 -
                 1.06724977e-15 * T4 + 6.88255000e+00;
    // species 6: OH
    species[6] = +2.83853033e+00 * logT + 1.10741289e-03 * T -
                 1.47000104e-07 * T2 + 1.40232910e-11 * T3 -
                 6.05724725e-16 * T4 + 5.84494652e+00;
    // species 7: OHV
    species[7] = +2.88273000e+00 * logT + 1.01397430e-03 * T -
                 1.13843850e-07 * T2 + 7.24894333e-12 * T3 -
                 1.28157625e-16 * T4 + 5.59571200e+00;
    // species 8: H2O2
    species[8] = +4.57977305e+00 * logT + 4.05326003e-03 * T -
                 6.49223650e-07 * T2 + 6.60704667e-11 * T3 -
                 2.84921980e-15 * T4 + 6.64970694e-01;
    // species 9: HO2
    species[9] = +4.17228741e+00 * logT + 1.88117627e-03 * T -
                 1.73138643e-07 * T2 + 6.48858497e-12 * T3 +
                 4.40642262e-17 * T4 + 2.95767672e+00;
    // species 10: NO
    species[10] = +2.79462839e+00 * logT + 2.12260586e-03 * T -
                  5.59684855e-07 * T2 + 9.31736727e-11 * T3 -
                  6.71563407e-15 * T4 + 8.88322674e+00;
    // species 11: NH3
    species[11] = +1.07096958e+00 * logT + 8.75466951e-03 * T -
                  1.66762710e-06 * T2 + 1.57338597e-10 * T3 -
                  2.83906428e-15 * T4 + 1.49517392e+01;
    // species 12: NH2
    species[12] = +2.62839610e+00 * logT + 3.44379888e-03 * T -
                  5.43031825e-07 * T2 + 5.02380127e-11 * T3 -
                  1.14855820e-15 * T4 + 7.65372613e+00;
    // species 13: NH
    species[13] = +2.95100955e+00 * logT + 9.09994439e-04 * T -
                  4.17791220e-08 * T2 - 1.72437342e-11 * T3 +
                  2.84953590e-15 * T4 + 4.83056694e+00;
    // species 14: N
    species[14] = +2.41604245e+00 * logT + 1.74663766e-04 * T -
                  5.94322810e-08 * T2 + 1.00616685e-11 * T3 -
                  5.08150398e-16 * T4 + 4.64905706e+00;
    // species 15: NNH
    species[15] = +2.90981142e+00 * logT + 4.44718211e-03 * T -
                  9.14595760e-07 * T2 + 1.21334781e-10 * T3 -
                  7.83183380e-15 * T4 + 9.11653812e+00;
    // species 16: N2H4
    species[16] = +3.21893892e+00 * logT + 1.23204128e-02 * T -
                  2.72186075e-06 * T2 + 4.07411167e-10 * T3 -
                  2.76841300e-14 * T4 + 6.57037382e+00;
    // species 17: N2H3
    species[17] = +3.20302281e+00 * logT + 7.99162955e-03 * T -
                  1.55446477e-06 * T2 + 1.97144339e-10 * T3 -
                  1.08637427e-14 * T4 + 8.45902214e+00;
    // species 18: N2H2
    species[18] = +1.31115117e+00 * logT + 9.00187208e-03 * T -
                  1.57455912e-06 * T2 + 1.60483194e-10 * T3 -
                  6.79744727e-15 * T4 + 1.64091067e+01;
    // species 19: H2NN
    species[19] = +1.46257631e+00 * logT + 1.01013888e-02 * T -
                  2.58394753e-06 * T2 + 4.25355930e-10 * T3 -
                  3.05831375e-14 * T4 + 1.51070949e+01;
    // species 20: NH2OH
    species[20] = +3.88112502e+00 * logT + 8.15708448e-03 * T -
                  1.41307788e-06 * T2 + 1.45976978e-10 * T3 -
                  6.31811510e-15 * T4 + 3.79156136e+00;
    // species 21: H2NO
    species[21] = +3.36485636e+00 * logT + 6.13307432e-03 * T -
                  1.24431943e-06 * T2 + 1.61272822e-10 * T3 -
                  9.09989840e-15 * T4 + 6.75312730e+00;
    // species 22: HNOH
    species[22] = +3.98321933e+00 * logT + 4.88846374e-03 * T -
                  8.25433185e-07 * T2 + 8.51238153e-11 * T3 -
                  3.70771402e-15 * T4 + 3.62582838e+00;
    // species 23: HNO
    species[23] = +2.58819802e+00 * logT + 4.87708822e-03 * T -
                  1.14621658e-06 * T2 + 1.94071343e-10 * T3 -
                  1.48702936e-14 * T4 + 1.04315796e+01;
    // species 24: HON
    species[24] = +4.12044656e+00 * logT + 2.28738122e-03 * T -
                  3.57342681e-07 * T2 + 3.44441280e-11 * T3 -
                  1.42621025e-15 * T4 + 3.38857665e+00;
    // species 25: NO2
    species[25] = +3.65239279e+00 * logT + 4.71632310e-03 * T -
                  1.37295874e-06 * T2 + 2.48460945e-10 * T3 -
                  1.90972777e-14 * T4 + 6.52683440e+00;
    // species 26: HONO
    species[26] = +4.19966671e+00 * logT + 5.94217338e-03 * T -
                  1.47702417e-06 * T2 + 2.39948729e-10 * T3 -
                  1.68727265e-14 * T4 + 5.08809833e+00;
    // species 27: HNO2
    species[27] = +2.71886798e+00 * logT + 9.23249468e-03 * T -
                  2.50461080e-06 * T2 + 4.33850630e-10 * T3 -
                  3.26259335e-14 * T4 + 1.03430537e+01;
    // species 28: NO3
    species[28] = +6.38293838e+00 * logT + 5.42422503e-03 * T -
                  1.67198890e-06 * T2 + 3.16148472e-10 * T3 -
                  2.54904285e-14 * T4 - 6.30266486e+00;
    // species 29: HONO2
    species[29] = +5.28851491e+00 * logT + 1.02507554e-02 * T -
                  3.00554290e-06 * T2 + 5.50866840e-10 * T3 -
                  4.33756882e-14 * T4 - 1.38461402e+00;
    // species 30: N2O
    species[30] = +3.61316907e+00 * logT + 5.15970465e-03 * T -
                  1.48613812e-06 * T2 + 2.66835099e-10 * T3 -
                  2.06582988e-14 * T4 + 4.26880857e+00;
    // species 31: HNO3
    species[31] = +8.03061257e+00 * logT + 4.46368336e-03 * T -
                  8.61363895e-07 * T2 + 9.72038687e-11 * T3 -
                  4.51218405e-15 * T4 - 1.62543421e+01;
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;

  // species with no change across T
  // species 2: H
  species[2] = 0.0;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = -1.23660988e-04 - 1.00599887e-06 * T + 7.30591836e-09 * T2 -
                 5.63524940e-12 * T3;
    // species 1: H2
    species[1] = +7.98052075e-03 - 3.89563020e-05 * T + 6.04716282e-08 * T2 -
                 2.95044704e-11 * T3;
    // species 3: O2
    species[3] = -2.99673416e-03 + 1.96946040e-05 * T - 2.90438853e-08 * T2 +
                 1.29749135e-11 * T3;
    // species 4: O
    species[4] = -3.27931884e-03 + 1.32861279e-05 * T - 1.83841987e-08 * T2 +
                 8.45063884e-12 * T3;
    // species 5: H2O
    species[5] = -2.03640170e-03 + 1.30406832e-05 * T - 1.64637807e-08 * T2 +
                 7.08787200e-12 * T3;
    // species 6: OH
    species[6] = -2.40106655e-03 + 9.23328066e-06 * T - 1.16374892e-08 * T2 +
                 5.45278008e-12 * T3;
    // species 7: OHV
    species[7] = +1.85091000e-04 - 3.35232920e-06 * T + 7.16160600e-09 * T2 -
                 3.37257680e-12 * T3;
    // species 8: H2O2
    species[8] = -8.47390622e-04 + 3.52808646e-05 * T - 6.80288832e-08 * T2 +
                 3.63580063e-11 * T3;
    // species 9: HO2
    species[9] = -4.74912097e-03 + 4.23165810e-05 * T - 7.28291742e-08 * T2 +
                 3.71690090e-11 * T3;
    // species 10: NO
    species[10] = -4.08890008e-03 + 1.87614345e-05 * T - 2.25272670e-08 * T2 +
                  8.46971192e-12 * T3;
    // species 11: NH3
    species[11] = +3.05892867e-03 + 1.15751045e-06 * T + 2.84723224e-09 * T2 -
                  3.60888788e-12 * T3;
    // species 12: NH2
    species[12] = -5.13888088e-04 + 5.36872312e-06 * T - 2.75649780e-09 * T2 -
                  3.92900461e-13 * T3;
    // species 13: NH
    species[13] = +5.57847818e-04 - 4.00578720e-06 * T + 8.57858766e-09 * T2 -
                  4.49737136e-12 * T3;
    // species 14: N
    species[14] = +5.02149594e-07 + 3.86182422e-09 * T - 1.48389789e-11 * T2 +
                  1.09635802e-14 * T3;
    // species 15: NNH
    species[15] = -2.37173287e-03 + 2.30622594e-05 * T - 3.18925269e-08 * T2 +
                  1.29575032e-11 * T3;
    // species 16: N2H4
    species[16] = +2.13488271e-02 - 3.77411772e-05 * T + 3.02889261e-08 * T2 -
                  9.23985168e-12 * T3;
    // species 17: N2H3
    species[17] = +5.52764141e-03 + 1.36972004e-06 * T - 6.00889479e-09 * T2 +
                  2.48578297e-12 * T3;
    // species 18: N2H2
    species[18] = -1.07791880e-02 + 7.73032978e-05 * T - 1.15950509e-07 * T2 +
                  5.39408536e-11 * T3;
    // species 19: H2NN
    species[19] = -2.65244519e-03 + 3.72132350e-05 * T - 5.30083449e-08 * T2 +
                  2.15520270e-11 * T3;
    // species 20: NH2OH
    species[20] = +6.19671676e-03 + 2.21189896e-05 * T - 5.90004786e-08 * T2 +
                  3.53006636e-11 * T3;
    // species 21: H2NO
    species[21] = +2.21175605e-03 + 1.17244040e-05 * T - 2.01879533e-08 * T2 +
                  8.71344684e-12 * T3;
    // species 22: HNOH
    species[22] = -3.02611020e-03 + 5.13748792e-05 * T - 9.46935360e-08 * T2 +
                  4.96338296e-11 * T3;
    // species 23: HNO
    species[23] = -5.42507623e-03 + 3.40479272e-05 * T - 4.46124516e-08 * T2 +
                  1.77905399e-11 * T3;
    // species 24: HON
    species[24] = -3.87826402e-03 + 4.10952062e-05 * T - 7.47148449e-08 * T2 +
                  3.94946185e-11 * T3;
    // species 25: NO2
    species[25] = +2.62448348e-03 + 1.01958061e-05 * T - 2.28636148e-08 * T2 +
                  1.11984054e-11 * T3;
    // species 26: HONO
    species[26] = +6.81116875e-03 - 2.61886240e-06 * T - 7.02591612e-09 * T2 +
                  4.75726140e-12 * T3;
    // species 27: HNO2
    species[27] = +4.08036347e-03 + 1.91027851e-05 * T - 3.88814073e-08 * T2 +
                  1.82949509e-11 * T3;
    // species 28: NO3
    species[28] = +1.51014573e-02 - 2.52896996e-05 * T + 1.10171274e-08 * T2 +
                  3.44873669e-13 * T3;
    // species 29: HONO2
    species[29] = +2.44807579e-02 - 4.63524570e-05 * T + 3.09283650e-08 * T2 -
                  6.56429148e-12 * T3;
    // species 30: N2O
    species[30] = +9.16224976e-03 - 1.64969571e-05 * T + 1.14986897e-08 * T2 -
                  2.87784714e-12 * T3;
    // species 31: HNO3
    species[31] = +2.01502169e-02 - 2.30434592e-05 * T - 6.95673690e-09 * T2 +
                  1.27032221e-11 * T3;
  } else {
    // species 0: N2
    species[0] = +1.39690040e-03 - 9.85263206e-07 * T + 2.35803059e-10 * T2 -
                 1.84302082e-14 * T3;
    // species 1: H2
    species[1] = +8.26608026e-04 - 2.92804728e-07 * T + 4.62301242e-11 * T2 -
                 2.75521920e-15 * T3;
    // species 3: O2
    species[3] = +6.56365811e-04 - 2.82299254e-07 * T + 6.17393805e-11 * T2 -
                 5.19653744e-15 * T3;
    // species 4: O
    species[4] = -2.73162486e-05 - 8.38059040e-09 * T + 1.48644553e-11 * T2 -
                 1.91821478e-15 * T3;
    // species 5: H2O
    species[5] = +2.97318160e-03 - 1.54753778e-06 * T + 2.83300542e-10 * T2 -
                 1.70759964e-14 * T3;
    // species 6: OH
    species[6] = +1.10741289e-03 - 5.88000418e-07 * T + 1.26209619e-10 * T2 -
                 9.69159560e-15 * T3;
    // species 7: OHV
    species[7] = +1.01397430e-03 - 4.55375400e-07 * T + 6.52404900e-11 * T2 -
                 2.05052200e-15 * T3;
    // species 8: H2O2
    species[8] = +4.05326003e-03 - 2.59689460e-06 * T + 5.94634200e-10 * T2 -
                 4.55875168e-14 * T3;
    // species 9: HO2
    species[9] = +1.88117627e-03 - 6.92554572e-07 * T + 5.83972647e-11 * T2 +
                 7.05027620e-16 * T3;
    // species 10: NO
    species[10] = +2.12260586e-03 - 2.23873942e-06 * T + 8.38563054e-10 * T2 -
                  1.07450145e-13 * T3;
    // species 11: NH3
    species[11] = +8.75466951e-03 - 6.67050838e-06 * T + 1.41604737e-09 * T2 -
                  4.54250284e-14 * T3;
    // species 12: NH2
    species[12] = +3.44379888e-03 - 2.17212730e-06 * T + 4.52142114e-10 * T2 -
                  1.83769312e-14 * T3;
    // species 13: NH
    species[13] = +9.09994439e-04 - 1.67116488e-07 * T - 1.55193608e-10 * T2 +
                  4.55925744e-14 * T3;
    // species 14: N
    species[14] = +1.74663766e-04 - 2.37729124e-07 * T + 9.05550162e-11 * T2 -
                  8.13040636e-15 * T3;
    // species 15: NNH
    species[15] = +4.44718211e-03 - 3.65838304e-06 * T + 1.09201303e-09 * T2 -
                  1.25309341e-13 * T3;
    // species 16: N2H4
    species[16] = +1.23204128e-02 - 1.08874430e-05 * T + 3.66670050e-09 * T2 -
                  4.42946080e-13 * T3;
    // species 17: N2H3
    species[17] = +7.99162955e-03 - 6.21785910e-06 * T + 1.77429905e-09 * T2 -
                  1.73819884e-13 * T3;
    // species 18: N2H2
    species[18] = +9.00187208e-03 - 6.29823648e-06 * T + 1.44434874e-09 * T2 -
                  1.08759156e-13 * T3;
    // species 19: H2NN
    species[19] = +1.01013888e-02 - 1.03357901e-05 * T + 3.82820337e-09 * T2 -
                  4.89330200e-13 * T3;
    // species 20: NH2OH
    species[20] = +8.15708448e-03 - 5.65231152e-06 * T + 1.31379280e-09 * T2 -
                  1.01089842e-13 * T3;
    // species 21: H2NO
    species[21] = +6.13307432e-03 - 4.97727772e-06 * T + 1.45145540e-09 * T2 -
                  1.45598374e-13 * T3;
    // species 22: HNOH
    species[22] = +4.88846374e-03 - 3.30173274e-06 * T + 7.66114338e-10 * T2 -
                  5.93234244e-14 * T3;
    // species 23: HNO
    species[23] = +4.87708822e-03 - 4.58486630e-06 * T + 1.74664208e-09 * T2 -
                  2.37924697e-13 * T3;
    // species 24: HON
    species[24] = +2.28738122e-03 - 1.42937072e-06 * T + 3.09997152e-10 * T2 -
                  2.28193640e-14 * T3;
    // species 25: NO2
    species[25] = +4.71632310e-03 - 5.49183496e-06 * T + 2.23614850e-09 * T2 -
                  3.05556443e-13 * T3;
    // species 26: HONO
    species[26] = +5.94217338e-03 - 5.90809668e-06 * T + 2.15953856e-09 * T2 -
                  2.69963624e-13 * T3;
    // species 27: HNO2
    species[27] = +9.23249468e-03 - 1.00184432e-05 * T + 3.90465567e-09 * T2 -
                  5.22014936e-13 * T3;
    // species 28: NO3
    species[28] = +5.42422503e-03 - 6.68795560e-06 * T + 2.84533625e-09 * T2 -
                  4.07846856e-13 * T3;
    // species 29: HONO2
    species[29] = +1.02507554e-02 - 1.20221716e-05 * T + 4.95780156e-09 * T2 -
                  6.94011012e-13 * T3;
    // species 30: N2O
    species[30] = +5.15970465e-03 - 5.94455250e-06 * T + 2.40151589e-09 * T2 -
                  3.30532781e-13 * T3;
    // species 31: HNO3
    species[31] = +4.46368336e-03 - 3.44545558e-06 * T + 8.74834818e-10 * T2 -
                  7.21949448e-14 * T3;
  }
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  amrex::Real result = 0;
  amrex::Real cpor[32]; //  temporary storage
  cp_R(cpor, T);

  // perform dot product
  for (int id = 0; id < 32; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0.0;

  // compute Cp/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with no change across T
  // species 2: H
  result += y[2] * (+2.50000000e+00) * 0.9920634920634921;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result += y[0] *
              (+3.53100528e+00 - 1.23660988e-04 * T - 5.02999433e-07 * T2 +
               2.43530612e-09 * T3 - 1.40881235e-12 * T4) *
              0.0356964374955379;
    // species 1: H2
    result += y[1] *
              (+2.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
               2.01572094e-08 * T3 - 7.37611761e-12 * T4) *
              0.4960317460317460;
    // species 3: O2
    result += y[3] *
              (+3.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
               9.68129509e-09 * T3 + 3.24372837e-12 * T4) *
              0.0312519532470779;
    // species 4: O
    result += y[4] *
              (+3.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
               6.12806624e-09 * T3 + 2.11265971e-12 * T4) *
              0.0625039064941559;
    // species 5: H2O
    result += y[5] *
              (+4.19863520e+00 - 2.03640170e-03 * T + 6.52034160e-06 * T2 -
               5.48792690e-09 * T3 + 1.77196800e-12 * T4) *
              0.0555092978073827;
    // species 6: OH
    result += y[6] *
              (+3.99198424e+00 - 2.40106655e-03 * T + 4.61664033e-06 * T2 -
               3.87916306e-09 * T3 + 1.36319502e-12 * T4) *
              0.0587993179279120;
    // species 7: OHV
    result += y[7] *
              (+3.63726600e+00 + 1.85091000e-04 * T - 1.67616460e-06 * T2 +
               2.38720200e-09 * T3 - 8.43144200e-13 * T4) *
              0.0587993179279120;
    // species 8: H2O2
    result += y[8] *
              (+4.31515149e+00 - 8.47390622e-04 * T + 1.76404323e-05 * T2 -
               2.26762944e-08 * T3 + 9.08950158e-12 * T4) *
              0.0293996589639560;
    // species 9: HO2
    result += y[9] *
              (+4.30179807e+00 - 4.74912097e-03 * T + 2.11582905e-05 * T2 -
               2.42763914e-08 * T3 + 9.29225225e-12 * T4) *
              0.0302975216627280;
    // species 10: NO
    result += y[10] *
              (+4.15036687e+00 - 4.08890008e-03 * T + 9.38071726e-06 * T2 -
               7.50908901e-09 * T3 + 2.11742798e-12 * T4) *
              0.0333266679997334;
    // species 11: NH3
    result += y[11] *
              (+3.26650510e+00 + 3.05892867e-03 * T + 5.78755223e-07 * T2 +
               9.49077412e-10 * T3 - 9.02221969e-13 * T4) *
              0.0587164582232400;
    // species 12: NH2
    result += y[12] *
              (+3.97883538e+00 - 5.13888088e-04 * T + 2.68436156e-06 * T2 -
               9.18832600e-10 * T3 - 9.82251152e-14 * T4) *
              0.0624102852150034;
    // species 13: NH
    result += y[13] *
              (+3.44697209e+00 + 5.57847818e-04 * T - 2.00289360e-06 * T2 +
               2.85952922e-09 * T3 - 1.12434284e-12 * T4) *
              0.0666000666000666;
    // species 14: N
    result += y[14] *
              (+2.49976643e+00 + 5.02149594e-07 * T + 1.93091211e-09 * T2 -
               4.94632629e-12 * T3 + 2.74089506e-15 * T4) *
              0.0713928749910759;
    // species 15: NNH
    result += y[15] *
              (+4.09254871e+00 - 2.37173287e-03 * T + 1.15311297e-05 * T2 -
               1.06308423e-08 * T3 + 3.23937580e-12 * T4) *
              0.0344566191165323;
    // species 16: N2H4
    result += y[16] *
              (+9.42542945e-01 + 2.13488271e-02 * T - 1.88705886e-05 * T2 +
               1.00963087e-08 * T3 - 2.30996292e-12 * T4) *
              0.0312051426075017;
    // species 17: N2H3
    result += y[17] *
              (+3.80271862e+00 + 5.52764141e-03 * T + 6.84860021e-07 * T2 -
               2.00296493e-09 * T3 + 6.21445742e-13 * T4) *
              0.0322185707842000;
    // species 18: N2H2
    result += y[18] *
              (+4.91066031e+00 - 1.07791880e-02 * T + 3.86516489e-05 * T2 -
               3.86501698e-08 * T3 + 1.34852134e-11 * T4) *
              0.0333000333000333;
    // species 19: H2NN
    result += y[19] *
              (+3.87707453e+00 - 2.65244519e-03 * T + 1.86066175e-05 * T2 -
               1.76694483e-08 * T3 + 5.38800676e-12 * T4) *
              0.0333000333000333;
    // species 20: NH2OH
    result += y[20] *
              (+3.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
               1.96668262e-08 * T3 + 8.82516590e-12 * T4) *
              0.0302755071147442;
    // species 21: H2NO
    result += y[21] *
              (+3.93370869e+00 + 2.21175605e-03 * T + 5.86220201e-06 * T2 -
               6.72931776e-09 * T3 + 2.17836171e-12 * T4) *
              0.0312285303853601;
    // species 22: HNOH
    result += y[22] *
              (+3.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
               3.15645120e-08 * T3 + 1.24084574e-11 * T4) *
              0.0312285303853601;
    // species 23: HNO
    result += y[23] *
              (+4.51988078e+00 - 5.42507623e-03 * T + 1.70239636e-05 * T2 -
               1.48708172e-08 * T3 + 4.44763498e-12 * T4) *
              0.0322435029341588;
    // species 24: HON
    result += y[24] *
              (+4.15272450e+00 - 3.87826402e-03 * T + 2.05476031e-05 * T2 -
               2.49049483e-08 * T3 + 9.87365462e-12 * T4) *
              0.0322435029341588;
    // species 25: NO2
    result += y[25] *
              (+3.39100918e+00 + 2.62448348e-03 * T + 5.09790306e-06 * T2 -
               7.62120493e-09 * T3 + 2.79960135e-12 * T4) *
              0.0217367677426367;
    // species 26: HONO
    result += y[26] *
              (+3.49106617e+00 + 6.81116875e-03 * T - 1.30943120e-06 * T2 -
               2.34197204e-09 * T3 + 1.18931535e-12 * T4) *
              0.0212707123561568;
    // species 27: HNO2
    result += y[27] *
              (+2.86816457e+00 + 4.08036347e-03 * T + 9.55139253e-06 * T2 -
               1.29604691e-08 * T3 + 4.57373772e-12 * T4) *
              0.0212707123561568;
    // species 28: NO3
    result += y[28] *
              (+3.09446759e+00 + 1.51014573e-02 * T - 1.26448498e-05 * T2 +
               3.67237581e-09 * T3 + 8.62184172e-14 * T4) *
              0.0161279917424682;
    // species 29: HONO2
    result += y[29] *
              (+1.03437078e+00 + 2.44807579e-02 * T - 2.31762285e-05 * T2 +
               1.03094550e-08 * T3 - 1.64107287e-12 * T4) *
              0.0158699930172031;
    // species 30: N2O
    result += y[30] *
              (+2.49126356e+00 + 9.16224976e-03 * T - 8.24847853e-06 * T2 +
               3.83289657e-09 * T3 - 7.19461784e-13 * T4) *
              0.0227205598345943;
    // species 31: HNO3
    result += y[31] *
              (+1.55975056e+00 + 2.01502169e-02 * T - 1.15217296e-05 * T2 -
               2.31891230e-09 * T3 + 3.17580552e-12 * T4) *
              0.0158699930172031;
  } else {
    // species 0: N2
    result += y[0] *
              (+2.95257637e+00 + 1.39690040e-03 * T - 4.92631603e-07 * T2 +
               7.86010195e-11 * T3 - 4.60755204e-15 * T4) *
              0.0356964374955379;
    // species 1: H2
    result += y[1] *
              (+2.93286575e+00 + 8.26608026e-04 * T - 1.46402364e-07 * T2 +
               1.54100414e-11 * T3 - 6.88804800e-16 * T4) *
              0.4960317460317460;
    // species 3: O2
    result += y[3] *
              (+3.66096065e+00 + 6.56365811e-04 * T - 1.41149627e-07 * T2 +
               2.05797935e-11 * T3 - 1.29913436e-15 * T4) *
              0.0312519532470779;
    // species 4: O
    result += y[4] *
              (+2.54363697e+00 - 2.73162486e-05 * T - 4.19029520e-09 * T2 +
               4.95481845e-12 * T3 - 4.79553694e-16 * T4) *
              0.0625039064941559;
    // species 5: H2O
    result += y[5] *
              (+2.67703890e+00 + 2.97318160e-03 * T - 7.73768890e-07 * T2 +
               9.44335140e-11 * T3 - 4.26899910e-15 * T4) *
              0.0555092978073827;
    // species 6: OH
    result += y[6] *
              (+2.83853033e+00 + 1.10741289e-03 * T - 2.94000209e-07 * T2 +
               4.20698729e-11 * T3 - 2.42289890e-15 * T4) *
              0.0587993179279120;
    // species 7: OHV
    result += y[7] *
              (+2.88273000e+00 + 1.01397430e-03 * T - 2.27687700e-07 * T2 +
               2.17468300e-11 * T3 - 5.12630500e-16 * T4) *
              0.0587993179279120;
    // species 8: H2O2
    result += y[8] *
              (+4.57977305e+00 + 4.05326003e-03 * T - 1.29844730e-06 * T2 +
               1.98211400e-10 * T3 - 1.13968792e-14 * T4) *
              0.0293996589639560;
    // species 9: HO2
    result += y[9] *
              (+4.17228741e+00 + 1.88117627e-03 * T - 3.46277286e-07 * T2 +
               1.94657549e-11 * T3 + 1.76256905e-16 * T4) *
              0.0302975216627280;
    // species 10: NO
    result += y[10] *
              (+2.79462839e+00 + 2.12260586e-03 * T - 1.11936971e-06 * T2 +
               2.79521018e-10 * T3 - 2.68625363e-14 * T4) *
              0.0333266679997334;
    // species 11: NH3
    result += y[11] *
              (+1.07096958e+00 + 8.75466951e-03 * T - 3.33525419e-06 * T2 +
               4.72015791e-10 * T3 - 1.13562571e-14 * T4) *
              0.0587164582232400;
    // species 12: NH2
    result += y[12] *
              (+2.62839610e+00 + 3.44379888e-03 * T - 1.08606365e-06 * T2 +
               1.50714038e-10 * T3 - 4.59423280e-15 * T4) *
              0.0624102852150034;
    // species 13: NH
    result += y[13] *
              (+2.95100955e+00 + 9.09994439e-04 * T - 8.35582439e-08 * T2 -
               5.17312027e-11 * T3 + 1.13981436e-14 * T4) *
              0.0666000666000666;
    // species 14: N
    result += y[14] *
              (+2.41604245e+00 + 1.74663766e-04 * T - 1.18864562e-07 * T2 +
               3.01850054e-11 * T3 - 2.03260159e-15 * T4) *
              0.0713928749910759;
    // species 15: NNH
    result += y[15] *
              (+2.90981142e+00 + 4.44718211e-03 * T - 1.82919152e-06 * T2 +
               3.64004342e-10 * T3 - 3.13273352e-14 * T4) *
              0.0344566191165323;
    // species 16: N2H4
    result += y[16] *
              (+3.21893892e+00 + 1.23204128e-02 * T - 5.44372150e-06 * T2 +
               1.22223350e-09 * T3 - 1.10736520e-13 * T4) *
              0.0312051426075017;
    // species 17: N2H3
    result += y[17] *
              (+3.20302281e+00 + 7.99162955e-03 * T - 3.10892955e-06 * T2 +
               5.91433018e-10 * T3 - 4.34549709e-14 * T4) *
              0.0322185707842000;
    // species 18: N2H2
    result += y[18] *
              (+1.31115117e+00 + 9.00187208e-03 * T - 3.14911824e-06 * T2 +
               4.81449581e-10 * T3 - 2.71897891e-14 * T4) *
              0.0333000333000333;
    // species 19: H2NN
    result += y[19] *
              (+1.46257631e+00 + 1.01013888e-02 * T - 5.16789506e-06 * T2 +
               1.27606779e-09 * T3 - 1.22332550e-13 * T4) *
              0.0333000333000333;
    // species 20: NH2OH
    result += y[20] *
              (+3.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
               4.37930933e-10 * T3 - 2.52724604e-14 * T4) *
              0.0302755071147442;
    // species 21: H2NO
    result += y[21] *
              (+3.36485636e+00 + 6.13307432e-03 * T - 2.48863886e-06 * T2 +
               4.83818467e-10 * T3 - 3.63995936e-14 * T4) *
              0.0312285303853601;
    // species 22: HNOH
    result += y[22] *
              (+3.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
               2.55371446e-10 * T3 - 1.48308561e-14 * T4) *
              0.0312285303853601;
    // species 23: HNO
    result += y[23] *
              (+2.58819802e+00 + 4.87708822e-03 * T - 2.29243315e-06 * T2 +
               5.82214028e-10 * T3 - 5.94811743e-14 * T4) *
              0.0322435029341588;
    // species 24: HON
    result += y[24] *
              (+4.12044656e+00 + 2.28738122e-03 * T - 7.14685362e-07 * T2 +
               1.03332384e-10 * T3 - 5.70484100e-15 * T4) *
              0.0322435029341588;
    // species 25: NO2
    result += y[25] *
              (+3.65239279e+00 + 4.71632310e-03 * T - 2.74591748e-06 * T2 +
               7.45382834e-10 * T3 - 7.63891108e-14 * T4) *
              0.0217367677426367;
    // species 26: HONO
    result += y[26] *
              (+4.19966671e+00 + 5.94217338e-03 * T - 2.95404834e-06 * T2 +
               7.19846187e-10 * T3 - 6.74909061e-14 * T4) *
              0.0212707123561568;
    // species 27: HNO2
    result += y[27] *
              (+2.71886798e+00 + 9.23249468e-03 * T - 5.00922160e-06 * T2 +
               1.30155189e-09 * T3 - 1.30503734e-13 * T4) *
              0.0212707123561568;
    // species 28: NO3
    result += y[28] *
              (+6.38293838e+00 + 5.42422503e-03 * T - 3.34397780e-06 * T2 +
               9.48445417e-10 * T3 - 1.01961714e-13 * T4) *
              0.0161279917424682;
    // species 29: HONO2
    result += y[29] *
              (+5.28851491e+00 + 1.02507554e-02 * T - 6.01108580e-06 * T2 +
               1.65260052e-09 * T3 - 1.73502753e-13 * T4) *
              0.0158699930172031;
    // species 30: N2O
    result += y[30] *
              (+3.61316907e+00 + 5.15970465e-03 * T - 2.97227625e-06 * T2 +
               8.00505298e-10 * T3 - 8.26331952e-14 * T4) *
              0.0227205598345943;
    // species 31: HNO3
    result += y[31] *
              (+8.03061257e+00 + 4.46368336e-03 * T - 1.72272779e-06 * T2 +
               2.91611606e-10 * T3 - 1.80487362e-14 * T4) *
              0.0158699930172031;
  }

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  amrex::Real result = 0;
  amrex::Real cvor[32]; //  temporary storage
  cv_R(cvor, T);

  // perform dot product
  for (int id = 0; id < 32; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0.0;
  // compute Cv/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with no change across T
  // species 2: H
  result += y[2] * (+1.50000000e+00) * 0.9920634920634921;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result += y[0] *
              (+2.53100528e+00 - 1.23660988e-04 * T - 5.02999433e-07 * T2 +
               2.43530612e-09 * T3 - 1.40881235e-12 * T4) *
              0.0356964374955379;
    // species 1: H2
    result += y[1] *
              (+1.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
               2.01572094e-08 * T3 - 7.37611761e-12 * T4) *
              0.4960317460317460;
    // species 3: O2
    result += y[3] *
              (+2.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
               9.68129509e-09 * T3 + 3.24372837e-12 * T4) *
              0.0312519532470779;
    // species 4: O
    result += y[4] *
              (+2.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
               6.12806624e-09 * T3 + 2.11265971e-12 * T4) *
              0.0625039064941559;
    // species 5: H2O
    result += y[5] *
              (+3.19863520e+00 - 2.03640170e-03 * T + 6.52034160e-06 * T2 -
               5.48792690e-09 * T3 + 1.77196800e-12 * T4) *
              0.0555092978073827;
    // species 6: OH
    result += y[6] *
              (+2.99198424e+00 - 2.40106655e-03 * T + 4.61664033e-06 * T2 -
               3.87916306e-09 * T3 + 1.36319502e-12 * T4) *
              0.0587993179279120;
    // species 7: OHV
    result += y[7] *
              (+2.63726600e+00 + 1.85091000e-04 * T - 1.67616460e-06 * T2 +
               2.38720200e-09 * T3 - 8.43144200e-13 * T4) *
              0.0587993179279120;
    // species 8: H2O2
    result += y[8] *
              (+3.31515149e+00 - 8.47390622e-04 * T + 1.76404323e-05 * T2 -
               2.26762944e-08 * T3 + 9.08950158e-12 * T4) *
              0.0293996589639560;
    // species 9: HO2
    result += y[9] *
              (+3.30179807e+00 - 4.74912097e-03 * T + 2.11582905e-05 * T2 -
               2.42763914e-08 * T3 + 9.29225225e-12 * T4) *
              0.0302975216627280;
    // species 10: NO
    result += y[10] *
              (+3.15036687e+00 - 4.08890008e-03 * T + 9.38071726e-06 * T2 -
               7.50908901e-09 * T3 + 2.11742798e-12 * T4) *
              0.0333266679997334;
    // species 11: NH3
    result += y[11] *
              (+2.26650510e+00 + 3.05892867e-03 * T + 5.78755223e-07 * T2 +
               9.49077412e-10 * T3 - 9.02221969e-13 * T4) *
              0.0587164582232400;
    // species 12: NH2
    result += y[12] *
              (+2.97883538e+00 - 5.13888088e-04 * T + 2.68436156e-06 * T2 -
               9.18832600e-10 * T3 - 9.82251152e-14 * T4) *
              0.0624102852150034;
    // species 13: NH
    result += y[13] *
              (+2.44697209e+00 + 5.57847818e-04 * T - 2.00289360e-06 * T2 +
               2.85952922e-09 * T3 - 1.12434284e-12 * T4) *
              0.0666000666000666;
    // species 14: N
    result += y[14] *
              (+1.49976643e+00 + 5.02149594e-07 * T + 1.93091211e-09 * T2 -
               4.94632629e-12 * T3 + 2.74089506e-15 * T4) *
              0.0713928749910759;
    // species 15: NNH
    result += y[15] *
              (+3.09254871e+00 - 2.37173287e-03 * T + 1.15311297e-05 * T2 -
               1.06308423e-08 * T3 + 3.23937580e-12 * T4) *
              0.0344566191165323;
    // species 16: N2H4
    result += y[16] *
              (-5.74570550e-02 + 2.13488271e-02 * T - 1.88705886e-05 * T2 +
               1.00963087e-08 * T3 - 2.30996292e-12 * T4) *
              0.0312051426075017;
    // species 17: N2H3
    result += y[17] *
              (+2.80271862e+00 + 5.52764141e-03 * T + 6.84860021e-07 * T2 -
               2.00296493e-09 * T3 + 6.21445742e-13 * T4) *
              0.0322185707842000;
    // species 18: N2H2
    result += y[18] *
              (+3.91066031e+00 - 1.07791880e-02 * T + 3.86516489e-05 * T2 -
               3.86501698e-08 * T3 + 1.34852134e-11 * T4) *
              0.0333000333000333;
    // species 19: H2NN
    result += y[19] *
              (+2.87707453e+00 - 2.65244519e-03 * T + 1.86066175e-05 * T2 -
               1.76694483e-08 * T3 + 5.38800676e-12 * T4) *
              0.0333000333000333;
    // species 20: NH2OH
    result += y[20] *
              (+2.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
               1.96668262e-08 * T3 + 8.82516590e-12 * T4) *
              0.0302755071147442;
    // species 21: H2NO
    result += y[21] *
              (+2.93370869e+00 + 2.21175605e-03 * T + 5.86220201e-06 * T2 -
               6.72931776e-09 * T3 + 2.17836171e-12 * T4) *
              0.0312285303853601;
    // species 22: HNOH
    result += y[22] *
              (+2.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
               3.15645120e-08 * T3 + 1.24084574e-11 * T4) *
              0.0312285303853601;
    // species 23: HNO
    result += y[23] *
              (+3.51988078e+00 - 5.42507623e-03 * T + 1.70239636e-05 * T2 -
               1.48708172e-08 * T3 + 4.44763498e-12 * T4) *
              0.0322435029341588;
    // species 24: HON
    result += y[24] *
              (+3.15272450e+00 - 3.87826402e-03 * T + 2.05476031e-05 * T2 -
               2.49049483e-08 * T3 + 9.87365462e-12 * T4) *
              0.0322435029341588;
    // species 25: NO2
    result += y[25] *
              (+2.39100918e+00 + 2.62448348e-03 * T + 5.09790306e-06 * T2 -
               7.62120493e-09 * T3 + 2.79960135e-12 * T4) *
              0.0217367677426367;
    // species 26: HONO
    result += y[26] *
              (+2.49106617e+00 + 6.81116875e-03 * T - 1.30943120e-06 * T2 -
               2.34197204e-09 * T3 + 1.18931535e-12 * T4) *
              0.0212707123561568;
    // species 27: HNO2
    result += y[27] *
              (+1.86816457e+00 + 4.08036347e-03 * T + 9.55139253e-06 * T2 -
               1.29604691e-08 * T3 + 4.57373772e-12 * T4) *
              0.0212707123561568;
    // species 28: NO3
    result += y[28] *
              (+2.09446759e+00 + 1.51014573e-02 * T - 1.26448498e-05 * T2 +
               3.67237581e-09 * T3 + 8.62184172e-14 * T4) *
              0.0161279917424682;
    // species 29: HONO2
    result += y[29] *
              (+3.43707800e-02 + 2.44807579e-02 * T - 2.31762285e-05 * T2 +
               1.03094550e-08 * T3 - 1.64107287e-12 * T4) *
              0.0158699930172031;
    // species 30: N2O
    result += y[30] *
              (+1.49126356e+00 + 9.16224976e-03 * T - 8.24847853e-06 * T2 +
               3.83289657e-09 * T3 - 7.19461784e-13 * T4) *
              0.0227205598345943;
    // species 31: HNO3
    result += y[31] *
              (+5.59750560e-01 + 2.01502169e-02 * T - 1.15217296e-05 * T2 -
               2.31891230e-09 * T3 + 3.17580552e-12 * T4) *
              0.0158699930172031;
  } else {
    // species 0: N2
    result += y[0] *
              (+1.95257637e+00 + 1.39690040e-03 * T - 4.92631603e-07 * T2 +
               7.86010195e-11 * T3 - 4.60755204e-15 * T4) *
              0.0356964374955379;
    // species 1: H2
    result += y[1] *
              (+1.93286575e+00 + 8.26608026e-04 * T - 1.46402364e-07 * T2 +
               1.54100414e-11 * T3 - 6.88804800e-16 * T4) *
              0.4960317460317460;
    // species 3: O2
    result += y[3] *
              (+2.66096065e+00 + 6.56365811e-04 * T - 1.41149627e-07 * T2 +
               2.05797935e-11 * T3 - 1.29913436e-15 * T4) *
              0.0312519532470779;
    // species 4: O
    result += y[4] *
              (+1.54363697e+00 - 2.73162486e-05 * T - 4.19029520e-09 * T2 +
               4.95481845e-12 * T3 - 4.79553694e-16 * T4) *
              0.0625039064941559;
    // species 5: H2O
    result += y[5] *
              (+1.67703890e+00 + 2.97318160e-03 * T - 7.73768890e-07 * T2 +
               9.44335140e-11 * T3 - 4.26899910e-15 * T4) *
              0.0555092978073827;
    // species 6: OH
    result += y[6] *
              (+1.83853033e+00 + 1.10741289e-03 * T - 2.94000209e-07 * T2 +
               4.20698729e-11 * T3 - 2.42289890e-15 * T4) *
              0.0587993179279120;
    // species 7: OHV
    result += y[7] *
              (+1.88273000e+00 + 1.01397430e-03 * T - 2.27687700e-07 * T2 +
               2.17468300e-11 * T3 - 5.12630500e-16 * T4) *
              0.0587993179279120;
    // species 8: H2O2
    result += y[8] *
              (+3.57977305e+00 + 4.05326003e-03 * T - 1.29844730e-06 * T2 +
               1.98211400e-10 * T3 - 1.13968792e-14 * T4) *
              0.0293996589639560;
    // species 9: HO2
    result += y[9] *
              (+3.17228741e+00 + 1.88117627e-03 * T - 3.46277286e-07 * T2 +
               1.94657549e-11 * T3 + 1.76256905e-16 * T4) *
              0.0302975216627280;
    // species 10: NO
    result += y[10] *
              (+1.79462839e+00 + 2.12260586e-03 * T - 1.11936971e-06 * T2 +
               2.79521018e-10 * T3 - 2.68625363e-14 * T4) *
              0.0333266679997334;
    // species 11: NH3
    result += y[11] *
              (+7.09695800e-02 + 8.75466951e-03 * T - 3.33525419e-06 * T2 +
               4.72015791e-10 * T3 - 1.13562571e-14 * T4) *
              0.0587164582232400;
    // species 12: NH2
    result += y[12] *
              (+1.62839610e+00 + 3.44379888e-03 * T - 1.08606365e-06 * T2 +
               1.50714038e-10 * T3 - 4.59423280e-15 * T4) *
              0.0624102852150034;
    // species 13: NH
    result += y[13] *
              (+1.95100955e+00 + 9.09994439e-04 * T - 8.35582439e-08 * T2 -
               5.17312027e-11 * T3 + 1.13981436e-14 * T4) *
              0.0666000666000666;
    // species 14: N
    result += y[14] *
              (+1.41604245e+00 + 1.74663766e-04 * T - 1.18864562e-07 * T2 +
               3.01850054e-11 * T3 - 2.03260159e-15 * T4) *
              0.0713928749910759;
    // species 15: NNH
    result += y[15] *
              (+1.90981142e+00 + 4.44718211e-03 * T - 1.82919152e-06 * T2 +
               3.64004342e-10 * T3 - 3.13273352e-14 * T4) *
              0.0344566191165323;
    // species 16: N2H4
    result += y[16] *
              (+2.21893892e+00 + 1.23204128e-02 * T - 5.44372150e-06 * T2 +
               1.22223350e-09 * T3 - 1.10736520e-13 * T4) *
              0.0312051426075017;
    // species 17: N2H3
    result += y[17] *
              (+2.20302281e+00 + 7.99162955e-03 * T - 3.10892955e-06 * T2 +
               5.91433018e-10 * T3 - 4.34549709e-14 * T4) *
              0.0322185707842000;
    // species 18: N2H2
    result += y[18] *
              (+3.11151170e-01 + 9.00187208e-03 * T - 3.14911824e-06 * T2 +
               4.81449581e-10 * T3 - 2.71897891e-14 * T4) *
              0.0333000333000333;
    // species 19: H2NN
    result += y[19] *
              (+4.62576310e-01 + 1.01013888e-02 * T - 5.16789506e-06 * T2 +
               1.27606779e-09 * T3 - 1.22332550e-13 * T4) *
              0.0333000333000333;
    // species 20: NH2OH
    result += y[20] *
              (+2.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
               4.37930933e-10 * T3 - 2.52724604e-14 * T4) *
              0.0302755071147442;
    // species 21: H2NO
    result += y[21] *
              (+2.36485636e+00 + 6.13307432e-03 * T - 2.48863886e-06 * T2 +
               4.83818467e-10 * T3 - 3.63995936e-14 * T4) *
              0.0312285303853601;
    // species 22: HNOH
    result += y[22] *
              (+2.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
               2.55371446e-10 * T3 - 1.48308561e-14 * T4) *
              0.0312285303853601;
    // species 23: HNO
    result += y[23] *
              (+1.58819802e+00 + 4.87708822e-03 * T - 2.29243315e-06 * T2 +
               5.82214028e-10 * T3 - 5.94811743e-14 * T4) *
              0.0322435029341588;
    // species 24: HON
    result += y[24] *
              (+3.12044656e+00 + 2.28738122e-03 * T - 7.14685362e-07 * T2 +
               1.03332384e-10 * T3 - 5.70484100e-15 * T4) *
              0.0322435029341588;
    // species 25: NO2
    result += y[25] *
              (+2.65239279e+00 + 4.71632310e-03 * T - 2.74591748e-06 * T2 +
               7.45382834e-10 * T3 - 7.63891108e-14 * T4) *
              0.0217367677426367;
    // species 26: HONO
    result += y[26] *
              (+3.19966671e+00 + 5.94217338e-03 * T - 2.95404834e-06 * T2 +
               7.19846187e-10 * T3 - 6.74909061e-14 * T4) *
              0.0212707123561568;
    // species 27: HNO2
    result += y[27] *
              (+1.71886798e+00 + 9.23249468e-03 * T - 5.00922160e-06 * T2 +
               1.30155189e-09 * T3 - 1.30503734e-13 * T4) *
              0.0212707123561568;
    // species 28: NO3
    result += y[28] *
              (+5.38293838e+00 + 5.42422503e-03 * T - 3.34397780e-06 * T2 +
               9.48445417e-10 * T3 - 1.01961714e-13 * T4) *
              0.0161279917424682;
    // species 29: HONO2
    result += y[29] *
              (+4.28851491e+00 + 1.02507554e-02 * T - 6.01108580e-06 * T2 +
               1.65260052e-09 * T3 - 1.73502753e-13 * T4) *
              0.0158699930172031;
    // species 30: N2O
    result += y[30] *
              (+2.61316907e+00 + 5.15970465e-03 * T - 2.97227625e-06 * T2 +
               8.00505298e-10 * T3 - 8.26331952e-14 * T4) *
              0.0227205598345943;
    // species 31: HNO3
    result += y[31] *
              (+7.03061257e+00 + 4.46368336e-03 * T - 1.72272779e-06 * T2 +
               2.91611606e-10 * T3 - 1.80487362e-14 * T4) *
              0.0158699930172031;
  }

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  amrex::Real result = 0;
  amrex::Real hml[32];                       //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // perform dot product
  for (int id = 0; id < 32; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with no change across T
  // species 2: H
  result +=
    y[2] * (+2.50000000e+00 + 2.54736600e+04 * invT) * 0.9920634920634921;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result +=
      y[0] *
      (+3.53100528e+00 - 6.18304940e-05 * T - 1.67666478e-07 * T2 +
       6.08826530e-10 * T3 - 2.81762470e-13 * T4 - 1.04697628e+03 * invT) *
      0.0356964374955379;
    // species 1: H2
    result +=
      y[1] *
      (+2.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
       5.03930235e-09 * T3 - 1.47522352e-12 * T4 - 9.17935173e+02 * invT) *
      0.4960317460317460;
    // species 3: O2
    result +=
      y[3] *
      (+3.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
       2.42032377e-09 * T3 + 6.48745674e-13 * T4 - 1.06394356e+03 * invT) *
      0.0312519532470779;
    // species 4: O
    result +=
      y[4] *
      (+3.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
       1.53201656e-09 * T3 + 4.22531942e-13 * T4 + 2.91222592e+04 * invT) *
      0.0625039064941559;
    // species 5: H2O
    result +=
      y[5] *
      (+4.19863520e+00 - 1.01820085e-03 * T + 2.17344720e-06 * T2 -
       1.37198172e-09 * T3 + 3.54393600e-13 * T4 - 3.02937260e+04 * invT) *
      0.0555092978073827;
    // species 6: OH
    result +=
      y[6] *
      (+3.99198424e+00 - 1.20053327e-03 * T + 1.53888011e-06 * T2 -
       9.69790765e-10 * T3 + 2.72639004e-13 * T4 + 3.36889836e+03 * invT) *
      0.0587993179279120;
    // species 7: OHV
    result +=
      y[7] *
      (+3.63726600e+00 + 9.25455000e-05 * T - 5.58721533e-07 * T2 +
       5.96800500e-10 * T3 - 1.68628840e-13 * T4 + 5.00213000e+04 * invT) *
      0.0587993179279120;
    // species 8: H2O2
    result +=
      y[8] *
      (+4.31515149e+00 - 4.23695311e-04 * T + 5.88014410e-06 * T2 -
       5.66907360e-09 * T3 + 1.81790032e-12 * T4 - 1.77067437e+04 * invT) *
      0.0293996589639560;
    // species 9: HO2
    result +=
      y[9] *
      (+4.30179807e+00 - 2.37456049e-03 * T + 7.05276350e-06 * T2 -
       6.06909785e-09 * T3 + 1.85845045e-12 * T4 + 2.64018485e+02 * invT) *
      0.0302975216627280;
    // species 10: NO
    result +=
      y[10] *
      (+4.15036687e+00 - 2.04445004e-03 * T + 3.12690575e-06 * T2 -
       1.87727225e-09 * T3 + 4.23485596e-13 * T4 + 9.77018679e+03 * invT) *
      0.0333266679997334;
    // species 11: NH3
    result +=
      y[11] *
      (+3.26650510e+00 + 1.52946434e-03 * T + 1.92918408e-07 * T2 +
       2.37269353e-10 * T3 - 1.80444394e-13 * T4 - 6.36511405e+03 * invT) *
      0.0587164582232400;
    // species 12: NH2
    result +=
      y[12] *
      (+3.97883538e+00 - 2.56944044e-04 * T + 8.94787187e-07 * T2 -
       2.29708150e-10 * T3 - 1.96450230e-14 * T4 + 2.12486673e+04 * invT) *
      0.0624102852150034;
    // species 13: NH
    result +=
      y[13] *
      (+3.44697209e+00 + 2.78923909e-04 * T - 6.67631200e-07 * T2 +
       7.14882305e-10 * T3 - 2.24868568e-13 * T4 + 4.17899268e+04 * invT) *
      0.0666000666000666;
    // species 14: N
    result +=
      y[14] *
      (+2.49976643e+00 + 2.51074797e-07 * T + 6.43637370e-10 * T2 -
       1.23658157e-12 * T3 + 5.48179012e-16 * T4 + 5.60760710e+04 * invT) *
      0.0713928749910759;
    // species 15: NNH
    result +=
      y[15] *
      (+4.09254871e+00 - 1.18586644e-03 * T + 3.84370990e-06 * T2 -
       2.65771058e-09 * T3 + 6.47875160e-13 * T4 + 2.91374980e+04 * invT) *
      0.0344566191165323;
    // species 16: N2H4
    result +=
      y[16] *
      (+9.42542945e-01 + 1.06744135e-02 * T - 6.29019620e-06 * T2 +
       2.52407718e-09 * T3 - 4.61992584e-13 * T4 + 1.09652651e+04 * invT) *
      0.0312051426075017;
    // species 17: N2H3
    result +=
      y[17] *
      (+3.80271862e+00 + 2.76382070e-03 * T + 2.28286674e-07 * T2 -
       5.00741233e-10 * T3 + 1.24289148e-13 * T4 + 2.57522809e+04 * invT) *
      0.0322185707842000;
    // species 18: N2H2
    result +=
      y[18] *
      (+4.91066031e+00 - 5.38959400e-03 * T + 1.28838830e-05 * T2 -
       9.66254245e-09 * T3 + 2.69704268e-12 * T4 + 2.28241901e+04 * invT) *
      0.0333000333000333;
    // species 19: H2NN
    result +=
      y[19] *
      (+3.87707453e+00 - 1.32622259e-03 * T + 6.20220583e-06 * T2 -
       4.41736207e-09 * T3 + 1.07760135e-12 * T4 + 3.52637434e+04 * invT) *
      0.0333000333000333;
    // species 20: NH2OH
    result +=
      y[20] *
      (+3.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
       4.91670655e-09 * T3 + 1.76503318e-12 * T4 - 6.58148481e+03 * invT) *
      0.0302755071147442;
    // species 21: H2NO
    result +=
      y[21] *
      (+3.93370869e+00 + 1.10587802e-03 * T + 1.95406734e-06 * T2 -
       1.68232944e-09 * T3 + 4.35672342e-13 * T4 + 6.59507215e+03 * invT) *
      0.0312285303853601;
    // species 22: HNOH
    result +=
      y[22] *
      (+3.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
       7.89112800e-09 * T3 + 2.48169148e-12 * T4 + 1.09199790e+04 * invT) *
      0.0312285303853601;
    // species 23: HNO
    result +=
      y[23] *
      (+4.51988078e+00 - 2.71253811e-03 * T + 5.67465453e-06 * T2 -
       3.71770430e-09 * T3 + 8.89526996e-13 * T4 + 1.17637925e+04 * invT) *
      0.0322435029341588;
    // species 24: HON
    result +=
      y[24] *
      (+4.15272450e+00 - 1.93913201e-03 * T + 6.84920103e-06 * T2 -
       6.22623707e-09 * T3 + 1.97473092e-12 * T4 + 2.46037098e+04 * invT) *
      0.0322435029341588;
    // species 25: NO2
    result +=
      y[25] *
      (+3.39100918e+00 + 1.31224174e-03 * T + 1.69930102e-06 * T2 -
       1.90530123e-09 * T3 + 5.59920270e-13 * T4 + 2.78130679e+03 * invT) *
      0.0217367677426367;
    // species 26: HONO
    result +=
      y[26] *
      (+3.49106617e+00 + 3.40558437e-03 * T - 4.36477067e-07 * T2 -
       5.85493010e-10 * T3 + 2.37863070e-13 * T4 - 1.05722865e+04 * invT) *
      0.0212707123561568;
    // species 27: HNO2
    result +=
      y[27] *
      (+2.86816457e+00 + 2.04018173e-03 * T + 3.18379751e-06 * T2 -
       3.24011728e-09 * T3 + 9.14747544e-13 * T4 - 6.42160346e+03 * invT) *
      0.0212707123561568;
    // species 28: NO3
    result +=
      y[28] *
      (+3.09446759e+00 + 7.55072865e-03 * T - 4.21494993e-06 * T2 +
       9.18093952e-10 * T3 + 1.72436834e-14 * T4 + 7.18626632e+03 * invT) *
      0.0161279917424682;
    // species 29: HONO2
    result +=
      y[29] *
      (+1.03437078e+00 + 1.22403790e-02 * T - 7.72540950e-06 * T2 +
       2.57736375e-09 * T3 - 3.28214574e-13 * T4 - 1.75562224e+04 * invT) *
      0.0158699930172031;
    // species 30: N2O
    result +=
      y[30] *
      (+2.49126356e+00 + 4.58112488e-03 * T - 2.74949284e-06 * T2 +
       9.58224143e-10 * T3 - 1.43892357e-13 * T4 + 8.84938621e+03 * invT) *
      0.0227205598345943;
    // species 31: HNO3
    result +=
      y[31] *
      (+1.55975056e+00 + 1.00751085e-02 * T - 3.84057653e-06 * T2 -
       5.79728075e-10 * T3 + 6.35161104e-13 * T4 - 1.73955871e+04 * invT) *
      0.0158699930172031;
  } else {
    // species 0: N2
    result +=
      y[0] *
      (+2.95257637e+00 + 6.98450200e-04 * T - 1.64210534e-07 * T2 +
       1.96502549e-11 * T3 - 9.21510408e-16 * T4 - 9.23948688e+02 * invT) *
      0.0356964374955379;
    // species 1: H2
    result +=
      y[1] *
      (+2.93286575e+00 + 4.13304013e-04 * T - 4.88007880e-08 * T2 +
       3.85251035e-12 * T3 - 1.37760960e-16 * T4 - 8.13065581e+02 * invT) *
      0.4960317460317460;
    // species 3: O2
    result +=
      y[3] *
      (+3.66096065e+00 + 3.28182906e-04 * T - 4.70498757e-08 * T2 +
       5.14494837e-12 * T3 - 2.59826872e-16 * T4 - 1.21597718e+03 * invT) *
      0.0312519532470779;
    // species 4: O
    result +=
      y[4] *
      (+2.54363697e+00 - 1.36581243e-05 * T - 1.39676507e-09 * T2 +
       1.23870461e-12 * T3 - 9.59107388e-17 * T4 + 2.92260120e+04 * invT) *
      0.0625039064941559;
    // species 5: H2O
    result +=
      y[5] *
      (+2.67703890e+00 + 1.48659080e-03 * T - 2.57922963e-07 * T2 +
       2.36083785e-11 * T3 - 8.53799820e-16 * T4 - 2.98858940e+04 * invT) *
      0.0555092978073827;
    // species 6: OH
    result +=
      y[6] *
      (+2.83853033e+00 + 5.53706445e-04 * T - 9.80000697e-08 * T2 +
       1.05174682e-11 * T3 - 4.84579780e-16 * T4 + 3.69780808e+03 * invT) *
      0.0587993179279120;
    // species 7: OHV
    result +=
      y[7] *
      (+2.88273000e+00 + 5.06987150e-04 * T - 7.58959000e-08 * T2 +
       5.43670750e-12 * T3 - 1.02526100e-16 * T4 + 5.02650000e+04 * invT) *
      0.0587993179279120;
    // species 8: H2O2
    result +=
      y[8] *
      (+4.57977305e+00 + 2.02663002e-03 * T - 4.32815767e-07 * T2 +
       4.95528500e-11 * T3 - 2.27937584e-15 * T4 - 1.80071775e+04 * invT) *
      0.0293996589639560;
    // species 9: HO2
    result +=
      y[9] *
      (+4.17228741e+00 + 9.40588135e-04 * T - 1.15425762e-07 * T2 +
       4.86643873e-12 * T3 + 3.52513810e-17 * T4 + 3.10206839e+01 * invT) *
      0.0302975216627280;
    // species 10: NO
    result +=
      y[10] *
      (+2.79462839e+00 + 1.06130293e-03 * T - 3.73123237e-07 * T2 +
       6.98802545e-11 * T3 - 5.37250726e-15 * T4 + 1.00019069e+04 * invT) *
      0.0333266679997334;
    // species 11: NH3
    result +=
      y[11] *
      (+1.07096958e+00 + 4.37733476e-03 * T - 1.11175140e-06 * T2 +
       1.18003948e-10 * T3 - 2.27125142e-15 * T4 - 5.77168689e+03 * invT) *
      0.0587164582232400;
    // species 12: NH2
    result +=
      y[12] *
      (+2.62839610e+00 + 1.72189944e-03 * T - 3.62021217e-07 * T2 +
       3.76785095e-11 * T3 - 9.18846560e-16 * T4 + 2.15909586e+04 * invT) *
      0.0624102852150034;
    // species 13: NH
    result +=
      y[13] *
      (+2.95100955e+00 + 4.54997219e-04 * T - 2.78527480e-08 * T2 -
       1.29328007e-11 * T3 + 2.27962872e-15 * T4 + 4.19707045e+04 * invT) *
      0.0666000666000666;
    // species 14: N
    result +=
      y[14] *
      (+2.41604245e+00 + 8.73318830e-05 * T - 3.96215207e-08 * T2 +
       7.54625135e-12 * T3 - 4.06520318e-16 * T4 + 5.61051512e+04 * invT) *
      0.0713928749910759;
    // species 15: NNH
    result +=
      y[15] *
      (+2.90981142e+00 + 2.22359105e-03 * T - 6.09730507e-07 * T2 +
       9.10010855e-11 * T3 - 6.26546704e-15 * T4 + 2.92696472e+04 * invT) *
      0.0344566191165323;
    // species 16: N2H4
    result +=
      y[16] *
      (+3.21893892e+00 + 6.16020640e-03 * T - 1.81457383e-06 * T2 +
       3.05558375e-10 * T3 - 2.21473040e-14 * T4 + 1.05061274e+04 * invT) *
      0.0312051426075017;
    // species 17: N2H3
    result +=
      y[17] *
      (+3.20302281e+00 + 3.99581478e-03 * T - 1.03630985e-06 * T2 +
       1.47858255e-10 * T3 - 8.69099418e-15 * T4 + 2.58689598e+04 * invT) *
      0.0322185707842000;
    // species 18: N2H2
    result +=
      y[18] *
      (+1.31115117e+00 + 4.50093604e-03 * T - 1.04970608e-06 * T2 +
       1.20362395e-10 * T3 - 5.43795782e-15 * T4 + 2.33863341e+04 * invT) *
      0.0333000333000333;
    // species 19: H2NN
    result +=
      y[19] *
      (+1.46257631e+00 + 5.05069440e-03 * T - 1.72263169e-06 * T2 +
       3.19016947e-10 * T3 - 2.44665100e-14 * T4 + 3.55918510e+04 * invT) *
      0.0333000333000333;
    // species 20: NH2OH
    result +=
      y[20] *
      (+3.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
       1.09482733e-10 * T3 - 5.05449208e-15 * T4 - 6.86018419e+03 * invT) *
      0.0302755071147442;
    // species 21: H2NO
    result +=
      y[21] *
      (+3.36485636e+00 + 3.06653716e-03 * T - 8.29546287e-07 * T2 +
       1.20954617e-10 * T3 - 7.27991872e-15 * T4 + 6.62654717e+03 * invT) *
      0.0312285303853601;
    // species 22: HNOH
    result +=
      y[22] *
      (+3.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
       6.38428615e-11 * T3 - 2.96617122e-15 * T4 + 1.05780106e+04 * invT) *
      0.0312285303853601;
    // species 23: HNO
    result +=
      y[23] *
      (+2.58819802e+00 + 2.43854411e-03 * T - 7.64144383e-07 * T2 +
       1.45553507e-10 * T3 - 1.18962349e-14 * T4 + 1.20213574e+04 * invT) *
      0.0322435029341588;
    // species 24: HON
    result +=
      y[24] *
      (+4.12044656e+00 + 1.14369061e-03 * T - 2.38228454e-07 * T2 +
       2.58330960e-11 * T3 - 1.14096820e-15 * T4 + 2.43643963e+04 * invT) *
      0.0322435029341588;
    // species 25: NO2
    result +=
      y[25] *
      (+3.65239279e+00 + 2.35816155e-03 * T - 9.15305827e-07 * T2 +
       1.86345709e-10 * T3 - 1.52778222e-14 * T4 + 2.57216137e+03 * invT) *
      0.0217367677426367;
    // species 26: HONO
    result +=
      y[26] *
      (+4.19966671e+00 + 2.97108669e-03 * T - 9.84682780e-07 * T2 +
       1.79961547e-10 * T3 - 1.34981812e-14 * T4 - 1.08122769e+04 * invT) *
      0.0212707123561568;
    // species 27: HNO2
    result +=
      y[27] *
      (+2.71886798e+00 + 4.61624734e-03 * T - 1.66974053e-06 * T2 +
       3.25387973e-10 * T3 - 2.61007468e-14 * T4 - 6.61949139e+03 * invT) *
      0.0212707123561568;
    // species 28: NO3
    result +=
      y[28] *
      (+6.38293838e+00 + 2.71211252e-03 * T - 1.11465927e-06 * T2 +
       2.37111354e-10 * T3 - 2.03923428e-14 * T4 + 6.35473962e+03 * invT) *
      0.0161279917424682;
    // species 29: HONO2
    result +=
      y[29] *
      (+5.28851491e+00 + 5.12537770e-03 * T - 2.00369527e-06 * T2 +
       4.13150130e-10 * T3 - 3.47005506e-14 * T4 - 1.85463799e+04 * invT) *
      0.0158699930172031;
    // species 30: N2O
    result +=
      y[30] *
      (+3.61316907e+00 + 2.57985233e-03 * T - 9.90758750e-07 * T2 +
       2.00126325e-10 * T3 - 1.65266390e-14 * T4 + 8.60075126e+03 * invT) *
      0.0227205598345943;
    // species 31: HNO3
    result +=
      y[31] *
      (+8.03061257e+00 + 2.23184168e-03 * T - 5.74242597e-07 * T2 +
       7.29029015e-11 * T3 - 3.60974724e-15 * T4 - 1.93033764e+04 * invT) *
      0.0158699930172031;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  amrex::Real result = 0;
  amrex::Real uml[32];                       //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // perform dot product
  for (int id = 0; id < 32; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with no change across T
  // species 2: H
  result +=
    y[2] * (+1.50000000e+00 + 2.54736600e+04 * invT) * 0.9920634920634921;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result +=
      y[0] *
      (+2.53100528e+00 - 6.18304940e-05 * T - 1.67666478e-07 * T2 +
       6.08826530e-10 * T3 - 2.81762470e-13 * T4 - 1.04697628e+03 * invT) *
      0.0356964374955379;
    // species 1: H2
    result +=
      y[1] *
      (+1.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
       5.03930235e-09 * T3 - 1.47522352e-12 * T4 - 9.17935173e+02 * invT) *
      0.4960317460317460;
    // species 3: O2
    result +=
      y[3] *
      (+2.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
       2.42032377e-09 * T3 + 6.48745674e-13 * T4 - 1.06394356e+03 * invT) *
      0.0312519532470779;
    // species 4: O
    result +=
      y[4] *
      (+2.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
       1.53201656e-09 * T3 + 4.22531942e-13 * T4 + 2.91222592e+04 * invT) *
      0.0625039064941559;
    // species 5: H2O
    result +=
      y[5] *
      (+3.19863520e+00 - 1.01820085e-03 * T + 2.17344720e-06 * T2 -
       1.37198172e-09 * T3 + 3.54393600e-13 * T4 - 3.02937260e+04 * invT) *
      0.0555092978073827;
    // species 6: OH
    result +=
      y[6] *
      (+2.99198424e+00 - 1.20053327e-03 * T + 1.53888011e-06 * T2 -
       9.69790765e-10 * T3 + 2.72639004e-13 * T4 + 3.36889836e+03 * invT) *
      0.0587993179279120;
    // species 7: OHV
    result +=
      y[7] *
      (+2.63726600e+00 + 9.25455000e-05 * T - 5.58721533e-07 * T2 +
       5.96800500e-10 * T3 - 1.68628840e-13 * T4 + 5.00213000e+04 * invT) *
      0.0587993179279120;
    // species 8: H2O2
    result +=
      y[8] *
      (+3.31515149e+00 - 4.23695311e-04 * T + 5.88014410e-06 * T2 -
       5.66907360e-09 * T3 + 1.81790032e-12 * T4 - 1.77067437e+04 * invT) *
      0.0293996589639560;
    // species 9: HO2
    result +=
      y[9] *
      (+3.30179807e+00 - 2.37456049e-03 * T + 7.05276350e-06 * T2 -
       6.06909785e-09 * T3 + 1.85845045e-12 * T4 + 2.64018485e+02 * invT) *
      0.0302975216627280;
    // species 10: NO
    result +=
      y[10] *
      (+3.15036687e+00 - 2.04445004e-03 * T + 3.12690575e-06 * T2 -
       1.87727225e-09 * T3 + 4.23485596e-13 * T4 + 9.77018679e+03 * invT) *
      0.0333266679997334;
    // species 11: NH3
    result +=
      y[11] *
      (+2.26650510e+00 + 1.52946434e-03 * T + 1.92918408e-07 * T2 +
       2.37269353e-10 * T3 - 1.80444394e-13 * T4 - 6.36511405e+03 * invT) *
      0.0587164582232400;
    // species 12: NH2
    result +=
      y[12] *
      (+2.97883538e+00 - 2.56944044e-04 * T + 8.94787187e-07 * T2 -
       2.29708150e-10 * T3 - 1.96450230e-14 * T4 + 2.12486673e+04 * invT) *
      0.0624102852150034;
    // species 13: NH
    result +=
      y[13] *
      (+2.44697209e+00 + 2.78923909e-04 * T - 6.67631200e-07 * T2 +
       7.14882305e-10 * T3 - 2.24868568e-13 * T4 + 4.17899268e+04 * invT) *
      0.0666000666000666;
    // species 14: N
    result +=
      y[14] *
      (+1.49976643e+00 + 2.51074797e-07 * T + 6.43637370e-10 * T2 -
       1.23658157e-12 * T3 + 5.48179012e-16 * T4 + 5.60760710e+04 * invT) *
      0.0713928749910759;
    // species 15: NNH
    result +=
      y[15] *
      (+3.09254871e+00 - 1.18586644e-03 * T + 3.84370990e-06 * T2 -
       2.65771058e-09 * T3 + 6.47875160e-13 * T4 + 2.91374980e+04 * invT) *
      0.0344566191165323;
    // species 16: N2H4
    result +=
      y[16] *
      (-5.74570550e-02 + 1.06744135e-02 * T - 6.29019620e-06 * T2 +
       2.52407718e-09 * T3 - 4.61992584e-13 * T4 + 1.09652651e+04 * invT) *
      0.0312051426075017;
    // species 17: N2H3
    result +=
      y[17] *
      (+2.80271862e+00 + 2.76382070e-03 * T + 2.28286674e-07 * T2 -
       5.00741233e-10 * T3 + 1.24289148e-13 * T4 + 2.57522809e+04 * invT) *
      0.0322185707842000;
    // species 18: N2H2
    result +=
      y[18] *
      (+3.91066031e+00 - 5.38959400e-03 * T + 1.28838830e-05 * T2 -
       9.66254245e-09 * T3 + 2.69704268e-12 * T4 + 2.28241901e+04 * invT) *
      0.0333000333000333;
    // species 19: H2NN
    result +=
      y[19] *
      (+2.87707453e+00 - 1.32622259e-03 * T + 6.20220583e-06 * T2 -
       4.41736207e-09 * T3 + 1.07760135e-12 * T4 + 3.52637434e+04 * invT) *
      0.0333000333000333;
    // species 20: NH2OH
    result +=
      y[20] *
      (+2.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
       4.91670655e-09 * T3 + 1.76503318e-12 * T4 - 6.58148481e+03 * invT) *
      0.0302755071147442;
    // species 21: H2NO
    result +=
      y[21] *
      (+2.93370869e+00 + 1.10587802e-03 * T + 1.95406734e-06 * T2 -
       1.68232944e-09 * T3 + 4.35672342e-13 * T4 + 6.59507215e+03 * invT) *
      0.0312285303853601;
    // species 22: HNOH
    result +=
      y[22] *
      (+2.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
       7.89112800e-09 * T3 + 2.48169148e-12 * T4 + 1.09199790e+04 * invT) *
      0.0312285303853601;
    // species 23: HNO
    result +=
      y[23] *
      (+3.51988078e+00 - 2.71253811e-03 * T + 5.67465453e-06 * T2 -
       3.71770430e-09 * T3 + 8.89526996e-13 * T4 + 1.17637925e+04 * invT) *
      0.0322435029341588;
    // species 24: HON
    result +=
      y[24] *
      (+3.15272450e+00 - 1.93913201e-03 * T + 6.84920103e-06 * T2 -
       6.22623707e-09 * T3 + 1.97473092e-12 * T4 + 2.46037098e+04 * invT) *
      0.0322435029341588;
    // species 25: NO2
    result +=
      y[25] *
      (+2.39100918e+00 + 1.31224174e-03 * T + 1.69930102e-06 * T2 -
       1.90530123e-09 * T3 + 5.59920270e-13 * T4 + 2.78130679e+03 * invT) *
      0.0217367677426367;
    // species 26: HONO
    result +=
      y[26] *
      (+2.49106617e+00 + 3.40558437e-03 * T - 4.36477067e-07 * T2 -
       5.85493010e-10 * T3 + 2.37863070e-13 * T4 - 1.05722865e+04 * invT) *
      0.0212707123561568;
    // species 27: HNO2
    result +=
      y[27] *
      (+1.86816457e+00 + 2.04018173e-03 * T + 3.18379751e-06 * T2 -
       3.24011728e-09 * T3 + 9.14747544e-13 * T4 - 6.42160346e+03 * invT) *
      0.0212707123561568;
    // species 28: NO3
    result +=
      y[28] *
      (+2.09446759e+00 + 7.55072865e-03 * T - 4.21494993e-06 * T2 +
       9.18093952e-10 * T3 + 1.72436834e-14 * T4 + 7.18626632e+03 * invT) *
      0.0161279917424682;
    // species 29: HONO2
    result +=
      y[29] *
      (+3.43707800e-02 + 1.22403790e-02 * T - 7.72540950e-06 * T2 +
       2.57736375e-09 * T3 - 3.28214574e-13 * T4 - 1.75562224e+04 * invT) *
      0.0158699930172031;
    // species 30: N2O
    result +=
      y[30] *
      (+1.49126356e+00 + 4.58112488e-03 * T - 2.74949284e-06 * T2 +
       9.58224143e-10 * T3 - 1.43892357e-13 * T4 + 8.84938621e+03 * invT) *
      0.0227205598345943;
    // species 31: HNO3
    result +=
      y[31] *
      (+5.59750560e-01 + 1.00751085e-02 * T - 3.84057653e-06 * T2 -
       5.79728075e-10 * T3 + 6.35161104e-13 * T4 - 1.73955871e+04 * invT) *
      0.0158699930172031;
  } else {
    // species 0: N2
    result +=
      y[0] *
      (+1.95257637e+00 + 6.98450200e-04 * T - 1.64210534e-07 * T2 +
       1.96502549e-11 * T3 - 9.21510408e-16 * T4 - 9.23948688e+02 * invT) *
      0.0356964374955379;
    // species 1: H2
    result +=
      y[1] *
      (+1.93286575e+00 + 4.13304013e-04 * T - 4.88007880e-08 * T2 +
       3.85251035e-12 * T3 - 1.37760960e-16 * T4 - 8.13065581e+02 * invT) *
      0.4960317460317460;
    // species 3: O2
    result +=
      y[3] *
      (+2.66096065e+00 + 3.28182906e-04 * T - 4.70498757e-08 * T2 +
       5.14494837e-12 * T3 - 2.59826872e-16 * T4 - 1.21597718e+03 * invT) *
      0.0312519532470779;
    // species 4: O
    result +=
      y[4] *
      (+1.54363697e+00 - 1.36581243e-05 * T - 1.39676507e-09 * T2 +
       1.23870461e-12 * T3 - 9.59107388e-17 * T4 + 2.92260120e+04 * invT) *
      0.0625039064941559;
    // species 5: H2O
    result +=
      y[5] *
      (+1.67703890e+00 + 1.48659080e-03 * T - 2.57922963e-07 * T2 +
       2.36083785e-11 * T3 - 8.53799820e-16 * T4 - 2.98858940e+04 * invT) *
      0.0555092978073827;
    // species 6: OH
    result +=
      y[6] *
      (+1.83853033e+00 + 5.53706445e-04 * T - 9.80000697e-08 * T2 +
       1.05174682e-11 * T3 - 4.84579780e-16 * T4 + 3.69780808e+03 * invT) *
      0.0587993179279120;
    // species 7: OHV
    result +=
      y[7] *
      (+1.88273000e+00 + 5.06987150e-04 * T - 7.58959000e-08 * T2 +
       5.43670750e-12 * T3 - 1.02526100e-16 * T4 + 5.02650000e+04 * invT) *
      0.0587993179279120;
    // species 8: H2O2
    result +=
      y[8] *
      (+3.57977305e+00 + 2.02663002e-03 * T - 4.32815767e-07 * T2 +
       4.95528500e-11 * T3 - 2.27937584e-15 * T4 - 1.80071775e+04 * invT) *
      0.0293996589639560;
    // species 9: HO2
    result +=
      y[9] *
      (+3.17228741e+00 + 9.40588135e-04 * T - 1.15425762e-07 * T2 +
       4.86643873e-12 * T3 + 3.52513810e-17 * T4 + 3.10206839e+01 * invT) *
      0.0302975216627280;
    // species 10: NO
    result +=
      y[10] *
      (+1.79462839e+00 + 1.06130293e-03 * T - 3.73123237e-07 * T2 +
       6.98802545e-11 * T3 - 5.37250726e-15 * T4 + 1.00019069e+04 * invT) *
      0.0333266679997334;
    // species 11: NH3
    result +=
      y[11] *
      (+7.09695800e-02 + 4.37733476e-03 * T - 1.11175140e-06 * T2 +
       1.18003948e-10 * T3 - 2.27125142e-15 * T4 - 5.77168689e+03 * invT) *
      0.0587164582232400;
    // species 12: NH2
    result +=
      y[12] *
      (+1.62839610e+00 + 1.72189944e-03 * T - 3.62021217e-07 * T2 +
       3.76785095e-11 * T3 - 9.18846560e-16 * T4 + 2.15909586e+04 * invT) *
      0.0624102852150034;
    // species 13: NH
    result +=
      y[13] *
      (+1.95100955e+00 + 4.54997219e-04 * T - 2.78527480e-08 * T2 -
       1.29328007e-11 * T3 + 2.27962872e-15 * T4 + 4.19707045e+04 * invT) *
      0.0666000666000666;
    // species 14: N
    result +=
      y[14] *
      (+1.41604245e+00 + 8.73318830e-05 * T - 3.96215207e-08 * T2 +
       7.54625135e-12 * T3 - 4.06520318e-16 * T4 + 5.61051512e+04 * invT) *
      0.0713928749910759;
    // species 15: NNH
    result +=
      y[15] *
      (+1.90981142e+00 + 2.22359105e-03 * T - 6.09730507e-07 * T2 +
       9.10010855e-11 * T3 - 6.26546704e-15 * T4 + 2.92696472e+04 * invT) *
      0.0344566191165323;
    // species 16: N2H4
    result +=
      y[16] *
      (+2.21893892e+00 + 6.16020640e-03 * T - 1.81457383e-06 * T2 +
       3.05558375e-10 * T3 - 2.21473040e-14 * T4 + 1.05061274e+04 * invT) *
      0.0312051426075017;
    // species 17: N2H3
    result +=
      y[17] *
      (+2.20302281e+00 + 3.99581478e-03 * T - 1.03630985e-06 * T2 +
       1.47858255e-10 * T3 - 8.69099418e-15 * T4 + 2.58689598e+04 * invT) *
      0.0322185707842000;
    // species 18: N2H2
    result +=
      y[18] *
      (+3.11151170e-01 + 4.50093604e-03 * T - 1.04970608e-06 * T2 +
       1.20362395e-10 * T3 - 5.43795782e-15 * T4 + 2.33863341e+04 * invT) *
      0.0333000333000333;
    // species 19: H2NN
    result +=
      y[19] *
      (+4.62576310e-01 + 5.05069440e-03 * T - 1.72263169e-06 * T2 +
       3.19016947e-10 * T3 - 2.44665100e-14 * T4 + 3.55918510e+04 * invT) *
      0.0333000333000333;
    // species 20: NH2OH
    result +=
      y[20] *
      (+2.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
       1.09482733e-10 * T3 - 5.05449208e-15 * T4 - 6.86018419e+03 * invT) *
      0.0302755071147442;
    // species 21: H2NO
    result +=
      y[21] *
      (+2.36485636e+00 + 3.06653716e-03 * T - 8.29546287e-07 * T2 +
       1.20954617e-10 * T3 - 7.27991872e-15 * T4 + 6.62654717e+03 * invT) *
      0.0312285303853601;
    // species 22: HNOH
    result +=
      y[22] *
      (+2.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
       6.38428615e-11 * T3 - 2.96617122e-15 * T4 + 1.05780106e+04 * invT) *
      0.0312285303853601;
    // species 23: HNO
    result +=
      y[23] *
      (+1.58819802e+00 + 2.43854411e-03 * T - 7.64144383e-07 * T2 +
       1.45553507e-10 * T3 - 1.18962349e-14 * T4 + 1.20213574e+04 * invT) *
      0.0322435029341588;
    // species 24: HON
    result +=
      y[24] *
      (+3.12044656e+00 + 1.14369061e-03 * T - 2.38228454e-07 * T2 +
       2.58330960e-11 * T3 - 1.14096820e-15 * T4 + 2.43643963e+04 * invT) *
      0.0322435029341588;
    // species 25: NO2
    result +=
      y[25] *
      (+2.65239279e+00 + 2.35816155e-03 * T - 9.15305827e-07 * T2 +
       1.86345709e-10 * T3 - 1.52778222e-14 * T4 + 2.57216137e+03 * invT) *
      0.0217367677426367;
    // species 26: HONO
    result +=
      y[26] *
      (+3.19966671e+00 + 2.97108669e-03 * T - 9.84682780e-07 * T2 +
       1.79961547e-10 * T3 - 1.34981812e-14 * T4 - 1.08122769e+04 * invT) *
      0.0212707123561568;
    // species 27: HNO2
    result +=
      y[27] *
      (+1.71886798e+00 + 4.61624734e-03 * T - 1.66974053e-06 * T2 +
       3.25387973e-10 * T3 - 2.61007468e-14 * T4 - 6.61949139e+03 * invT) *
      0.0212707123561568;
    // species 28: NO3
    result +=
      y[28] *
      (+5.38293838e+00 + 2.71211252e-03 * T - 1.11465927e-06 * T2 +
       2.37111354e-10 * T3 - 2.03923428e-14 * T4 + 6.35473962e+03 * invT) *
      0.0161279917424682;
    // species 29: HONO2
    result +=
      y[29] *
      (+4.28851491e+00 + 5.12537770e-03 * T - 2.00369527e-06 * T2 +
       4.13150130e-10 * T3 - 3.47005506e-14 * T4 - 1.85463799e+04 * invT) *
      0.0158699930172031;
    // species 30: N2O
    result +=
      y[30] *
      (+2.61316907e+00 + 2.57985233e-03 * T - 9.90758750e-07 * T2 +
       2.00126325e-10 * T3 - 1.65266390e-14 * T4 + 8.60075126e+03 * invT) *
      0.0227205598345943;
    // species 31: HNO3
    result +=
      y[31] *
      (+7.03061257e+00 + 2.23184168e-03 * T - 5.74242597e-07 * T2 +
       7.29029015e-11 * T3 - 3.60974724e-15 * T4 - 1.93033764e+04 * invT) *
      0.0158699930172031;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[32]; //  temporary storage
  speciesEntropy(sor, T);

  // Compute Eq 42
  for (int id = 0; id < 32; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[32]; //  temporary storage
  amrex::Real x[32];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }
  // Now compute y to x conversion
  x[0] = y[0] / (28.014000 * YOW);
  x[1] = y[1] / (2.016000 * YOW);
  x[2] = y[2] / (1.008000 * YOW);
  x[3] = y[3] / (31.998000 * YOW);
  x[4] = y[4] / (15.999000 * YOW);
  x[5] = y[5] / (18.015000 * YOW);
  x[6] = y[6] / (17.007000 * YOW);
  x[7] = y[7] / (17.007000 * YOW);
  x[8] = y[8] / (34.014000 * YOW);
  x[9] = y[9] / (33.006000 * YOW);
  x[10] = y[10] / (30.006000 * YOW);
  x[11] = y[11] / (17.031000 * YOW);
  x[12] = y[12] / (16.023000 * YOW);
  x[13] = y[13] / (15.015000 * YOW);
  x[14] = y[14] / (14.007000 * YOW);
  x[15] = y[15] / (29.022000 * YOW);
  x[16] = y[16] / (32.046000 * YOW);
  x[17] = y[17] / (31.038000 * YOW);
  x[18] = y[18] / (30.030000 * YOW);
  x[19] = y[19] / (30.030000 * YOW);
  x[20] = y[20] / (33.030000 * YOW);
  x[21] = y[21] / (32.022000 * YOW);
  x[22] = y[22] / (32.022000 * YOW);
  x[23] = y[23] / (31.014000 * YOW);
  x[24] = y[24] / (31.014000 * YOW);
  x[25] = y[25] / (46.005000 * YOW);
  x[26] = y[26] / (47.013000 * YOW);
  x[27] = y[27] / (47.013000 * YOW);
  x[28] = y[28] / (62.004000 * YOW);
  x[29] = y[29] / (63.012000 * YOW);
  x[30] = y[30] / (44.013000 * YOW);
  x[31] = y[31] / (63.012000 * YOW);
  speciesEntropy(sor, T);
  // Perform computation in Eq 42 and 43
  for (int i = 0; i < 32; i++) {
    result += x[i] * (sor[i] - log((x[i] + 1e-100)) - logPratio);
  }
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 28.014000;                  // N2
  XW += x[1] * 2.016000;                   // H2
  XW += x[2] * 1.008000;                   // H
  XW += x[3] * 31.998000;                  // O2
  XW += x[4] * 15.999000;                  // O
  XW += x[5] * 18.015000;                  // H2O
  XW += x[6] * 17.007000;                  // OH
  XW += x[7] * 17.007000;                  // OHV
  XW += x[8] * 34.014000;                  // H2O2
  XW += x[9] * 33.006000;                  // HO2
  XW += x[10] * 30.006000;                 // NO
  XW += x[11] * 17.031000;                 // NH3
  XW += x[12] * 16.023000;                 // NH2
  XW += x[13] * 15.015000;                 // NH
  XW += x[14] * 14.007000;                 // N
  XW += x[15] * 29.022000;                 // NNH
  XW += x[16] * 32.046000;                 // N2H4
  XW += x[17] * 31.038000;                 // N2H3
  XW += x[18] * 30.030000;                 // N2H2
  XW += x[19] * 30.030000;                 // H2NN
  XW += x[20] * 33.030000;                 // NH2OH
  XW += x[21] * 32.022000;                 // H2NO
  XW += x[22] * 32.022000;                 // HNOH
  XW += x[23] * 31.014000;                 // HNO
  XW += x[24] * 31.014000;                 // HON
  XW += x[25] * 46.005000;                 // NO2
  XW += x[26] * 47.013000;                 // HONO
  XW += x[27] * 47.013000;                 // HNO2
  XW += x[28] * 62.004000;                 // NO3
  XW += x[29] * 63.012000;                 // HONO2
  XW += x[30] * 44.013000;                 // N2O
  XW += x[31] * 63.012000;                 // HNO3
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW

  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 28.014000;  // N2
  W += c[1] * 2.016000;   // H2
  W += c[2] * 1.008000;   // H
  W += c[3] * 31.998000;  // O2
  W += c[4] * 15.999000;  // O
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 17.007000;  // OH
  W += c[7] * 17.007000;  // OHV
  W += c[8] * 34.014000;  // H2O2
  W += c[9] * 33.006000;  // HO2
  W += c[10] * 30.006000; // NO
  W += c[11] * 17.031000; // NH3
  W += c[12] * 16.023000; // NH2
  W += c[13] * 15.015000; // NH
  W += c[14] * 14.007000; // N
  W += c[15] * 29.022000; // NNH
  W += c[16] * 32.046000; // N2H4
  W += c[17] * 31.038000; // N2H3
  W += c[18] * 30.030000; // N2H2
  W += c[19] * 30.030000; // H2NN
  W += c[20] * 33.030000; // NH2OH
  W += c[21] * 32.022000; // H2NO
  W += c[22] * 32.022000; // HNOH
  W += c[23] * 31.014000; // HNO
  W += c[24] * 31.014000; // HON
  W += c[25] * 46.005000; // NO2
  W += c[26] * 47.013000; // HONO
  W += c[27] * 47.013000; // HNO2
  W += c[28] * 62.004000; // NO3
  W += c[29] * 63.012000; // HONO2
  W += c[30] * 44.013000; // N2O
  W += c[31] * 63.012000; // HNO3

  for (int id = 0; id < 32; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 28.014000;                    // N2
  XW += x[1] * 2.016000;                     // H2
  XW += x[2] * 1.008000;                     // H
  XW += x[3] * 31.998000;                    // O2
  XW += x[4] * 15.999000;                    // O
  XW += x[5] * 18.015000;                    // H2O
  XW += x[6] * 17.007000;                    // OH
  XW += x[7] * 17.007000;                    // OHV
  XW += x[8] * 34.014000;                    // H2O2
  XW += x[9] * 33.006000;                    // HO2
  XW += x[10] * 30.006000;                   // NO
  XW += x[11] * 17.031000;                   // NH3
  XW += x[12] * 16.023000;                   // NH2
  XW += x[13] * 15.015000;                   // NH
  XW += x[14] * 14.007000;                   // N
  XW += x[15] * 29.022000;                   // NNH
  XW += x[16] * 32.046000;                   // N2H4
  XW += x[17] * 31.038000;                   // N2H3
  XW += x[18] * 30.030000;                   // N2H2
  XW += x[19] * 30.030000;                   // H2NN
  XW += x[20] * 33.030000;                   // NH2OH
  XW += x[21] * 32.022000;                   // H2NO
  XW += x[22] * 32.022000;                   // HNOH
  XW += x[23] * 31.014000;                   // HNO
  XW += x[24] * 31.014000;                   // HON
  XW += x[25] * 46.005000;                   // NO2
  XW += x[26] * 47.013000;                   // HONO
  XW += x[27] * 47.013000;                   // HNO2
  XW += x[28] * 62.004000;                   // NO3
  XW += x[29] * 63.012000;                   // HONO2
  XW += x[30] * 44.013000;                   // N2O
  XW += x[31] * 63.012000;                   // HNO3
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 28.014000;  // N2
  W += c[1] * 2.016000;   // H2
  W += c[2] * 1.008000;   // H
  W += c[3] * 31.998000;  // O2
  W += c[4] * 15.999000;  // O
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 17.007000;  // OH
  W += c[7] * 17.007000;  // OHV
  W += c[8] * 34.014000;  // H2O2
  W += c[9] * 33.006000;  // HO2
  W += c[10] * 30.006000; // NO
  W += c[11] * 17.031000; // NH3
  W += c[12] * 16.023000; // NH2
  W += c[13] * 15.015000; // NH
  W += c[14] * 14.007000; // N
  W += c[15] * 29.022000; // NNH
  W += c[16] * 32.046000; // N2H4
  W += c[17] * 31.038000; // N2H3
  W += c[18] * 30.030000; // N2H2
  W += c[19] * 30.030000; // H2NN
  W += c[20] * 33.030000; // NH2OH
  W += c[21] * 32.022000; // H2NO
  W += c[22] * 32.022000; // HNOH
  W += c[23] * 31.014000; // HNO
  W += c[24] * 31.014000; // HON
  W += c[25] * 46.005000; // NO2
  W += c[26] * 47.013000; // HONO
  W += c[27] * 47.013000; // HNO2
  W += c[28] * 62.004000; // NO3
  W += c[29] * 63.012000; // HONO2
  W += c[30] * 44.013000; // N2O
  W += c[31] * 63.012000; // HNO3

  for (int id = 0; id < 32; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;      //  see Eq 4 in CK Manual
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 2.016000;   // H2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 15.999000;  // O
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 17.007000;  // OH
  XW += x[7] * 17.007000;  // OHV
  XW += x[8] * 34.014000;  // H2O2
  XW += x[9] * 33.006000;  // HO2
  XW += x[10] * 30.006000; // NO
  XW += x[11] * 17.031000; // NH3
  XW += x[12] * 16.023000; // NH2
  XW += x[13] * 15.015000; // NH
  XW += x[14] * 14.007000; // N
  XW += x[15] * 29.022000; // NNH
  XW += x[16] * 32.046000; // N2H4
  XW += x[17] * 31.038000; // N2H3
  XW += x[18] * 30.030000; // N2H2
  XW += x[19] * 30.030000; // H2NN
  XW += x[20] * 33.030000; // NH2OH
  XW += x[21] * 32.022000; // H2NO
  XW += x[22] * 32.022000; // HNOH
  XW += x[23] * 31.014000; // HNO
  XW += x[24] * 31.014000; // HON
  XW += x[25] * 46.005000; // NO2
  XW += x[26] * 47.013000; // HONO
  XW += x[27] * 47.013000; // HNO2
  XW += x[28] * 62.004000; // NO3
  XW += x[29] * 63.012000; // HONO2
  XW += x[30] * 44.013000; // N2O
  XW += x[31] * 63.012000; // HNO3
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 28.014000;  // N2
  W += c[1] * 2.016000;   // H2
  W += c[2] * 1.008000;   // H
  W += c[3] * 31.998000;  // O2
  W += c[4] * 15.999000;  // O
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 17.007000;  // OH
  W += c[7] * 17.007000;  // OHV
  W += c[8] * 34.014000;  // H2O2
  W += c[9] * 33.006000;  // HO2
  W += c[10] * 30.006000; // NO
  W += c[11] * 17.031000; // NH3
  W += c[12] * 16.023000; // NH2
  W += c[13] * 15.015000; // NH
  W += c[14] * 14.007000; // N
  W += c[15] * 29.022000; // NNH
  W += c[16] * 32.046000; // N2H4
  W += c[17] * 31.038000; // N2H3
  W += c[18] * 30.030000; // N2H2
  W += c[19] * 30.030000; // H2NN
  W += c[20] * 33.030000; // NH2OH
  W += c[21] * 32.022000; // H2NO
  W += c[22] * 32.022000; // HNOH
  W += c[23] * 31.014000; // HNO
  W += c[24] * 31.014000; // HON
  W += c[25] * 46.005000; // NO2
  W += c[26] * 47.013000; // HONO
  W += c[27] * 47.013000; // HNO2
  W += c[28] * 62.004000; // NO3
  W += c[29] * 63.012000; // HONO2
  W += c[30] * 44.013000; // N2O
  W += c[31] * 63.012000; // HNO3

  for (int id = 0; id < 32; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against division by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  cp_R(cpor, T);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  speciesEnthalpy(hort, T);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  speciesEntropy(sor, T);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 32; i++) {
    x[i] = y[i] * imw(i) * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 32; i++) {
    c[i] = y[i] * imw(i);
  }
  for (int i = 0; i < 32; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 32; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{

  for (int i = 0; i < 32; i++) {
    c[i] = rho * y[i] * imw(i);
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 2.016000;   // H2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 15.999000;  // O
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 17.007000;  // OH
  XW += x[7] * 17.007000;  // OHV
  XW += x[8] * 34.014000;  // H2O2
  XW += x[9] * 33.006000;  // HO2
  XW += x[10] * 30.006000; // NO
  XW += x[11] * 17.031000; // NH3
  XW += x[12] * 16.023000; // NH2
  XW += x[13] * 15.015000; // NH
  XW += x[14] * 14.007000; // N
  XW += x[15] * 29.022000; // NNH
  XW += x[16] * 32.046000; // N2H4
  XW += x[17] * 31.038000; // N2H3
  XW += x[18] * 30.030000; // N2H2
  XW += x[19] * 30.030000; // H2NN
  XW += x[20] * 33.030000; // NH2OH
  XW += x[21] * 32.022000; // H2NO
  XW += x[22] * 32.022000; // HNOH
  XW += x[23] * 31.014000; // HNO
  XW += x[24] * 31.014000; // HON
  XW += x[25] * 46.005000; // NO2
  XW += x[26] * 47.013000; // HONO
  XW += x[27] * 47.013000; // HNO2
  XW += x[28] * 62.004000; // NO3
  XW += x[29] * 63.012000; // HONO2
  XW += x[30] * 44.013000; // N2O
  XW += x[31] * 63.012000; // HNO3
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 28.014000 * XWinv;
  y[1] = x[1] * 2.016000 * XWinv;
  y[2] = x[2] * 1.008000 * XWinv;
  y[3] = x[3] * 31.998000 * XWinv;
  y[4] = x[4] * 15.999000 * XWinv;
  y[5] = x[5] * 18.015000 * XWinv;
  y[6] = x[6] * 17.007000 * XWinv;
  y[7] = x[7] * 17.007000 * XWinv;
  y[8] = x[8] * 34.014000 * XWinv;
  y[9] = x[9] * 33.006000 * XWinv;
  y[10] = x[10] * 30.006000 * XWinv;
  y[11] = x[11] * 17.031000 * XWinv;
  y[12] = x[12] * 16.023000 * XWinv;
  y[13] = x[13] * 15.015000 * XWinv;
  y[14] = x[14] * 14.007000 * XWinv;
  y[15] = x[15] * 29.022000 * XWinv;
  y[16] = x[16] * 32.046000 * XWinv;
  y[17] = x[17] * 31.038000 * XWinv;
  y[18] = x[18] * 30.030000 * XWinv;
  y[19] = x[19] * 30.030000 * XWinv;
  y[20] = x[20] * 33.030000 * XWinv;
  y[21] = x[21] * 32.022000 * XWinv;
  y[22] = x[22] * 32.022000 * XWinv;
  y[23] = x[23] * 31.014000 * XWinv;
  y[24] = x[24] * 31.014000 * XWinv;
  y[25] = x[25] * 46.005000 * XWinv;
  y[26] = x[26] * 47.013000 * XWinv;
  y[27] = x[27] * 47.013000 * XWinv;
  y[28] = x[28] * 62.004000 * XWinv;
  y[29] = x[29] * 63.012000 * XWinv;
  y[30] = x[30] * 44.013000 * XWinv;
  y[31] = x[31] * 63.012000 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (int id = 0; id < 32; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 2.016000;   // H2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 15.999000;  // O
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 17.007000;  // OH
  XW += x[7] * 17.007000;  // OHV
  XW += x[8] * 34.014000;  // H2O2
  XW += x[9] * 33.006000;  // HO2
  XW += x[10] * 30.006000; // NO
  XW += x[11] * 17.031000; // NH3
  XW += x[12] * 16.023000; // NH2
  XW += x[13] * 15.015000; // NH
  XW += x[14] * 14.007000; // N
  XW += x[15] * 29.022000; // NNH
  XW += x[16] * 32.046000; // N2H4
  XW += x[17] * 31.038000; // N2H3
  XW += x[18] * 30.030000; // N2H2
  XW += x[19] * 30.030000; // H2NN
  XW += x[20] * 33.030000; // NH2OH
  XW += x[21] * 32.022000; // H2NO
  XW += x[22] * 32.022000; // HNOH
  XW += x[23] * 31.014000; // HNO
  XW += x[24] * 31.014000; // HON
  XW += x[25] * 46.005000; // NO2
  XW += x[26] * 47.013000; // HONO
  XW += x[27] * 47.013000; // HNO2
  XW += x[28] * 62.004000; // NO3
  XW += x[29] * 63.012000; // HONO2
  XW += x[30] * 44.013000; // N2O
  XW += x[31] * 63.012000; // HNO3
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 32; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  amrex::Real sumC = 0;

  // compute sum of c
  for (int id = 0; id < 32; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (int id = 0; id < 32; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 28.014000;  // N2
  CW += c[1] * 2.016000;   // H2
  CW += c[2] * 1.008000;   // H
  CW += c[3] * 31.998000;  // O2
  CW += c[4] * 15.999000;  // O
  CW += c[5] * 18.015000;  // H2O
  CW += c[6] * 17.007000;  // OH
  CW += c[7] * 17.007000;  // OHV
  CW += c[8] * 34.014000;  // H2O2
  CW += c[9] * 33.006000;  // HO2
  CW += c[10] * 30.006000; // NO
  CW += c[11] * 17.031000; // NH3
  CW += c[12] * 16.023000; // NH2
  CW += c[13] * 15.015000; // NH
  CW += c[14] * 14.007000; // N
  CW += c[15] * 29.022000; // NNH
  CW += c[16] * 32.046000; // N2H4
  CW += c[17] * 31.038000; // N2H3
  CW += c[18] * 30.030000; // N2H2
  CW += c[19] * 30.030000; // H2NN
  CW += c[20] * 33.030000; // NH2OH
  CW += c[21] * 32.022000; // H2NO
  CW += c[22] * 32.022000; // HNOH
  CW += c[23] * 31.014000; // HNO
  CW += c[24] * 31.014000; // HON
  CW += c[25] * 46.005000; // NO2
  CW += c[26] * 47.013000; // HONO
  CW += c[27] * 47.013000; // HNO2
  CW += c[28] * 62.004000; // NO3
  CW += c[29] * 63.012000; // HONO2
  CW += c[30] * 44.013000; // N2O
  CW += c[31] * 63.012000; // HNO3
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 28.014000 * CWinv;
  y[1] = c[1] * 2.016000 * CWinv;
  y[2] = c[2] * 1.008000 * CWinv;
  y[3] = c[3] * 31.998000 * CWinv;
  y[4] = c[4] * 15.999000 * CWinv;
  y[5] = c[5] * 18.015000 * CWinv;
  y[6] = c[6] * 17.007000 * CWinv;
  y[7] = c[7] * 17.007000 * CWinv;
  y[8] = c[8] * 34.014000 * CWinv;
  y[9] = c[9] * 33.006000 * CWinv;
  y[10] = c[10] * 30.006000 * CWinv;
  y[11] = c[11] * 17.031000 * CWinv;
  y[12] = c[12] * 16.023000 * CWinv;
  y[13] = c[13] * 15.015000 * CWinv;
  y[14] = c[14] * 14.007000 * CWinv;
  y[15] = c[15] * 29.022000 * CWinv;
  y[16] = c[16] * 32.046000 * CWinv;
  y[17] = c[17] * 31.038000 * CWinv;
  y[18] = c[18] * 30.030000 * CWinv;
  y[19] = c[19] * 30.030000 * CWinv;
  y[20] = c[20] * 33.030000 * CWinv;
  y[21] = c[21] * 32.022000 * CWinv;
  y[22] = c[22] * 32.022000 * CWinv;
  y[23] = c[23] * 31.014000 * CWinv;
  y[24] = c[24] * 31.014000 * CWinv;
  y[25] = c[25] * 46.005000 * CWinv;
  y[26] = c[26] * 47.013000 * CWinv;
  y[27] = c[27] * 47.013000 * CWinv;
  y[28] = c[28] * 62.004000 * CWinv;
  y[29] = c[29] * 63.012000 * CWinv;
  y[30] = c[30] * 44.013000 * CWinv;
  y[31] = c[31] * 63.012000 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  cv_R(cvml, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  cp_R(cpml, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  speciesEntropy(sml, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  cv_R(cvms, T);
  // multiply by R/molecularweight
  cvms[0] *= 2.967966951578939e+06;  // N2
  cvms[1] *= 4.124237409798234e+07;  // H2
  cvms[2] *= 8.248474819596468e+07;  // H
  cvms[3] *= 2.598431970171023e+06;  // O2
  cvms[4] *= 5.196863940342046e+06;  // O
  cvms[5] *= 4.615299815794193e+06;  // H2O
  cvms[6] *= 4.888847308845322e+06;  // OH
  cvms[7] *= 4.888847308845322e+06;  // OHV
  cvms[8] *= 2.444423654422661e+06;  // H2O2
  cvms[9] *= 2.519076112874398e+06;  // HO2
  cvms[10] *= 2.770933352713870e+06; // NO
  cvms[11] *= 4.881957969674852e+06; // NH3
  cvms[12] *= 5.189079834084279e+06; // NH2
  cvms[13] *= 5.537437641127699e+06; // NH
  cvms[14] *= 5.935933903157878e+06; // N
  cvms[15] *= 2.864882715923520e+06; // NNH
  cvms[16] *= 2.594539917042139e+06; // N2H4
  cvms[17] *= 2.678801023955551e+06; // N2H3
  cvms[18] *= 2.768718820563850e+06; // N2H2
  cvms[19] *= 2.768718820563850e+06; // H2NN
  cvms[20] *= 2.517245721511729e+06; // NH2OH
  cvms[21] *= 2.596484485089389e+06; // H2NO
  cvms[22] *= 2.596484485089389e+06; // HNOH
  cvms[23] *= 2.680873998243773e+06; // HNO
  cvms[24] *= 2.680873998243773e+06; // HON
  cvms[25] *= 1.807295428356318e+06; // NO2
  cvms[26] *= 1.768545427467560e+06; // HONO
  cvms[27] *= 1.768545427467560e+06; // HNO2
  cvms[28] *= 1.340955844486362e+06; // NO3
  cvms[29] *= 1.319504636918879e+06; // HONO2
  cvms[30] *= 1.889092454082485e+06; // N2O
  cvms[31] *= 1.319504636918879e+06; // HNO3
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  cp_R(cpms, T);
  // multiply by R/molecularweight
  cpms[0] *= 2.967966951578939e+06;  // N2
  cpms[1] *= 4.124237409798234e+07;  // H2
  cpms[2] *= 8.248474819596468e+07;  // H
  cpms[3] *= 2.598431970171023e+06;  // O2
  cpms[4] *= 5.196863940342046e+06;  // O
  cpms[5] *= 4.615299815794193e+06;  // H2O
  cpms[6] *= 4.888847308845322e+06;  // OH
  cpms[7] *= 4.888847308845322e+06;  // OHV
  cpms[8] *= 2.444423654422661e+06;  // H2O2
  cpms[9] *= 2.519076112874398e+06;  // HO2
  cpms[10] *= 2.770933352713870e+06; // NO
  cpms[11] *= 4.881957969674852e+06; // NH3
  cpms[12] *= 5.189079834084279e+06; // NH2
  cpms[13] *= 5.537437641127699e+06; // NH
  cpms[14] *= 5.935933903157878e+06; // N
  cpms[15] *= 2.864882715923520e+06; // NNH
  cpms[16] *= 2.594539917042139e+06; // N2H4
  cpms[17] *= 2.678801023955551e+06; // N2H3
  cpms[18] *= 2.768718820563850e+06; // N2H2
  cpms[19] *= 2.768718820563850e+06; // H2NN
  cpms[20] *= 2.517245721511729e+06; // NH2OH
  cpms[21] *= 2.596484485089389e+06; // H2NO
  cpms[22] *= 2.596484485089389e+06; // HNOH
  cpms[23] *= 2.680873998243773e+06; // HNO
  cpms[24] *= 2.680873998243773e+06; // HON
  cpms[25] *= 1.807295428356318e+06; // NO2
  cpms[26] *= 1.768545427467560e+06; // HONO
  cpms[27] *= 1.768545427467560e+06; // HNO2
  cpms[28] *= 1.340955844486362e+06; // NO3
  cpms[29] *= 1.319504636918879e+06; // HONO2
  cpms[30] *= 1.889092454082485e+06; // N2O
  cpms[31] *= 1.319504636918879e+06; // HNO3
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesInternalEnergy(ums, T);

  for (int i = 0; i < 32; i++) {
    ums[i] *= RT * imw(i);
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesEnthalpy(hms, T);

  for (int i = 0; i < 32; i++) {
    hms[i] *= RT * imw(i);
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  speciesEntropy(sms, T);
  // multiply by R/molecularweight
  sms[0] *= 2.967966951578939e+06;  // N2
  sms[1] *= 4.124237409798234e+07;  // H2
  sms[2] *= 8.248474819596468e+07;  // H
  sms[3] *= 2.598431970171023e+06;  // O2
  sms[4] *= 5.196863940342046e+06;  // O
  sms[5] *= 4.615299815794193e+06;  // H2O
  sms[6] *= 4.888847308845322e+06;  // OH
  sms[7] *= 4.888847308845322e+06;  // OHV
  sms[8] *= 2.444423654422661e+06;  // H2O2
  sms[9] *= 2.519076112874398e+06;  // HO2
  sms[10] *= 2.770933352713870e+06; // NO
  sms[11] *= 4.881957969674852e+06; // NH3
  sms[12] *= 5.189079834084279e+06; // NH2
  sms[13] *= 5.537437641127699e+06; // NH
  sms[14] *= 5.935933903157878e+06; // N
  sms[15] *= 2.864882715923520e+06; // NNH
  sms[16] *= 2.594539917042139e+06; // N2H4
  sms[17] *= 2.678801023955551e+06; // N2H3
  sms[18] *= 2.768718820563850e+06; // N2H2
  sms[19] *= 2.768718820563850e+06; // H2NN
  sms[20] *= 2.517245721511729e+06; // NH2OH
  sms[21] *= 2.596484485089389e+06; // H2NO
  sms[22] *= 2.596484485089389e+06; // HNOH
  sms[23] *= 2.680873998243773e+06; // HNO
  sms[24] *= 2.680873998243773e+06; // HON
  sms[25] *= 1.807295428356318e+06; // NO2
  sms[26] *= 1.768545427467560e+06; // HONO
  sms[27] *= 1.768545427467560e+06; // HNO2
  sms[28] *= 1.340955844486362e+06; // NO3
  sms[29] *= 1.319504636918879e+06; // HONO2
  sms[30] *= 1.889092454082485e+06; // N2O
  sms[31] *= 1.319504636918879e+06; // HNO3
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* /*sc_qss*/,
  const amrex::Real T,
  const amrex::Real invT,
  const amrex::Real logT)
{

  // reaction 10: H + OH (+M) <=> H2O (+M)
  qf[0] = sc[2] * sc[6];
  qr[0] = sc[5];

  // reaction 22: H2O2 (+M) <=> 2 OH (+M)
  qf[1] = sc[8];
  qr[1] = (sc[6] * sc[6]);

  // reaction 35: H + O2 (+M) <=> HO2 (+M)
  qf[2] = sc[2] * sc[3];
  qr[2] = sc[9];

  // reaction 82: NH2OH (+M) <=> NH2 + OH (+M)
  qf[3] = sc[20];
  qr[3] = sc[6] * sc[12];

  // reaction 121: NO + O (+M) <=> NO2 (+M)
  qf[4] = sc[4] * sc[10];
  qr[4] = sc[25];

  // reaction 133: NO2 + O (+M) <=> NO3 (+M)
  qf[5] = sc[4] * sc[25];
  qr[5] = sc[28];

  // reaction 139: NO2 + OH (+M) <=> HONO2 (+M)
  qf[6] = sc[6] * sc[25];
  qr[6] = sc[29];

  // reaction 168: 2 NH2 (+M) <=> N2H4 (+M)
  qf[7] = (sc[12] * sc[12]);
  qr[7] = sc[16];

  // reaction 224: H + NH2 (+M) <=> NH3 (+M)
  qf[8] = sc[2] * sc[12];
  qr[8] = sc[11];

  // reaction 225: H + NO (+M) <=> HNO (+M)
  qf[9] = sc[2] * sc[10];
  qr[9] = sc[23];

  // reaction 155: N2O (+M) <=> N2 + O (+M)
  qf[10] = sc[30];
  qr[10] = sc[0] * sc[4];

  // reaction 0: H2 + M <=> 2 H + M
  qf[11] = sc[1];
  qr[11] = (sc[2] * sc[2]);

  // reaction 4: 2 H + O2 <=> H2 + O2
  qf[12] = (sc[2] * sc[2]) * sc[3];
  qr[12] = sc[1] * sc[3];

  // reaction 6: H + O + O2 <=> OH + O2
  qf[13] = sc[2] * sc[3] * sc[4];
  qr[13] = sc[3] * sc[6];

  // reaction 7: H + OH + O2 <=> H2O + O2
  qf[14] = sc[2] * sc[3] * sc[6];
  qr[14] = sc[3] * sc[5];

  // reaction 8: 2 O + M <=> O2 + M
  qf[15] = (sc[4] * sc[4]);
  qr[15] = sc[3];

  // reaction 12: H + O + M <=> OH + M
  qf[16] = sc[2] * sc[4];
  qr[16] = sc[6];

  // reaction 13: H + O + M <=> OHV + M
  qf[17] = sc[2] * sc[4];
  qr[17] = sc[7];

  // reaction 95: H2NO + M <=> H + HNO + M
  qf[18] = sc[21];
  qr[18] = sc[2] * sc[23];

  // reaction 96: H2NO + M <=> HNOH + M
  qf[19] = sc[21];
  qr[19] = sc[22];

  // reaction 105: HNOH + M <=> H + HNO + M
  qf[20] = sc[22];
  qr[20] = sc[2] * sc[23];

  // reaction 138: NO3 + NO2 <=> NO + O2 + NO2
  qf[21] = sc[25] * sc[28];
  qr[21] = sc[3] * sc[10] * sc[25];

  // reaction 144: HO2 + NO + M <=> HNO3 + M
  qf[22] = sc[9] * sc[10];
  qr[22] = sc[31];

  // reaction 149: HON + M <=> H + NO + M
  qf[23] = sc[24];
  qr[23] = sc[2] * sc[10];

  // reaction 1: H2 + O <=> H + OH
  qf[24] = sc[1] * sc[4];
  qr[24] = sc[2] * sc[6];

  // reaction 2: H2 + O <=> H + OH
  qf[25] = sc[1] * sc[4];
  qr[25] = sc[2] * sc[6];

  // reaction 3: H2 + OH <=> H + H2O
  qf[26] = sc[1] * sc[6];
  qr[26] = sc[2] * sc[5];

  // reaction 5: 2 H + O2 <=> 2 OH
  qf[27] = (sc[2] * sc[2]) * sc[3];
  qr[27] = (sc[6] * sc[6]);

  // reaction 9: H + O2 <=> O + OH
  qf[28] = sc[2] * sc[3];
  qr[28] = sc[4] * sc[6];

  // reaction 11: 2 OH <=> H2O + O
  qf[29] = (sc[6] * sc[6]);
  qr[29] = sc[4] * sc[5];

  // reaction 14: H2O + OHV <=> H2O + OH
  qf[30] = sc[5] * sc[7];
  qr[30] = sc[5] * sc[6];

  // reaction 15: H2 + OHV <=> H2 + OH
  qf[31] = sc[1] * sc[7];
  qr[31] = sc[1] * sc[6];

  // reaction 16: N2 + OHV <=> N2 + OH
  qf[32] = sc[0] * sc[7];
  qr[32] = sc[0] * sc[6];

  // reaction 17: OH + OHV <=> 2 OH
  qf[33] = sc[6] * sc[7];
  qr[33] = (sc[6] * sc[6]);

  // reaction 18: H + OHV <=> H + OH
  qf[34] = sc[2] * sc[7];
  qr[34] = sc[2] * sc[6];

  // reaction 19: OHV <=> OH
  qf[35] = sc[7];
  qr[35] = sc[6];

  // reaction 20: O2 + OHV <=> O2 + OH
  qf[36] = sc[3] * sc[7];
  qr[36] = sc[3] * sc[6];

  // reaction 21: O + OHV <=> O + OH
  qf[37] = sc[4] * sc[7];
  qr[37] = sc[4] * sc[6];

  // reaction 23: H + H2O2 <=> H2O + OH
  qf[38] = sc[2] * sc[8];
  qr[38] = sc[5] * sc[6];

  // reaction 24: H + H2O2 <=> H2 + HO2
  qf[39] = sc[2] * sc[8];
  qr[39] = sc[1] * sc[9];

  // reaction 25: H2O2 + O <=> HO2 + OH
  qf[40] = sc[4] * sc[8];
  qr[40] = sc[6] * sc[9];

  // reaction 26: H2O2 + OH <=> H2O + HO2
  qf[41] = sc[6] * sc[8];
  qr[41] = sc[5] * sc[9];

  // reaction 27: H2O2 + OH <=> H2O + HO2
  qf[42] = sc[6] * sc[8];
  qr[42] = sc[5] * sc[9];

  // reaction 28: H + HO2 <=> H2 + O2
  qf[43] = sc[2] * sc[9];
  qr[43] = sc[1] * sc[3];

  // reaction 29: H + HO2 <=> 2 OH
  qf[44] = sc[2] * sc[9];
  qr[44] = (sc[6] * sc[6]);

  // reaction 30: HO2 + O <=> O2 + OH
  qf[45] = sc[4] * sc[9];
  qr[45] = sc[3] * sc[6];

  // reaction 31: HO2 + OH <=> H2O + O2
  qf[46] = sc[6] * sc[9];
  qr[46] = sc[3] * sc[5];

  // reaction 32: HO2 + OH <=> H2O + O2
  qf[47] = sc[6] * sc[9];
  qr[47] = sc[3] * sc[5];

  // reaction 33: 2 HO2 <=> H2O2 + O2
  qf[48] = (sc[9] * sc[9]);
  qr[48] = sc[3] * sc[8];

  // reaction 34: 2 HO2 <=> H2O2 + O2
  qf[49] = (sc[9] * sc[9]);
  qr[49] = sc[3] * sc[8];

  // reaction 36: H + NH3 <=> H2 + NH2
  qf[50] = sc[2] * sc[11];
  qr[50] = sc[1] * sc[12];

  // reaction 37: NH3 + O <=> NH2 + OH
  qf[51] = sc[4] * sc[11];
  qr[51] = sc[6] * sc[12];

  // reaction 38: HO2 + NH3 <=> H2O2 + NH2
  qf[52] = sc[9] * sc[11];
  qr[52] = sc[8] * sc[12];

  // reaction 39: H2 + NH <=> H + NH2
  qf[53] = sc[1] * sc[13];
  qr[53] = sc[2] * sc[12];

  // reaction 40: NH2 + O <=> H + HNO
  qf[54] = sc[4] * sc[12];
  qr[54] = sc[2] * sc[23];

  // reaction 41: NH2 + O <=> NH + OH
  qf[55] = sc[4] * sc[12];
  qr[55] = sc[6] * sc[13];

  // reaction 42: NH2 + O <=> NH + OH
  qf[56] = sc[4] * sc[12];
  qr[56] = sc[6] * sc[13];

  // reaction 43: NH2 + OH <=> H2O + NH
  qf[57] = sc[6] * sc[12];
  qr[57] = sc[5] * sc[13];

  // reaction 44: HO2 + NH2 <=> H2O + HNO
  qf[58] = sc[9] * sc[12];
  qr[58] = sc[5] * sc[23];

  // reaction 45: HO2 + NH2 <=> H2O + HNO
  qf[59] = sc[9] * sc[12];
  qr[59] = sc[5] * sc[23];

  // reaction 46: HO2 + NH2 <=> H2O + HON
  qf[60] = sc[9] * sc[12];
  qr[60] = sc[5] * sc[24];

  // reaction 47: NH2 + O2 <=> H2NO + O
  qf[61] = sc[3] * sc[12];
  qr[61] = sc[4] * sc[21];

  // reaction 48: NH2 + O2 <=> HNO + OH
  qf[62] = sc[3] * sc[12];
  qr[62] = sc[6] * sc[23];

  // reaction 49: 2 NH2 <=> NH + NH3
  qf[63] = (sc[12] * sc[12]);
  qr[63] = sc[11] * sc[13];

  // reaction 50: NH + NH2 <=> N + NH3
  qf[64] = sc[12] * sc[13];
  qr[64] = sc[11] * sc[14];

  // reaction 51: N + NH2 <=> 2 H + N2
  qf[65] = sc[12] * sc[14];
  qr[65] = sc[0] * (sc[2] * sc[2]);

  // reaction 52: HNO + NH2 <=> NH3 + NO
  qf[66] = sc[12] * sc[23];
  qr[66] = sc[10] * sc[11];

  // reaction 53: HONO + NH2 <=> NH3 + NO2
  qf[67] = sc[12] * sc[26];
  qr[67] = sc[11] * sc[25];

  // reaction 54: NH2 + NO2 <=> H2NO + NO
  qf[68] = sc[12] * sc[25];
  qr[68] = sc[10] * sc[21];

  // reaction 55: NH2 + NO2 <=> H2O + N2O
  qf[69] = sc[12] * sc[25];
  qr[69] = sc[5] * sc[30];

  // reaction 56: H + NH <=> H2 + N
  qf[70] = sc[2] * sc[13];
  qr[70] = sc[1] * sc[14];

  // reaction 57: NH + O <=> H + NO
  qf[71] = sc[4] * sc[13];
  qr[71] = sc[2] * sc[10];

  // reaction 58: NH + OH <=> H + HNO
  qf[72] = sc[6] * sc[13];
  qr[72] = sc[2] * sc[23];

  // reaction 59: NH + OH <=> H2O + N
  qf[73] = sc[6] * sc[13];
  qr[73] = sc[5] * sc[14];

  // reaction 60: NH + O2 <=> HNO + O
  qf[74] = sc[3] * sc[13];
  qr[74] = sc[4] * sc[23];

  // reaction 61: NH + O2 <=> NO + OH
  qf[75] = sc[3] * sc[13];
  qr[75] = sc[6] * sc[10];

  // reaction 62: 2 NH <=> N + NH2
  qf[76] = (sc[13] * sc[13]);
  qr[76] = sc[12] * sc[14];

  // reaction 63: N + NH <=> H + N2
  qf[77] = sc[13] * sc[14];
  qr[77] = sc[0] * sc[2];

  // reaction 64: NH + NO <=> H + N2O
  qf[78] = sc[10] * sc[13];
  qr[78] = sc[2] * sc[30];

  // reaction 65: NH + NO <=> N2 + OH
  qf[79] = sc[10] * sc[13];
  qr[79] = sc[0] * sc[6];

  // reaction 66: HONO + NH <=> NH2 + NO2
  qf[80] = sc[13] * sc[26];
  qr[80] = sc[12] * sc[25];

  // reaction 67: NH + NO2 <=> N2O + OH
  qf[81] = sc[13] * sc[25];
  qr[81] = sc[6] * sc[30];

  // reaction 68: NH + NO2 <=> HNO + NO
  qf[82] = sc[13] * sc[25];
  qr[82] = sc[10] * sc[23];

  // reaction 69: N + OH <=> H + NO
  qf[83] = sc[6] * sc[14];
  qr[83] = sc[2] * sc[10];

  // reaction 70: N + O2 <=> NO + O
  qf[84] = sc[3] * sc[14];
  qr[84] = sc[4] * sc[10];

  // reaction 71: N + NO <=> N2 + O
  qf[85] = sc[10] * sc[14];
  qr[85] = sc[0] * sc[4];

  // reaction 72: NNH <=> H + N2
  qf[86] = sc[15];
  qr[86] = sc[0] * sc[2];

  // reaction 73: H + NNH <=> H2 + N2
  qf[87] = sc[2] * sc[15];
  qr[87] = sc[0] * sc[1];

  // reaction 74: NNH + O <=> H + N2O
  qf[88] = sc[4] * sc[15];
  qr[88] = sc[2] * sc[30];

  // reaction 75: NNH + O <=> N2 + OH
  qf[89] = sc[4] * sc[15];
  qr[89] = sc[0] * sc[6];

  // reaction 76: NNH + O <=> NH + NO
  qf[90] = sc[4] * sc[15];
  qr[90] = sc[10] * sc[13];

  // reaction 77: NNH + OH <=> H2O + N2
  qf[91] = sc[6] * sc[15];
  qr[91] = sc[0] * sc[5];

  // reaction 78: NNH + O2 <=> HO2 + N2
  qf[92] = sc[3] * sc[15];
  qr[92] = sc[0] * sc[9];

  // reaction 79: NH + NNH <=> N2 + NH2
  qf[93] = sc[13] * sc[15];
  qr[93] = sc[0] * sc[12];

  // reaction 80: NH2 + NNH <=> N2 + NH3
  qf[94] = sc[12] * sc[15];
  qr[94] = sc[0] * sc[11];

  // reaction 81: NNH + NO <=> HNO + N2
  qf[95] = sc[10] * sc[15];
  qr[95] = sc[0] * sc[23];

  // reaction 83: H + NH2OH <=> H2 + HNOH
  qf[96] = sc[2] * sc[20];
  qr[96] = sc[1] * sc[22];

  // reaction 84: H + NH2OH <=> H2 + H2NO
  qf[97] = sc[2] * sc[20];
  qr[97] = sc[1] * sc[21];

  // reaction 85: NH2OH + O <=> HNOH + OH
  qf[98] = sc[4] * sc[20];
  qr[98] = sc[6] * sc[22];

  // reaction 86: NH2OH + O <=> H2NO + OH
  qf[99] = sc[4] * sc[20];
  qr[99] = sc[6] * sc[21];

  // reaction 87: NH2OH + OH <=> H2O + HNOH
  qf[100] = sc[6] * sc[20];
  qr[100] = sc[5] * sc[22];

  // reaction 88: NH2OH + OH <=> H2NO + H2O
  qf[101] = sc[6] * sc[20];
  qr[101] = sc[5] * sc[21];

  // reaction 89: NH2 + NH2OH <=> HNOH + NH3
  qf[102] = sc[12] * sc[20];
  qr[102] = sc[11] * sc[22];

  // reaction 90: NH2 + NH2OH <=> H2NO + NH3
  qf[103] = sc[12] * sc[20];
  qr[103] = sc[11] * sc[21];

  // reaction 91: NH + NH2OH <=> HNOH + NH2
  qf[104] = sc[13] * sc[20];
  qr[104] = sc[12] * sc[22];

  // reaction 92: NH + NH2OH <=> H2NO + NH2
  qf[105] = sc[13] * sc[20];
  qr[105] = sc[12] * sc[21];

  // reaction 93: HO2 + NH2OH <=> H2O2 + HNOH
  qf[106] = sc[9] * sc[20];
  qr[106] = sc[8] * sc[22];

  // reaction 94: HO2 + NH2OH <=> H2NO + H2O2
  qf[107] = sc[9] * sc[20];
  qr[107] = sc[8] * sc[21];

  // reaction 97: H + H2NO <=> H2 + HNO
  qf[108] = sc[2] * sc[21];
  qr[108] = sc[1] * sc[23];

  // reaction 98: H + H2NO <=> NH2 + OH
  qf[109] = sc[2] * sc[21];
  qr[109] = sc[6] * sc[12];

  // reaction 99: H2NO + O <=> HNO + OH
  qf[110] = sc[4] * sc[21];
  qr[110] = sc[6] * sc[23];

  // reaction 100: H2NO + OH <=> H2O + HNO
  qf[111] = sc[6] * sc[21];
  qr[111] = sc[5] * sc[23];

  // reaction 101: H2NO + HO2 <=> H2O2 + HNO
  qf[112] = sc[9] * sc[21];
  qr[112] = sc[8] * sc[23];

  // reaction 102: H2NO + NH2 <=> HNO + NH3
  qf[113] = sc[12] * sc[21];
  qr[113] = sc[11] * sc[23];

  // reaction 103: H2NO + NO <=> 2 HNO
  qf[114] = sc[10] * sc[21];
  qr[114] = (sc[23] * sc[23]);

  // reaction 104: H2NO + NO2 <=> HNO + HONO
  qf[115] = sc[21] * sc[25];
  qr[115] = sc[23] * sc[26];

  // reaction 106: H + HNOH <=> NH2 + OH
  qf[116] = sc[2] * sc[22];
  qr[116] = sc[6] * sc[12];

  // reaction 107: H + HNOH <=> H2 + HNO
  qf[117] = sc[2] * sc[22];
  qr[117] = sc[1] * sc[23];

  // reaction 108: HNOH + O <=> HNO + OH
  qf[118] = sc[4] * sc[22];
  qr[118] = sc[6] * sc[23];

  // reaction 109: HNOH + O <=> HNO + OH
  qf[119] = sc[4] * sc[22];
  qr[119] = sc[6] * sc[23];

  // reaction 110: HNOH + OH <=> H2O + HNO
  qf[120] = sc[6] * sc[22];
  qr[120] = sc[5] * sc[23];

  // reaction 111: HNOH + HO2 <=> H2O2 + HNO
  qf[121] = sc[9] * sc[22];
  qr[121] = sc[8] * sc[23];

  // reaction 112: HNOH + HO2 <=> NH2OH + O2
  qf[122] = sc[9] * sc[22];
  qr[122] = sc[3] * sc[20];

  // reaction 113: HNOH + O2 <=> HNO + HO2
  qf[123] = sc[3] * sc[22];
  qr[123] = sc[9] * sc[23];

  // reaction 114: HNOH + NH2 <=> HNO + NH3
  qf[124] = sc[12] * sc[22];
  qr[124] = sc[11] * sc[23];

  // reaction 115: HNOH + NO2 <=> HNO + HONO
  qf[125] = sc[22] * sc[25];
  qr[125] = sc[23] * sc[26];

  // reaction 116: H + HNO <=> H2 + NO
  qf[126] = sc[2] * sc[23];
  qr[126] = sc[1] * sc[10];

  // reaction 117: HNO + O <=> NO + OH
  qf[127] = sc[4] * sc[23];
  qr[127] = sc[6] * sc[10];

  // reaction 118: HNO + HO2 <=> HNO2 + OH
  qf[128] = sc[9] * sc[23];
  qr[128] = sc[6] * sc[27];

  // reaction 119: 2 HNO <=> H2O + N2O
  qf[129] = (sc[23] * sc[23]);
  qr[129] = sc[5] * sc[30];

  // reaction 120: HO2 + NO <=> NO2 + OH
  qf[130] = sc[9] * sc[10];
  qr[130] = sc[6] * sc[25];

  // reaction 122: NO2 + O <=> NO + O2
  qf[131] = sc[4] * sc[25];
  qr[131] = sc[3] * sc[10];

  // reaction 123: HO2 + NO2 <=> HONO + O2
  qf[132] = sc[9] * sc[25];
  qr[132] = sc[3] * sc[26];

  // reaction 124: HO2 + NO2 <=> HNO2 + O2
  qf[133] = sc[9] * sc[25];
  qr[133] = sc[3] * sc[27];

  // reaction 125: 2 NO2 <=> 2 NO + O2
  qf[134] = (sc[25] * sc[25]);
  qr[134] = sc[3] * (sc[10] * sc[10]);

  // reaction 126: 2 NO2 <=> NO + NO3
  qf[135] = (sc[25] * sc[25]);
  qr[135] = sc[10] * sc[28];

  // reaction 127: HONO + O <=> NO2 + OH
  qf[136] = sc[4] * sc[26];
  qr[136] = sc[6] * sc[25];

  // reaction 128: HONO + OH <=> H2O + NO2
  qf[137] = sc[6] * sc[26];
  qr[137] = sc[5] * sc[25];

  // reaction 129: HONO + NO2 <=> HONO2 + NO
  qf[138] = sc[25] * sc[26];
  qr[138] = sc[10] * sc[29];

  // reaction 130: 2 HONO <=> H2O + NO + NO2
  qf[139] = (sc[26] * sc[26]);
  qr[139] = sc[5] * sc[10] * sc[25];

  // reaction 131: HNO2 + O <=> NO2 + OH
  qf[140] = sc[4] * sc[27];
  qr[140] = sc[6] * sc[25];

  // reaction 132: HNO2 + OH <=> H2O + NO2
  qf[141] = sc[6] * sc[27];
  qr[141] = sc[5] * sc[25];

  // reaction 134: H + NO3 <=> NO2 + OH
  qf[142] = sc[2] * sc[28];
  qr[142] = sc[6] * sc[25];

  // reaction 135: NO3 + O <=> NO2 + O2
  qf[143] = sc[4] * sc[28];
  qr[143] = sc[3] * sc[25];

  // reaction 136: NO3 + OH <=> HO2 + NO2
  qf[144] = sc[6] * sc[28];
  qr[144] = sc[9] * sc[25];

  // reaction 137: HO2 + NO3 <=> NO2 + O2 + OH
  qf[145] = sc[9] * sc[28];
  qr[145] = sc[3] * sc[6] * sc[25];

  // reaction 140: H + HONO2 <=> H2 + NO3
  qf[146] = sc[2] * sc[29];
  qr[146] = sc[1] * sc[28];

  // reaction 141: H + HONO2 <=> H2O + NO2
  qf[147] = sc[2] * sc[29];
  qr[147] = sc[5] * sc[25];

  // reaction 142: H + HONO2 <=> HONO + OH
  qf[148] = sc[2] * sc[29];
  qr[148] = sc[6] * sc[26];

  // reaction 143: HONO2 + OH <=> H2O + NO3
  qf[149] = sc[6] * sc[29];
  qr[149] = sc[5] * sc[28];

  // reaction 145: H + HNO3 <=> H2 + NO3
  qf[150] = sc[2] * sc[31];
  qr[150] = sc[1] * sc[28];

  // reaction 146: H + HNO3 <=> H2O + NO2
  qf[151] = sc[2] * sc[31];
  qr[151] = sc[5] * sc[25];

  // reaction 147: H + HNO3 <=> HONO + OH
  qf[152] = sc[2] * sc[31];
  qr[152] = sc[6] * sc[26];

  // reaction 148: HNO3 + OH <=> H2O + NO3
  qf[153] = sc[6] * sc[31];
  qr[153] = sc[5] * sc[28];

  // reaction 150: H + HON <=> H + HNO
  qf[154] = sc[2] * sc[24];
  qr[154] = sc[2] * sc[23];

  // reaction 151: H + HON <=> NH + OH
  qf[155] = sc[2] * sc[24];
  qr[155] = sc[6] * sc[13];

  // reaction 152: HON + O <=> NO + OH
  qf[156] = sc[4] * sc[24];
  qr[156] = sc[6] * sc[10];

  // reaction 153: HON + OH <=> H + HONO
  qf[157] = sc[6] * sc[24];
  qr[157] = sc[2] * sc[26];

  // reaction 154: HON + O2 <=> NO2 + OH
  qf[158] = sc[3] * sc[24];
  qr[158] = sc[6] * sc[25];

  // reaction 156: H + N2O <=> N2 + OH
  qf[159] = sc[2] * sc[30];
  qr[159] = sc[0] * sc[6];

  // reaction 157: H + N2O <=> N2 + OHV
  qf[160] = sc[2] * sc[30];
  qr[160] = sc[0] * sc[7];

  // reaction 158: N2O + O <=> N2 + O2
  qf[161] = sc[4] * sc[30];
  qr[161] = sc[0] * sc[3];

  // reaction 159: N2O + O <=> 2 NO
  qf[162] = sc[4] * sc[30];
  qr[162] = (sc[10] * sc[10]);

  // reaction 160: N2O + OH <=> HO2 + N2
  qf[163] = sc[6] * sc[30];
  qr[163] = sc[0] * sc[9];

  // reaction 161: N2O + OH <=> HNO + NO
  qf[164] = sc[6] * sc[30];
  qr[164] = sc[10] * sc[23];

  // reaction 162: N2O + NO <=> N2 + NO2
  qf[165] = sc[10] * sc[30];
  qr[165] = sc[0] * sc[25];

  // reaction 163: 2 NH2 <=> H2 + N2H2
  qf[166] = (sc[12] * sc[12]);
  qr[166] = sc[1] * sc[18];

  // reaction 164: 2 NH2 <=> H2 + H2NN
  qf[167] = (sc[12] * sc[12]);
  qr[167] = sc[1] * sc[19];

  // reaction 165: NH + NH2 <=> H + N2H2
  qf[168] = sc[12] * sc[13];
  qr[168] = sc[2] * sc[18];

  // reaction 166: HNOH + NH2 <=> N2H3 + OH
  qf[169] = sc[12] * sc[22];
  qr[169] = sc[6] * sc[17];

  // reaction 167: HNOH + NH2 <=> H2NN + H2O
  qf[170] = sc[12] * sc[22];
  qr[170] = sc[5] * sc[19];

  // reaction 169: N2H4 <=> H2 + H2NN
  qf[171] = sc[16];
  qr[171] = sc[1] * sc[19];

  // reaction 170: H + N2H4 <=> H2 + N2H3
  qf[172] = sc[2] * sc[16];
  qr[172] = sc[1] * sc[17];

  // reaction 171: H + N2H4 <=> NH2 + NH3
  qf[173] = sc[2] * sc[16];
  qr[173] = sc[11] * sc[12];

  // reaction 172: N2H4 + O <=> N2H3 + OH
  qf[174] = sc[4] * sc[16];
  qr[174] = sc[6] * sc[17];

  // reaction 173: N2H4 + O <=> H2O + N2H2
  qf[175] = sc[4] * sc[16];
  qr[175] = sc[5] * sc[18];

  // reaction 174: N2H4 + OH <=> H2O + N2H3
  qf[176] = sc[6] * sc[16];
  qr[176] = sc[5] * sc[17];

  // reaction 175: N2H4 + NH2 <=> N2H3 + NH3
  qf[177] = sc[12] * sc[16];
  qr[177] = sc[11] * sc[17];

  // reaction 176: N2H4 + NO <=> HNO + N2H3
  qf[178] = sc[10] * sc[16];
  qr[178] = sc[17] * sc[23];

  // reaction 177: N2H4 + NO2 <=> HONO + N2H3
  qf[179] = sc[16] * sc[25];
  qr[179] = sc[17] * sc[26];

  // reaction 178: N2H4 + NO2 <=> HNO2 + N2H3
  qf[180] = sc[16] * sc[25];
  qr[180] = sc[17] * sc[27];

  // reaction 179: H + N2H3 <=> H2 + N2H2
  qf[181] = sc[2] * sc[17];
  qr[181] = sc[1] * sc[18];

  // reaction 180: N2H3 + O <=> N2H2 + OH
  qf[182] = sc[4] * sc[17];
  qr[182] = sc[6] * sc[18];

  // reaction 181: N2H3 + O <=> HNO + NH2
  qf[183] = sc[4] * sc[17];
  qr[183] = sc[12] * sc[23];

  // reaction 182: N2H3 + O => H + NH2 + NO
  qf[184] = sc[4] * sc[17];
  qr[184] = 0.0;

  // reaction 183: N2H3 + OH <=> H2O + N2H2
  qf[185] = sc[6] * sc[17];
  qr[185] = sc[5] * sc[18];

  // reaction 184: N2H3 + OH <=> H2NN + H2O
  qf[186] = sc[6] * sc[17];
  qr[186] = sc[5] * sc[19];

  // reaction 185: N2H3 + OH <=> HNO + NH3
  qf[187] = sc[6] * sc[17];
  qr[187] = sc[11] * sc[23];

  // reaction 186: HO2 + N2H3 <=> H2O2 + N2H2
  qf[188] = sc[9] * sc[17];
  qr[188] = sc[8] * sc[18];

  // reaction 187: HO2 + N2H3 <=> N2H4 + O2
  qf[189] = sc[9] * sc[17];
  qr[189] = sc[3] * sc[16];

  // reaction 188: N2H3 + NH2 <=> N2H2 + NH3
  qf[190] = sc[12] * sc[17];
  qr[190] = sc[11] * sc[18];

  // reaction 189: N2H3 + NH2 <=> H2NN + NH3
  qf[191] = sc[12] * sc[17];
  qr[191] = sc[11] * sc[19];

  // reaction 190: N2H3 + NH <=> N2H2 + NH2
  qf[192] = sc[13] * sc[17];
  qr[192] = sc[12] * sc[18];

  // reaction 191: H + N2H2 <=> H2 + NNH
  qf[193] = sc[2] * sc[18];
  qr[193] = sc[1] * sc[15];

  // reaction 192: N2H2 + O <=> NNH + OH
  qf[194] = sc[4] * sc[18];
  qr[194] = sc[6] * sc[15];

  // reaction 193: N2H2 + O <=> NH2 + NO
  qf[195] = sc[4] * sc[18];
  qr[195] = sc[10] * sc[12];

  // reaction 194: N2H2 + OH <=> H2O + NNH
  qf[196] = sc[6] * sc[18];
  qr[196] = sc[5] * sc[15];

  // reaction 195: N2H2 + NH2 <=> NH3 + NNH
  qf[197] = sc[12] * sc[18];
  qr[197] = sc[11] * sc[15];

  // reaction 196: N2H2 + NH <=> NH2 + NNH
  qf[198] = sc[13] * sc[18];
  qr[198] = sc[12] * sc[15];

  // reaction 197: N2H2 + NO <=> N2O + NH2
  qf[199] = sc[10] * sc[18];
  qr[199] = sc[12] * sc[30];

  // reaction 198: H2NN <=> H + NNH
  qf[200] = sc[19];
  qr[200] = sc[2] * sc[15];

  // reaction 199: H2NN <=> H2 + N2
  qf[201] = sc[19];
  qr[201] = sc[0] * sc[1];

  // reaction 200: H2NN <=> N2H2
  qf[202] = sc[19];
  qr[202] = sc[18];

  // reaction 201: H + H2NN <=> H2 + NNH
  qf[203] = sc[2] * sc[19];
  qr[203] = sc[1] * sc[15];

  // reaction 202: H + H2NN <=> H + N2H2
  qf[204] = sc[2] * sc[19];
  qr[204] = sc[2] * sc[18];

  // reaction 203: H2NN + O <=> NNH + OH
  qf[205] = sc[4] * sc[19];
  qr[205] = sc[6] * sc[15];

  // reaction 204: H2NN + O <=> NH2 + NO
  qf[206] = sc[4] * sc[19];
  qr[206] = sc[10] * sc[12];

  // reaction 205: H2NN + OH <=> H2O + NNH
  qf[207] = sc[6] * sc[19];
  qr[207] = sc[5] * sc[15];

  // reaction 206: H2NN + OH => H + NH2 + NO
  qf[208] = sc[6] * sc[19];
  qr[208] = 0.0;

  // reaction 207: H2NN + HO2 => NH2 + NO + OH
  qf[209] = sc[9] * sc[19];
  qr[209] = 0.0;

  // reaction 208: H2NN + HO2 <=> H2O2 + NNH
  qf[210] = sc[9] * sc[19];
  qr[210] = sc[8] * sc[15];

  // reaction 209: H2NN + O2 <=> NH2 + NO2
  qf[211] = sc[3] * sc[19];
  qr[211] = sc[12] * sc[25];

  // reaction 210: H2NN + NH2 <=> NH3 + NNH
  qf[212] = sc[12] * sc[19];
  qr[212] = sc[11] * sc[15];

  // reaction 211: HNO2 <=> HONO
  qf[213] = sc[27];
  qr[213] = sc[26];

  // reaction 212: H + NO2 <=> NO + OH
  qf[214] = sc[2] * sc[25];
  qr[214] = sc[6] * sc[10];

  // reaction 213: NO + OH <=> HONO
  qf[215] = sc[6] * sc[10];
  qr[215] = sc[26];

  // reaction 214: NO + OH <=> HNO2
  qf[216] = sc[6] * sc[10];
  qr[216] = sc[27];

  // reaction 215: H + HONO <=> H2 + NO2
  qf[217] = sc[2] * sc[26];
  qr[217] = sc[1] * sc[25];

  // reaction 216: H + HNO2 <=> H2 + NO2
  qf[218] = sc[2] * sc[27];
  qr[218] = sc[1] * sc[25];

  // reaction 217: H + HONO <=> H2O + NO
  qf[219] = sc[2] * sc[26];
  qr[219] = sc[5] * sc[10];

  // reaction 218: HNO + OH <=> H + HONO
  qf[220] = sc[6] * sc[23];
  qr[220] = sc[2] * sc[26];

  // reaction 219: HNO + OH <=> H2O + NO
  qf[221] = sc[6] * sc[23];
  qr[221] = sc[5] * sc[10];

  // reaction 220: H2 + N2O <=> H2O + N2
  qf[222] = sc[1] * sc[30];
  qr[222] = sc[0] * sc[5];

  // reaction 221: NH3 + OH <=> H2O + NH2
  qf[223] = sc[6] * sc[11];
  qr[223] = sc[5] * sc[12];

  // reaction 222: H + HNO2 <=> H2O + NO
  qf[224] = sc[2] * sc[27];
  qr[224] = sc[5] * sc[10];

  // reaction 223: H + HNO2 <=> HNO + OH
  qf[225] = sc[2] * sc[27];
  qr[225] = sc[6] * sc[23];

  // reaction 226: HO2 + NH2 <=> H2NO + OH
  qf[226] = sc[9] * sc[12];
  qr[226] = sc[6] * sc[21];

  // reaction 227: NH2 + NO <=> H2O + N2
  qf[227] = sc[10] * sc[12];
  qr[227] = sc[0] * sc[5];

  // reaction 228: NH2 + NO <=> NNH + OH
  qf[228] = sc[10] * sc[12];
  qr[228] = sc[6] * sc[15];

  // reaction 229: H2NO + O2 <=> HNO + HO2
  qf[229] = sc[3] * sc[21];
  qr[229] = sc[9] * sc[23];

  // reaction 230: HO2 + NH2 <=> NH3 + O2
  qf[230] = sc[9] * sc[12];
  qr[230] = sc[3] * sc[11];

  // reaction 231: N2H2 <=> H + NNH
  qf[231] = sc[18];
  qr[231] = sc[2] * sc[15];

  // reaction 232: HNO + NO2 <=> HONO + NO
  qf[232] = sc[23] * sc[25];
  qr[232] = sc[10] * sc[26];

  // reaction 233: HNO + O2 <=> HO2 + NO
  qf[233] = sc[3] * sc[23];
  qr[233] = sc[9] * sc[10];

  // reaction 234: N2H3 <=> H + N2H2
  qf[234] = sc[17];
  qr[234] = sc[2] * sc[18];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 32; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[32];
  gibbs(g_RT, T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  H2 + M <=> 2 H + M
  k_f = 45770000000000 * exp((-1.4) * logT - (52535.8199100127) * invT);
  Corr = mixture + (1.5) * sc[1] + (11) * sc[5];
  qf[11] *= Corr * k_f;
  qr[11] *= Corr * k_f * exp(-(g_RT[1] - 2.000000 * g_RT[2])) * (refCinv);
  // reaction 1:  H2 + O <=> H + OH
  k_f = 3800000 * exp(-(3999.56605981591) * invT);
  qf[24] *= k_f;
  qr[24] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6]));
  // reaction 2:  H2 + O <=> H + OH
  k_f = 880000000 * exp(-(9649.1795668055) * invT);
  qf[25] *= k_f;
  qr[25] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6]));
  // reaction 3:  H2 + OH <=> H + H2O
  k_f = 220 * exp((1.51) * logT - (1726.03316371019) * invT);
  qf[26] *= k_f;
  qr[26] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6]));
  // reaction 4:  2 H + O2 <=> H2 + O2
  k_f = 88000000000 * exp((-1.835) * logT - (402.573332643776) * invT);
  qf[12] *= k_f;
  qr[12] *= k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[2])) * (refC);
  // reaction 5:  2 H + O2 <=> 2 OH
  k_f = 40000000000 * exp((-1.835) * logT - (402.573332643776) * invT);
  qf[27] *= k_f;
  qr[27] *=
    k_f * exp(-(2.000000 * g_RT[2] + g_RT[3] - 2.000000 * g_RT[6])) * (refC);
  // reaction 6:  H + O + O2 <=> OH + O2
  k_f = 73500000000 * exp((-1.835) * logT - (402.573332643776) * invT);
  qf[13] *= k_f;
  qr[13] *= k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[6])) * (refC);
  // reaction 7:  H + OH + O2 <=> H2O + O2
  k_f = 25600000000 * exp((-1.835) * logT - (402.573332643776) * invT);
  qf[14] *= k_f;
  qr[14] *= k_f * exp(-(g_RT[2] - g_RT[5] + g_RT[6])) * (refC);
  // reaction 8:  2 O + M <=> O2 + M
  k_f = 6165 * exp((-0.5) * logT);
  Corr = mixture + (1.5) * sc[1] + (11) * sc[5];
  qf[15] *= Corr * k_f;
  qr[15] *= Corr * k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4])) * (refC);
  // reaction 9:  H + O2 <=> O + OH
  k_f = 104000000 * exp(-(7692.16995349094) * invT);
  qf[28] *= k_f;
  qr[28] *= k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[4] - g_RT[6]));
  // reaction 10:  H + OH (+M) <=> H2O (+M)
  k_f = 25000000 * exp((0.234) * logT - (-57.366699901738) * invT);
  Corr = mixture + (0.5) * sc[1] + (12) * sc[5];
  redP =
    Corr / k_f * 4530000000 * exp(-1.81 * logT - (247.582599575922) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.27) * exp(-T * 1e+30) + 0.73 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[2] - g_RT[5] + g_RT[6])) * (refC);
  // reaction 11:  2 OH <=> H2O + O
  k_f = 2.88 * exp((1.79) * logT - (-880.629165158259) * invT);
  qf[29] *= k_f;
  qr[29] *= k_f * exp(-(-g_RT[4] - g_RT[5] + 2.000000 * g_RT[6]));
  // reaction 12:  H + O + M <=> OH + M
  k_f = 4714000 * exp((-1) * logT);
  Corr = mixture + (1.5) * sc[1] + (11) * sc[5];
  qf[16] *= Corr * k_f;
  qr[16] *= Corr * k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[6])) * (refC);
  // reaction 13:  H + O + M <=> OHV + M
  k_f = 443 * exp(-(5032.1666580472) * invT);
  Corr = mixture + sc[1] + (-0.2) * sc[3] + (11) * sc[5];
  qf[17] *= Corr * k_f;
  qr[17] *= Corr * k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[7])) * (refC);
  // reaction 14:  H2O + OHV <=> H2O + OH
  k_f = 5920000 * exp((0.5) * logT - (-432.766332592059) * invT);
  qf[30] *= k_f;
  qr[30] *= k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[6] + g_RT[7]));
  // reaction 15:  H2 + OHV <=> H2 + OH
  k_f = 2950000 * exp((0.5) * logT - (-223.428199617296) * invT);
  qf[31] *= k_f;
  qr[31] *= k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[6] + g_RT[7]));
  // reaction 16:  N2 + OHV <=> N2 + OH
  k_f = 2100000 * exp((0.5) * logT - (-242.550432917875) * invT);
  qf[32] *= k_f;
  qr[32] *= k_f * exp(-(g_RT[0] - g_RT[0] - g_RT[6] + g_RT[7]));
  // reaction 17:  OH + OHV <=> 2 OH
  k_f = 1500000 * exp((0.5) * logT);
  qf[33] *= k_f;
  qr[33] *= k_f * exp(-(g_RT[6] - 2.000000 * g_RT[6] + g_RT[7]));
  // reaction 18:  H + OHV <=> H + OH
  k_f = 1500000 * exp((0.5) * logT);
  qf[34] *= k_f;
  qr[34] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[6] + g_RT[7]));
  // reaction 19:  OHV <=> OH
  k_f = 1400000;
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(-g_RT[6] + g_RT[7]));
  // reaction 20:  O2 + OHV <=> O2 + OH
  k_f = 2100000 * exp((0.5) * logT - (-242.550432917875) * invT);
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(g_RT[3] - g_RT[3] - g_RT[6] + g_RT[7]));
  // reaction 21:  O + OHV <=> O + OH
  k_f = 1500000 * exp((0.5) * logT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(g_RT[4] - g_RT[4] - g_RT[6] + g_RT[7]));
  // reaction 22:  H2O2 (+M) <=> 2 OH (+M)
  k_f = 2000000000000 * exp((0.9) * logT - (24531.3092413143) * invT);
  Corr = mixture + (0.5) * sc[0] + (2.7) * sc[1] + (-0.21) * sc[3] +
         (4.1) * sc[5] + (4.2) * sc[8];
  redP = Corr / k_f * 2.3530181e+18 *
         exp(-2.2929358 * logT - (24528.4937440691) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10((0.57) * exp(-T * 1e+30) + 0.43 * exp(-T * 1e-30) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(-2.000000 * g_RT[6] + g_RT[8])) * (refCinv);
  // reaction 23:  H + H2O2 <=> H2O + OH
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[6] + g_RT[8]));
  // reaction 24:  H + H2O2 <=> H2 + HO2
  k_f = 5.02 * exp((2.07) * logT - (2163.83166296029) * invT);
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[8] - g_RT[9]));
  // reaction 25:  H2O2 + O <=> HO2 + OH
  k_f = 9.55 * exp((2) * logT - (1997.77016324474) * invT);
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[8] - g_RT[9]));
  // reaction 26:  H2O2 + OH <=> H2O + HO2
  k_f = 1740000 * exp(-(160.022899725901) * invT);
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[8] - g_RT[9]));
  // reaction 27:  H2O2 + OH <=> H2O + HO2
  k_f = 75900000 * exp(-(3657.88194373451) * invT);
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[8] - g_RT[9]));
  // reaction 28:  H + HO2 <=> H2 + O2
  k_f = 2.8 * exp((2.09) * logT - (-730.167382082648) * invT);
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[9]));
  // reaction 29:  H + HO2 <=> 2 OH
  k_f = 70790000 * exp(-(148.448916412392) * invT);
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(g_RT[2] - 2.000000 * g_RT[6] + g_RT[9]));
  // reaction 30:  HO2 + O <=> O2 + OH
  k_f = 32500000;
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[6] + g_RT[9]));
  // reaction 31:  HO2 + OH <=> H2O + O2
  k_f = 193000000000000 * exp((-2.49) * logT - (293.999304829749) * invT);
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(-g_RT[3] - g_RT[5] + g_RT[6] + g_RT[9]));
  // reaction 32:  HO2 + OH <=> H2O + O2
  k_f = 1210 * exp((1.24) * logT - (-657.996047872935) * invT);
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(-g_RT[3] - g_RT[5] + g_RT[6] + g_RT[9]));
  // reaction 33:  2 HO2 <=> H2O2 + O2
  k_f = 12140 * exp((0.422) * logT - (-745.022338057204) * invT);
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(-g_RT[3] - g_RT[8] + 2.000000 * g_RT[9]));
  // reaction 34:  2 HO2 <=> H2O2 + O2
  k_f = 16880000000 * exp((-0.681) * logT - (6507.42682852026) * invT);
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(-g_RT[3] - g_RT[8] + 2.000000 * g_RT[9]));
  // reaction 35:  H + O2 (+M) <=> HO2 (+M)
  k_f = 4660000 * exp((0.44) * logT);
  Corr = mixture + (0.35) * sc[1] + (-0.1) * sc[3] + (15.6) * sc[5];
  redP = Corr / k_f * 12250000 * exp(-1.2 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10((0.5) * exp(-T * 1) + 0.5 * exp(-T * 1e-10) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[9])) * (refC);
  // reaction 36:  H + NH3 <=> H2 + NH2
  k_f = 0.64 * exp((2.39) * logT - (5118.2167078998) * invT);
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[12]));
  // reaction 37:  NH3 + O <=> NH2 + OH
  k_f = 9.4 * exp((1.94) * logT - (3250.77966109849) * invT);
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[11] - g_RT[12]));
  // reaction 38:  HO2 + NH3 <=> H2O2 + NH2
  k_f = 300000 * exp(-(11070.7666477038) * invT);
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[11] - g_RT[12]));
  // reaction 39:  H2 + NH <=> H + NH2
  k_f = 21000000 * exp(-(7758.09133671136) * invT);
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[12] + g_RT[13]));
  // reaction 40:  NH2 + O <=> H + HNO
  k_f = 660000000 * exp((-0.5) * logT);
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[12] - g_RT[23]));
  // reaction 41:  NH2 + O <=> NH + OH
  k_f = 7000000;
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[12] - g_RT[13]));
  // reaction 42:  NH2 + O <=> NH + OH
  k_f = 8.6e-07 * exp((4.01) * logT - (841.881481891296) * invT);
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[12] - g_RT[13]));
  // reaction 43:  NH2 + OH <=> H2O + NH
  k_f = 3.3 * exp((1.949) * logT - (-109.198016479624) * invT);
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[12] - g_RT[13]));
  // reaction 44:  HO2 + NH2 <=> H2O + HNO
  k_f = 16 * exp((0.55) * logT - (264.188749547478) * invT);
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[23]));
  // reaction 45:  HO2 + NH2 <=> H2O + HNO
  k_f = 5700000000 * exp((-1.12) * logT - (355.774182723937) * invT);
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[23]));
  // reaction 46:  HO2 + NH2 <=> H2O + HON
  k_f = 21 * exp((0.64) * logT - (408.108715967628) * invT);
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[24]));
  // reaction 47:  NH2 + O2 <=> H2NO + O
  k_f = 260000 * exp((0.4872) * logT - (14618.4441416271) * invT);
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[21]));
  // reaction 48:  NH2 + O2 <=> HNO + OH
  k_f = 2.9e-08 * exp((3.764) * logT - (9150.99506765883) * invT);
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[12] - g_RT[23]));
  // reaction 49:  2 NH2 <=> NH + NH3
  k_f = 5.6e-06 * exp((3.53) * logT - (277.775599524205) * invT);
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(-g_RT[11] + 2.000000 * g_RT[12] - g_RT[13]));
  // reaction 50:  NH + NH2 <=> N + NH3
  k_f = 0.0096 * exp((2.46) * logT - (53.844183241105) * invT);
  qf[64] *= k_f;
  qr[64] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT[13] - g_RT[14]));
  // reaction 51:  N + NH2 <=> 2 H + N2
  k_f = 70000000;
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(-g_RT[0] - 2.000000 * g_RT[2] + g_RT[12] + g_RT[14])) *
            (refCinv);
  // reaction 52:  HNO + NH2 <=> NH3 + NO
  k_f = 0.00059 * exp((2.95) * logT - (-1745.65861367657) * invT);
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(-g_RT[10] - g_RT[11] + g_RT[12] + g_RT[23]));
  // reaction 53:  HONO + NH2 <=> NH3 + NO2
  k_f = 7.1e-05 * exp((3.02) * logT - (-2485.89032907532) * invT);
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(-g_RT[11] + g_RT[12] - g_RT[25] + g_RT[26]));
  // reaction 54:  NH2 + NO2 <=> H2NO + NO
  k_f = 860000 * exp((0.11) * logT - (-596.814965644398) * invT);
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(-g_RT[10] + g_RT[12] - g_RT[21] + g_RT[25]));
  // reaction 55:  NH2 + NO2 <=> H2O + N2O
  k_f = 220000 * exp((0.11) * logT - (-596.814965644398) * invT);
  qf[69] *= k_f;
  qr[69] *= k_f * exp(-(-g_RT[5] + g_RT[12] + g_RT[25] - g_RT[30]));
  // reaction 56:  H + NH <=> H2 + N
  k_f = 30000000;
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[13] - g_RT[14]));
  // reaction 57:  NH + O <=> H + NO
  k_f = 92000000;
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[10] + g_RT[13]));
  // reaction 58:  NH + OH <=> H + HNO
  k_f = 320000000 * exp((-0.376) * logT - (-23.1479666270171) * invT);
  qf[72] *= k_f;
  qr[72] *= k_f * exp(-(-g_RT[2] + g_RT[6] + g_RT[13] - g_RT[23]));
  // reaction 59:  NH + OH <=> H2O + N
  k_f = 16 * exp((1.733) * logT - (-289.852799503519) * invT);
  qf[73] *= k_f;
  qr[73] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[13] - g_RT[14]));
  // reaction 60:  NH + O2 <=> HNO + O
  k_f = 24000000 * exp(-(6969.55082139537) * invT);
  qf[74] *= k_f;
  qr[74] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[13] - g_RT[23]));
  // reaction 61:  NH + O2 <=> NO + OH
  k_f = 99000 * exp(-(769.921498681221) * invT);
  qf[75] *= k_f;
  qr[75] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[10] + g_RT[13]));
  // reaction 62:  2 NH <=> N + NH2
  k_f = 5.7e-07 * exp((3.88) * logT - (172.100099705214) * invT);
  qf[76] *= k_f;
  qr[76] *= k_f * exp(-(-g_RT[12] + 2.000000 * g_RT[13] - g_RT[14]));
  // reaction 63:  N + NH <=> H + N2
  k_f = 30000000;
  qf[77] *= k_f;
  qr[77] *= k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[13] + g_RT[14]));
  // reaction 64:  NH + NO <=> H + N2O
  k_f = 2700000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
  qf[78] *= k_f;
  qr[78] *= k_f * exp(-(-g_RT[2] + g_RT[10] + g_RT[13] - g_RT[30]));
  // reaction 65:  NH + NO <=> N2 + OH
  k_f = 680000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
  qf[79] *= k_f;
  qr[79] *= k_f * exp(-(-g_RT[0] - g_RT[6] + g_RT[10] + g_RT[13]));
  // reaction 66:  HONO + NH <=> NH2 + NO2
  k_f = 10000000;
  qf[80] *= k_f;
  qr[80] *= k_f * exp(-(-g_RT[12] + g_RT[13] - g_RT[25] + g_RT[26]));
  // reaction 67:  NH + NO2 <=> N2O + OH
  k_f = 4100000;
  qf[81] *= k_f;
  qr[81] *= k_f * exp(-(-g_RT[6] + g_RT[13] + g_RT[25] - g_RT[30]));
  // reaction 68:  NH + NO2 <=> HNO + NO
  k_f = 5900000;
  qf[82] *= k_f;
  qr[82] *= k_f * exp(-(-g_RT[10] + g_RT[13] - g_RT[23] + g_RT[25]));
  // reaction 69:  N + OH <=> H + NO
  k_f = 38000000;
  qf[83] *= k_f;
  qr[83] *= k_f * exp(-(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT[14]));
  // reaction 70:  N + O2 <=> NO + O
  k_f = 9030 * exp((1) * logT - (3269.90189439907) * invT);
  qf[84] *= k_f;
  qr[84] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[14]));
  // reaction 71:  N + NO <=> N2 + O
  k_f = 11280000 * exp((0.14) * logT);
  qf[85] *= k_f;
  qr[85] *= k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[10] + g_RT[14]));
  // reaction 72:  NNH <=> H + N2
  k_f = 1000000000;
  qf[86] *= k_f;
  qr[86] *= k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[15])) * (refCinv);
  // reaction 73:  H + NNH <=> H2 + N2
  k_f = 100000000;
  qf[87] *= k_f;
  qr[87] *= k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[15]));
  // reaction 74:  NNH + O <=> H + N2O
  k_f = 190000000 * exp((-0.274) * logT - (-11.0707666477038) * invT);
  qf[88] *= k_f;
  qr[88] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[15] - g_RT[30]));
  // reaction 75:  NNH + O <=> N2 + OH
  k_f = 12000000 * exp((0.145) * logT - (-109.198016479624) * invT);
  qf[89] *= k_f;
  qr[89] *= k_f * exp(-(-g_RT[0] + g_RT[4] - g_RT[6] + g_RT[15]));
  // reaction 76:  NNH + O <=> NH + NO
  k_f = 520000 * exp((0.381) * logT - (-205.81561631413) * invT);
  qf[90] *= k_f;
  qr[90] *= k_f * exp(-(g_RT[4] - g_RT[10] - g_RT[13] + g_RT[15]));
  // reaction 77:  NNH + OH <=> H2O + N2
  k_f = 50000000;
  qf[91] *= k_f;
  qr[91] *= k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[15]));
  // reaction 78:  NNH + O2 <=> HO2 + N2
  k_f = 560000000 * exp((-0.385) * logT - (-6.54181665546136) * invT);
  qf[92] *= k_f;
  qr[92] *= k_f * exp(-(-g_RT[0] + g_RT[3] - g_RT[9] + g_RT[15]));
  // reaction 79:  NH + NNH <=> N2 + NH2
  k_f = 50000000;
  qf[93] *= k_f;
  qr[93] *= k_f * exp(-(-g_RT[0] - g_RT[12] + g_RT[13] + g_RT[15]));
  // reaction 80:  NH2 + NNH <=> N2 + NH3
  k_f = 50000000;
  qf[94] *= k_f;
  qr[94] *= k_f * exp(-(-g_RT[0] - g_RT[11] + g_RT[12] + g_RT[15]));
  // reaction 81:  NNH + NO <=> HNO + N2
  k_f = 50000000;
  qf[95] *= k_f;
  qr[95] *= k_f * exp(-(-g_RT[0] + g_RT[10] + g_RT[15] - g_RT[23]));
  // reaction 82:  NH2OH (+M) <=> NH2 + OH (+M)
  k_f = 1.4e+20 * exp((-1.31) * logT - (32246.1239447664) * invT);
  Corr = mixture;
  redP = Corr / k_f * 5.4e+31 * exp(-5.96 * logT - (33606.3185924366) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.69) * exp(-T * 1e+30) + 0.31 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(-g_RT[6] - g_RT[12] + g_RT[20])) * (refCinv);
  // reaction 83:  H + NH2OH <=> H2 + HNOH
  k_f = 480 * exp((1.5) * logT - (3144.60094461369) * invT);
  qf[96] *= k_f;
  qr[96] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[22]));
  // reaction 84:  H + NH2OH <=> H2 + H2NO
  k_f = 240 * exp((1.5) * logT - (2549.79884563251) * invT);
  qf[97] *= k_f;
  qr[97] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[21]));
  // reaction 85:  NH2OH + O <=> HNOH + OH
  k_f = 330 * exp((1.5) * logT - (1944.93241333524) * invT);
  qf[98] *= k_f;
  qr[98] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[22]));
  // reaction 86:  NH2OH + O <=> H2NO + OH
  k_f = 170 * exp((1.5) * logT - (1514.68216407221) * invT);
  qf[99] *= k_f;
  qr[99] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[21]));
  // reaction 87:  NH2OH + OH <=> H2O + HNOH
  k_f = 0.015 * exp((2.61) * logT - (-1779.87734695129) * invT);
  qf[100] *= k_f;
  qr[100] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[20] - g_RT[22]));
  // reaction 88:  NH2OH + OH <=> H2NO + H2O
  k_f = 0.15 * exp((2.28) * logT - (-652.168798882917) * invT);
  qf[101] *= k_f;
  qr[101] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[20] - g_RT[21]));
  // reaction 89:  NH2 + NH2OH <=> HNOH + NH3
  k_f = 1.1e-07 * exp((4) * logT - (-48.8120165830578) * invT);
  qf[102] *= k_f;
  qr[102] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT[20] - g_RT[22]));
  // reaction 90:  NH2 + NH2OH <=> H2NO + NH3
  k_f = 9.5e-06 * exp((3.42) * logT - (-509.758482460181) * invT);
  qf[103] *= k_f;
  qr[103] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT[20] - g_RT[21]));
  // reaction 91:  NH + NH2OH <=> HNOH + NH2
  k_f = 2.9e-09 * exp((4.4) * logT - (787.030865318582) * invT);
  qf[104] *= k_f;
  qr[104] *= k_f * exp(-(-g_RT[12] + g_RT[13] + g_RT[20] - g_RT[22]));
  // reaction 92:  NH + NH2OH <=> H2NO + NH2
  k_f = 1.5e-09 * exp((4.6) * logT - (1219.79719791064) * invT);
  qf[105] *= k_f;
  qr[105] *= k_f * exp(-(-g_RT[12] + g_RT[13] + g_RT[20] - g_RT[21]));
  // reaction 93:  HO2 + NH2OH <=> H2O2 + HNOH
  k_f = 0.029 * exp((2.69) * logT - (4809.24167509571) * invT);
  qf[106] *= k_f;
  qr[106] *= k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[20] - g_RT[22]));
  // reaction 94:  HO2 + NH2OH <=> H2NO + H2O2
  k_f = 0.014 * exp((2.69) * logT - (3229.64456113469) * invT);
  qf[107] *= k_f;
  qr[107] *= k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[20] - g_RT[21]));
  // reaction 95:  H2NO + M <=> H + HNO + M
  k_f = 2.8e+18 * exp((-2.83) * logT - (32666.3098607134) * invT);
  Corr = mixture + (9) * sc[5];
  qf[18] *= Corr * k_f;
  qr[18] *= Corr * k_f * exp(-(-g_RT[2] + g_RT[21] - g_RT[23])) * (refCinv);
  // reaction 96:  H2NO + M <=> HNOH + M
  k_f = 1.1e+23 * exp((-4) * logT - (22141.5332954077) * invT);
  Corr = mixture + (9) * sc[5];
  qf[19] *= Corr * k_f;
  qr[19] *= Corr * k_f * exp(-(g_RT[21] - g_RT[22]));
  // reaction 97:  H + H2NO <=> H2 + HNO
  k_f = 30 * exp((2) * logT - (1006.43333160944) * invT);
  qf[108] *= k_f;
  qr[108] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[21] - g_RT[23]));
  // reaction 98:  H + H2NO <=> NH2 + OH
  k_f = 50000000;
  qf[109] *= k_f;
  qr[109] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[21]));
  // reaction 99:  H2NO + O <=> HNO + OH
  k_f = 30 * exp((2) * logT - (1006.43333160944) * invT);
  qf[110] *= k_f;
  qr[110] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[21] - g_RT[23]));
  // reaction 100:  H2NO + OH <=> H2O + HNO
  k_f = 100000000;
  qf[111] *= k_f;
  qr[111] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[21] - g_RT[23]));
  // reaction 101:  H2NO + HO2 <=> H2O2 + HNO
  k_f = 0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[112] *= k_f;
  qr[112] *= k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[21] - g_RT[23]));
  // reaction 102:  H2NO + NH2 <=> HNO + NH3
  k_f = 3000000 * exp(-(503.21666580472) * invT);
  qf[113] *= k_f;
  qr[113] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT[21] - g_RT[23]));
  // reaction 103:  H2NO + NO <=> 2 HNO
  k_f = 0.02 * exp((2) * logT - (6541.81665546136) * invT);
  qf[114] *= k_f;
  qr[114] *= k_f * exp(-(g_RT[10] + g_RT[21] - 2.000000 * g_RT[23]));
  // reaction 104:  H2NO + NO2 <=> HNO + HONO
  k_f = 0.044 * exp((2.64) * logT - (2032.99532985107) * invT);
  qf[115] *= k_f;
  qr[115] *= k_f * exp(-(g_RT[21] - g_RT[23] + g_RT[25] - g_RT[26]));
  // reaction 105:  HNOH + M <=> H + HNO + M
  k_f = 2e+18 * exp((-2.84) * logT - (29656.5709825354) * invT);
  Corr = mixture + (9) * sc[5];
  qf[20] *= Corr * k_f;
  qr[20] *= Corr * k_f * exp(-(-g_RT[2] + g_RT[22] - g_RT[23])) * (refCinv);
  // reaction 106:  H + HNOH <=> NH2 + OH
  k_f = 40000000;
  qf[116] *= k_f;
  qr[116] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[22]));
  // reaction 107:  H + HNOH <=> H2 + HNO
  k_f = 480 * exp((1.5) * logT - (190.215899674184) * invT);
  qf[117] *= k_f;
  qr[117] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[23]));
  // reaction 108:  HNOH + O <=> HNO + OH
  k_f = 70000000;
  qf[118] *= k_f;
  qr[118] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[22] - g_RT[23]));
  // reaction 109:  HNOH + O <=> HNO + OH
  k_f = 330 * exp((1.5) * logT - (-180.15156635809) * invT);
  qf[119] *= k_f;
  qr[119] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[22] - g_RT[23]));
  // reaction 110:  HNOH + OH <=> H2O + HNO
  k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
  qf[120] *= k_f;
  qr[120] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[22] - g_RT[23]));
  // reaction 111:  HNOH + HO2 <=> H2O2 + HNO
  k_f = 0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[121] *= k_f;
  qr[121] *= k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[22] - g_RT[23]));
  // reaction 112:  HNOH + HO2 <=> NH2OH + O2
  k_f = 0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[122] *= k_f;
  qr[122] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[20] + g_RT[22]));
  // reaction 113:  HNOH + O2 <=> HNO + HO2
  k_f = 3000000 * exp(-(12580.416645118) * invT);
  qf[123] *= k_f;
  qr[123] *= k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[22] - g_RT[23]));
  // reaction 114:  HNOH + NH2 <=> HNO + NH3
  k_f = 1.8 * exp((1.94) * logT - (-579.705599007037) * invT);
  qf[124] *= k_f;
  qr[124] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT[22] - g_RT[23]));
  // reaction 115:  HNOH + NO2 <=> HNO + HONO
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  qf[125] *= k_f;
  qr[125] *= k_f * exp(-(g_RT[22] - g_RT[23] + g_RT[25] - g_RT[26]));
  // reaction 116:  H + HNO <=> H2 + NO
  k_f = 66000 * exp((0.94) * logT - (249.092249573336) * invT);
  qf[126] *= k_f;
  qr[126] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT[23]));
  // reaction 117:  HNO + O <=> NO + OH
  k_f = 23000000;
  qf[127] *= k_f;
  qr[127] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[10] + g_RT[23]));
  // reaction 118:  HNO + HO2 <=> HNO2 + OH
  k_f = 0.002 * exp((2.36) * logT - (4518.88565892638) * invT);
  qf[128] *= k_f;
  qr[128] *= k_f * exp(-(-g_RT[6] + g_RT[9] + g_RT[23] - g_RT[27]));
  // reaction 119:  2 HNO <=> H2O + N2O
  k_f = 900 * exp(-(1559.97166399463) * invT);
  qf[129] *= k_f;
  qr[129] *= k_f * exp(-(-g_RT[5] + 2.000000 * g_RT[23] - g_RT[30]));
  // reaction 120:  HO2 + NO <=> NO2 + OH
  k_f = 2100000 * exp(-(-250.098682904946) * invT);
  qf[130] *= k_f;
  qr[130] *= k_f * exp(-(-g_RT[6] + g_RT[9] + g_RT[10] - g_RT[25]));
  // reaction 121:  NO + O (+M) <=> NO2 (+M)
  k_f = 1300000000 * exp((-0.75) * logT);
  Corr = mixture + (-0.2) * sc[3] + (9) * sc[5] + (0.8) * sc[10] +
         (5.2) * sc[25] + (3.4) * sc[30];
  redP =
    Corr / k_f * 9440000000000 * exp(-2.87 * logT - (780.48904866312) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.038) * exp(-T * 0.1) + 0.962 * exp(-T * 0.000125596583772921) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(g_RT[4] + g_RT[10] - g_RT[25])) * (refC);
  // reaction 122:  NO2 + O <=> NO + O2
  k_f = 5860000 * exp(-(-119.765566461523) * invT);
  qf[131] *= k_f;
  qr[131] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[10] + g_RT[25]));
  // reaction 123:  HO2 + NO2 <=> HONO + O2
  k_f = 1.9e-06 * exp((3.32) * logT - (1531.79153070957) * invT);
  qf[132] *= k_f;
  qr[132] *= k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[25] - g_RT[26]));
  // reaction 124:  HO2 + NO2 <=> HNO2 + O2
  k_f = 1.9e-05 * exp((3.26) * logT - (2507.52864570492) * invT);
  qf[133] *= k_f;
  qr[133] *= k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[25] - g_RT[27]));
  // reaction 125:  2 NO2 <=> 2 NO + O2
  k_f = 4500000 * exp(-(13888.2767595445) * invT);
  qf[134] *= k_f;
  qr[134] *= k_f *
             exp(-(-g_RT[3] - 2.000000 * g_RT[10] + 2.000000 * g_RT[25])) *
             (refCinv);
  // reaction 126:  2 NO2 <=> NO + NO3
  k_f = 9600 * exp((0.73) * logT - (10517.2283153186) * invT);
  qf[135] *= k_f;
  qr[135] *= k_f * exp(-(-g_RT[10] + 2.000000 * g_RT[25] - g_RT[28]));
  // reaction 127:  HONO + O <=> NO2 + OH
  k_f = 12000000 * exp(-(2999.17132819613) * invT);
  qf[136] *= k_f;
  qr[136] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[25] + g_RT[26]));
  // reaction 128:  HONO + OH <=> H2O + NO2
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  qf[137] *= k_f;
  qr[137] *= k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[25] + g_RT[26]));
  // reaction 129:  HONO + NO2 <=> HONO2 + NO
  k_f = 200000 * exp(-(16455.1849718143) * invT);
  qf[138] *= k_f;
  qr[138] *= k_f * exp(-(-g_RT[10] + g_RT[25] + g_RT[26] - g_RT[29]));
  // reaction 130:  2 HONO <=> H2O + NO + NO2
  k_f = 3.5e-07 * exp((3.64) * logT - (6109.0503228693) * invT);
  qf[139] *= k_f;
  qr[139] *= k_f *
             exp(-(-g_RT[5] - g_RT[10] - g_RT[25] + 2.000000 * g_RT[26])) *
             (refCinv);
  // reaction 131:  HNO2 + O <=> NO2 + OH
  k_f = 170 * exp((1.5) * logT - (1006.43333160944) * invT);
  qf[140] *= k_f;
  qr[140] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[25] + g_RT[27]));
  // reaction 132:  HNO2 + OH <=> H2O + NO2
  k_f = 40000000;
  qf[141] *= k_f;
  qr[141] *= k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[25] + g_RT[27]));
  // reaction 133:  NO2 + O (+M) <=> NO3 (+M)
  k_f = 3500000 * exp((0.24) * logT);
  Corr = mixture;
  redP = Corr / k_f * 250000000 * exp(-1.5 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.29) * exp(-T * 1e+30) + 0.71 * exp(-T * 0.000588235294117647) +
    exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(g_RT[4] + g_RT[25] - g_RT[28])) * (refC);
  // reaction 134:  H + NO3 <=> NO2 + OH
  k_f = 60000000;
  qf[142] *= k_f;
  qr[142] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[25] + g_RT[28]));
  // reaction 135:  NO3 + O <=> NO2 + O2
  k_f = 10000000;
  qf[143] *= k_f;
  qr[143] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[25] + g_RT[28]));
  // reaction 136:  NO3 + OH <=> HO2 + NO2
  k_f = 14000000;
  qf[144] *= k_f;
  qr[144] *= k_f * exp(-(g_RT[6] - g_RT[9] - g_RT[25] + g_RT[28]));
  // reaction 137:  HO2 + NO3 <=> NO2 + O2 + OH
  k_f = 1500000;
  qf[145] *= k_f;
  qr[145] *= k_f * exp(-(-g_RT[3] - g_RT[6] + g_RT[9] - g_RT[25] + g_RT[28])) *
             (refCinv);
  // reaction 138:  NO3 + NO2 <=> NO + O2 + NO2
  k_f = 50000 * exp(-(1479.45699746588) * invT);
  qf[21] *= k_f;
  qr[21] *= k_f * exp(-(-g_RT[3] - g_RT[10] + g_RT[28])) * (refCinv);
  // reaction 139:  NO2 + OH (+M) <=> HONO2 (+M)
  k_f = 16300000;
  Corr = mixture;
  redP = Corr / k_f * 31300000000000 * exp(-3 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.59) * exp(-T * 1e+30) + 0.41 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[6] + g_RT[25] - g_RT[29])) * (refC);
  // reaction 140:  H + HONO2 <=> H2 + NO3
  k_f = 560 * exp((1.5) * logT - (8252.7533191974) * invT);
  qf[146] *= k_f;
  qr[146] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[28] + g_RT[29]));
  // reaction 141:  H + HONO2 <=> H2O + NO2
  k_f = 6.1e-05 * exp((3.3) * logT - (3162.71674458266) * invT);
  qf[147] *= k_f;
  qr[147] *= k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[25] + g_RT[29]));
  // reaction 142:  H + HONO2 <=> HONO + OH
  k_f = 0.38 * exp((2.3) * logT - (3510.43946065372) * invT);
  qf[148] *= k_f;
  qr[148] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[26] + g_RT[29]));
  // reaction 143:  HONO2 + OH <=> H2O + NO3
  k_f = 10000 * exp(-(-623.988665597852) * invT);
  qf[149] *= k_f;
  qr[149] *= k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[28] + g_RT[29]));
  // reaction 144:  HO2 + NO + M <=> HNO3 + M
  k_f = 1500000000000 * exp((-3.5) * logT - (1107.07666477038) * invT);
  Corr = mixture;
  qf[22] *= Corr * k_f;
  qr[22] *= Corr * k_f * exp(-(g_RT[9] + g_RT[10] - g_RT[31])) * (refC);
  // reaction 145:  H + HNO3 <=> H2 + NO3
  k_f = 556 * exp((1.5) * logT - (8252.7533191974) * invT);
  qf[150] *= k_f;
  qr[150] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[28] + g_RT[31]));
  // reaction 146:  H + HNO3 <=> H2O + NO2
  k_f = 6.08e-05 * exp((3.3) * logT - (3162.71674458266) * invT);
  qf[151] *= k_f;
  qr[151] *= k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[25] + g_RT[31]));
  // reaction 147:  H + HNO3 <=> HONO + OH
  k_f = 0.382 * exp((2.3) * logT - (3510.43946065372) * invT);
  qf[152] *= k_f;
  qr[152] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[26] + g_RT[31]));
  // reaction 148:  HNO3 + OH <=> H2O + NO3
  k_f = 10300 * exp(-(-623.988665597852) * invT);
  qf[153] *= k_f;
  qr[153] *= k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[28] + g_RT[31]));
  // reaction 149:  HON + M <=> H + NO + M
  k_f = 51000000000000 * exp((-1.73) * logT - (8074.11140283673) * invT);
  Corr = mixture + (6) * sc[5];
  qf[23] *= Corr * k_f;
  qr[23] *= Corr * k_f * exp(-(-g_RT[2] - g_RT[10] + g_RT[24])) * (refCinv);
  // reaction 150:  H + HON <=> H + HNO
  k_f = 24000000;
  qf[154] *= k_f;
  qr[154] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[23] + g_RT[24]));
  // reaction 151:  H + HON <=> NH + OH
  k_f = 10000000;
  qf[155] *= k_f;
  qr[155] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[24]));
  // reaction 152:  HON + O <=> NO + OH
  k_f = 70000000;
  qf[156] *= k_f;
  qr[156] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[10] + g_RT[24]));
  // reaction 153:  HON + OH <=> H + HONO
  k_f = 40000000;
  qf[157] *= k_f;
  qr[157] *= k_f * exp(-(-g_RT[2] + g_RT[6] + g_RT[24] - g_RT[26]));
  // reaction 154:  HON + O2 <=> NO2 + OH
  k_f = 1000000 * exp(-(2499.98039571785) * invT);
  qf[158] *= k_f;
  qr[158] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[24] - g_RT[25]));
  // reaction 155:  N2O (+M) <=> N2 + O (+M)
  k_f = 169000000000 * exp(-(29011.9504336395) * invT);
  Corr = mixture + (0.7) * sc[0] + (0.4) * sc[3] + (11) * sc[5] + (2) * sc[10] +
         (2.5) * sc[30];
  redP = Corr / k_f * 720000000 * exp(-(28889.668783849) * invT);
  Corr = redP / (1. + redP);
  qf[10] *= Corr * k_f;
  qr[10] *= Corr * k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[30])) * (refCinv);
  // reaction 156:  H + N2O <=> N2 + OH
  k_f = 64 * exp((1.835) * logT - (6789.39925503728) * invT);
  qf[159] *= k_f;
  qr[159] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[30]));
  // reaction 157:  H + N2O <=> N2 + OHV
  k_f = 160000000 * exp(-(25311.7982899774) * invT);
  qf[160] *= k_f;
  qr[160] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[7] + g_RT[30]));
  // reaction 158:  N2O + O <=> N2 + O2
  k_f = 3690000 * exp(-(8019.26078626401) * invT);
  qf[161] *= k_f;
  qr[161] *= k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[4] + g_RT[30]));
  // reaction 159:  N2O + O <=> 2 NO
  k_f = 91500000 * exp(-(13928.5340928088) * invT);
  qf[162] *= k_f;
  qr[162] *= k_f * exp(-(g_RT[4] - 2.000000 * g_RT[10] + g_RT[30]));
  // reaction 160:  N2O + OH <=> HO2 + N2
  k_f = 1.3e-08 * exp((4.72) * logT - (18397.6013018206) * invT);
  qf[163] *= k_f;
  qr[163] *= k_f * exp(-(-g_RT[0] + g_RT[6] - g_RT[9] + g_RT[30]));
  // reaction 161:  N2O + OH <=> HNO + NO
  k_f = 1.2e-10 * exp((4.33) * logT - (12620.6739783824) * invT);
  qf[164] *= k_f;
  qr[164] *= k_f * exp(-(g_RT[6] - g_RT[10] - g_RT[23] + g_RT[30]));
  // reaction 162:  N2O + NO <=> N2 + NO2
  k_f = 0.53 * exp((2.23) * logT - (23289.3705101082) * invT);
  qf[165] *= k_f;
  qr[165] *= k_f * exp(-(-g_RT[0] + g_RT[10] - g_RT[25] + g_RT[30]));
  // reaction 163:  2 NH2 <=> H2 + N2H2
  k_f = 170 * exp((1.62) * logT - (5929.40197317701) * invT);
  qf[166] *= k_f;
  qr[166] *= k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[18]));
  // reaction 164:  2 NH2 <=> H2 + H2NN
  k_f = 0.072 * exp((1.88) * logT - (4429.31309241314) * invT);
  qf[167] *= k_f;
  qr[167] *= k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[19]));
  // reaction 165:  NH + NH2 <=> H + N2H2
  k_f = 430000000 * exp((-0.272) * logT - (-38.7476832669634) * invT);
  qf[168] *= k_f;
  qr[168] *= k_f * exp(-(-g_RT[2] + g_RT[12] + g_RT[13] - g_RT[18]));
  // reaction 166:  HNOH + NH2 <=> N2H3 + OH
  k_f = 1e-05 * exp((3.46) * logT - (-235.002182930804) * invT);
  qf[169] *= k_f;
  qr[169] *= k_f * exp(-(-g_RT[6] + g_RT[12] - g_RT[17] + g_RT[22]));
  // reaction 167:  HNOH + NH2 <=> H2NN + H2O
  k_f = 88000000000 * exp((-1.08) * logT - (560.080149040653) * invT);
  qf[170] *= k_f;
  qr[170] *= k_f * exp(-(-g_RT[5] + g_RT[12] - g_RT[19] + g_RT[22]));
  // reaction 168:  2 NH2 (+M) <=> N2H4 (+M)
  k_f = 560000000 * exp((-0.414) * logT - (33.2122999431115) * invT);
  Corr = mixture;
  redP = Corr / k_f * 1.6e+22 * exp(-5.49 * logT - (999.891514953978) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.69) * exp(-T * 1e+30) + 0.31 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(2.000000 * g_RT[12] - g_RT[16])) * (refC);
  // reaction 169:  N2H4 <=> H2 + H2NN
  k_f = 140000000000000 * exp(-(37696.4636520974) * invT);
  qf[171] *= k_f;
  qr[171] *= k_f * exp(-(-g_RT[1] + g_RT[16] - g_RT[19])) * (refCinv);
  // reaction 170:  H + N2H4 <=> H2 + N2H3
  k_f = 7000000 * exp(-(1258.0416645118) * invT);
  qf[172] *= k_f;
  qr[172] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[16] - g_RT[17]));
  // reaction 171:  H + N2H4 <=> NH2 + NH3
  k_f = 0.23 * exp((1.42) * logT - (4127.38309293031) * invT);
  qf[173] *= k_f;
  qr[173] *= k_f * exp(-(g_RT[2] - g_RT[11] - g_RT[12] + g_RT[16]));
  // reaction 172:  N2H4 + O <=> N2H3 + OH
  k_f = 150000 * exp(-(-639.085165571994) * invT);
  qf[174] *= k_f;
  qr[174] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[16] - g_RT[17]));
  // reaction 173:  N2H4 + O <=> H2O + N2H2
  k_f = 290000 * exp(-(-639.085165571994) * invT);
  qf[175] *= k_f;
  qr[175] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[16] - g_RT[18]));
  // reaction 174:  N2H4 + OH <=> H2O + N2H3
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  qf[176] *= k_f;
  qr[176] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[16] - g_RT[17]));
  // reaction 175:  N2H4 + NH2 <=> N2H3 + NH3
  k_f = 7.6e-07 * exp((4) * logT - (2037.02106317751) * invT);
  qf[177] *= k_f;
  qr[177] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT[16] - g_RT[17]));
  // reaction 176:  N2H4 + NO <=> HNO + N2H3
  k_f = 6e-05 * exp((3.16) * logT - (15521.7180567466) * invT);
  qf[178] *= k_f;
  qr[178] *= k_f * exp(-(g_RT[10] + g_RT[16] - g_RT[17] - g_RT[23]));
  // reaction 177:  N2H4 + NO2 <=> HONO + N2H3
  k_f = 8.2e-05 * exp((3.13) * logT - (4458.49965902982) * invT);
  qf[179] *= k_f;
  qr[179] *= k_f * exp(-(g_RT[16] - g_RT[17] + g_RT[25] - g_RT[26]));
  // reaction 178:  N2H4 + NO2 <=> HNO2 + N2H3
  k_f = 2.4e-08 * exp((4.14) * logT - (3998.5596264843) * invT);
  qf[180] *= k_f;
  qr[180] *= k_f * exp(-(g_RT[16] - g_RT[17] + g_RT[25] - g_RT[27]));
  // reaction 179:  H + N2H3 <=> H2 + N2H2
  k_f = 240 * exp((1.5) * logT - (-5.0321666580472) * invT);
  qf[181] *= k_f;
  qr[181] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[17] - g_RT[18]));
  // reaction 180:  N2H3 + O <=> N2H2 + OH
  k_f = 170 * exp((1.5) * logT - (-325.077966109849) * invT);
  qf[182] *= k_f;
  qr[182] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[17] - g_RT[18]));
  // reaction 181:  N2H3 + O <=> HNO + NH2
  k_f = 30000000;
  qf[183] *= k_f;
  qr[183] *= k_f * exp(-(g_RT[4] - g_RT[12] + g_RT[17] - g_RT[23]));
  // reaction 182:  N2H3 + O => H + NH2 + NO
  k_f = 30000000;
  qf[184] *= k_f;
  qr[184] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[10] - g_RT[12] + g_RT[17])) *
             (refCinv);
  // reaction 183:  N2H3 + OH <=> H2O + N2H2
  k_f = 1.2 * exp((2) * logT - (-599.834265639226) * invT);
  qf[185] *= k_f;
  qr[185] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[17] - g_RT[18]));
  // reaction 184:  N2H3 + OH <=> H2NN + H2O
  k_f = 30000000;
  qf[186] *= k_f;
  qr[186] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[17] - g_RT[19]));
  // reaction 185:  N2H3 + OH <=> HNO + NH3
  k_f = 1000000 * exp(-(7548.2499870708) * invT);
  qf[187] *= k_f;
  qr[187] *= k_f * exp(-(g_RT[6] - g_RT[11] + g_RT[17] - g_RT[23]));
  // reaction 186:  HO2 + N2H3 <=> H2O2 + N2H2
  k_f = 0.014 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[188] *= k_f;
  qr[188] *= k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[17] - g_RT[18]));
  // reaction 187:  HO2 + N2H3 <=> N2H4 + O2
  k_f = 0.92 * exp((1.94) * logT - (1069.83863150083) * invT);
  qf[189] *= k_f;
  qr[189] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[16] + g_RT[17]));
  // reaction 188:  N2H3 + NH2 <=> N2H2 + NH3
  k_f = 0.92 * exp((1.94) * logT - (-579.705599007037) * invT);
  qf[190] *= k_f;
  qr[190] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT[17] - g_RT[18]));
  // reaction 189:  N2H3 + NH2 <=> H2NN + NH3
  k_f = 30000000;
  qf[191] *= k_f;
  qr[191] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT[17] - g_RT[19]));
  // reaction 190:  N2H3 + NH <=> N2H2 + NH2
  k_f = 20000000;
  qf[192] *= k_f;
  qr[192] *= k_f * exp(-(-g_RT[12] + g_RT[13] + g_RT[17] - g_RT[18]));
  // reaction 191:  H + N2H2 <=> H2 + NNH
  k_f = 110000000 * exp(-(1574.06173063716) * invT);
  qf[193] *= k_f;
  qr[193] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[18]));
  // reaction 192:  N2H2 + O <=> NNH + OH
  k_f = 330 * exp((1.5) * logT - (250.098682904946) * invT);
  qf[194] *= k_f;
  qr[194] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[15] + g_RT[18]));
  // reaction 193:  N2H2 + O <=> NH2 + NO
  k_f = 10000000;
  qf[195] *= k_f;
  qr[195] *= k_f * exp(-(g_RT[4] - g_RT[10] - g_RT[12] + g_RT[18]));
  // reaction 194:  N2H2 + OH <=> H2O + NNH
  k_f = 5.9e-05 * exp((3.4) * logT - (684.374665494419) * invT);
  qf[196] *= k_f;
  qr[196] *= k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[15] + g_RT[18]));
  // reaction 195:  N2H2 + NH2 <=> NH3 + NNH
  k_f = 8.8e-08 * exp((4.05) * logT - (810.178831945599) * invT);
  qf[197] *= k_f;
  qr[197] *= k_f * exp(-(-g_RT[11] + g_RT[12] - g_RT[15] + g_RT[18]));
  // reaction 196:  N2H2 + NH <=> NH2 + NNH
  k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
  qf[198] *= k_f;
  qr[198] *= k_f * exp(-(-g_RT[12] + g_RT[13] - g_RT[15] + g_RT[18]));
  // reaction 197:  N2H2 + NO <=> N2O + NH2
  k_f = 4000000 * exp(-(5999.34908972387) * invT);
  qf[199] *= k_f;
  qr[199] *= k_f * exp(-(g_RT[10] - g_RT[12] + g_RT[18] - g_RT[30]));
  // reaction 198:  H2NN <=> H + NNH
  k_f = 3.4e+26 * exp((-4.83) * logT - (23262.7000268206) * invT);
  qf[200] *= k_f;
  qr[200] *= k_f * exp(-(-g_RT[2] - g_RT[15] + g_RT[19])) * (refCinv);
  // reaction 199:  H2NN <=> H2 + N2
  k_f = 250000000000000 * exp(-(26562.2917045021) * invT);
  qf[201] *= k_f;
  qr[201] *= k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[19])) * (refCinv);
  // reaction 200:  H2NN <=> N2H2
  k_f = 130000000000000 * exp(-(23616.4613428813) * invT);
  qf[202] *= k_f;
  qr[202] *= k_f * exp(-(-g_RT[18] + g_RT[19]));
  // reaction 201:  H + H2NN <=> H2 + NNH
  k_f = 480 * exp((1.5) * logT - (-449.875699229419) * invT);
  qf[203] *= k_f;
  qr[203] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[19]));
  // reaction 202:  H + H2NN <=> H + N2H2
  k_f = 70000000;
  qf[204] *= k_f;
  qr[204] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[18] + g_RT[19]));
  // reaction 203:  H2NN + O <=> NNH + OH
  k_f = 330 * exp((1.5) * logT - (-449.875699229419) * invT);
  qf[205] *= k_f;
  qr[205] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[15] + g_RT[19]));
  // reaction 204:  H2NN + O <=> NH2 + NO
  k_f = 70000000;
  qf[206] *= k_f;
  qr[206] *= k_f * exp(-(g_RT[4] - g_RT[10] - g_RT[12] + g_RT[19]));
  // reaction 205:  H2NN + OH <=> H2O + NNH
  k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
  qf[207] *= k_f;
  qr[207] *= k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[15] + g_RT[19]));
  // reaction 206:  H2NN + OH => H + NH2 + NO
  k_f = 2000000;
  qf[208] *= k_f;
  qr[208] *= k_f * exp(-(-g_RT[2] + g_RT[6] - g_RT[10] - g_RT[12] + g_RT[19])) *
             (refCinv);
  // reaction 207:  H2NN + HO2 => NH2 + NO + OH
  k_f = 9000000;
  qf[209] *= k_f;
  qr[209] *= k_f * exp(-(-g_RT[6] + g_RT[9] - g_RT[10] - g_RT[12] + g_RT[19])) *
             (refCinv);
  // reaction 208:  H2NN + HO2 <=> H2O2 + NNH
  k_f = 0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[210] *= k_f;
  qr[210] *= k_f * exp(-(-g_RT[8] + g_RT[9] - g_RT[15] + g_RT[19]));
  // reaction 209:  H2NN + O2 <=> NH2 + NO2
  k_f = 1500000 * exp(-(2999.67454486193) * invT);
  qf[211] *= k_f;
  qr[211] *= k_f * exp(-(g_RT[3] - g_RT[12] + g_RT[19] - g_RT[25]));
  // reaction 210:  H2NN + NH2 <=> NH3 + NNH
  k_f = 1.8 * exp((1.94) * logT - (-579.705599007037) * invT);
  qf[212] *= k_f;
  qr[212] *= k_f * exp(-(-g_RT[11] + g_RT[12] - g_RT[15] + g_RT[19]));
  // reaction 211:  HNO2 <=> HONO
  k_f = 4.68e+24 * exp((-4.52) * logT - (21799.3459626605) * invT);
  qf[213] *= k_f;
  qr[213] *= k_f * exp(-(-g_RT[26] + g_RT[27]));
  // reaction 212:  H + NO2 <=> NO + OH
  k_f = 101000 * exp((0.84) * logT - (-532.403232421393) * invT);
  qf[214] *= k_f;
  qr[214] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[10] + g_RT[25]));
  // reaction 213:  NO + OH <=> HONO
  k_f = 6.35e+17 * exp((-3.97) * logT - (1118.14743141809) * invT);
  qf[215] *= k_f;
  qr[215] *= k_f * exp(-(g_RT[6] + g_RT[10] - g_RT[26])) * (refC);
  // reaction 214:  NO + OH <=> HNO2
  k_f = 204000000000 * exp((-2.49) * logT - (2578.98541224919) * invT);
  qf[216] *= k_f;
  qr[216] *= k_f * exp(-(g_RT[6] + g_RT[10] - g_RT[27])) * (refC);
  // reaction 215:  H + HONO <=> H2 + NO2
  k_f = 0.00189 * exp((2.83) * logT - (715.926350440375) * invT);
  qf[217] *= k_f;
  qr[217] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[25] + g_RT[26]));
  // reaction 216:  H + HNO2 <=> H2 + NO2
  k_f = 0.0233 * exp((2.77) * logT - (-1017.45377659056) * invT);
  qf[218] *= k_f;
  qr[218] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[25] + g_RT[27]));
  // reaction 217:  H + HONO <=> H2O + NO
  k_f = 26000 * exp((0.76) * logT - (2383.23412925115) * invT);
  qf[219] *= k_f;
  qr[219] *= k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[10] + g_RT[26]));
  // reaction 218:  HNO + OH <=> H + HONO
  k_f = 0.00967 * exp((2.49) * logT - (2643.39714547219) * invT);
  qf[220] *= k_f;
  qr[220] *= k_f * exp(-(-g_RT[2] + g_RT[6] + g_RT[23] - g_RT[26]));
  // reaction 219:  HNO + OH <=> H2O + NO
  k_f = 260000 * exp((0.23) * logT - (2220.69514619623) * invT);
  qf[221] *= k_f;
  qr[221] *= k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[10] + g_RT[23]));
  // reaction 220:  H2 + N2O <=> H2O + N2
  k_f = 7000000 * exp(-(16354.5416386534) * invT);
  qf[222] *= k_f;
  qr[222] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[5] + g_RT[30]));
  // reaction 221:  NH3 + OH <=> H2O + NH2
  k_f = 0.004299 * exp((2.83021) * logT - (-216.785739628673) * invT);
  qf[223] *= k_f;
  qr[223] *= k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[11] - g_RT[12]));
  // reaction 222:  H + HNO2 <=> H2O + NO
  k_f = 3400 * exp((1.07) * logT - (2790.83962855298) * invT);
  qf[224] *= k_f;
  qr[224] *= k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[10] + g_RT[27]));
  // reaction 223:  H + HNO2 <=> HNO + OH
  k_f = 41.4 * exp((1.76) * logT - (2826.56801182511) * invT);
  qf[225] *= k_f;
  qr[225] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[27]));
  // reaction 224:  H + NH2 (+M) <=> NH3 (+M)
  k_f = 160000000;
  Corr = mixture;
  redP = Corr / k_f * 36000000000 * exp(-1.76 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent =
    log10((0.5) * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(g_RT[2] - g_RT[11] + g_RT[12])) * (refC);
  // reaction 225:  H + NO (+M) <=> HNO (+M)
  k_f = 1520000000 * exp((-0.41) * logT);
  Corr = mixture + (0.6) * sc[0] + sc[1] + (0.5) * sc[3] + (9) * sc[5];
  redP = Corr / k_f * 240 * exp(0.206 * logT - (-779.985831997315) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.18) * exp(-T * 1e+30) + 0.82 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(g_RT[2] + g_RT[10] - g_RT[23])) * (refC);
  // reaction 226:  HO2 + NH2 <=> H2NO + OH
  k_f = 250000000000 * exp((-1.28) * logT - (586.750632328303) * invT);
  qf[226] *= k_f;
  qr[226] *= k_f * exp(-(-g_RT[6] + g_RT[9] + g_RT[12] - g_RT[21]));
  // reaction 227:  NH2 + NO <=> H2O + N2
  k_f = 26000000000000 * exp((-2.369) * logT - (437.798499250106) * invT);
  qf[227] *= k_f;
  qr[227] *= k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[10] + g_RT[12]));
  // reaction 228:  NH2 + NO <=> NNH + OH
  k_f = 43000 * exp((0.294) * logT - (-435.785632586887) * invT);
  qf[228] *= k_f;
  qr[228] *= k_f * exp(-(-g_RT[6] + g_RT[10] + g_RT[12] - g_RT[15]));
  // reaction 229:  H2NO + O2 <=> HNO + HO2
  k_f = 0.00023 * exp((2.994) * logT - (8303.07498577788) * invT);
  qf[229] *= k_f;
  qr[229] *= k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[21] - g_RT[23]));
  // reaction 230:  HO2 + NH2 <=> NH3 + O2
  k_f = 0.017 * exp((1.55) * logT - (1020.02018158617) * invT);
  qf[230] *= k_f;
  qr[230] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[11] + g_RT[12]));
  // reaction 231:  N2H2 <=> H + NNH
  k_f = 3.1e+41 * exp((-8.42) * logT - (38295.7947010708) * invT);
  qf[231] *= k_f;
  qr[231] *= k_f * exp(-(-g_RT[2] - g_RT[15] + g_RT[18])) * (refCinv);
  // reaction 232:  HNO + NO2 <=> HONO + NO
  k_f = 0.0007847 * exp((3.059) * logT - (1953.68838332024) * invT);
  qf[232] *= k_f;
  qr[232] *= k_f * exp(-(-g_RT[10] + g_RT[23] + g_RT[25] - g_RT[26]));
  // reaction 233:  HNO + O2 <=> HO2 + NO
  k_f = 0.398956 * exp((2.3026) * logT - (7349.68069074425) * invT);
  qf[233] *= k_f;
  qr[233] *= k_f * exp(-(g_RT[3] - g_RT[9] - g_RT[10] + g_RT[23]));
  // reaction 234:  N2H3 <=> H + N2H2
  k_f = 1.8e+45 * exp((-9.39) * logT - (35296.1201562088) * invT);
  qf[234] *= k_f;
  qr[234] *= k_f * exp(-(-g_RT[2] + g_RT[17] - g_RT[18])) * (refCinv);
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T)
{
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 32; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 32; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[32];
  gibbs(g_RT, T);

  {
    // reaction 10:  H + OH (+M) <=> H2O (+M)
    const amrex::Real k_f =
      25000000 * exp((0.234) * logT - (-57.366699901738) * invT);
    amrex::Real Corr = mixture + (0.5) * sc[1] + (12) * sc[5];
    const amrex::Real redP =
      Corr / k_f * 4530000000 * exp(-1.81 * logT - 247.582599575922 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.27 * exp(-T * 1e+30) + 0.73 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[6]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] - g_RT[5] + g_RT[6])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 22:  H2O2 (+M) <=> 2 OH (+M)
    const amrex::Real k_f =
      2000000000000 * exp((0.9) * logT - (24531.3092413143) * invT);
    amrex::Real Corr = mixture + (0.5) * sc[0] + (2.7) * sc[1] +
                       (-0.21) * sc[3] + (4.1) * sc[5] + (4.2) * sc[8];
    const amrex::Real redP = Corr / k_f * 2.3530181e+18 *
                             exp(-2.2929358 * logT - 24528.4937440691 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.57 * exp(-T * 1e+30) + 0.43 * exp(-T * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[8]);
    const amrex::Real qr = Corr * k_f * exp(-(-2.000000 * g_RT[6] + g_RT[8])) *
                           (refCinv) * ((sc[6] * sc[6]));
    const amrex::Real qdot = qf - qr;
    wdot[6] += 2.000000 * qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 35:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 4660000 * exp((0.44) * logT);
    amrex::Real Corr =
      mixture + (0.35) * sc[1] + (-0.1) * sc[3] + (15.6) * sc[5];
    const amrex::Real redP = Corr / k_f * 12250000 * exp(-1.2 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-T * 1) + 0.5 * exp(-T * 1e-10) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[9])) * (refC) * (sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 82:  NH2OH (+M) <=> NH2 + OH (+M)
    const amrex::Real k_f =
      1.4e+20 * exp((-1.31) * logT - (32246.1239447664) * invT);
    amrex::Real Corr = mixture;
    const amrex::Real redP =
      Corr / k_f * 5.4e+31 * exp(-5.96 * logT - 33606.3185924366 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.69 * exp(-T * 1e+30) + 0.31 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[20]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[6] - g_RT[12] + g_RT[20])) *
                           (refCinv) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[12] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 121:  NO + O (+M) <=> NO2 (+M)
    const amrex::Real k_f = 1300000000 * exp((-0.75) * logT);
    amrex::Real Corr = mixture + (-0.2) * sc[3] + (9) * sc[5] + (0.8) * sc[10] +
                       (5.2) * sc[25] + (3.4) * sc[30];
    const amrex::Real redP =
      Corr / k_f * 9440000000000 * exp(-2.87 * logT - 780.48904866312 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.038 * exp(-T * 0.1) + 0.962 * exp(-T * 0.000125596583772921) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[10] - g_RT[25])) * (refC) * (sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 133:  NO2 + O (+M) <=> NO3 (+M)
    const amrex::Real k_f = 3500000 * exp((0.24) * logT);
    amrex::Real Corr = mixture;
    const amrex::Real redP = Corr / k_f * 250000000 * exp(-1.5 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.29 * exp(-T * 1e+30) + 0.71 * exp(-T * 0.000588235294117647) +
      exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[25]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[25] - g_RT[28])) * (refC) * (sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[25] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 139:  NO2 + OH (+M) <=> HONO2 (+M)
    const amrex::Real k_f = 16300000;
    amrex::Real Corr = mixture;
    const amrex::Real redP = Corr / k_f * 31300000000000 * exp(-3 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.59 * exp(-T * 1e+30) + 0.41 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[6] * sc[25]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[6] + g_RT[25] - g_RT[29])) * (refC) * (sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[25] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 168:  2 NH2 (+M) <=> N2H4 (+M)
    const amrex::Real k_f =
      560000000 * exp((-0.414) * logT - (33.2122999431115) * invT);
    amrex::Real Corr = mixture;
    const amrex::Real redP =
      Corr / k_f * 1.6e+22 * exp(-5.49 * logT - 999.891514953978 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.69 * exp(-T * 1e+30) + 0.31 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[12] * sc[12]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[12] - g_RT[16])) * (refC) * (sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= 2.000000 * qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 224:  H + NH2 (+M) <=> NH3 (+M)
    const amrex::Real k_f = 160000000;
    amrex::Real Corr = mixture;
    const amrex::Real redP = Corr / k_f * 36000000000 * exp(-1.76 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] - g_RT[11] + g_RT[12])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 225:  H + NO (+M) <=> HNO (+M)
    const amrex::Real k_f = 1520000000 * exp((-0.41) * logT);
    amrex::Real Corr =
      mixture + (0.6) * sc[0] + sc[1] + (0.5) * sc[3] + (9) * sc[5];
    const amrex::Real redP =
      Corr / k_f * 240 * exp(0.206 * logT - -779.985831997315 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.18 * exp(-T * 1e+30) + 0.82 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[10] - g_RT[23])) * (refC) * (sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 155:  N2O (+M) <=> N2 + O (+M)
    const amrex::Real k_f = 169000000000 * exp(-(29011.9504336395) * invT);
    amrex::Real Corr = mixture + (0.7) * sc[0] + (0.4) * sc[3] + (11) * sc[5] +
                       (2) * sc[10] + (2.5) * sc[30];
    const amrex::Real redP =
      Corr / k_f * 720000000 * exp(-28889.668783849 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[30]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[30])) *
                           (refCinv) * (sc[0] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 0:  H2 + M <=> 2 H + M
    const amrex::Real k_f =
      45770000000000 * exp((-1.4) * logT - (52535.8199100127) * invT);
    const amrex::Real Corr = mixture + (1.5) * sc[1] + (11) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[1]);
    const amrex::Real qr = Corr * k_f * exp(-(g_RT[1] - 2.000000 * g_RT[2])) *
                           (refCinv) * ((sc[2] * sc[2]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += 2.000000 * qdot;
  }

  {
    // reaction 4:  2 H + O2 <=> H2 + O2
    const amrex::Real k_f =
      88000000000 * exp((-1.835) * logT - (402.573332643776) * invT);
    const amrex::Real qf = k_f * ((sc[2] * sc[2]) * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[2])) * (refC) * (sc[1] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= 2.000000 * qdot;
  }

  {
    // reaction 6:  H + O + O2 <=> OH + O2
    const amrex::Real k_f =
      73500000000 * exp((-1.835) * logT - (402.573332643776) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[3] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[6])) * (refC) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 7:  H + OH + O2 <=> H2O + O2
    const amrex::Real k_f =
      25600000000 * exp((-1.835) * logT - (402.573332643776) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[3] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] + g_RT[6])) * (refC) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 8:  2 O + M <=> O2 + M
    const amrex::Real k_f = 6165 * exp((-0.5) * logT);
    const amrex::Real Corr = mixture + (1.5) * sc[1] + (11) * sc[5];
    const amrex::Real qf = Corr * k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= 2.000000 * qdot;
  }

  {
    // reaction 12:  H + O + M <=> OH + M
    const amrex::Real k_f = 4714000 * exp((-1) * logT);
    const amrex::Real Corr = mixture + (1.5) * sc[1] + (11) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[6])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 13:  H + O + M <=> OHV + M
    const amrex::Real k_f = 443 * exp(-(5032.1666580472) * invT);
    const amrex::Real Corr = mixture + sc[1] + (-0.2) * sc[3] + (11) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[7])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 95:  H2NO + M <=> H + HNO + M
    const amrex::Real k_f =
      2.8e+18 * exp((-2.83) * logT - (32666.3098607134) * invT);
    const amrex::Real Corr = mixture + (9) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[21]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] + g_RT[21] - g_RT[23])) *
                           (refCinv) * (sc[2] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[21] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 96:  H2NO + M <=> HNOH + M
    const amrex::Real k_f =
      1.1e+23 * exp((-4) * logT - (22141.5332954077) * invT);
    const amrex::Real Corr = mixture + (9) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[21]);
    const amrex::Real qr = Corr * k_f * exp(-(g_RT[21] - g_RT[22])) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 105:  HNOH + M <=> H + HNO + M
    const amrex::Real k_f =
      2e+18 * exp((-2.84) * logT - (29656.5709825354) * invT);
    const amrex::Real Corr = mixture + (9) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[22]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] + g_RT[22] - g_RT[23])) *
                           (refCinv) * (sc[2] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 138:  NO3 + NO2 <=> NO + O2 + NO2
    const amrex::Real k_f = 50000 * exp(-(1479.45699746588) * invT);
    const amrex::Real qf = k_f * (sc[25] * sc[28]);
    const amrex::Real qr = k_f * exp(-(-g_RT[3] - g_RT[10] + g_RT[28])) *
                           (refCinv) * (sc[3] * sc[10] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[10] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 144:  HO2 + NO + M <=> HNO3 + M
    const amrex::Real k_f =
      1500000000000 * exp((-3.5) * logT - (1107.07666477038) * invT);
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[10] - g_RT[31])) * (refC) * (sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 149:  HON + M <=> H + NO + M
    const amrex::Real k_f =
      51000000000000 * exp((-1.73) * logT - (8074.11140283673) * invT);
    const amrex::Real Corr = mixture + (6) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[24]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] - g_RT[10] + g_RT[24])) *
                           (refCinv) * (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 1:  H2 + O <=> H + OH
    const amrex::Real k_f = 3800000 * exp(-(3999.56605981591) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6])) * (sc[2] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 2:  H2 + O <=> H + OH
    const amrex::Real k_f = 880000000 * exp(-(9649.1795668055) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6])) * (sc[2] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 3:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      220 * exp((1.51) * logT - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 5:  2 H + O2 <=> 2 OH
    const amrex::Real k_f =
      40000000000 * exp((-1.835) * logT - (402.573332643776) * invT);
    const amrex::Real qf = k_f * ((sc[2] * sc[2]) * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[2] + g_RT[3] - 2.000000 * g_RT[6])) * (refC) *
      ((sc[6] * sc[6]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[3] -= qdot;
    wdot[6] += 2.000000 * qdot;
  }

  {
    // reaction 9:  H + O2 <=> O + OH
    const amrex::Real k_f = 104000000 * exp(-(7692.16995349094) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[4] - g_RT[6])) * (sc[4] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 11:  2 OH <=> H2O + O
    const amrex::Real k_f =
      2.88 * exp((1.79) * logT - (-880.629165158259) * invT);
    const amrex::Real qf = k_f * ((sc[6] * sc[6]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] - g_RT[5] + 2.000000 * g_RT[6])) * (sc[4] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] += qdot;
    wdot[6] -= 2.000000 * qdot;
  }

  {
    // reaction 14:  H2O + OHV <=> H2O + OH
    const amrex::Real k_f =
      5920000 * exp((0.5) * logT - (-432.766332592059) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[6] + g_RT[7])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 15:  H2 + OHV <=> H2 + OH
    const amrex::Real k_f =
      2950000 * exp((0.5) * logT - (-223.428199617296) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[6] + g_RT[7])) * (sc[1] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 16:  N2 + OHV <=> N2 + OH
    const amrex::Real k_f =
      2100000 * exp((0.5) * logT - (-242.550432917875) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[0] - g_RT[6] + g_RT[7])) * (sc[0] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 17:  OH + OHV <=> 2 OH
    const amrex::Real k_f = 1500000 * exp((0.5) * logT);
    const amrex::Real qf = k_f * (sc[6] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - 2.000000 * g_RT[6] + g_RT[7])) * ((sc[6] * sc[6]));
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[6] += 2.000000 * qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 18:  H + OHV <=> H + OH
    const amrex::Real k_f = 1500000 * exp((0.5) * logT);
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[6] + g_RT[7])) * (sc[2] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 19:  OHV <=> OH
    const amrex::Real k_f = 1400000;
    const amrex::Real qf = k_f * (sc[7]);
    const amrex::Real qr = k_f * exp(-(-g_RT[6] + g_RT[7])) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 20:  O2 + OHV <=> O2 + OH
    const amrex::Real k_f =
      2100000 * exp((0.5) * logT - (-242.550432917875) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[3] - g_RT[6] + g_RT[7])) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[3] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 21:  O + OHV <=> O + OH
    const amrex::Real k_f = 1500000 * exp((0.5) * logT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[4] - g_RT[6] + g_RT[7])) * (sc[4] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 23:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24100000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[6] + g_RT[8])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 24:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f =
      5.02 * exp((2.07) * logT - (2163.83166296029) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[8] - g_RT[9])) * (sc[1] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 25:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.55 * exp((2) * logT - (1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[8] - g_RT[9])) * (sc[6] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 26:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 1740000 * exp(-(160.022899725901) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[8] - g_RT[9])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 27:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 75900000 * exp(-(3657.88194373451) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[8] - g_RT[9])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 28:  H + HO2 <=> H2 + O2
    const amrex::Real k_f =
      2.8 * exp((2.09) * logT - (-730.167382082648) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[9])) * (sc[1] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 29:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 70790000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - 2.000000 * g_RT[6] + g_RT[9])) * ((sc[6] * sc[6]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += 2.000000 * qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 30:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 32500000;
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[6] + g_RT[9])) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 31:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      193000000000000 * exp((-2.49) * logT - (293.999304829749) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] - g_RT[5] + g_RT[6] + g_RT[9])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 32:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1210 * exp((1.24) * logT - (-657.996047872935) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] - g_RT[5] + g_RT[6] + g_RT[9])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 33:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f =
      12140 * exp((0.422) * logT - (-745.022338057204) * invT);
    const amrex::Real qf = k_f * ((sc[9] * sc[9]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] - g_RT[8] + 2.000000 * g_RT[9])) * (sc[3] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] += qdot;
    wdot[9] -= 2.000000 * qdot;
  }

  {
    // reaction 34:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f =
      16880000000 * exp((-0.681) * logT - (6507.42682852026) * invT);
    const amrex::Real qf = k_f * ((sc[9] * sc[9]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] - g_RT[8] + 2.000000 * g_RT[9])) * (sc[3] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] += qdot;
    wdot[9] -= 2.000000 * qdot;
  }

  {
    // reaction 36:  H + NH3 <=> H2 + NH2
    const amrex::Real k_f =
      0.64 * exp((2.39) * logT - (5118.2167078998) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[12])) * (sc[1] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 37:  NH3 + O <=> NH2 + OH
    const amrex::Real k_f =
      9.4 * exp((1.94) * logT - (3250.77966109849) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[11] - g_RT[12])) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 38:  HO2 + NH3 <=> H2O2 + NH2
    const amrex::Real k_f = 300000 * exp(-(11070.7666477038) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[11] - g_RT[12])) * (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[9] -= qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 39:  H2 + NH <=> H + NH2
    const amrex::Real k_f = 21000000 * exp(-(7758.09133671136) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[12] + g_RT[13])) * (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 40:  NH2 + O <=> H + HNO
    const amrex::Real k_f = 660000000 * exp((-0.5) * logT);
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[12] - g_RT[23])) * (sc[2] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[12] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 41:  NH2 + O <=> NH + OH
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[12] - g_RT[13])) * (sc[6] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 42:  NH2 + O <=> NH + OH
    const amrex::Real k_f =
      8.6e-07 * exp((4.01) * logT - (841.881481891296) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[12] - g_RT[13])) * (sc[6] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 43:  NH2 + OH <=> H2O + NH
    const amrex::Real k_f =
      3.3 * exp((1.949) * logT - (-109.198016479624) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[12] - g_RT[13])) * (sc[5] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 44:  HO2 + NH2 <=> H2O + HNO
    const amrex::Real k_f = 16 * exp((0.55) * logT - (264.188749547478) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[23])) * (sc[5] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[12] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 45:  HO2 + NH2 <=> H2O + HNO
    const amrex::Real k_f =
      5700000000 * exp((-1.12) * logT - (355.774182723937) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[23])) * (sc[5] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[12] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 46:  HO2 + NH2 <=> H2O + HON
    const amrex::Real k_f = 21 * exp((0.64) * logT - (408.108715967628) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[24])) * (sc[5] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[12] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 47:  NH2 + O2 <=> H2NO + O
    const amrex::Real k_f =
      260000 * exp((0.4872) * logT - (14618.4441416271) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[21])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[12] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 48:  NH2 + O2 <=> HNO + OH
    const amrex::Real k_f =
      2.9e-08 * exp((3.764) * logT - (9150.99506765883) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[12] - g_RT[23])) * (sc[6] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[12] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 49:  2 NH2 <=> NH + NH3
    const amrex::Real k_f =
      5.6e-06 * exp((3.53) * logT - (277.775599524205) * invT);
    const amrex::Real qf = k_f * ((sc[12] * sc[12]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + 2.000000 * g_RT[12] - g_RT[13])) *
                           (sc[11] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= 2.000000 * qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 50:  NH + NH2 <=> N + NH3
    const amrex::Real k_f =
      0.0096 * exp((2.46) * logT - (53.844183241105) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] + g_RT[13] - g_RT[14])) *
                           (sc[11] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[13] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 51:  N + NH2 <=> 2 H + N2
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[12] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - 2.000000 * g_RT[2] + g_RT[12] + g_RT[14])) *
      (refCinv) * (sc[0] * (sc[2] * sc[2]));
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] += 2.000000 * qdot;
    wdot[12] -= qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 52:  HNO + NH2 <=> NH3 + NO
    const amrex::Real k_f =
      0.00059 * exp((2.95) * logT - (-1745.65861367657) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] - g_RT[11] + g_RT[12] + g_RT[23])) *
                           (sc[10] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 53:  HONO + NH2 <=> NH3 + NO2
    const amrex::Real k_f =
      7.1e-05 * exp((3.02) * logT - (-2485.89032907532) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] - g_RT[25] + g_RT[26])) *
                           (sc[11] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 54:  NH2 + NO2 <=> H2NO + NO
    const amrex::Real k_f =
      860000 * exp((0.11) * logT - (-596.814965644398) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[12] - g_RT[21] + g_RT[25])) *
                           (sc[10] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[12] -= qdot;
    wdot[21] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 55:  NH2 + NO2 <=> H2O + N2O
    const amrex::Real k_f =
      220000 * exp((0.11) * logT - (-596.814965644398) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[5] + g_RT[12] + g_RT[25] - g_RT[30])) *
                           (sc[5] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[12] -= qdot;
    wdot[25] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 56:  H + NH <=> H2 + N
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[13] - g_RT[14])) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[13] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 57:  NH + O <=> H + NO
    const amrex::Real k_f = 92000000;
    const amrex::Real qf = k_f * (sc[4] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[10] + g_RT[13])) * (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 58:  NH + OH <=> H + HNO
    const amrex::Real k_f =
      320000000 * exp((-0.376) * logT - (-23.1479666270171) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[6] + g_RT[13] - g_RT[23])) * (sc[2] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
    wdot[13] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 59:  NH + OH <=> H2O + N
    const amrex::Real k_f =
      16 * exp((1.733) * logT - (-289.852799503519) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[13] - g_RT[14])) * (sc[5] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[13] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 60:  NH + O2 <=> HNO + O
    const amrex::Real k_f = 24000000 * exp(-(6969.55082139537) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[13] - g_RT[23])) * (sc[4] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[13] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 61:  NH + O2 <=> NO + OH
    const amrex::Real k_f = 99000 * exp(-(769.921498681221) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[10] + g_RT[13])) * (sc[6] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[10] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 62:  2 NH <=> N + NH2
    const amrex::Real k_f =
      5.7e-07 * exp((3.88) * logT - (172.100099705214) * invT);
    const amrex::Real qf = k_f * ((sc[13] * sc[13]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + 2.000000 * g_RT[13] - g_RT[14])) *
                           (sc[12] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] -= 2.000000 * qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 63:  N + NH <=> H + N2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[13] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[13] + g_RT[14])) * (sc[0] * sc[2]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] += qdot;
    wdot[13] -= qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 64:  NH + NO <=> H + N2O
    const amrex::Real k_f =
      2700000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[10] + g_RT[13] - g_RT[30])) *
                           (sc[2] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[13] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 65:  NH + NO <=> N2 + OH
    const amrex::Real k_f =
      680000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[6] + g_RT[10] + g_RT[13])) * (sc[0] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[6] += qdot;
    wdot[10] -= qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 66:  HONO + NH <=> NH2 + NO2
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[13] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[13] - g_RT[25] + g_RT[26])) *
                           (sc[12] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] -= qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 67:  NH + NO2 <=> N2O + OH
    const amrex::Real k_f = 4100000;
    const amrex::Real qf = k_f * (sc[13] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + g_RT[13] + g_RT[25] - g_RT[30])) *
                           (sc[6] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[13] -= qdot;
    wdot[25] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 68:  NH + NO2 <=> HNO + NO
    const amrex::Real k_f = 5900000;
    const amrex::Real qf = k_f * (sc[13] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[13] - g_RT[23] + g_RT[25])) *
                           (sc[10] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[13] -= qdot;
    wdot[23] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 69:  N + OH <=> H + NO
    const amrex::Real k_f = 38000000;
    const amrex::Real qf = k_f * (sc[6] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT[14])) * (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
    wdot[10] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 70:  N + O2 <=> NO + O
    const amrex::Real k_f = 9030 * exp((1) * logT - (3269.90189439907) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[14])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[10] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 71:  N + NO <=> N2 + O
    const amrex::Real k_f = 11280000 * exp((0.14) * logT);
    const amrex::Real qf = k_f * (sc[10] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[10] + g_RT[14])) * (sc[0] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 72:  NNH <=> H + N2
    const amrex::Real k_f = 1000000000;
    const amrex::Real qf = k_f * (sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[15])) * (refCinv) * (sc[0] * sc[2]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 73:  H + NNH <=> H2 + N2
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[2] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[15])) * (sc[0] * sc[1]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 74:  NNH + O <=> H + N2O
    const amrex::Real k_f =
      190000000 * exp((-0.274) * logT - (-11.0707666477038) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[15] - g_RT[30])) * (sc[2] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[15] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 75:  NNH + O <=> N2 + OH
    const amrex::Real k_f =
      12000000 * exp((0.145) * logT - (-109.198016479624) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[4] - g_RT[6] + g_RT[15])) * (sc[0] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 76:  NNH + O <=> NH + NO
    const amrex::Real k_f =
      520000 * exp((0.381) * logT - (-205.81561631413) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[10] - g_RT[13] + g_RT[15])) *
                           (sc[10] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    wdot[13] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 77:  NNH + OH <=> H2O + N2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[6] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[15])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 78:  NNH + O2 <=> HO2 + N2
    const amrex::Real k_f =
      560000000 * exp((-0.385) * logT - (-6.54181665546136) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[3] - g_RT[9] + g_RT[15])) * (sc[0] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 79:  NH + NNH <=> N2 + NH2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[13] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] - g_RT[12] + g_RT[13] + g_RT[15])) *
                           (sc[0] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 80:  NH2 + NNH <=> N2 + NH3
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[12] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] - g_RT[11] + g_RT[12] + g_RT[15])) *
                           (sc[0] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 81:  NNH + NO <=> HNO + N2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[10] + g_RT[15] - g_RT[23])) *
                           (sc[0] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[10] -= qdot;
    wdot[15] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 83:  H + NH2OH <=> H2 + HNOH
    const amrex::Real k_f = 480 * exp((1.5) * logT - (3144.60094461369) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[22])) * (sc[1] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[20] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 84:  H + NH2OH <=> H2 + H2NO
    const amrex::Real k_f = 240 * exp((1.5) * logT - (2549.79884563251) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[21])) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 85:  NH2OH + O <=> HNOH + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (1944.93241333524) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[22])) * (sc[6] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[20] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 86:  NH2OH + O <=> H2NO + OH
    const amrex::Real k_f = 170 * exp((1.5) * logT - (1514.68216407221) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[21])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 87:  NH2OH + OH <=> H2O + HNOH
    const amrex::Real k_f =
      0.015 * exp((2.61) * logT - (-1779.87734695129) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[20] - g_RT[22])) * (sc[5] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[20] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 88:  NH2OH + OH <=> H2NO + H2O
    const amrex::Real k_f =
      0.15 * exp((2.28) * logT - (-652.168798882917) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[20] - g_RT[21])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 89:  NH2 + NH2OH <=> HNOH + NH3
    const amrex::Real k_f =
      1.1e-07 * exp((4) * logT - (-48.8120165830578) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] + g_RT[20] - g_RT[22])) *
                           (sc[11] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[20] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 90:  NH2 + NH2OH <=> H2NO + NH3
    const amrex::Real k_f =
      9.5e-06 * exp((3.42) * logT - (-509.758482460181) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] + g_RT[20] - g_RT[21])) *
                           (sc[11] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 91:  NH + NH2OH <=> HNOH + NH2
    const amrex::Real k_f =
      2.9e-09 * exp((4.4) * logT - (787.030865318582) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[13] + g_RT[20] - g_RT[22])) *
                           (sc[12] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] -= qdot;
    wdot[20] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 92:  NH + NH2OH <=> H2NO + NH2
    const amrex::Real k_f =
      1.5e-09 * exp((4.6) * logT - (1219.79719791064) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[13] + g_RT[20] - g_RT[21])) *
                           (sc[12] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] -= qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 93:  HO2 + NH2OH <=> H2O2 + HNOH
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (4809.24167509571) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[20] - g_RT[22])) * (sc[8] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[9] -= qdot;
    wdot[20] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 94:  HO2 + NH2OH <=> H2NO + H2O2
    const amrex::Real k_f =
      0.014 * exp((2.69) * logT - (3229.64456113469) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[20] - g_RT[21])) * (sc[8] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[9] -= qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 97:  H + H2NO <=> H2 + HNO
    const amrex::Real k_f = 30 * exp((2) * logT - (1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[21] - g_RT[23])) * (sc[1] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[21] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 98:  H + H2NO <=> NH2 + OH
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[2] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[21])) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[12] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 99:  H2NO + O <=> HNO + OH
    const amrex::Real k_f = 30 * exp((2) * logT - (1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[21] - g_RT[23])) * (sc[6] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[21] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 100:  H2NO + OH <=> H2O + HNO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[6] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[21] - g_RT[23])) * (sc[5] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[21] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 101:  H2NO + HO2 <=> H2O2 + HNO
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[21] - g_RT[23])) * (sc[8] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[9] -= qdot;
    wdot[21] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 102:  H2NO + NH2 <=> HNO + NH3
    const amrex::Real k_f = 3000000 * exp(-(503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] + g_RT[21] - g_RT[23])) *
                           (sc[11] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[21] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 103:  H2NO + NO <=> 2 HNO
    const amrex::Real k_f = 0.02 * exp((2) * logT - (6541.81665546136) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] + g_RT[21] - 2.000000 * g_RT[23])) *
                           ((sc[23] * sc[23]));
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[21] -= qdot;
    wdot[23] += 2.000000 * qdot;
  }

  {
    // reaction 104:  H2NO + NO2 <=> HNO + HONO
    const amrex::Real k_f =
      0.044 * exp((2.64) * logT - (2032.99532985107) * invT);
    const amrex::Real qf = k_f * (sc[21] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[21] - g_RT[23] + g_RT[25] - g_RT[26])) *
                           (sc[23] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[21] -= qdot;
    wdot[23] += qdot;
    wdot[25] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 106:  H + HNOH <=> NH2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[22])) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[12] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 107:  H + HNOH <=> H2 + HNO
    const amrex::Real k_f = 480 * exp((1.5) * logT - (190.215899674184) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[23])) * (sc[1] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 108:  HNOH + O <=> HNO + OH
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[22] - g_RT[23])) * (sc[6] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 109:  HNOH + O <=> HNO + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (-180.15156635809) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[22] - g_RT[23])) * (sc[6] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 110:  HNOH + OH <=> H2O + HNO
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[22] - g_RT[23])) * (sc[5] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 111:  HNOH + HO2 <=> H2O2 + HNO
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[22] - g_RT[23])) * (sc[8] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[9] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 112:  HNOH + HO2 <=> NH2OH + O2
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[20] + g_RT[22])) * (sc[3] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[20] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 113:  HNOH + O2 <=> HNO + HO2
    const amrex::Real k_f = 3000000 * exp(-(12580.416645118) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[22] - g_RT[23])) * (sc[9] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 114:  HNOH + NH2 <=> HNO + NH3
    const amrex::Real k_f =
      1.8 * exp((1.94) * logT - (-579.705599007037) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] + g_RT[22] - g_RT[23])) *
                           (sc[11] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 115:  HNOH + NO2 <=> HNO + HONO
    const amrex::Real k_f = 600000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[22] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[22] - g_RT[23] + g_RT[25] - g_RT[26])) *
                           (sc[23] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[22] -= qdot;
    wdot[23] += qdot;
    wdot[25] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 116:  H + HNO <=> H2 + NO
    const amrex::Real k_f =
      66000 * exp((0.94) * logT - (249.092249573336) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT[23])) * (sc[1] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 117:  HNO + O <=> NO + OH
    const amrex::Real k_f = 23000000;
    const amrex::Real qf = k_f * (sc[4] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[10] + g_RT[23])) * (sc[6] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[10] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 118:  HNO + HO2 <=> HNO2 + OH
    const amrex::Real k_f =
      0.002 * exp((2.36) * logT - (4518.88565892638) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[9] + g_RT[23] - g_RT[27])) * (sc[6] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[9] -= qdot;
    wdot[23] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 119:  2 HNO <=> H2O + N2O
    const amrex::Real k_f = 900 * exp(-(1559.97166399463) * invT);
    const amrex::Real qf = k_f * ((sc[23] * sc[23]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[5] + 2.000000 * g_RT[23] - g_RT[30])) *
                           (sc[5] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[23] -= 2.000000 * qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 120:  HO2 + NO <=> NO2 + OH
    const amrex::Real k_f = 2100000 * exp(-(-250.098682904946) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[9] + g_RT[10] - g_RT[25])) * (sc[6] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 122:  NO2 + O <=> NO + O2
    const amrex::Real k_f = 5860000 * exp(-(-119.765566461523) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[10] + g_RT[25])) * (sc[3] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 123:  HO2 + NO2 <=> HONO + O2
    const amrex::Real k_f =
      1.9e-06 * exp((3.32) * logT - (1531.79153070957) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[25] - g_RT[26])) * (sc[3] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[25] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 124:  HO2 + NO2 <=> HNO2 + O2
    const amrex::Real k_f =
      1.9e-05 * exp((3.26) * logT - (2507.52864570492) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[25] - g_RT[27])) * (sc[3] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[25] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 125:  2 NO2 <=> 2 NO + O2
    const amrex::Real k_f = 4500000 * exp(-(13888.2767595445) * invT);
    const amrex::Real qf = k_f * ((sc[25] * sc[25]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] - 2.000000 * g_RT[10] + 2.000000 * g_RT[25])) *
      (refCinv) * (sc[3] * (sc[10] * sc[10]));
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[10] += 2.000000 * qdot;
    wdot[25] -= 2.000000 * qdot;
  }

  {
    // reaction 126:  2 NO2 <=> NO + NO3
    const amrex::Real k_f =
      9600 * exp((0.73) * logT - (10517.2283153186) * invT);
    const amrex::Real qf = k_f * ((sc[25] * sc[25]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + 2.000000 * g_RT[25] - g_RT[28])) *
                           (sc[10] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[25] -= 2.000000 * qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 127:  HONO + O <=> NO2 + OH
    const amrex::Real k_f = 12000000 * exp(-(2999.17132819613) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[25] + g_RT[26])) * (sc[6] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 128:  HONO + OH <=> H2O + NO2
    const amrex::Real k_f = 1700000 * exp(-(-261.672666218454) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[25] + g_RT[26])) * (sc[5] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 129:  HONO + NO2 <=> HONO2 + NO
    const amrex::Real k_f = 200000 * exp(-(16455.1849718143) * invT);
    const amrex::Real qf = k_f * (sc[25] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[25] + g_RT[26] - g_RT[29])) *
                           (sc[10] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[25] -= qdot;
    wdot[26] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 130:  2 HONO <=> H2O + NO + NO2
    const amrex::Real k_f =
      3.5e-07 * exp((3.64) * logT - (6109.0503228693) * invT);
    const amrex::Real qf = k_f * ((sc[26] * sc[26]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] - g_RT[10] - g_RT[25] + 2.000000 * g_RT[26])) *
      (refCinv) * (sc[5] * sc[10] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[10] += qdot;
    wdot[25] += qdot;
    wdot[26] -= 2.000000 * qdot;
  }

  {
    // reaction 131:  HNO2 + O <=> NO2 + OH
    const amrex::Real k_f = 170 * exp((1.5) * logT - (1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[25] + g_RT[27])) * (sc[6] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[25] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 132:  HNO2 + OH <=> H2O + NO2
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[6] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[25] + g_RT[27])) * (sc[5] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[25] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 134:  H + NO3 <=> NO2 + OH
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[2] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[25] + g_RT[28])) * (sc[6] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[25] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 135:  NO3 + O <=> NO2 + O2
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[4] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[25] + g_RT[28])) * (sc[3] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[25] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 136:  NO3 + OH <=> HO2 + NO2
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[6] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[9] - g_RT[25] + g_RT[28])) * (sc[9] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[9] += qdot;
    wdot[25] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 137:  HO2 + NO3 <=> NO2 + O2 + OH
    const amrex::Real k_f = 1500000;
    const amrex::Real qf = k_f * (sc[9] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] - g_RT[6] + g_RT[9] - g_RT[25] + g_RT[28])) *
      (refCinv) * (sc[3] * sc[6] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] += qdot;
    wdot[9] -= qdot;
    wdot[25] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 140:  H + HONO2 <=> H2 + NO3
    const amrex::Real k_f = 560 * exp((1.5) * logT - (8252.7533191974) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[28] + g_RT[29])) * (sc[1] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 141:  H + HONO2 <=> H2O + NO2
    const amrex::Real k_f =
      6.1e-05 * exp((3.3) * logT - (3162.71674458266) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[25] + g_RT[29])) * (sc[5] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[25] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 142:  H + HONO2 <=> HONO + OH
    const amrex::Real k_f =
      0.38 * exp((2.3) * logT - (3510.43946065372) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[26] + g_RT[29])) * (sc[6] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[26] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 143:  HONO2 + OH <=> H2O + NO3
    const amrex::Real k_f = 10000 * exp(-(-623.988665597852) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[28] + g_RT[29])) * (sc[5] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 145:  H + HNO3 <=> H2 + NO3
    const amrex::Real k_f = 556 * exp((1.5) * logT - (8252.7533191974) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[28] + g_RT[31])) * (sc[1] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[28] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 146:  H + HNO3 <=> H2O + NO2
    const amrex::Real k_f =
      6.08e-05 * exp((3.3) * logT - (3162.71674458266) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[25] + g_RT[31])) * (sc[5] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[25] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 147:  H + HNO3 <=> HONO + OH
    const amrex::Real k_f =
      0.382 * exp((2.3) * logT - (3510.43946065372) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[26] + g_RT[31])) * (sc[6] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[26] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 148:  HNO3 + OH <=> H2O + NO3
    const amrex::Real k_f = 10300 * exp(-(-623.988665597852) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[28] + g_RT[31])) * (sc[5] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[28] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 150:  H + HON <=> H + HNO
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[23] + g_RT[24])) * (sc[2] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 151:  H + HON <=> NH + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[24])) * (sc[6] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[13] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 152:  HON + O <=> NO + OH
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[4] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[10] + g_RT[24])) * (sc[6] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[10] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 153:  HON + OH <=> H + HONO
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[6] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[6] + g_RT[24] - g_RT[26])) * (sc[2] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
    wdot[24] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 154:  HON + O2 <=> NO2 + OH
    const amrex::Real k_f = 1000000 * exp(-(2499.98039571785) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[24] - g_RT[25])) * (sc[6] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[24] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 156:  H + N2O <=> N2 + OH
    const amrex::Real k_f =
      64 * exp((1.835) * logT - (6789.39925503728) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[30])) * (sc[0] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 157:  H + N2O <=> N2 + OHV
    const amrex::Real k_f = 160000000 * exp(-(25311.7982899774) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[7] + g_RT[30])) * (sc[0] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[7] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 158:  N2O + O <=> N2 + O2
    const amrex::Real k_f = 3690000 * exp(-(8019.26078626401) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[4] + g_RT[30])) * (sc[0] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 159:  N2O + O <=> 2 NO
    const amrex::Real k_f = 91500000 * exp(-(13928.5340928088) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - 2.000000 * g_RT[10] + g_RT[30])) *
                           ((sc[10] * sc[10]));
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] += 2.000000 * qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 160:  N2O + OH <=> HO2 + N2
    const amrex::Real k_f =
      1.3e-08 * exp((4.72) * logT - (18397.6013018206) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[6] - g_RT[9] + g_RT[30])) * (sc[0] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[6] -= qdot;
    wdot[9] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 161:  N2O + OH <=> HNO + NO
    const amrex::Real k_f =
      1.2e-10 * exp((4.33) * logT - (12620.6739783824) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] - g_RT[10] - g_RT[23] + g_RT[30])) *
                           (sc[10] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[10] += qdot;
    wdot[23] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 162:  N2O + NO <=> N2 + NO2
    const amrex::Real k_f =
      0.53 * exp((2.23) * logT - (23289.3705101082) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[10] - g_RT[25] + g_RT[30])) *
                           (sc[0] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[10] -= qdot;
    wdot[25] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 163:  2 NH2 <=> H2 + N2H2
    const amrex::Real k_f =
      170 * exp((1.62) * logT - (5929.40197317701) * invT);
    const amrex::Real qf = k_f * ((sc[12] * sc[12]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[18])) *
                           (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] -= 2.000000 * qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 164:  2 NH2 <=> H2 + H2NN
    const amrex::Real k_f =
      0.072 * exp((1.88) * logT - (4429.31309241314) * invT);
    const amrex::Real qf = k_f * ((sc[12] * sc[12]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[19])) *
                           (sc[1] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] -= 2.000000 * qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 165:  NH + NH2 <=> H + N2H2
    const amrex::Real k_f =
      430000000 * exp((-0.272) * logT - (-38.7476832669634) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[12] + g_RT[13] - g_RT[18])) *
                           (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[13] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 166:  HNOH + NH2 <=> N2H3 + OH
    const amrex::Real k_f =
      1e-05 * exp((3.46) * logT - (-235.002182930804) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + g_RT[12] - g_RT[17] + g_RT[22])) *
                           (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[12] -= qdot;
    wdot[17] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 167:  HNOH + NH2 <=> H2NN + H2O
    const amrex::Real k_f =
      88000000000 * exp((-1.08) * logT - (560.080149040653) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[5] + g_RT[12] - g_RT[19] + g_RT[22])) *
                           (sc[5] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[12] -= qdot;
    wdot[19] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 169:  N2H4 <=> H2 + H2NN
    const amrex::Real k_f = 140000000000000 * exp(-(37696.4636520974) * invT);
    const amrex::Real qf = k_f * (sc[16]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] + g_RT[16] - g_RT[19])) *
                           (refCinv) * (sc[1] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[16] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 170:  H + N2H4 <=> H2 + N2H3
    const amrex::Real k_f = 7000000 * exp(-(1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[16] - g_RT[17])) * (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 171:  H + N2H4 <=> NH2 + NH3
    const amrex::Real k_f =
      0.23 * exp((1.42) * logT - (4127.38309293031) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[11] - g_RT[12] + g_RT[16])) *
                           (sc[11] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[11] += qdot;
    wdot[12] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 172:  N2H4 + O <=> N2H3 + OH
    const amrex::Real k_f = 150000 * exp(-(-639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[16] - g_RT[17])) * (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 173:  N2H4 + O <=> H2O + N2H2
    const amrex::Real k_f = 290000 * exp(-(-639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[16] - g_RT[18])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[16] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 174:  N2H4 + OH <=> H2O + N2H3
    const amrex::Real k_f = 13000000 * exp(-(-160.022899725901) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[16] - g_RT[17])) * (sc[5] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 175:  N2H4 + NH2 <=> N2H3 + NH3
    const amrex::Real k_f =
      7.6e-07 * exp((4) * logT - (2037.02106317751) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] + g_RT[16] - g_RT[17])) *
                           (sc[11] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 176:  N2H4 + NO <=> HNO + N2H3
    const amrex::Real k_f =
      6e-05 * exp((3.16) * logT - (15521.7180567466) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] + g_RT[16] - g_RT[17] - g_RT[23])) *
                           (sc[17] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 177:  N2H4 + NO2 <=> HONO + N2H3
    const amrex::Real k_f =
      8.2e-05 * exp((3.13) * logT - (4458.49965902982) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[16] - g_RT[17] + g_RT[25] - g_RT[26])) *
                           (sc[17] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[17] += qdot;
    wdot[25] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 178:  N2H4 + NO2 <=> HNO2 + N2H3
    const amrex::Real k_f =
      2.4e-08 * exp((4.14) * logT - (3998.5596264843) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[16] - g_RT[17] + g_RT[25] - g_RT[27])) *
                           (sc[17] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[17] += qdot;
    wdot[25] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 179:  H + N2H3 <=> H2 + N2H2
    const amrex::Real k_f = 240 * exp((1.5) * logT - (-5.0321666580472) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[17] - g_RT[18])) * (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 180:  N2H3 + O <=> N2H2 + OH
    const amrex::Real k_f =
      170 * exp((1.5) * logT - (-325.077966109849) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[17] - g_RT[18])) * (sc[6] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 181:  N2H3 + O <=> HNO + NH2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[12] + g_RT[17] - g_RT[23])) *
                           (sc[12] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[12] += qdot;
    wdot[17] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 182:  N2H3 + O => H + NH2 + NO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[17]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 183:  N2H3 + OH <=> H2O + N2H2
    const amrex::Real k_f = 1.2 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[17] - g_RT[18])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 184:  N2H3 + OH <=> H2NN + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[6] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[17] - g_RT[19])) * (sc[5] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[17] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 185:  N2H3 + OH <=> HNO + NH3
    const amrex::Real k_f = 1000000 * exp(-(7548.2499870708) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] - g_RT[11] + g_RT[17] - g_RT[23])) *
                           (sc[11] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[11] += qdot;
    wdot[17] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 186:  HO2 + N2H3 <=> H2O2 + N2H2
    const amrex::Real k_f =
      0.014 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[17] - g_RT[18])) * (sc[8] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[9] -= qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 187:  HO2 + N2H3 <=> N2H4 + O2
    const amrex::Real k_f =
      0.92 * exp((1.94) * logT - (1069.83863150083) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[16] + g_RT[17])) * (sc[3] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 188:  N2H3 + NH2 <=> N2H2 + NH3
    const amrex::Real k_f =
      0.92 * exp((1.94) * logT - (-579.705599007037) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] + g_RT[17] - g_RT[18])) *
                           (sc[11] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 189:  N2H3 + NH2 <=> H2NN + NH3
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[12] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] + g_RT[17] - g_RT[19])) *
                           (sc[11] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[17] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 190:  N2H3 + NH <=> N2H2 + NH2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[13] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[13] + g_RT[17] - g_RT[18])) *
                           (sc[12] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] -= qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 191:  H + N2H2 <=> H2 + NNH
    const amrex::Real k_f = 110000000 * exp(-(1574.06173063716) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[18])) * (sc[1] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[15] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 192:  N2H2 + O <=> NNH + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (250.098682904946) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[15] + g_RT[18])) * (sc[6] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[15] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 193:  N2H2 + O <=> NH2 + NO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[10] - g_RT[12] + g_RT[18])) *
                           (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 194:  N2H2 + OH <=> H2O + NNH
    const amrex::Real k_f =
      5.9e-05 * exp((3.4) * logT - (684.374665494419) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[15] + g_RT[18])) * (sc[5] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[15] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 195:  N2H2 + NH2 <=> NH3 + NNH
    const amrex::Real k_f =
      8.8e-08 * exp((4.05) * logT - (810.178831945599) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] - g_RT[15] + g_RT[18])) *
                           (sc[11] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[15] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 196:  N2H2 + NH <=> NH2 + NNH
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[13] - g_RT[15] + g_RT[18])) *
                           (sc[12] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] -= qdot;
    wdot[15] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 197:  N2H2 + NO <=> N2O + NH2
    const amrex::Real k_f = 4000000 * exp(-(5999.34908972387) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[12] + g_RT[18] - g_RT[30])) *
                           (sc[12] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[12] += qdot;
    wdot[18] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 198:  H2NN <=> H + NNH
    const amrex::Real k_f =
      3.4e+26 * exp((-4.83) * logT - (23262.7000268206) * invT);
    const amrex::Real qf = k_f * (sc[19]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] - g_RT[15] + g_RT[19])) *
                           (refCinv) * (sc[2] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 199:  H2NN <=> H2 + N2
    const amrex::Real k_f = 250000000000000 * exp(-(26562.2917045021) * invT);
    const amrex::Real qf = k_f * (sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[19])) * (refCinv) * (sc[0] * sc[1]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 200:  H2NN <=> N2H2
    const amrex::Real k_f = 130000000000000 * exp(-(23616.4613428813) * invT);
    const amrex::Real qf = k_f * (sc[19]);
    const amrex::Real qr = k_f * exp(-(-g_RT[18] + g_RT[19])) * (sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 201:  H + H2NN <=> H2 + NNH
    const amrex::Real k_f =
      480 * exp((1.5) * logT - (-449.875699229419) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[19])) * (sc[1] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 202:  H + H2NN <=> H + N2H2
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[18] + g_RT[19])) * (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 203:  H2NN + O <=> NNH + OH
    const amrex::Real k_f =
      330 * exp((1.5) * logT - (-449.875699229419) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[15] + g_RT[19])) * (sc[6] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 204:  H2NN + O <=> NH2 + NO
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[10] - g_RT[12] + g_RT[19])) *
                           (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 205:  H2NN + OH <=> H2O + NNH
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[15] + g_RT[19])) * (sc[5] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 206:  H2NN + OH => H + NH2 + NO
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[6] * sc[19]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 207:  H2NN + HO2 => NH2 + NO + OH
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 208:  H2NN + HO2 <=> H2O2 + NNH
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[9] - g_RT[15] + g_RT[19])) * (sc[8] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[9] -= qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 209:  H2NN + O2 <=> NH2 + NO2
    const amrex::Real k_f = 1500000 * exp(-(2999.67454486193) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[12] + g_RT[19] - g_RT[25])) *
                           (sc[12] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 210:  H2NN + NH2 <=> NH3 + NNH
    const amrex::Real k_f =
      1.8 * exp((1.94) * logT - (-579.705599007037) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] - g_RT[15] + g_RT[19])) *
                           (sc[11] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 211:  HNO2 <=> HONO
    const amrex::Real k_f =
      4.68e+24 * exp((-4.52) * logT - (21799.3459626605) * invT);
    const amrex::Real qf = k_f * (sc[27]);
    const amrex::Real qr = k_f * exp(-(-g_RT[26] + g_RT[27])) * (sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[26] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 212:  H + NO2 <=> NO + OH
    const amrex::Real k_f =
      101000 * exp((0.84) * logT - (-532.403232421393) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[10] + g_RT[25])) * (sc[6] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[10] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 213:  NO + OH <=> HONO
    const amrex::Real k_f =
      6.35e+17 * exp((-3.97) * logT - (1118.14743141809) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] + g_RT[10] - g_RT[26])) * (refC) * (sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[10] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 214:  NO + OH <=> HNO2
    const amrex::Real k_f =
      204000000000 * exp((-2.49) * logT - (2578.98541224919) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] + g_RT[10] - g_RT[27])) * (refC) * (sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[10] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 215:  H + HONO <=> H2 + NO2
    const amrex::Real k_f =
      0.00189 * exp((2.83) * logT - (715.926350440375) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[25] + g_RT[26])) * (sc[1] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 216:  H + HNO2 <=> H2 + NO2
    const amrex::Real k_f =
      0.0233 * exp((2.77) * logT - (-1017.45377659056) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[25] + g_RT[27])) * (sc[1] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[25] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 217:  H + HONO <=> H2O + NO
    const amrex::Real k_f =
      26000 * exp((0.76) * logT - (2383.23412925115) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[10] + g_RT[26])) * (sc[5] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[10] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 218:  HNO + OH <=> H + HONO
    const amrex::Real k_f =
      0.00967 * exp((2.49) * logT - (2643.39714547219) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[6] + g_RT[23] - g_RT[26])) * (sc[2] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
    wdot[23] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 219:  HNO + OH <=> H2O + NO
    const amrex::Real k_f =
      260000 * exp((0.23) * logT - (2220.69514619623) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[10] + g_RT[23])) * (sc[5] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[10] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 220:  H2 + N2O <=> H2O + N2
    const amrex::Real k_f = 7000000 * exp(-(16354.5416386534) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[5] + g_RT[30])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 221:  NH3 + OH <=> H2O + NH2
    const amrex::Real k_f =
      0.004299 * exp((2.83021) * logT - (-216.785739628673) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[6] + g_RT[11] - g_RT[12])) * (sc[5] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 222:  H + HNO2 <=> H2O + NO
    const amrex::Real k_f =
      3400 * exp((1.07) * logT - (2790.83962855298) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[10] + g_RT[27])) * (sc[5] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[10] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 223:  H + HNO2 <=> HNO + OH
    const amrex::Real k_f =
      41.4 * exp((1.76) * logT - (2826.56801182511) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[27])) * (sc[6] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[23] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 226:  HO2 + NH2 <=> H2NO + OH
    const amrex::Real k_f =
      250000000000 * exp((-1.28) * logT - (586.750632328303) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[9] + g_RT[12] - g_RT[21])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[9] -= qdot;
    wdot[12] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 227:  NH2 + NO <=> H2O + N2
    const amrex::Real k_f =
      26000000000000 * exp((-2.369) * logT - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[10] + g_RT[12])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[5] += qdot;
    wdot[10] -= qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 228:  NH2 + NO <=> NNH + OH
    const amrex::Real k_f =
      43000 * exp((0.294) * logT - (-435.785632586887) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + g_RT[10] + g_RT[12] - g_RT[15])) *
                           (sc[6] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[10] -= qdot;
    wdot[12] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 229:  H2NO + O2 <=> HNO + HO2
    const amrex::Real k_f =
      0.00023 * exp((2.994) * logT - (8303.07498577788) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[21] - g_RT[23])) * (sc[9] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[21] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 230:  HO2 + NH2 <=> NH3 + O2
    const amrex::Real k_f =
      0.017 * exp((1.55) * logT - (1020.02018158617) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[11] + g_RT[12])) * (sc[3] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 231:  N2H2 <=> H + NNH
    const amrex::Real k_f =
      3.1e+41 * exp((-8.42) * logT - (38295.7947010708) * invT);
    const amrex::Real qf = k_f * (sc[18]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] - g_RT[15] + g_RT[18])) *
                           (refCinv) * (sc[2] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[15] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 232:  HNO + NO2 <=> HONO + NO
    const amrex::Real k_f =
      0.0007847 * exp((3.059) * logT - (1953.68838332024) * invT);
    const amrex::Real qf = k_f * (sc[23] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[23] + g_RT[25] - g_RT[26])) *
                           (sc[10] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[23] -= qdot;
    wdot[25] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 233:  HNO + O2 <=> HO2 + NO
    const amrex::Real k_f =
      0.398956 * exp((2.3026) * logT - (7349.68069074425) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] - g_RT[10] + g_RT[23])) * (sc[9] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[10] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 234:  N2H3 <=> H + N2H2
    const amrex::Real k_f =
      1.8e+45 * exp((-9.39) * logT - (35296.1201562088) * invT);
    const amrex::Real qf = k_f * (sc[17]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[17] - g_RT[18])) *
                           (refCinv) * (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[])
{

  // convert to SI
  for (int id = 0; id < 32; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[32]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  for (int i = 0; i < 32; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[32]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 32; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[32]; // temporary storage

  // See Eq 8 with an extra 1e6 so c goes to SI
  for (int i = 0; i < 32; i++) {
    c[i] = 1e6 * rho * y[i] * imw(i);
  }

  // call productionRate
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[32];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 2.016000;   // H2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 15.999000;  // O
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 17.007000;  // OH
  XW += x[7] * 17.007000;  // OHV
  XW += x[8] * 34.014000;  // H2O2
  XW += x[9] * 33.006000;  // HO2
  XW += x[10] * 30.006000; // NO
  XW += x[11] * 17.031000; // NH3
  XW += x[12] * 16.023000; // NH2
  XW += x[13] * 15.015000; // NH
  XW += x[14] * 14.007000; // N
  XW += x[15] * 29.022000; // NNH
  XW += x[16] * 32.046000; // N2H4
  XW += x[17] * 31.038000; // N2H3
  XW += x[18] * 30.030000; // N2H2
  XW += x[19] * 30.030000; // H2NN
  XW += x[20] * 33.030000; // NH2OH
  XW += x[21] * 32.022000; // H2NO
  XW += x[22] * 32.022000; // HNOH
  XW += x[23] * 31.014000; // HNO
  XW += x[24] * 31.014000; // HON
  XW += x[25] * 46.005000; // NO2
  XW += x[26] * 47.013000; // HONO
  XW += x[27] * 47.013000; // HNO2
  XW += x[28] * 62.004000; // NO3
  XW += x[29] * 63.012000; // HONO2
  XW += x[30] * 44.013000; // N2O
  XW += x[31] * 63.012000; // HNO3
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 32; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = 0;  // N2
  kcharge[1] = 0;  // H2
  kcharge[2] = 0;  // H
  kcharge[3] = 0;  // O2
  kcharge[4] = 0;  // O
  kcharge[5] = 0;  // H2O
  kcharge[6] = 0;  // OH
  kcharge[7] = 0;  // OHV
  kcharge[8] = 0;  // H2O2
  kcharge[9] = 0;  // HO2
  kcharge[10] = 0; // NO
  kcharge[11] = 0; // NH3
  kcharge[12] = 0; // NH2
  kcharge[13] = 0; // NH
  kcharge[14] = 0; // N
  kcharge[15] = 0; // NNH
  kcharge[16] = 0; // N2H4
  kcharge[17] = 0; // N2H3
  kcharge[18] = 0; // N2H2
  kcharge[19] = 0; // H2NN
  kcharge[20] = 0; // NH2OH
  kcharge[21] = 0; // H2NO
  kcharge[22] = 0; // HNOH
  kcharge[23] = 0; // HNO
  kcharge[24] = 0; // HON
  kcharge[25] = 0; // NO2
  kcharge[26] = 0; // HONO
  kcharge[27] = 0; // HNO2
  kcharge[28] = 0; // NO3
  kcharge[29] = 0; // HONO2
  kcharge[30] = 0; // N2O
  kcharge[31] = 0; // HNO3
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{

  int kchrg[32];
  CKCHRG(kchrg);

  for (int id = 0; id < 32; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw(id);
  }
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 1089; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[32];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real invT = 1.0 / T;
  const amrex::Real invT2 = invT * invT;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 32; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[32];
  gibbs(g_RT, T);

  // compute the species enthalpy
  amrex::Real h_RT[32];
  speciesEnthalpy(h_RT, T);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[32];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 10: H + OH (+M) <=> H2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.5 - 1) * sc[1] + (13 - 1) * sc[5];
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 25000000 * exp(0.234 * logT - (-57.366699901738) * invT);
  dlnkfdT = 0.234 * invT + (-57.366699901738) * invT2;
  // pressure-fall-off
  k_0 = 4.53e+21 * exp(-1.81 * logT - (247.582599575922) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.81 * invT + (247.582599575922) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.73) * exp(-T / 1e-30);
  Fcent2 = 0.73 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(g_RT[2] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[6]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q; // H
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = 1.5 * dcdc_fac;
  dqdc[2] = dcdc_fac + k_f * sc[6];
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 13 * dcdc_fac - k_r;
  dqdc[6] = dcdc_fac + k_f * sc[2];
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] -= dqdc[k];
    J[33 * k + 5] += dqdc[k];
    J[33 * k + 6] -= dqdc[k];
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT

  // reaction 22: H2O2 (+M) <=> 2 OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.5 - 1) * sc[0] + (3.7 - 1) * sc[1] + (0.79 - 1) * sc[3] +
          (5.1 - 1) * sc[5] + (5.2 - 1) * sc[8];
  // forward
  phi_f = sc[8];
  k_f = 2000000000000 * exp(0.9 * logT - (24531.3092413143) * invT);
  dlnkfdT = 0.9 * invT + (24531.3092413143) * invT2;
  // pressure-fall-off
  k_0 = 2.3530181e+24 * exp(-2.2929358 * logT - (24528.4937440691) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.2929358 * invT + (24528.4937440691) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.43) * exp(-T / 1e-30);
  Fcent2 = 0.43 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = (sc[6] * sc[6]);
  Kc = refC * exp(-2.000000 * g_RT[6] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8]) + (2.000000 * h_RT[6]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[6] += 2 * q; // OH
  wdot[8] -= q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 1.5 * dcdc_fac;
  dqdc[1] = 3.7 * dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = 0.79 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 5.1 * dcdc_fac;
  dqdc[6] = dcdc_fac - k_r * 2.000000 * sc[6];
  dqdc[7] = dcdc_fac;
  dqdc[8] = 5.2 * dcdc_fac + k_f;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 6] += 2 * dqdc[k];
    J[33 * k + 8] -= dqdc[k];
  }
  J[1062] += 2 * dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT;     // dwdot[H2O2]/dT

  // reaction 35: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.35 - 1) * sc[1] + (0.9 - 1) * sc[3] + (16.6 - 1) * sc[5];
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 4660000 * exp(0.44 * logT);
  dlnkfdT = 0.44 * invT;
  // pressure-fall-off
  k_0 = 1.225e+19 * exp(-1.2 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.2 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1);
  Fcent2 = 0.5 * exp(-T / 10000000000);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1 - Fcent2 / 10000000000);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[9];
  Kc = refCinv * exp(g_RT[2] + g_RT[3] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q; // H
  wdot[3] -= q; // O2
  wdot[9] += q; // HO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = 1.35 * dcdc_fac;
  dqdc[2] = dcdc_fac + k_f * sc[3];
  dqdc[3] = 0.9 * dcdc_fac + k_f * sc[2];
  dqdc[4] = dcdc_fac;
  dqdc[5] = 16.6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac - k_r;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] -= dqdc[k];
    J[33 * k + 3] -= dqdc[k];
    J[33 * k + 9] += dqdc[k];
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT

  // reaction 82: NH2OH (+M) <=> NH2 + OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[20];
  k_f = 1.4e+20 * exp(-1.31 * logT - (32246.1239447664) * invT);
  dlnkfdT = -1.31 * invT + (32246.1239447664) * invT2;
  // pressure-fall-off
  k_0 = 5.4e+37 * exp(-5.96 * logT - (33606.3185924366) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.96 * invT + (33606.3185924366) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.31) * exp(-T / 1e-30);
  Fcent2 = 0.31 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = refC * exp(-g_RT[6] - g_RT[12] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20]) + (h_RT[6] + h_RT[12]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[6] += q;  // OH
  wdot[12] += q; // NH2
  wdot[20] -= q; // NH2OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac - k_r * sc[12];
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac - k_r * sc[6];
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac + k_f;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 6] += dqdc[k];
    J[33 * k + 12] += dqdc[k];
    J[33 * k + 20] -= dqdc[k];
  }
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 121: NO + O (+M) <=> NO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.8 - 1) * sc[3] + (10 - 1) * sc[5] + (1.8 - 1) * sc[10] +
          (6.2 - 1) * sc[25] + (4.4 - 1) * sc[30];
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 1300000000 * exp(-0.75 * logT);
  dlnkfdT = -0.75 * invT;
  // pressure-fall-off
  k_0 = 9.44e+24 * exp(-2.87 * logT - (780.48904866312) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.87 * invT + (780.48904866312) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.962) * exp(-T / 10);
  Fcent2 = 0.962 * exp(-T / 7962);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 10 - Fcent2 / 7962);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[25];
  Kc = refCinv * exp(g_RT[4] + g_RT[10] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[25]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // O
  wdot[10] -= q; // NO
  wdot[25] += q; // NO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = 0.8 * dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * sc[10];
  dqdc[5] = 10 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 1.8 * dcdc_fac + k_f * sc[4];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = 6.2 * dcdc_fac - k_r;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = 4.4 * dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 4] -= dqdc[k];
    J[33 * k + 10] -= dqdc[k];
    J[33 * k + 25] += dqdc[k];
  }
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT

  // reaction 133: NO2 + O (+M) <=> NO3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[4] * sc[25];
  k_f = 3500000 * exp(0.24 * logT);
  dlnkfdT = 0.24 * invT;
  // pressure-fall-off
  k_0 = 2.5e+20 * exp(-1.5 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.5 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.71) * exp(-T / 1e-30);
  Fcent2 = 0.71 * exp(-T / 1700);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1700 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[28];
  Kc = refCinv * exp(g_RT[4] + g_RT[25] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[25]) + (h_RT[28]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // O
  wdot[25] -= q; // NO2
  wdot[28] += q; // NO3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * sc[25];
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac + k_f * sc[4];
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac - k_r;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 4] -= dqdc[k];
    J[33 * k + 25] -= dqdc[k];
    J[33 * k + 28] += dqdc[k];
  }
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1084] += dqdT; // dwdot[NO3]/dT

  // reaction 139: NO2 + OH (+M) <=> HONO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[6] * sc[25];
  k_f = 16300000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 3.13e+25 * exp(-3 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.41) * exp(-T / 1e-30);
  Fcent2 = 0.41 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[6] + g_RT[25] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[25]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[6] -= q;  // OH
  wdot[25] -= q; // NO2
  wdot[29] += q; // HONO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac + k_f * sc[25];
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac + k_f * sc[6];
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac - k_r;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 6] -= dqdc[k];
    J[33 * k + 25] -= dqdc[k];
    J[33 * k + 29] += dqdc[k];
  }
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1085] += dqdT; // dwdot[HONO2]/dT

  // reaction 168: 2 NH2 (+M) <=> N2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 560000000 * exp(-0.414 * logT - (33.2122999431115) * invT);
  dlnkfdT = -0.414 * invT + (33.2122999431115) * invT2;
  // pressure-fall-off
  k_0 = 1.6e+34 * exp(-5.49 * logT - (999.891514953978) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.49 * invT + (999.891514953978) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.31) * exp(-T / 1e-30);
  Fcent2 = 0.31 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[16];
  Kc = refCinv * exp(2.000000 * g_RT[12] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[16]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[12] -= 2 * q; // NH2
  wdot[16] += q;     // N2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac + k_f * 2.000000 * sc[12];
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac - k_r;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 12] += -2 * dqdc[k];
    J[33 * k + 16] += dqdc[k];
  }
  J[1068] += -2 * dqdT; // dwdot[NH2]/dT
  J[1072] += dqdT;      // dwdot[N2H4]/dT

  // reaction 224: H + NH2 (+M) <=> NH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 160000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 3.6e+22 * exp(-1.76 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.76 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[11];
  Kc = refCinv * exp(g_RT[2] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[12]) + (h_RT[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // H
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac + k_f * sc[12];
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac - k_r;
  dqdc[12] = dcdc_fac + k_f * sc[2];
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] -= dqdc[k];
    J[33 * k + 11] += dqdc[k];
    J[33 * k + 12] -= dqdc[k];
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT

  // reaction 225: H + NO (+M) <=> HNO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha =
    mixture + (1.6 - 1) * sc[0] + sc[1] + (1.5 - 1) * sc[3] + (10 - 1) * sc[5];
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 1520000000 * exp(-0.41 * logT);
  dlnkfdT = -0.41 * invT;
  // pressure-fall-off
  k_0 = 240000000000000 * exp(0.206 * logT - (-779.985831997315) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = 0.206 * invT + (-779.985831997315) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.82) * exp(-T / 1e-30);
  Fcent2 = 0.82 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[23];
  Kc = refCinv * exp(g_RT[2] + g_RT[10] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[23]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // H
  wdot[10] -= q; // NO
  wdot[23] += q; // HNO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 1.6 * dcdc_fac;
  dqdc[1] = 2 * dcdc_fac;
  dqdc[2] = dcdc_fac + k_f * sc[10];
  dqdc[3] = 1.5 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 10 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac + k_f * sc[2];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac - k_r;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] -= dqdc[k];
    J[33 * k + 10] -= dqdc[k];
    J[33 * k + 23] += dqdc[k];
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 155: N2O (+M) <=> N2 + O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.7 - 1) * sc[0] + (1.4 - 1) * sc[3] + (12 - 1) * sc[5] +
          (3 - 1) * sc[10] + (3.5 - 1) * sc[30];
  // forward
  phi_f = sc[30];
  k_f = 169000000000 * exp(-(29011.9504336395) * invT);
  dlnkfdT = (29011.9504336395) * invT2;
  // pressure-fall-off
  k_0 = 720000000000000 * exp(-(28889.668783849) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (28889.668783849) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  // dlogFdlogPr is 0.0 and unused
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = refC * exp(-g_RT[0] - g_RT[4] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30]) + (h_RT[0] + h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] += q;  // O
  wdot[30] -= q; // N2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 1.7 * dcdc_fac - k_r * sc[4];
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = 1.4 * dcdc_fac;
  dqdc[4] = dcdc_fac - k_r * sc[0];
  dqdc[5] = 12 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 3 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = 3.5 * dcdc_fac + k_f;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 0] += dqdc[k];
    J[33 * k + 4] += dqdc[k];
    J[33 * k + 30] -= dqdc[k];
  }
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 0: H2 + M <=> 2 H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[5];
  // forward
  phi_f = sc[1];
  k_f = 45770000000000 * exp(-1.4 * logT - (52535.8199100127) * invT);
  dlnkfdT = -1.4 * invT + (52535.8199100127) * invT2;
  // reverse
  phi_r = (sc[2] * sc[2]);
  Kc = refC * exp(g_RT[1] - 2.000000 * g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1]) + (2.000000 * h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H2
  wdot[2] += 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = 2.5 * q_nocor + k_f;
  dqdc[2] = q_nocor - k_r * 2.000000 * sc[2];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 12 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 2] += 2 * dqdc[k];
  }
  J[1057] -= dqdT;     // dwdot[H2]/dT
  J[1058] += 2 * dqdT; // dwdot[H]/dT

  // reaction 4: 2 H + O2 <=> H2 + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[2] * sc[2]) * sc[3];
  k_f = 88000000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[1] * sc[3];
  Kc = refCinv * exp(-g_RT[1] + 2.000000 * g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[2] + h_RT[3]) + (h_RT[1] + h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;     // H2
  wdot[2] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[3];
  J[34] += dqdci;      // dwdot[H2]/d[H2]
  J[35] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[2] * sc[3];
  J[67] += dqdci;      // dwdot[H2]/d[H]
  J[68] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2] * sc[2] - k_r * sc[1];
  J[100] += dqdci;      // dwdot[H2]/d[O2]
  J[101] += -2 * dqdci; // dwdot[H]/d[O2]
  // d()/dT
  J[1057] += dqdT;      // dwdot[H2]/dT
  J[1058] += -2 * dqdT; // dwdot[H]/dT

  // reaction 6: H + O + O2 <=> OH + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3] * sc[4];
  k_f = 73500000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = refCinv * exp(g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[3] + h_RT[4]) + (h_RT[3] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[4];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2] * sc[4] - k_r * sc[6];
  J[101] -= dqdci; // dwdot[H]/d[O2]
  J[103] -= dqdci; // dwdot[O]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[2] * sc[3];
  J[134] -= dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT

  // reaction 7: H + OH + O2 <=> H2O + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3] * sc[6];
  k_f = 25600000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = refCinv * exp(g_RT[2] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[3] + h_RT[6]) + (h_RT[3] + h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[6];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2] * sc[6] - k_r * sc[5];
  J[101] -= dqdci; // dwdot[H]/d[O2]
  J[104] += dqdci; // dwdot[H2O]/d[O2]
  J[105] -= dqdci; // dwdot[OH]/d[O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[2] * sc[3];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT

  // reaction 8: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[5];
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 6165 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(-g_RT[3] + 2.000000 * g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[4] -= 2 * q; // O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = 2.5 * q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor - k_r;
  dqdc[4] = q_nocor + k_f * 2.000000 * sc[4];
  dqdc[5] = 12 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 3] += dqdc[k];
    J[33 * k + 4] += -2 * dqdc[k];
  }
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1060] += -2 * dqdT; // dwdot[O]/dT

  // reaction 12: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[5];
  // forward
  phi_f = sc[2] * sc[4];
  k_f = 4714000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[4]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = 2.5 * q_nocor;
  dqdc[2] = q_nocor + k_f * sc[4];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor + k_f * sc[2];
  dqdc[5] = 12 * q_nocor;
  dqdc[6] = q_nocor - k_r;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] -= dqdc[k];
    J[33 * k + 4] -= dqdc[k];
    J[33 * k + 6] += dqdc[k];
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT

  // reaction 13: H + O + M <=> OHV + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[1] + (0.8 - 1) * sc[3] + (12 - 1) * sc[5];
  // forward
  phi_f = sc[2] * sc[4];
  k_f = 443 * exp(-(5032.1666580472) * invT);
  dlnkfdT = (5032.1666580472) * invT2;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(g_RT[2] + g_RT[4] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[4]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[4] -= q; // O
  wdot[7] += q; // OHV
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = 2 * q_nocor;
  dqdc[2] = q_nocor + k_f * sc[4];
  dqdc[3] = 0.8 * q_nocor;
  dqdc[4] = q_nocor + k_f * sc[2];
  dqdc[5] = 12 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor - k_r;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] -= dqdc[k];
    J[33 * k + 4] -= dqdc[k];
    J[33 * k + 7] += dqdc[k];
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1063] += dqdT; // dwdot[OHV]/dT

  // reaction 95: H2NO + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[21];
  k_f = 2.8e+18 * exp(-2.83 * logT - (32666.3098607134) * invT);
  dlnkfdT = -2.83 * invT + (32666.3098607134) * invT2;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = refC * exp(-g_RT[2] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21]) + (h_RT[2] + h_RT[23]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor - k_r * sc[23];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 10 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor + k_f;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor - k_r * sc[2];
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] += dqdc[k];
    J[33 * k + 21] -= dqdc[k];
    J[33 * k + 23] += dqdc[k];
  }
  J[1058] += dqdT; // dwdot[H]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 96: H2NO + M <=> HNOH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[21];
  k_f = 1.1e+23 * exp(-4 * logT - (22141.5332954077) * invT);
  dlnkfdT = -4 * invT + (22141.5332954077) * invT2;
  // reverse
  phi_r = sc[22];
  Kc = exp(g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21]) + (h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[21] -= q; // H2NO
  wdot[22] += q; // HNOH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 10 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor + k_f;
  dqdc[22] = q_nocor - k_r;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 21] -= dqdc[k];
    J[33 * k + 22] += dqdc[k];
  }
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 105: HNOH + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[22];
  k_f = 2e+18 * exp(-2.84 * logT - (29656.5709825354) * invT);
  dlnkfdT = -2.84 * invT + (29656.5709825354) * invT2;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = refC * exp(-g_RT[2] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22]) + (h_RT[2] + h_RT[23]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor - k_r * sc[23];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 10 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor + k_f;
  dqdc[23] = q_nocor - k_r * sc[2];
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] += dqdc[k];
    J[33 * k + 22] -= dqdc[k];
    J[33 * k + 23] += dqdc[k];
  }
  J[1058] += dqdT; // dwdot[H]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 138: NO3 + NO2 <=> NO + O2 + NO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[25] * sc[28];
  k_f = 50000 * exp(-(1479.45699746588) * invT);
  dlnkfdT = (1479.45699746588) * invT2;
  // reverse
  phi_r = sc[3] * sc[10] * sc[25];
  Kc = refC * exp(-g_RT[3] - g_RT[10] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25] + h_RT[28]) + (h_RT[3] + h_RT[10] + h_RT[25]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[10] += q; // NO
  wdot[28] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[10] * sc[25];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[109] += dqdci; // dwdot[NO]/d[O2]
  J[127] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[3] * sc[25];
  J[333] += dqdci; // dwdot[O2]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[358] -= dqdci; // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[28] - k_r * sc[3] * sc[10];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[853] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[25];
  J[927] += dqdci; // dwdot[O2]/d[NO3]
  J[934] += dqdci; // dwdot[NO]/d[NO3]
  J[952] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1084] -= dqdT; // dwdot[NO3]/dT

  // reaction 144: HO2 + NO + M <=> HNO3 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 1500000000000 * exp(-3.5 * logT - (1107.07666477038) * invT);
  dlnkfdT = -3.5 * invT + (1107.07666477038) * invT2;
  // reverse
  phi_r = sc[31];
  Kc = refCinv * exp(g_RT[9] + g_RT[10] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[31]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // HO2
  wdot[10] -= q; // NO
  wdot[31] += q; // HNO3
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor + k_f * sc[10];
  dqdc[10] = q_nocor + k_f * sc[9];
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor - k_r;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 9] -= dqdc[k];
    J[33 * k + 10] -= dqdc[k];
    J[33 * k + 31] += dqdc[k];
  }
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1087] += dqdT; // dwdot[HNO3]/dT

  // reaction 149: HON + M <=> H + NO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (7 - 1) * sc[5];
  // forward
  phi_f = sc[24];
  k_f = 51000000000000 * exp(-1.73 * logT - (8074.11140283673) * invT);
  dlnkfdT = -1.73 * invT + (8074.11140283673) * invT2;
  // reverse
  phi_r = sc[2] * sc[10];
  Kc = refC * exp(-g_RT[2] - g_RT[10] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24]) + (h_RT[2] + h_RT[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[10] += q; // NO
  wdot[24] -= q; // HON
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor - k_r * sc[10];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 7 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor - k_r * sc[2];
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor + k_f;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] += dqdc[k];
    J[33 * k + 10] += dqdc[k];
    J[33 * k + 24] -= dqdc[k];
  }
  J[1058] += dqdT; // dwdot[H]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT

  // reaction 1: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 3800000 * exp(-(3999.56605981591) * invT);
  dlnkfdT = (3999.56605981591) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H2
  wdot[2] += q; // H
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[34] -= dqdci; // dwdot[H2]/d[H2]
  J[35] += dqdci; // dwdot[H]/d[H2]
  J[37] -= dqdci; // dwdot[O]/d[H2]
  J[39] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[6];
  J[67] -= dqdci; // dwdot[H2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[133] -= dqdci; // dwdot[H2]/d[O]
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[199] -= dqdci; // dwdot[H2]/d[OH]
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT

  // reaction 2: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 880000000 * exp(-(9649.1795668055) * invT);
  dlnkfdT = (9649.1795668055) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H2
  wdot[2] += q; // H
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[34] -= dqdci; // dwdot[H2]/d[H2]
  J[35] += dqdci; // dwdot[H]/d[H2]
  J[37] -= dqdci; // dwdot[O]/d[H2]
  J[39] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[6];
  J[67] -= dqdci; // dwdot[H2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[133] -= dqdci; // dwdot[H2]/d[O]
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[199] -= dqdci; // dwdot[H2]/d[OH]
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT

  // reaction 3: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 220 * exp(1.51 * logT - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H2
  wdot[2] += q; // H
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[6];
  J[34] -= dqdci; // dwdot[H2]/d[H2]
  J[35] += dqdci; // dwdot[H]/d[H2]
  J[38] += dqdci; // dwdot[H2O]/d[H2]
  J[39] -= dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[5];
  J[67] -= dqdci; // dwdot[H2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[166] -= dqdci; // dwdot[H2]/d[H2O]
  J[167] += dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[1];
  J[199] -= dqdci; // dwdot[H2]/d[OH]
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT

  // reaction 5: 2 H + O2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[2] * sc[2]) * sc[3];
  k_f = 40000000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = (sc[6] * sc[6]);
  Kc = refCinv * exp(2.000000 * g_RT[2] + g_RT[3] - 2.000000 * g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[2] + h_RT[3]) + (2.000000 * h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= 2 * q; // H
  wdot[3] -= q;     // O2
  wdot[6] += 2 * q; // OH
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[2] * sc[3];
  J[68] += -2 * dqdci; // dwdot[H]/d[H]
  J[69] -= dqdci;      // dwdot[O2]/d[H]
  J[72] += 2 * dqdci;  // dwdot[OH]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2] * sc[2];
  J[101] += -2 * dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci;      // dwdot[O2]/d[O2]
  J[105] += 2 * dqdci;  // dwdot[OH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[6];
  J[200] += -2 * dqdci; // dwdot[H]/d[OH]
  J[201] -= dqdci;      // dwdot[O2]/d[OH]
  J[204] += 2 * dqdci;  // dwdot[OH]/d[OH]
  // d()/dT
  J[1058] += -2 * dqdT; // dwdot[H]/dT
  J[1059] -= dqdT;      // dwdot[O2]/dT
  J[1062] += 2 * dqdT;  // dwdot[OH]/dT

  // reaction 9: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 104000000 * exp(-(7692.16995349094) * invT);
  dlnkfdT = (7692.16995349094) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[2] + g_RT[3] - g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[3] -= q; // O2
  wdot[4] += q; // O
  wdot[6] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[69] -= dqdci; // dwdot[O2]/d[H]
  J[70] += dqdci; // dwdot[O]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2];
  J[101] -= dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[O]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[134] -= dqdci; // dwdot[H]/d[O]
  J[135] -= dqdci; // dwdot[O2]/d[O]
  J[136] += dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[4];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[201] -= dqdci; // dwdot[O2]/d[OH]
  J[202] += dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT

  // reaction 11: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 2.88 * exp(1.79 * logT - (-880.629165158259) * invT);
  dlnkfdT = 1.79 * invT + (-880.629165158259) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(-g_RT[4] - g_RT[5] + 2.000000 * g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;     // O
  wdot[5] += q;     // H2O
  wdot[6] -= 2 * q; // OH
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[136] += dqdci;      // dwdot[O]/d[O]
  J[137] += dqdci;      // dwdot[H2O]/d[O]
  J[138] += -2 * dqdci; // dwdot[OH]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[169] += dqdci;      // dwdot[O]/d[H2O]
  J[170] += dqdci;      // dwdot[H2O]/d[H2O]
  J[171] += -2 * dqdci; // dwdot[OH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[6];
  J[202] += dqdci;      // dwdot[O]/d[OH]
  J[203] += dqdci;      // dwdot[H2O]/d[OH]
  J[204] += -2 * dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1060] += dqdT;      // dwdot[O]/dT
  J[1061] += dqdT;      // dwdot[H2O]/dT
  J[1062] += -2 * dqdT; // dwdot[OH]/dT

  // reaction 14: H2O + OHV <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 5920000 * exp(0.5 * logT - (-432.766332592059) * invT);
  dlnkfdT = 0.5 * invT + (-432.766332592059) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[5] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[H2O]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[171] += dqdci; // dwdot[OH]/d[H2O]
  J[172] -= dqdci; // dwdot[OHV]/d[H2O]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[5];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 15: H2 + OHV <=> H2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 2950000 * exp(0.5 * logT - (-223.428199617296) * invT);
  dlnkfdT = 0.5 * invT + (-223.428199617296) * invT2;
  // reverse
  phi_r = sc[1] * sc[6];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[1] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[H2]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[39] += dqdci; // dwdot[OH]/d[H2]
  J[40] -= dqdci; // dwdot[OHV]/d[H2]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[1];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 16: N2 + OHV <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[7];
  k_f = 2100000 * exp(0.5 * logT - (-242.550432917875) * invT);
  dlnkfdT = 0.5 * invT + (-242.550432917875) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(g_RT[0] - g_RT[0] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[7]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[N2]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[6] += dqdci; // dwdot[OH]/d[N2]
  J[7] -= dqdci; // dwdot[OHV]/d[N2]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[0];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 17: OH + OHV <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[7];
  k_f = 1500000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = (sc[6] * sc[6]);
  Kc = exp(g_RT[6] - 2.000000 * g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[7]) + (2.000000 * h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[OH]
  dqdci = +k_f * sc[7] - k_r * 2.000000 * sc[6];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[6];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 18: H + OHV <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 1500000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[2] - g_RT[2] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[H]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[73] -= dqdci; // dwdot[OHV]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[2];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 19: OHV <=> OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7];
  k_f = 1400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6];
  Kc = exp(-g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7]) + (h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[OH]
  dqdci = -k_r;
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f;
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 20: O2 + OHV <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 2100000 * exp(0.5 * logT - (-242.550432917875) * invT);
  dlnkfdT = 0.5 * invT + (-242.550432917875) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(g_RT[3] - g_RT[3] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[O2]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[106] -= dqdci; // dwdot[OHV]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[3];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 21: O + OHV <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 1500000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[4] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[O]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[139] -= dqdci; // dwdot[OHV]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[4];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[4];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 23: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  dlnkfdT = (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[6] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[8]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[5] += q; // H2O
  wdot[6] += q; // OH
  wdot[8] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[74] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] += dqdci; // dwdot[OH]/d[H2O]
  J[173] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[206] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[266] -= dqdci; // dwdot[H]/d[H2O2]
  J[269] += dqdci; // dwdot[H2O]/d[H2O2]
  J[270] += dqdci; // dwdot[OH]/d[H2O2]
  J[272] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT; // dwdot[H2O2]/dT

  // reaction 24: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 5.02 * exp(2.07 * logT - (2163.83166296029) * invT);
  dlnkfdT = 2.07 * invT + (2163.83166296029) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[8] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[8]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H2
  wdot[2] -= q; // H
  wdot[8] -= q; // H2O2
  wdot[9] += q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[41] -= dqdci; // dwdot[H2O2]/d[H2]
  J[42] += dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[74] -= dqdci; // dwdot[H2O2]/d[H]
  J[75] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[265] += dqdci; // dwdot[H2]/d[H2O2]
  J[266] -= dqdci; // dwdot[H]/d[H2O2]
  J[272] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[1];
  J[298] += dqdci; // dwdot[H2]/d[HO2]
  J[299] -= dqdci; // dwdot[H]/d[HO2]
  J[305] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1064] -= dqdT; // dwdot[H2O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT

  // reaction 25: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 9.55 * exp(2 * logT - (1997.77016324474) * invT);
  dlnkfdT = 2 * invT + (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[6] * sc[9];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[8] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[8]) + (h_RT[6] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  wdot[8] -= q; // H2O2
  wdot[9] += q; // HO2
  // d()/d[O]
  dqdci = +k_f * sc[8];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[140] -= dqdci; // dwdot[H2O2]/d[O]
  J[141] += dqdci; // dwdot[HO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[206] -= dqdci; // dwdot[H2O2]/d[OH]
  J[207] += dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[268] -= dqdci; // dwdot[O]/d[H2O2]
  J[270] += dqdci; // dwdot[OH]/d[H2O2]
  J[272] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[301] -= dqdci; // dwdot[O]/d[HO2]
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[305] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT; // dwdot[H2O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT

  // reaction 26: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[8];
  k_f = 1740000 * exp(-(160.022899725901) * invT);
  dlnkfdT = (160.022899725901) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[8] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  wdot[8] -= q; // H2O2
  wdot[9] += q; // HO2
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[173] -= dqdci; // dwdot[H2O2]/d[H2O]
  J[174] += dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[206] -= dqdci; // dwdot[H2O2]/d[OH]
  J[207] += dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[6];
  J[269] += dqdci; // dwdot[H2O]/d[H2O2]
  J[270] -= dqdci; // dwdot[OH]/d[H2O2]
  J[272] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[305] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT; // dwdot[H2O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT

  // reaction 27: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[8];
  k_f = 75900000 * exp(-(3657.88194373451) * invT);
  dlnkfdT = (3657.88194373451) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[8] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  wdot[8] -= q; // H2O2
  wdot[9] += q; // HO2
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[173] -= dqdci; // dwdot[H2O2]/d[H2O]
  J[174] += dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[206] -= dqdci; // dwdot[H2O2]/d[OH]
  J[207] += dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[6];
  J[269] += dqdci; // dwdot[H2O]/d[H2O2]
  J[270] -= dqdci; // dwdot[OH]/d[H2O2]
  J[272] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[305] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT; // dwdot[H2O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT

  // reaction 28: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 2.8 * exp(2.09 * logT - (-730.167382082648) * invT);
  dlnkfdT = 2.09 * invT + (-730.167382082648) * invT2;
  // reverse
  phi_r = sc[1] * sc[3];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[1] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H2
  wdot[2] -= q; // H
  wdot[3] += q; // O2
  wdot[9] -= q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[3];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[36] += dqdci; // dwdot[O2]/d[H2]
  J[42] -= dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[9];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[69] += dqdci; // dwdot[O2]/d[H]
  J[75] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = -k_r * sc[1];
  J[100] += dqdci; // dwdot[H2]/d[O2]
  J[101] -= dqdci; // dwdot[H]/d[O2]
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[298] += dqdci; // dwdot[H2]/d[HO2]
  J[299] -= dqdci; // dwdot[H]/d[HO2]
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT

  // reaction 29: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 70790000 * exp(-(148.448916412392) * invT);
  dlnkfdT = (148.448916412392) * invT2;
  // reverse
  phi_r = (sc[6] * sc[6]);
  Kc = exp(g_RT[2] - 2.000000 * g_RT[6] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (2.000000 * h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;     // H
  wdot[6] += 2 * q; // OH
  wdot[9] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[9];
  J[68] -= dqdci;     // dwdot[H]/d[H]
  J[72] += 2 * dqdci; // dwdot[OH]/d[H]
  J[75] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[6];
  J[200] -= dqdci;     // dwdot[H]/d[OH]
  J[204] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[299] -= dqdci;     // dwdot[H]/d[HO2]
  J[303] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1058] -= dqdT;     // dwdot[H]/dT
  J[1062] += 2 * dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT;     // dwdot[HO2]/dT

  // reaction 30: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 32500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[6] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  wdot[9] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] -= dqdci; // dwdot[O]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[9];
  J[135] += dqdci; // dwdot[O2]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[141] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[201] += dqdci; // dwdot[O2]/d[OH]
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[301] -= dqdci; // dwdot[O]/d[HO2]
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT

  // reaction 31: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[9];
  k_f = 193000000000000 * exp(-2.49 * logT - (293.999304829749) * invT);
  dlnkfdT = -2.49 * invT + (293.999304829749) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] - g_RT[5] + g_RT[6] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[9]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  wdot[9] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[104] += dqdci; // dwdot[H2O]/d[O2]
  J[105] -= dqdci; // dwdot[OH]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[168] += dqdci; // dwdot[O2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[174] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[201] += dqdci; // dwdot[O2]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[6];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT

  // reaction 32: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[9];
  k_f = 1210 * exp(1.24 * logT - (-657.996047872935) * invT);
  dlnkfdT = 1.24 * invT + (-657.996047872935) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] - g_RT[5] + g_RT[6] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[9]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  wdot[9] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[104] += dqdci; // dwdot[H2O]/d[O2]
  J[105] -= dqdci; // dwdot[OH]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[168] += dqdci; // dwdot[O2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[174] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[201] += dqdci; // dwdot[O2]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[6];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT

  // reaction 33: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[9] * sc[9]);
  k_f = 12140 * exp(0.422 * logT - (-745.022338057204) * invT);
  dlnkfdT = 0.422 * invT + (-745.022338057204) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(-g_RT[3] - g_RT[8] + 2.000000 * g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[9]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[8] += q;     // H2O2
  wdot[9] -= 2 * q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[8];
  J[102] += dqdci;      // dwdot[O2]/d[O2]
  J[107] += dqdci;      // dwdot[H2O2]/d[O2]
  J[108] += -2 * dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[267] += dqdci;      // dwdot[O2]/d[H2O2]
  J[272] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[273] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[9];
  J[300] += dqdci;      // dwdot[O2]/d[HO2]
  J[305] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[306] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1064] += dqdT;      // dwdot[H2O2]/dT
  J[1065] += -2 * dqdT; // dwdot[HO2]/dT

  // reaction 34: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[9] * sc[9]);
  k_f = 16880000000 * exp(-0.681 * logT - (6507.42682852026) * invT);
  dlnkfdT = -0.681 * invT + (6507.42682852026) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(-g_RT[3] - g_RT[8] + 2.000000 * g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[9]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[8] += q;     // H2O2
  wdot[9] -= 2 * q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[8];
  J[102] += dqdci;      // dwdot[O2]/d[O2]
  J[107] += dqdci;      // dwdot[H2O2]/d[O2]
  J[108] += -2 * dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[267] += dqdci;      // dwdot[O2]/d[H2O2]
  J[272] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[273] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[9];
  J[300] += dqdci;      // dwdot[O2]/d[HO2]
  J[305] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[306] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1064] += dqdT;      // dwdot[H2O2]/dT
  J[1065] += -2 * dqdT; // dwdot[HO2]/dT

  // reaction 36: H + NH3 <=> H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 0.64 * exp(2.39 * logT - (5118.2167078998) * invT);
  dlnkfdT = 2.39 * invT + (5118.2167078998) * invT2;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[11] -= q; // NH3
  wdot[12] += q; // NH2
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[44] -= dqdci; // dwdot[NH3]/d[H2]
  J[45] += dqdci; // dwdot[NH2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[NH3]/d[H]
  J[78] += dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH3]
  dqdci = +k_f * sc[2];
  J[364] += dqdci; // dwdot[H2]/d[NH3]
  J[365] -= dqdci; // dwdot[H]/d[NH3]
  J[374] -= dqdci; // dwdot[NH3]/d[NH3]
  J[375] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[1];
  J[397] += dqdci; // dwdot[H2]/d[NH2]
  J[398] -= dqdci; // dwdot[H]/d[NH2]
  J[407] -= dqdci; // dwdot[NH3]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1067] -= dqdT; // dwdot[NH3]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT

  // reaction 37: NH3 + O <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 9.4 * exp(1.94 * logT - (3250.77966109849) * invT);
  dlnkfdT = 1.94 * invT + (3250.77966109849) * invT2;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[11] -= q; // NH3
  wdot[12] += q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[143] -= dqdci; // dwdot[NH3]/d[O]
  J[144] += dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[209] -= dqdci; // dwdot[NH3]/d[OH]
  J[210] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH3]
  dqdci = +k_f * sc[4];
  J[367] -= dqdci; // dwdot[O]/d[NH3]
  J[369] += dqdci; // dwdot[OH]/d[NH3]
  J[374] -= dqdci; // dwdot[NH3]/d[NH3]
  J[375] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[6];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[407] -= dqdci; // dwdot[NH3]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1067] -= dqdT; // dwdot[NH3]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT

  // reaction 38: HO2 + NH3 <=> H2O2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[11];
  k_f = 300000 * exp(-(11070.7666477038) * invT);
  dlnkfdT = (11070.7666477038) * invT2;
  // reverse
  phi_r = sc[8] * sc[12];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[11]) + (h_RT[8] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[11] -= q; // NH3
  wdot[12] += q; // NH2
  // d()/d[H2O2]
  dqdci = -k_r * sc[12];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[275] -= dqdci; // dwdot[NH3]/d[H2O2]
  J[276] += dqdci; // dwdot[NH2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[308] -= dqdci; // dwdot[NH3]/d[HO2]
  J[309] += dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[NH3]
  dqdci = +k_f * sc[9];
  J[371] += dqdci; // dwdot[H2O2]/d[NH3]
  J[372] -= dqdci; // dwdot[HO2]/d[NH3]
  J[374] -= dqdci; // dwdot[NH3]/d[NH3]
  J[375] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[8];
  J[404] += dqdci; // dwdot[H2O2]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[407] -= dqdci; // dwdot[NH3]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1067] -= dqdT; // dwdot[NH3]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT

  // reaction 39: H2 + NH <=> H + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 21000000 * exp(-(7758.09133671136) * invT);
  dlnkfdT = (7758.09133671136) * invT2;
  // reverse
  phi_r = sc[2] * sc[12];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[13]) + (h_RT[2] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H2
  wdot[2] += q;  // H
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  // d()/d[H2]
  dqdci = +k_f * sc[13];
  J[34] -= dqdci; // dwdot[H2]/d[H2]
  J[35] += dqdci; // dwdot[H]/d[H2]
  J[45] += dqdci; // dwdot[NH2]/d[H2]
  J[46] -= dqdci; // dwdot[NH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[67] -= dqdci; // dwdot[H2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[78] += dqdci; // dwdot[NH2]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[NH2]
  dqdci = -k_r * sc[2];
  J[397] -= dqdci; // dwdot[H2]/d[NH2]
  J[398] += dqdci; // dwdot[H]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[1];
  J[430] -= dqdci; // dwdot[H2]/d[NH]
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT

  // reaction 40: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 660000000 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[2] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[12] -= q; // NH2
  wdot[23] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[78] -= dqdci; // dwdot[NH2]/d[H]
  J[89] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[144] -= dqdci; // dwdot[NH2]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[398] += dqdci; // dwdot[H]/d[NH2]
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[761] += dqdci; // dwdot[H]/d[HNO]
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 41: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 7000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[12] -= q; // NH2
  wdot[13] += q; // NH
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[144] -= dqdci; // dwdot[NH2]/d[O]
  J[145] += dqdci; // dwdot[NH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[211] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[409] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[6];
  J[433] -= dqdci; // dwdot[O]/d[NH]
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[441] -= dqdci; // dwdot[NH2]/d[NH]
  J[442] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1069] += dqdT; // dwdot[NH]/dT

  // reaction 42: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 8.6e-07 * exp(4.01 * logT - (841.881481891296) * invT);
  dlnkfdT = 4.01 * invT + (841.881481891296) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[12] -= q; // NH2
  wdot[13] += q; // NH
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[144] -= dqdci; // dwdot[NH2]/d[O]
  J[145] += dqdci; // dwdot[NH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[211] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[409] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[6];
  J[433] -= dqdci; // dwdot[O]/d[NH]
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[441] -= dqdci; // dwdot[NH2]/d[NH]
  J[442] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1069] += dqdT; // dwdot[NH]/dT

  // reaction 43: NH2 + OH <=> H2O + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 3.3 * exp(1.949 * logT - (-109.198016479624) * invT);
  dlnkfdT = 1.949 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[5] * sc[13];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[5] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[12] -= q; // NH2
  wdot[13] += q; // NH
  // d()/d[H2O]
  dqdci = -k_r * sc[13];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[178] += dqdci; // dwdot[NH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[211] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[6];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[402] -= dqdci; // dwdot[OH]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[409] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[5];
  J[434] += dqdci; // dwdot[H2O]/d[NH]
  J[435] -= dqdci; // dwdot[OH]/d[NH]
  J[441] -= dqdci; // dwdot[NH2]/d[NH]
  J[442] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1069] += dqdT; // dwdot[NH]/dT

  // reaction 44: HO2 + NH2 <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 16 * exp(0.55 * logT - (264.188749547478) * invT);
  dlnkfdT = 0.55 * invT + (264.188749547478) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[9] -= q;  // HO2
  wdot[12] -= q; // NH2
  wdot[23] += q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[174] -= dqdci; // dwdot[HO2]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[188] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[309] -= dqdci; // dwdot[NH2]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[764] += dqdci; // dwdot[H2O]/d[HNO]
  J[768] -= dqdci; // dwdot[HO2]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 45: HO2 + NH2 <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 5700000000 * exp(-1.12 * logT - (355.774182723937) * invT);
  dlnkfdT = -1.12 * invT + (355.774182723937) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[9] -= q;  // HO2
  wdot[12] -= q; // NH2
  wdot[23] += q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[174] -= dqdci; // dwdot[HO2]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[188] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[309] -= dqdci; // dwdot[NH2]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[764] += dqdci; // dwdot[H2O]/d[HNO]
  J[768] -= dqdci; // dwdot[HO2]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 46: HO2 + NH2 <=> H2O + HON
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 21 * exp(0.64 * logT - (408.108715967628) * invT);
  dlnkfdT = 0.64 * invT + (408.108715967628) * invT2;
  // reverse
  phi_r = sc[5] * sc[24];
  Kc = exp(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[5] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[9] -= q;  // HO2
  wdot[12] -= q; // NH2
  wdot[24] += q; // HON
  // d()/d[H2O]
  dqdci = -k_r * sc[24];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[174] -= dqdci; // dwdot[HO2]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[189] += dqdci; // dwdot[HON]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[309] -= dqdci; // dwdot[NH2]/d[HO2]
  J[321] += dqdci; // dwdot[HON]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[420] += dqdci; // dwdot[HON]/d[NH2]
  // d()/d[HON]
  dqdci = -k_r * sc[5];
  J[797] += dqdci; // dwdot[H2O]/d[HON]
  J[801] -= dqdci; // dwdot[HO2]/d[HON]
  J[804] -= dqdci; // dwdot[NH2]/d[HON]
  J[816] += dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1080] += dqdT; // dwdot[HON]/dT

  // reaction 47: NH2 + O2 <=> H2NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 260000 * exp(0.4872 * logT - (14618.4441416271) * invT);
  dlnkfdT = 0.4872 * invT + (14618.4441416271) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[12] -= q; // NH2
  wdot[21] += q; // H2NO
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[O]/d[O2]
  J[111] -= dqdci; // dwdot[NH2]/d[O2]
  J[120] += dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[21];
  J[135] -= dqdci; // dwdot[O2]/d[O]
  J[136] += dqdci; // dwdot[O]/d[O]
  J[144] -= dqdci; // dwdot[NH2]/d[O]
  J[153] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[399] -= dqdci; // dwdot[O2]/d[NH2]
  J[400] += dqdci; // dwdot[O]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[417] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[696] -= dqdci; // dwdot[O2]/d[H2NO]
  J[697] += dqdci; // dwdot[O]/d[H2NO]
  J[705] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 48: NH2 + O2 <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 2.9e-08 * exp(3.764 * logT - (9150.99506765883) * invT);
  dlnkfdT = 3.764 * invT + (9150.99506765883) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // OH
  wdot[12] -= q; // NH2
  wdot[23] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[111] -= dqdci; // dwdot[NH2]/d[O2]
  J[122] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[201] -= dqdci; // dwdot[O2]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[399] -= dqdci; // dwdot[O2]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[762] -= dqdci; // dwdot[O2]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 49: 2 NH2 <=> NH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 5.6e-06 * exp(3.53 * logT - (277.775599524205) * invT);
  dlnkfdT = 3.53 * invT + (277.775599524205) * invT2;
  // reverse
  phi_r = sc[11] * sc[13];
  Kc = exp(-g_RT[11] + 2.000000 * g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[11] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q;     // NH3
  wdot[12] -= 2 * q; // NH2
  wdot[13] += q;     // NH
  // d()/d[NH3]
  dqdci = -k_r * sc[13];
  J[374] += dqdci;      // dwdot[NH3]/d[NH3]
  J[375] += -2 * dqdci; // dwdot[NH2]/d[NH3]
  J[376] += dqdci;      // dwdot[NH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[12];
  J[407] += dqdci;      // dwdot[NH3]/d[NH2]
  J[408] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[409] += dqdci;      // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[11];
  J[440] += dqdci;      // dwdot[NH3]/d[NH]
  J[441] += -2 * dqdci; // dwdot[NH2]/d[NH]
  J[442] += dqdci;      // dwdot[NH]/d[NH]
  // d()/dT
  J[1067] += dqdT;      // dwdot[NH3]/dT
  J[1068] += -2 * dqdT; // dwdot[NH2]/dT
  J[1069] += dqdT;      // dwdot[NH]/dT

  // reaction 50: NH + NH2 <=> N + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[13];
  k_f = 0.0096 * exp(2.46 * logT - (53.844183241105) * invT);
  dlnkfdT = 2.46 * invT + (53.844183241105) * invT2;
  // reverse
  phi_r = sc[11] * sc[14];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[13] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[13]) + (h_RT[11] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[13] -= q; // NH
  wdot[14] += q; // N
  // d()/d[NH3]
  dqdci = -k_r * sc[14];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[376] -= dqdci; // dwdot[NH]/d[NH3]
  J[377] += dqdci; // dwdot[N]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[13];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[410] += dqdci; // dwdot[N]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[12];
  J[440] += dqdci; // dwdot[NH3]/d[NH]
  J[441] -= dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[443] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[11];
  J[473] += dqdci; // dwdot[NH3]/d[N]
  J[474] -= dqdci; // dwdot[NH2]/d[N]
  J[475] -= dqdci; // dwdot[NH]/d[N]
  J[476] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1070] += dqdT; // dwdot[N]/dT

  // reaction 51: N + NH2 <=> 2 H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[14];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * (sc[2] * sc[2]);
  Kc = refC * exp(-g_RT[0] - 2.000000 * g_RT[2] + g_RT[12] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[12] + h_RT[14]) + (h_RT[0] + 2.000000 * h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // N2
  wdot[2] += 2 * q; // H
  wdot[12] -= q;    // NH2
  wdot[14] -= q;    // N
  // d()/d[N2]
  dqdci = -k_r * sc[2] * sc[2];
  J[0] += dqdci;     // dwdot[N2]/d[N2]
  J[2] += 2 * dqdci; // dwdot[H]/d[N2]
  J[12] -= dqdci;    // dwdot[NH2]/d[N2]
  J[14] -= dqdci;    // dwdot[N]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0] * 2.000000 * sc[2];
  J[66] += dqdci;     // dwdot[N2]/d[H]
  J[68] += 2 * dqdci; // dwdot[H]/d[H]
  J[78] -= dqdci;     // dwdot[NH2]/d[H]
  J[80] -= dqdci;     // dwdot[N]/d[H]
  // d()/d[NH2]
  dqdci = +k_f * sc[14];
  J[396] += dqdci;     // dwdot[N2]/d[NH2]
  J[398] += 2 * dqdci; // dwdot[H]/d[NH2]
  J[408] -= dqdci;     // dwdot[NH2]/d[NH2]
  J[410] -= dqdci;     // dwdot[N]/d[NH2]
  // d()/d[N]
  dqdci = +k_f * sc[12];
  J[462] += dqdci;     // dwdot[N2]/d[N]
  J[464] += 2 * dqdci; // dwdot[H]/d[N]
  J[474] -= dqdci;     // dwdot[NH2]/d[N]
  J[476] -= dqdci;     // dwdot[N]/d[N]
  // d()/dT
  J[1056] += dqdT;     // dwdot[N2]/dT
  J[1058] += 2 * dqdT; // dwdot[H]/dT
  J[1068] -= dqdT;     // dwdot[NH2]/dT
  J[1070] -= dqdT;     // dwdot[N]/dT

  // reaction 52: HNO + NH2 <=> NH3 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[23];
  k_f = 0.00059 * exp(2.95 * logT - (-1745.65861367657) * invT);
  dlnkfdT = 2.95 * invT + (-1745.65861367657) * invT2;
  // reverse
  phi_r = sc[10] * sc[11];
  Kc = exp(-g_RT[10] - g_RT[11] + g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[23]) + (h_RT[10] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[23] -= q; // HNO
  // d()/d[NO]
  dqdci = -k_r * sc[11];
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[341] += dqdci; // dwdot[NH3]/d[NO]
  J[342] -= dqdci; // dwdot[NH2]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NH3]
  dqdci = -k_r * sc[10];
  J[373] += dqdci; // dwdot[NO]/d[NH3]
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[386] -= dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[406] += dqdci; // dwdot[NO]/d[NH2]
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] -= dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = +k_f * sc[12];
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[770] += dqdci; // dwdot[NH3]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT

  // reaction 53: HONO + NH2 <=> NH3 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[26];
  k_f = 7.1e-05 * exp(3.02 * logT - (-2485.89032907532) * invT);
  dlnkfdT = 3.02 * invT + (-2485.89032907532) * invT2;
  // reverse
  phi_r = sc[11] * sc[25];
  Kc = exp(-g_RT[11] + g_RT[12] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[26]) + (h_RT[11] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[25] += q; // NO2
  wdot[26] -= q; // HONO
  // d()/d[NH3]
  dqdci = -k_r * sc[25];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[388] += dqdci; // dwdot[NO2]/d[NH3]
  J[389] -= dqdci; // dwdot[HONO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[26];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[421] += dqdci; // dwdot[NO2]/d[NH2]
  J[422] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NO2]
  dqdci = -k_r * sc[11];
  J[836] += dqdci; // dwdot[NH3]/d[NO2]
  J[837] -= dqdci; // dwdot[NH2]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[12];
  J[869] += dqdci; // dwdot[NH3]/d[HONO]
  J[870] -= dqdci; // dwdot[NH2]/d[HONO]
  J[883] += dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 54: NH2 + NO2 <=> H2NO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[25];
  k_f = 860000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[10] * sc[21];
  Kc = exp(-g_RT[10] + g_RT[12] - g_RT[21] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[25]) + (h_RT[10] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO
  wdot[12] -= q; // NH2
  wdot[21] += q; // H2NO
  wdot[25] -= q; // NO2
  // d()/d[NO]
  dqdci = -k_r * sc[21];
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[342] -= dqdci; // dwdot[NH2]/d[NO]
  J[351] += dqdci; // dwdot[H2NO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[25];
  J[406] += dqdci; // dwdot[NO]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[417] += dqdci; // dwdot[H2NO]/d[NH2]
  J[421] -= dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[10];
  J[703] += dqdci; // dwdot[NO]/d[H2NO]
  J[705] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[718] -= dqdci; // dwdot[NO2]/d[H2NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[12];
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[837] -= dqdci; // dwdot[NH2]/d[NO2]
  J[846] += dqdci; // dwdot[H2NO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT

  // reaction 55: NH2 + NO2 <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[25];
  k_f = 220000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[5] * sc[30];
  Kc = exp(-g_RT[5] + g_RT[12] + g_RT[25] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[25]) + (h_RT[5] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[12] -= q; // NH2
  wdot[25] -= q; // NO2
  wdot[30] += q; // N2O
  // d()/d[H2O]
  dqdci = -k_r * sc[30];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[190] -= dqdci; // dwdot[NO2]/d[H2O]
  J[195] += dqdci; // dwdot[N2O]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[25];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[421] -= dqdci; // dwdot[NO2]/d[NH2]
  J[426] += dqdci; // dwdot[N2O]/d[NH2]
  // d()/d[NO2]
  dqdci = +k_f * sc[12];
  J[830] += dqdci; // dwdot[H2O]/d[NO2]
  J[837] -= dqdci; // dwdot[NH2]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[855] += dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[995] += dqdci;  // dwdot[H2O]/d[N2O]
  J[1002] -= dqdci; // dwdot[NH2]/d[N2O]
  J[1015] -= dqdci; // dwdot[NO2]/d[N2O]
  J[1020] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1086] += dqdT; // dwdot[N2O]/dT

  // reaction 56: H + NH <=> H2 + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[13];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[13] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[13]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[13] -= q; // NH
  wdot[14] += q; // N
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[46] -= dqdci; // dwdot[NH]/d[H2]
  J[47] += dqdci; // dwdot[N]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  J[80] += dqdci; // dwdot[N]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[2];
  J[430] += dqdci; // dwdot[H2]/d[NH]
  J[431] -= dqdci; // dwdot[H]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[443] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[1];
  J[463] += dqdci; // dwdot[H2]/d[N]
  J[464] -= dqdci; // dwdot[H]/d[N]
  J[475] -= dqdci; // dwdot[NH]/d[N]
  J[476] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1070] += dqdT; // dwdot[N]/dT

  // reaction 57: NH + O <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 92000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[10];
  Kc = exp(-g_RT[2] + g_RT[4] - g_RT[10] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[2] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[13] -= q; // NH
  // d()/d[H]
  dqdci = -k_r * sc[10];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[145] -= dqdci; // dwdot[NH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[332] += dqdci; // dwdot[H]/d[NO]
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[343] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[433] -= dqdci; // dwdot[O]/d[NH]
  J[439] += dqdci; // dwdot[NO]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT

  // reaction 58: NH + OH <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[13];
  k_f = 320000000 * exp(-0.376 * logT - (-23.1479666270171) * invT);
  dlnkfdT = -0.376 * invT + (-23.1479666270171) * invT2;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = exp(-g_RT[2] + g_RT[6] + g_RT[13] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[13]) + (h_RT[2] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[6] -= q;  // OH
  wdot[13] -= q; // NH
  wdot[23] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  J[89] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[211] -= dqdci; // dwdot[NH]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[6];
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[435] -= dqdci; // dwdot[OH]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[452] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[761] += dqdci; // dwdot[H]/d[HNO]
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[772] -= dqdci; // dwdot[NH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 59: NH + OH <=> H2O + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[13];
  k_f = 16 * exp(1.733 * logT - (-289.852799503519) * invT);
  dlnkfdT = 1.733 * invT + (-289.852799503519) * invT2;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[13] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[13]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[13] -= q; // NH
  wdot[14] += q; // N
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[178] -= dqdci; // dwdot[NH]/d[H2O]
  J[179] += dqdci; // dwdot[N]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[211] -= dqdci; // dwdot[NH]/d[OH]
  J[212] += dqdci; // dwdot[N]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[6];
  J[434] += dqdci; // dwdot[H2O]/d[NH]
  J[435] -= dqdci; // dwdot[OH]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[443] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[5];
  J[467] += dqdci; // dwdot[H2O]/d[N]
  J[468] -= dqdci; // dwdot[OH]/d[N]
  J[475] -= dqdci; // dwdot[NH]/d[N]
  J[476] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1070] += dqdT; // dwdot[N]/dT

  // reaction 60: NH + O2 <=> HNO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 24000000 * exp(-(6969.55082139537) * invT);
  dlnkfdT = (6969.55082139537) * invT2;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[13] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[13] -= q; // NH
  wdot[23] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[13];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[O]/d[O2]
  J[112] -= dqdci; // dwdot[NH]/d[O2]
  J[122] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[23];
  J[135] -= dqdci; // dwdot[O2]/d[O]
  J[136] += dqdci; // dwdot[O]/d[O]
  J[145] -= dqdci; // dwdot[NH]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[432] -= dqdci; // dwdot[O2]/d[NH]
  J[433] += dqdci; // dwdot[O]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[452] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[762] -= dqdci; // dwdot[O2]/d[HNO]
  J[763] += dqdci; // dwdot[O]/d[HNO]
  J[772] -= dqdci; // dwdot[NH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 61: NH + O2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 99000 * exp(-(769.921498681221) * invT);
  dlnkfdT = (769.921498681221) * invT2;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[10] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // OH
  wdot[10] += q; // NO
  wdot[13] -= q; // NH
  // d()/d[O2]
  dqdci = +k_f * sc[13];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[109] += dqdci; // dwdot[NO]/d[O2]
  J[112] -= dqdci; // dwdot[NH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[201] -= dqdci; // dwdot[O2]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[211] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[333] -= dqdci; // dwdot[O2]/d[NO]
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[343] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[432] -= dqdci; // dwdot[O2]/d[NH]
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[439] += dqdci; // dwdot[NO]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT

  // reaction 62: 2 NH <=> N + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[13] * sc[13]);
  k_f = 5.7e-07 * exp(3.88 * logT - (172.100099705214) * invT);
  dlnkfdT = 3.88 * invT + (172.100099705214) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(-g_RT[12] + 2.000000 * g_RT[13] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[13]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q;     // NH2
  wdot[13] -= 2 * q; // NH
  wdot[14] += q;     // N
  // d()/d[NH2]
  dqdci = -k_r * sc[14];
  J[408] += dqdci;      // dwdot[NH2]/d[NH2]
  J[409] += -2 * dqdci; // dwdot[NH]/d[NH2]
  J[410] += dqdci;      // dwdot[N]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[13];
  J[441] += dqdci;      // dwdot[NH2]/d[NH]
  J[442] += -2 * dqdci; // dwdot[NH]/d[NH]
  J[443] += dqdci;      // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[12];
  J[474] += dqdci;      // dwdot[NH2]/d[N]
  J[475] += -2 * dqdci; // dwdot[NH]/d[N]
  J[476] += dqdci;      // dwdot[N]/d[N]
  // d()/dT
  J[1068] += dqdT;      // dwdot[NH2]/dT
  J[1069] += -2 * dqdT; // dwdot[NH]/dT
  J[1070] += dqdT;      // dwdot[N]/dT

  // reaction 63: N + NH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[14];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[2];
  Kc = exp(-g_RT[0] - g_RT[2] + g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[14]) + (h_RT[0] + h_RT[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] += q;  // H
  wdot[13] -= q; // NH
  wdot[14] -= q; // N
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] += dqdci;  // dwdot[H]/d[N2]
  J[13] -= dqdci; // dwdot[NH]/d[N2]
  J[14] -= dqdci; // dwdot[N]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[66] += dqdci; // dwdot[N2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  J[80] -= dqdci; // dwdot[N]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[14];
  J[429] += dqdci; // dwdot[N2]/d[NH]
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[443] -= dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = +k_f * sc[13];
  J[462] += dqdci; // dwdot[N2]/d[N]
  J[464] += dqdci; // dwdot[H]/d[N]
  J[475] -= dqdci; // dwdot[NH]/d[N]
  J[476] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1070] -= dqdT; // dwdot[N]/dT

  // reaction 64: NH + NO <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 2700000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[2] * sc[30];
  Kc = exp(-g_RT[2] + g_RT[10] + g_RT[13] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (h_RT[2] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[10] -= q; // NO
  wdot[13] -= q; // NH
  wdot[30] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[30];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[NO]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  J[96] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[NO]
  dqdci = +k_f * sc[13];
  J[332] += dqdci; // dwdot[H]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[343] -= dqdci; // dwdot[NH]/d[NO]
  J[360] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[439] -= dqdci; // dwdot[NO]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[459] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[992] += dqdci;  // dwdot[H]/d[N2O]
  J[1000] -= dqdci; // dwdot[NO]/d[N2O]
  J[1003] -= dqdci; // dwdot[NH]/d[N2O]
  J[1020] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1086] += dqdT; // dwdot[N2O]/dT

  // reaction 65: NH + NO <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 680000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] - g_RT[6] + g_RT[10] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[6] += q;  // OH
  wdot[10] -= q; // NO
  wdot[13] -= q; // NH
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[6] += dqdci;  // dwdot[OH]/d[N2]
  J[10] -= dqdci; // dwdot[NO]/d[N2]
  J[13] -= dqdci; // dwdot[NH]/d[N2]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[198] += dqdci; // dwdot[N2]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] -= dqdci; // dwdot[NO]/d[OH]
  J[211] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[13];
  J[330] += dqdci; // dwdot[N2]/d[NO]
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[343] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[429] += dqdci; // dwdot[N2]/d[NH]
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[439] -= dqdci; // dwdot[NO]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT

  // reaction 66: HONO + NH <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[26];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(-g_RT[12] + g_RT[13] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[26]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[25] += q; // NO2
  wdot[26] -= q; // HONO
  // d()/d[NH2]
  dqdci = -k_r * sc[25];
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[421] += dqdci; // dwdot[NO2]/d[NH2]
  J[422] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[26];
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[454] += dqdci; // dwdot[NO2]/d[NH]
  J[455] -= dqdci; // dwdot[HONO]/d[NH]
  // d()/d[NO2]
  dqdci = -k_r * sc[12];
  J[837] += dqdci; // dwdot[NH2]/d[NO2]
  J[838] -= dqdci; // dwdot[NH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[13];
  J[870] += dqdci; // dwdot[NH2]/d[HONO]
  J[871] -= dqdci; // dwdot[NH]/d[HONO]
  J[883] += dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 67: NH + NO2 <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[25];
  k_f = 4100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[30];
  Kc = exp(-g_RT[6] + g_RT[13] + g_RT[25] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[25]) + (h_RT[6] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[13] -= q; // NH
  wdot[25] -= q; // NO2
  wdot[30] += q; // N2O
  // d()/d[OH]
  dqdci = -k_r * sc[30];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[211] -= dqdci; // dwdot[NH]/d[OH]
  J[223] -= dqdci; // dwdot[NO2]/d[OH]
  J[228] += dqdci; // dwdot[N2O]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[25];
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[454] -= dqdci; // dwdot[NO2]/d[NH]
  J[459] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[NO2]
  dqdci = +k_f * sc[13];
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[838] -= dqdci; // dwdot[NH]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[855] += dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[6];
  J[996] += dqdci;  // dwdot[OH]/d[N2O]
  J[1003] -= dqdci; // dwdot[NH]/d[N2O]
  J[1015] -= dqdci; // dwdot[NO2]/d[N2O]
  J[1020] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1086] += dqdT; // dwdot[N2O]/dT

  // reaction 68: NH + NO2 <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[25];
  k_f = 5900000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[23];
  Kc = exp(-g_RT[10] + g_RT[13] - g_RT[23] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[25]) + (h_RT[10] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO
  wdot[13] -= q; // NH
  wdot[23] += q; // HNO
  wdot[25] -= q; // NO2
  // d()/d[NO]
  dqdci = -k_r * sc[23];
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[343] -= dqdci; // dwdot[NH]/d[NO]
  J[353] += dqdci; // dwdot[HNO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[25];
  J[439] += dqdci; // dwdot[NO]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[452] += dqdci; // dwdot[HNO]/d[NH]
  J[454] -= dqdci; // dwdot[NO2]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[10];
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[772] -= dqdci; // dwdot[NH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[784] -= dqdci; // dwdot[NO2]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[13];
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[838] -= dqdci; // dwdot[NH]/d[NO2]
  J[848] += dqdci; // dwdot[HNO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT

  // reaction 69: N + OH <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[14];
  k_f = 38000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[10];
  Kc = exp(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[14]) + (h_RT[2] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[6] -= q;  // OH
  wdot[10] += q; // NO
  wdot[14] -= q; // N
  // d()/d[H]
  dqdci = -k_r * sc[10];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[80] -= dqdci; // dwdot[N]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[212] -= dqdci; // dwdot[N]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[332] += dqdci; // dwdot[H]/d[NO]
  J[336] -= dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[344] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[6];
  J[464] += dqdci; // dwdot[H]/d[N]
  J[468] -= dqdci; // dwdot[OH]/d[N]
  J[472] += dqdci; // dwdot[NO]/d[N]
  J[476] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1070] -= dqdT; // dwdot[N]/dT

  // reaction 70: N + O2 <=> NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 9030 * exp(1 * logT - (3269.90189439907) * invT);
  dlnkfdT = 1 * invT + (3269.90189439907) * invT2;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[10] += q; // NO
  wdot[14] -= q; // N
  // d()/d[O2]
  dqdci = +k_f * sc[14];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[O]/d[O2]
  J[109] += dqdci; // dwdot[NO]/d[O2]
  J[113] -= dqdci; // dwdot[N]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[10];
  J[135] -= dqdci; // dwdot[O2]/d[O]
  J[136] += dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[146] -= dqdci; // dwdot[N]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[333] -= dqdci; // dwdot[O2]/d[NO]
  J[334] += dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[344] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[3];
  J[465] -= dqdci; // dwdot[O2]/d[N]
  J[466] += dqdci; // dwdot[O]/d[N]
  J[472] += dqdci; // dwdot[NO]/d[N]
  J[476] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1070] -= dqdT; // dwdot[N]/dT

  // reaction 71: N + NO <=> N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 11280000 * exp(0.14 * logT);
  dlnkfdT = 0.14 * invT;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] - g_RT[4] + g_RT[10] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] += q;  // O
  wdot[10] -= q; // NO
  wdot[14] -= q; // N
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] += dqdci;  // dwdot[O]/d[N2]
  J[10] -= dqdci; // dwdot[NO]/d[N2]
  J[14] -= dqdci; // dwdot[N]/d[N2]
  // d()/d[O]
  dqdci = -k_r * sc[0];
  J[132] += dqdci; // dwdot[N2]/d[O]
  J[136] += dqdci; // dwdot[O]/d[O]
  J[142] -= dqdci; // dwdot[NO]/d[O]
  J[146] -= dqdci; // dwdot[N]/d[O]
  // d()/d[NO]
  dqdci = +k_f * sc[14];
  J[330] += dqdci; // dwdot[N2]/d[NO]
  J[334] += dqdci; // dwdot[O]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[344] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[10];
  J[462] += dqdci; // dwdot[N2]/d[N]
  J[466] += dqdci; // dwdot[O]/d[N]
  J[472] -= dqdci; // dwdot[NO]/d[N]
  J[476] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1070] -= dqdT; // dwdot[N]/dT

  // reaction 72: NNH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15];
  k_f = 1000000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[2];
  Kc = refC * exp(-g_RT[0] - g_RT[2] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15]) + (h_RT[0] + h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] += q;  // H
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] += dqdci;  // dwdot[H]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[66] += dqdci; // dwdot[N2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[81] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[NNH]
  dqdci = +k_f;
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[497] += dqdci; // dwdot[H]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 73: H + NNH <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = exp(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[0] + h_RT[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] += dqdci;  // dwdot[H2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H2]
  dqdci = -k_r * sc[0];
  J[33] += dqdci; // dwdot[N2]/d[H2]
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[48] -= dqdci; // dwdot[NNH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[66] += dqdci; // dwdot[N2]/d[H]
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[81] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[NNH]
  dqdci = +k_f * sc[2];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[496] += dqdci; // dwdot[H2]/d[NNH]
  J[497] -= dqdci; // dwdot[H]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 74: NNH + O <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 190000000 * exp(-0.274 * logT - (-11.0707666477038) * invT);
  dlnkfdT = -0.274 * invT + (-11.0707666477038) * invT2;
  // reverse
  phi_r = sc[2] * sc[30];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[15] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[2] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[15] -= q; // NNH
  wdot[30] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[30];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[81] -= dqdci; // dwdot[NNH]/d[H]
  J[96] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[147] -= dqdci; // dwdot[NNH]/d[O]
  J[162] += dqdci; // dwdot[N2O]/d[O]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[497] += dqdci; // dwdot[H]/d[NNH]
  J[499] -= dqdci; // dwdot[O]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  J[525] += dqdci; // dwdot[N2O]/d[NNH]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[992] += dqdci;  // dwdot[H]/d[N2O]
  J[994] -= dqdci;  // dwdot[O]/d[N2O]
  J[1005] -= dqdci; // dwdot[NNH]/d[N2O]
  J[1020] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT
  J[1086] += dqdT; // dwdot[N2O]/dT

  // reaction 75: NNH + O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 12000000 * exp(0.145 * logT - (-109.198016479624) * invT);
  dlnkfdT = 0.145 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] + g_RT[4] - g_RT[6] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] -= dqdci;  // dwdot[O]/d[N2]
  J[6] += dqdci;  // dwdot[OH]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[132] += dqdci; // dwdot[N2]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[147] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[198] += dqdci; // dwdot[N2]/d[OH]
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[213] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[499] -= dqdci; // dwdot[O]/d[NNH]
  J[501] += dqdci; // dwdot[OH]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 76: NNH + O <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 520000 * exp(0.381 * logT - (-205.81561631413) * invT);
  dlnkfdT = 0.381 * invT + (-205.81561631413) * invT2;
  // reverse
  phi_r = sc[10] * sc[13];
  Kc = exp(g_RT[4] - g_RT[10] - g_RT[13] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[10] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[13] += q; // NH
  wdot[15] -= q; // NNH
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[145] += dqdci; // dwdot[NH]/d[O]
  J[147] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[13];
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[343] += dqdci; // dwdot[NH]/d[NO]
  J[345] -= dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH]
  dqdci = -k_r * sc[10];
  J[433] -= dqdci; // dwdot[O]/d[NH]
  J[439] += dqdci; // dwdot[NO]/d[NH]
  J[442] += dqdci; // dwdot[NH]/d[NH]
  J[444] -= dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[499] -= dqdci; // dwdot[O]/d[NNH]
  J[505] += dqdci; // dwdot[NO]/d[NNH]
  J[508] += dqdci; // dwdot[NH]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1069] += dqdT; // dwdot[NH]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 77: NNH + OH <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[15];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[15]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[6] -= dqdci;  // dwdot[OH]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[165] += dqdci; // dwdot[N2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[180] -= dqdci; // dwdot[NNH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[198] += dqdci; // dwdot[N2]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[213] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[6];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[500] += dqdci; // dwdot[H2O]/d[NNH]
  J[501] -= dqdci; // dwdot[OH]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 78: NNH + O2 <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 560000000 * exp(-0.385 * logT - (-6.54181665546136) * invT);
  dlnkfdT = -0.385 * invT + (-6.54181665546136) * invT2;
  // reverse
  phi_r = sc[0] * sc[9];
  Kc = exp(-g_RT[0] + g_RT[3] - g_RT[9] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[0] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] -= q;  // O2
  wdot[9] += q;  // HO2
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[9];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] -= dqdci;  // dwdot[O2]/d[N2]
  J[9] += dqdci;  // dwdot[HO2]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[O2]
  dqdci = +k_f * sc[15];
  J[99] += dqdci;  // dwdot[N2]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[108] += dqdci; // dwdot[HO2]/d[O2]
  J[114] -= dqdci; // dwdot[NNH]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[297] += dqdci; // dwdot[N2]/d[HO2]
  J[300] -= dqdci; // dwdot[O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[312] -= dqdci; // dwdot[NNH]/d[HO2]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[498] -= dqdci; // dwdot[O2]/d[NNH]
  J[504] += dqdci; // dwdot[HO2]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 79: NH + NNH <=> N2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[15];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[12];
  Kc = exp(-g_RT[0] - g_RT[12] + g_RT[13] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[15]) + (h_RT[0] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[12];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[12] += dqdci; // dwdot[NH2]/d[N2]
  J[13] -= dqdci; // dwdot[NH]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NH2]
  dqdci = -k_r * sc[0];
  J[396] += dqdci; // dwdot[N2]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[411] -= dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[15];
  J[429] += dqdci; // dwdot[N2]/d[NH]
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[444] -= dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[13];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[507] += dqdci; // dwdot[NH2]/d[NNH]
  J[508] -= dqdci; // dwdot[NH]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 80: NH2 + NNH <=> N2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[15];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[11];
  Kc = exp(-g_RT[0] - g_RT[11] + g_RT[12] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[15]) + (h_RT[0] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[11];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[11] += dqdci; // dwdot[NH3]/d[N2]
  J[12] -= dqdci; // dwdot[NH2]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NH3]
  dqdci = -k_r * sc[0];
  J[363] += dqdci; // dwdot[N2]/d[NH3]
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[378] -= dqdci; // dwdot[NNH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[396] += dqdci; // dwdot[N2]/d[NH2]
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[411] -= dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = +k_f * sc[12];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[506] += dqdci; // dwdot[NH3]/d[NNH]
  J[507] -= dqdci; // dwdot[NH2]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 81: NNH + NO <=> HNO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[23];
  Kc = exp(-g_RT[0] + g_RT[10] + g_RT[15] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[0] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[10] -= q; // NO
  wdot[15] -= q; // NNH
  wdot[23] += q; // HNO
  // d()/d[N2]
  dqdci = -k_r * sc[23];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[10] -= dqdci; // dwdot[NO]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  J[23] += dqdci; // dwdot[HNO]/d[N2]
  // d()/d[NO]
  dqdci = +k_f * sc[15];
  J[330] += dqdci; // dwdot[N2]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[345] -= dqdci; // dwdot[NNH]/d[NO]
  J[353] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NNH]
  dqdci = +k_f * sc[10];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[505] -= dqdci; // dwdot[NO]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  J[518] += dqdci; // dwdot[HNO]/d[NNH]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[759] += dqdci; // dwdot[N2]/d[HNO]
  J[769] -= dqdci; // dwdot[NO]/d[HNO]
  J[774] -= dqdci; // dwdot[NNH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 83: H + NH2OH <=> H2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 480 * exp(1.5 * logT - (3144.60094461369) * invT);
  dlnkfdT = 1.5 * invT + (3144.60094461369) * invT2;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[53] -= dqdci; // dwdot[NH2OH]/d[H2]
  J[55] += dqdci; // dwdot[HNOH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[86] -= dqdci; // dwdot[NH2OH]/d[H]
  J[88] += dqdci; // dwdot[HNOH]/d[H]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[2];
  J[661] += dqdci; // dwdot[H2]/d[NH2OH]
  J[662] -= dqdci; // dwdot[H]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[1];
  J[727] += dqdci; // dwdot[H2]/d[HNOH]
  J[728] -= dqdci; // dwdot[H]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 84: H + NH2OH <=> H2 + H2NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 240 * exp(1.5 * logT - (2549.79884563251) * invT);
  dlnkfdT = 1.5 * invT + (2549.79884563251) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[53] -= dqdci; // dwdot[NH2OH]/d[H2]
  J[54] += dqdci; // dwdot[H2NO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[86] -= dqdci; // dwdot[NH2OH]/d[H]
  J[87] += dqdci; // dwdot[H2NO]/d[H]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[2];
  J[661] += dqdci; // dwdot[H2]/d[NH2OH]
  J[662] -= dqdci; // dwdot[H]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[1];
  J[694] += dqdci; // dwdot[H2]/d[H2NO]
  J[695] -= dqdci; // dwdot[H]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 85: NH2OH + O <=> HNOH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 330 * exp(1.5 * logT - (1944.93241333524) * invT);
  dlnkfdT = 1.5 * invT + (1944.93241333524) * invT2;
  // reverse
  phi_r = sc[6] * sc[22];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[6] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[152] -= dqdci; // dwdot[NH2OH]/d[O]
  J[154] += dqdci; // dwdot[HNOH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[22];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[218] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[220] += dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[664] -= dqdci; // dwdot[O]/d[NH2OH]
  J[666] += dqdci; // dwdot[OH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[6];
  J[730] -= dqdci; // dwdot[O]/d[HNOH]
  J[732] += dqdci; // dwdot[OH]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 86: NH2OH + O <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 170 * exp(1.5 * logT - (1514.68216407221) * invT);
  dlnkfdT = 1.5 * invT + (1514.68216407221) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[152] -= dqdci; // dwdot[NH2OH]/d[O]
  J[153] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[218] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[219] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[664] -= dqdci; // dwdot[O]/d[NH2OH]
  J[666] += dqdci; // dwdot[OH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[6];
  J[697] -= dqdci; // dwdot[O]/d[H2NO]
  J[699] += dqdci; // dwdot[OH]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 87: NH2OH + OH <=> H2O + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[20];
  k_f = 0.015 * exp(2.61 * logT - (-1779.87734695129) * invT);
  dlnkfdT = 2.61 * invT + (-1779.87734695129) * invT2;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[20]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[185] -= dqdci; // dwdot[NH2OH]/d[H2O]
  J[187] += dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[218] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[220] += dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[6];
  J[665] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[666] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[5];
  J[731] += dqdci; // dwdot[H2O]/d[HNOH]
  J[732] -= dqdci; // dwdot[OH]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 88: NH2OH + OH <=> H2NO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[20];
  k_f = 0.15 * exp(2.28 * logT - (-652.168798882917) * invT);
  dlnkfdT = 2.28 * invT + (-652.168798882917) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[20]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[185] -= dqdci; // dwdot[NH2OH]/d[H2O]
  J[186] += dqdci; // dwdot[H2NO]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[218] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[219] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[6];
  J[665] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[666] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[5];
  J[698] += dqdci; // dwdot[H2O]/d[H2NO]
  J[699] -= dqdci; // dwdot[OH]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 89: NH2 + NH2OH <=> HNOH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 1.1e-07 * exp(4 * logT - (-48.8120165830578) * invT);
  dlnkfdT = 4 * invT + (-48.8120165830578) * invT2;
  // reverse
  phi_r = sc[11] * sc[22];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[11] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[NH3]
  dqdci = -k_r * sc[22];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2OH]/d[NH3]
  J[385] += dqdci; // dwdot[HNOH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[418] += dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[12];
  J[671] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[672] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[11];
  J[737] += dqdci; // dwdot[NH3]/d[HNOH]
  J[738] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 90: NH2 + NH2OH <=> H2NO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 9.5e-06 * exp(3.42 * logT - (-509.758482460181) * invT);
  dlnkfdT = 3.42 * invT + (-509.758482460181) * invT2;
  // reverse
  phi_r = sc[11] * sc[21];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[11] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2OH]/d[NH3]
  J[384] += dqdci; // dwdot[H2NO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[417] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[12];
  J[671] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[672] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[11];
  J[704] += dqdci; // dwdot[NH3]/d[H2NO]
  J[705] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 91: NH + NH2OH <=> HNOH + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[20];
  k_f = 2.9e-09 * exp(4.4 * logT - (787.030865318582) * invT);
  dlnkfdT = 4.4 * invT + (787.030865318582) * invT2;
  // reverse
  phi_r = sc[12] * sc[22];
  Kc = exp(-g_RT[12] + g_RT[13] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[20]) + (h_RT[12] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[NH2]
  dqdci = -k_r * sc[22];
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[418] += dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[20];
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[449] -= dqdci; // dwdot[NH2OH]/d[NH]
  J[451] += dqdci; // dwdot[HNOH]/d[NH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[13];
  J[672] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[673] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[12];
  J[738] += dqdci; // dwdot[NH2]/d[HNOH]
  J[739] -= dqdci; // dwdot[NH]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 92: NH + NH2OH <=> H2NO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[20];
  k_f = 1.5e-09 * exp(4.6 * logT - (1219.79719791064) * invT);
  dlnkfdT = 4.6 * invT + (1219.79719791064) * invT2;
  // reverse
  phi_r = sc[12] * sc[21];
  Kc = exp(-g_RT[12] + g_RT[13] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[20]) + (h_RT[12] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[NH2]
  dqdci = -k_r * sc[21];
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[417] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[20];
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[449] -= dqdci; // dwdot[NH2OH]/d[NH]
  J[450] += dqdci; // dwdot[H2NO]/d[NH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[13];
  J[672] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[673] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[12];
  J[705] += dqdci; // dwdot[NH2]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 93: HO2 + NH2OH <=> H2O2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 0.029 * exp(2.69 * logT - (4809.24167509571) * invT);
  dlnkfdT = 2.69 * invT + (4809.24167509571) * invT2;
  // reverse
  phi_r = sc[8] * sc[22];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[8] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[H2O2]
  dqdci = -k_r * sc[22];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[284] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  J[286] += dqdci; // dwdot[HNOH]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[317] -= dqdci; // dwdot[NH2OH]/d[HO2]
  J[319] += dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[9];
  J[668] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[669] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[8];
  J[734] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[735] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 94: HO2 + NH2OH <=> H2NO + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 0.014 * exp(2.69 * logT - (3229.64456113469) * invT);
  dlnkfdT = 2.69 * invT + (3229.64456113469) * invT2;
  // reverse
  phi_r = sc[8] * sc[21];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[8] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[284] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  J[285] += dqdci; // dwdot[H2NO]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[317] -= dqdci; // dwdot[NH2OH]/d[HO2]
  J[318] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[9];
  J[668] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[669] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[8];
  J[701] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[702] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 97: H + H2NO <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 30 * exp(2 * logT - (1006.43333160944) * invT);
  dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[54] -= dqdci; // dwdot[H2NO]/d[H2]
  J[56] += dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[87] -= dqdci; // dwdot[H2NO]/d[H]
  J[89] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[694] += dqdci; // dwdot[H2]/d[H2NO]
  J[695] -= dqdci; // dwdot[H]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[760] += dqdci; // dwdot[H2]/d[HNO]
  J[761] -= dqdci; // dwdot[H]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 98: H + H2NO <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[12] += q; // NH2
  wdot[21] -= q; // H2NO
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[78] += dqdci; // dwdot[NH2]/d[H]
  J[87] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] += dqdci; // dwdot[NH2]/d[OH]
  J[219] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[6];
  J[398] -= dqdci; // dwdot[H]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[417] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[695] -= dqdci; // dwdot[H]/d[H2NO]
  J[699] += dqdci; // dwdot[OH]/d[H2NO]
  J[705] += dqdci; // dwdot[NH2]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT

  // reaction 99: H2NO + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 30 * exp(2 * logT - (1006.43333160944) * invT);
  dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[153] -= dqdci; // dwdot[H2NO]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[219] -= dqdci; // dwdot[H2NO]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2NO]
  dqdci = +k_f * sc[4];
  J[697] -= dqdci; // dwdot[O]/d[H2NO]
  J[699] += dqdci; // dwdot[OH]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 100: H2NO + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[21];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[21]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[186] -= dqdci; // dwdot[H2NO]/d[H2O]
  J[188] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[219] -= dqdci; // dwdot[H2NO]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2NO]
  dqdci = +k_f * sc[6];
  J[698] += dqdci; // dwdot[H2O]/d[H2NO]
  J[699] -= dqdci; // dwdot[OH]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[764] += dqdci; // dwdot[H2O]/d[HNO]
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 101: H2NO + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[8] * sc[23];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[8] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[H2O2]
  dqdci = -k_r * sc[23];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[285] -= dqdci; // dwdot[H2NO]/d[H2O2]
  J[287] += dqdci; // dwdot[HNO]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[21];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[318] -= dqdci; // dwdot[H2NO]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[9];
  J[701] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[702] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[8];
  J[767] += dqdci; // dwdot[H2O2]/d[HNO]
  J[768] -= dqdci; // dwdot[HO2]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 102: H2NO + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[21];
  k_f = 3000000 * exp(-(503.21666580472) * invT);
  dlnkfdT = (503.21666580472) * invT2;
  // reverse
  phi_r = sc[11] * sc[23];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[21]) + (h_RT[11] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[H2NO]/d[NH3]
  J[386] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[21];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[417] -= dqdci; // dwdot[H2NO]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[12];
  J[704] += dqdci; // dwdot[NH3]/d[H2NO]
  J[705] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[11];
  J[770] += dqdci; // dwdot[NH3]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 103: H2NO + NO <=> 2 HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[21];
  k_f = 0.02 * exp(2 * logT - (6541.81665546136) * invT);
  dlnkfdT = 2 * invT + (6541.81665546136) * invT2;
  // reverse
  phi_r = (sc[23] * sc[23]);
  Kc = exp(g_RT[10] + g_RT[21] - 2.000000 * g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[21]) + (2.000000 * h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q;     // NO
  wdot[21] -= q;     // H2NO
  wdot[23] += 2 * q; // HNO
  // d()/d[NO]
  dqdci = +k_f * sc[21];
  J[340] -= dqdci;     // dwdot[NO]/d[NO]
  J[351] -= dqdci;     // dwdot[H2NO]/d[NO]
  J[353] += 2 * dqdci; // dwdot[HNO]/d[NO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[10];
  J[703] -= dqdci;     // dwdot[NO]/d[H2NO]
  J[714] -= dqdci;     // dwdot[H2NO]/d[H2NO]
  J[716] += 2 * dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * 2.000000 * sc[23];
  J[769] -= dqdci;     // dwdot[NO]/d[HNO]
  J[780] -= dqdci;     // dwdot[H2NO]/d[HNO]
  J[782] += 2 * dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1066] -= dqdT;     // dwdot[NO]/dT
  J[1077] -= dqdT;     // dwdot[H2NO]/dT
  J[1079] += 2 * dqdT; // dwdot[HNO]/dT

  // reaction 104: H2NO + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21] * sc[25];
  k_f = 0.044 * exp(2.64 * logT - (2032.99532985107) * invT);
  dlnkfdT = 2.64 * invT + (2032.99532985107) * invT2;
  // reverse
  phi_r = sc[23] * sc[26];
  Kc = exp(g_RT[21] - g_RT[23] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21] + h_RT[25]) + (h_RT[23] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  wdot[25] -= q; // NO2
  wdot[26] += q; // HONO
  // d()/d[H2NO]
  dqdci = +k_f * sc[25];
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  J[718] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[719] += dqdci; // dwdot[HONO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[26];
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[784] -= dqdci; // dwdot[NO2]/d[HNO]
  J[785] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[21];
  J[846] -= dqdci; // dwdot[H2NO]/d[NO2]
  J[848] += dqdci; // dwdot[HNO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[23];
  J[879] -= dqdci; // dwdot[H2NO]/d[HONO]
  J[881] += dqdci; // dwdot[HNO]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 106: H + HNOH <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[12] += q; // NH2
  wdot[22] -= q; // HNOH
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[78] += dqdci; // dwdot[NH2]/d[H]
  J[88] -= dqdci; // dwdot[HNOH]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] += dqdci; // dwdot[NH2]/d[OH]
  J[220] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[6];
  J[398] -= dqdci; // dwdot[H]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[418] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[2];
  J[728] -= dqdci; // dwdot[H]/d[HNOH]
  J[732] += dqdci; // dwdot[OH]/d[HNOH]
  J[738] += dqdci; // dwdot[NH2]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT

  // reaction 107: H + HNOH <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 480 * exp(1.5 * logT - (190.215899674184) * invT);
  dlnkfdT = 1.5 * invT + (190.215899674184) * invT2;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[55] -= dqdci; // dwdot[HNOH]/d[H2]
  J[56] += dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[88] -= dqdci; // dwdot[HNOH]/d[H]
  J[89] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[HNOH]
  dqdci = +k_f * sc[2];
  J[727] += dqdci; // dwdot[H2]/d[HNOH]
  J[728] -= dqdci; // dwdot[H]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[760] += dqdci; // dwdot[H2]/d[HNO]
  J[761] -= dqdci; // dwdot[H]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 108: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[154] -= dqdci; // dwdot[HNOH]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[220] -= dqdci; // dwdot[HNOH]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[4];
  J[730] -= dqdci; // dwdot[O]/d[HNOH]
  J[732] += dqdci; // dwdot[OH]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 109: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 330 * exp(1.5 * logT - (-180.15156635809) * invT);
  dlnkfdT = 1.5 * invT + (-180.15156635809) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[154] -= dqdci; // dwdot[HNOH]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[220] -= dqdci; // dwdot[HNOH]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[4];
  J[730] -= dqdci; // dwdot[O]/d[HNOH]
  J[732] += dqdci; // dwdot[OH]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 110: HNOH + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[22];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[22]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[187] -= dqdci; // dwdot[HNOH]/d[H2O]
  J[188] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[220] -= dqdci; // dwdot[HNOH]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[6];
  J[731] += dqdci; // dwdot[H2O]/d[HNOH]
  J[732] -= dqdci; // dwdot[OH]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[764] += dqdci; // dwdot[H2O]/d[HNO]
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 111: HNOH + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[22];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[8] * sc[23];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[22]) + (h_RT[8] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[H2O2]
  dqdci = -k_r * sc[23];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[286] -= dqdci; // dwdot[HNOH]/d[H2O2]
  J[287] += dqdci; // dwdot[HNO]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[319] -= dqdci; // dwdot[HNOH]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[9];
  J[734] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[735] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[8];
  J[767] += dqdci; // dwdot[H2O2]/d[HNO]
  J[768] -= dqdci; // dwdot[HO2]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 112: HNOH + HO2 <=> NH2OH + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[22];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[3] * sc[20];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[20] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[22]) + (h_RT[3] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[9] -= q;  // HO2
  wdot[20] += q; // NH2OH
  wdot[22] -= q; // HNOH
  // d()/d[O2]
  dqdci = -k_r * sc[20];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[119] += dqdci; // dwdot[NH2OH]/d[O2]
  J[121] -= dqdci; // dwdot[HNOH]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[317] += dqdci; // dwdot[NH2OH]/d[HO2]
  J[319] -= dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[NH2OH]
  dqdci = -k_r * sc[3];
  J[663] += dqdci; // dwdot[O2]/d[NH2OH]
  J[669] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[680] += dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] -= dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[9];
  J[729] += dqdci; // dwdot[O2]/d[HNOH]
  J[735] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[746] += dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1076] += dqdT; // dwdot[NH2OH]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT

  // reaction 113: HNOH + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[22];
  k_f = 3000000 * exp(-(12580.416645118) * invT);
  dlnkfdT = (12580.416645118) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[22]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[9] += q;  // HO2
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[22];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[108] += dqdci; // dwdot[HO2]/d[O2]
  J[121] -= dqdci; // dwdot[HNOH]/d[O2]
  J[122] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[23];
  J[300] -= dqdci; // dwdot[O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[319] -= dqdci; // dwdot[HNOH]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[3];
  J[729] -= dqdci; // dwdot[O2]/d[HNOH]
  J[735] += dqdci; // dwdot[HO2]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[762] -= dqdci; // dwdot[O2]/d[HNO]
  J[768] += dqdci; // dwdot[HO2]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 114: HNOH + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[22];
  k_f = 1.8 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[11] * sc[23];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[22]) + (h_RT[11] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[385] -= dqdci; // dwdot[HNOH]/d[NH3]
  J[386] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[22];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] -= dqdci; // dwdot[HNOH]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[12];
  J[737] += dqdci; // dwdot[NH3]/d[HNOH]
  J[738] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[11];
  J[770] += dqdci; // dwdot[NH3]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 115: HNOH + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[22] * sc[25];
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[23] * sc[26];
  Kc = exp(g_RT[22] - g_RT[23] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22] + h_RT[25]) + (h_RT[23] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  wdot[25] -= q; // NO2
  wdot[26] += q; // HONO
  // d()/d[HNOH]
  dqdci = +k_f * sc[25];
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  J[751] -= dqdci; // dwdot[NO2]/d[HNOH]
  J[752] += dqdci; // dwdot[HONO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[26];
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[784] -= dqdci; // dwdot[NO2]/d[HNO]
  J[785] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[22];
  J[847] -= dqdci; // dwdot[HNOH]/d[NO2]
  J[848] += dqdci; // dwdot[HNO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[23];
  J[880] -= dqdci; // dwdot[HNOH]/d[HONO]
  J[881] += dqdci; // dwdot[HNO]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 116: H + HNO <=> H2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[23];
  k_f = 66000 * exp(0.94 * logT - (249.092249573336) * invT);
  dlnkfdT = 0.94 * invT + (249.092249573336) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[23]) + (h_RT[1] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[10] += q; // NO
  wdot[23] -= q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[10];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[43] += dqdci; // dwdot[NO]/d[H2]
  J[56] -= dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[89] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[331] += dqdci; // dwdot[H2]/d[NO]
  J[332] -= dqdci; // dwdot[H]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[2];
  J[760] += dqdci; // dwdot[H2]/d[HNO]
  J[761] -= dqdci; // dwdot[H]/d[HNO]
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT

  // reaction 117: HNO + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 23000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[10] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[10] += q; // NO
  wdot[23] -= q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[155] -= dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[221] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[4];
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT

  // reaction 118: HNO + HO2 <=> HNO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[23];
  k_f = 0.002 * exp(2.36 * logT - (4518.88565892638) * invT);
  dlnkfdT = 2.36 * invT + (4518.88565892638) * invT2;
  // reverse
  phi_r = sc[6] * sc[27];
  Kc = exp(-g_RT[6] + g_RT[9] + g_RT[23] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[23]) + (h_RT[6] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[9] -= q;  // HO2
  wdot[23] -= q; // HNO
  wdot[27] += q; // HNO2
  // d()/d[OH]
  dqdci = -k_r * sc[27];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  J[221] -= dqdci; // dwdot[HNO]/d[OH]
  J[225] += dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[320] -= dqdci; // dwdot[HNO]/d[HO2]
  J[324] += dqdci; // dwdot[HNO2]/d[HO2]
  // d()/d[HNO]
  dqdci = +k_f * sc[9];
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[768] -= dqdci; // dwdot[HO2]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  J[786] += dqdci; // dwdot[HNO2]/d[HNO]
  // d()/d[HNO2]
  dqdci = -k_r * sc[6];
  J[897] += dqdci; // dwdot[OH]/d[HNO2]
  J[900] -= dqdci; // dwdot[HO2]/d[HNO2]
  J[914] -= dqdci; // dwdot[HNO]/d[HNO2]
  J[918] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT
  J[1083] += dqdT; // dwdot[HNO2]/dT

  // reaction 119: 2 HNO <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[23] * sc[23]);
  k_f = 900 * exp(-(1559.97166399463) * invT);
  dlnkfdT = (1559.97166399463) * invT2;
  // reverse
  phi_r = sc[5] * sc[30];
  Kc = exp(-g_RT[5] + 2.000000 * g_RT[23] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[23]) + (h_RT[5] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;      // H2O
  wdot[23] -= 2 * q; // HNO
  wdot[30] += q;     // N2O
  // d()/d[H2O]
  dqdci = -k_r * sc[30];
  J[170] += dqdci;      // dwdot[H2O]/d[H2O]
  J[188] += -2 * dqdci; // dwdot[HNO]/d[H2O]
  J[195] += dqdci;      // dwdot[N2O]/d[H2O]
  // d()/d[HNO]
  dqdci = +k_f * 2.000000 * sc[23];
  J[764] += dqdci;      // dwdot[H2O]/d[HNO]
  J[782] += -2 * dqdci; // dwdot[HNO]/d[HNO]
  J[789] += dqdci;      // dwdot[N2O]/d[HNO]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[995] += dqdci;       // dwdot[H2O]/d[N2O]
  J[1013] += -2 * dqdci; // dwdot[HNO]/d[N2O]
  J[1020] += dqdci;      // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1061] += dqdT;      // dwdot[H2O]/dT
  J[1079] += -2 * dqdT; // dwdot[HNO]/dT
  J[1086] += dqdT;      // dwdot[N2O]/dT

  // reaction 120: HO2 + NO <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 2100000 * exp(-(-250.098682904946) * invT);
  dlnkfdT = (-250.098682904946) * invT2;
  // reverse
  phi_r = sc[6] * sc[25];
  Kc = exp(-g_RT[6] + g_RT[9] + g_RT[10] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[6] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[9] -= q;  // HO2
  wdot[10] -= q; // NO
  wdot[25] += q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  J[208] -= dqdci; // dwdot[NO]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[307] -= dqdci; // dwdot[NO]/d[HO2]
  J[322] += dqdci; // dwdot[NO2]/d[HO2]
  // d()/d[NO]
  dqdci = +k_f * sc[9];
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[339] -= dqdci; // dwdot[HO2]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[355] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[834] -= dqdci; // dwdot[HO2]/d[NO2]
  J[835] -= dqdci; // dwdot[NO]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT

  // reaction 122: NO2 + O <=> NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[25];
  k_f = 5860000 * exp(-(-119.765566461523) * invT);
  dlnkfdT = (-119.765566461523) * invT2;
  // reverse
  phi_r = sc[3] * sc[10];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[10] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[25]) + (h_RT[3] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[25] -= q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[10];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] -= dqdci; // dwdot[O]/d[O2]
  J[109] += dqdci; // dwdot[NO]/d[O2]
  J[124] -= dqdci; // dwdot[NO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[135] += dqdci; // dwdot[O2]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[157] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[3];
  J[333] += dqdci; // dwdot[O2]/d[NO]
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[4];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[829] -= dqdci; // dwdot[O]/d[NO2]
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT

  // reaction 123: HO2 + NO2 <=> HONO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[25];
  k_f = 1.9e-06 * exp(3.32 * logT - (1531.79153070957) * invT);
  dlnkfdT = 3.32 * invT + (1531.79153070957) * invT2;
  // reverse
  phi_r = sc[3] * sc[26];
  Kc = exp(-g_RT[3] + g_RT[9] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[25]) + (h_RT[3] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[9] -= q;  // HO2
  wdot[25] -= q; // NO2
  wdot[26] += q; // HONO
  // d()/d[O2]
  dqdci = -k_r * sc[26];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[124] -= dqdci; // dwdot[NO2]/d[O2]
  J[125] += dqdci; // dwdot[HONO]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[25];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[322] -= dqdci; // dwdot[NO2]/d[HO2]
  J[323] += dqdci; // dwdot[HONO]/d[HO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[9];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[834] -= dqdci; // dwdot[HO2]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[3];
  J[861] += dqdci; // dwdot[O2]/d[HONO]
  J[867] -= dqdci; // dwdot[HO2]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 124: HO2 + NO2 <=> HNO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[25];
  k_f = 1.9e-05 * exp(3.26 * logT - (2507.52864570492) * invT);
  dlnkfdT = 3.26 * invT + (2507.52864570492) * invT2;
  // reverse
  phi_r = sc[3] * sc[27];
  Kc = exp(-g_RT[3] + g_RT[9] + g_RT[25] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[25]) + (h_RT[3] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[9] -= q;  // HO2
  wdot[25] -= q; // NO2
  wdot[27] += q; // HNO2
  // d()/d[O2]
  dqdci = -k_r * sc[27];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[124] -= dqdci; // dwdot[NO2]/d[O2]
  J[126] += dqdci; // dwdot[HNO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[25];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[322] -= dqdci; // dwdot[NO2]/d[HO2]
  J[324] += dqdci; // dwdot[HNO2]/d[HO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[9];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[834] -= dqdci; // dwdot[HO2]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[852] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[3];
  J[894] += dqdci; // dwdot[O2]/d[HNO2]
  J[900] -= dqdci; // dwdot[HO2]/d[HNO2]
  J[916] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[918] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1083] += dqdT; // dwdot[HNO2]/dT

  // reaction 125: 2 NO2 <=> 2 NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[25] * sc[25]);
  k_f = 4500000 * exp(-(13888.2767595445) * invT);
  dlnkfdT = (13888.2767595445) * invT2;
  // reverse
  phi_r = sc[3] * (sc[10] * sc[10]);
  Kc = refC * exp(-g_RT[3] - 2.000000 * g_RT[10] + 2.000000 * g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[25]) + (h_RT[3] + 2.000000 * h_RT[10]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;      // O2
  wdot[10] += 2 * q; // NO
  wdot[25] -= 2 * q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[10] * sc[10];
  J[102] += dqdci;      // dwdot[O2]/d[O2]
  J[109] += 2 * dqdci;  // dwdot[NO]/d[O2]
  J[124] += -2 * dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[3] * 2.000000 * sc[10];
  J[333] += dqdci;      // dwdot[O2]/d[NO]
  J[340] += 2 * dqdci;  // dwdot[NO]/d[NO]
  J[355] += -2 * dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[25];
  J[828] += dqdci;      // dwdot[O2]/d[NO2]
  J[835] += 2 * dqdci;  // dwdot[NO]/d[NO2]
  J[850] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1066] += 2 * dqdT;  // dwdot[NO]/dT
  J[1081] += -2 * dqdT; // dwdot[NO2]/dT

  // reaction 126: 2 NO2 <=> NO + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[25] * sc[25]);
  k_f = 9600 * exp(0.73 * logT - (10517.2283153186) * invT);
  dlnkfdT = 0.73 * invT + (10517.2283153186) * invT2;
  // reverse
  phi_r = sc[10] * sc[28];
  Kc = exp(-g_RT[10] + 2.000000 * g_RT[25] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[25]) + (h_RT[10] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q;     // NO
  wdot[25] -= 2 * q; // NO2
  wdot[28] += q;     // NO3
  // d()/d[NO]
  dqdci = -k_r * sc[28];
  J[340] += dqdci;      // dwdot[NO]/d[NO]
  J[355] += -2 * dqdci; // dwdot[NO2]/d[NO]
  J[358] += dqdci;      // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[25];
  J[835] += dqdci;      // dwdot[NO]/d[NO2]
  J[850] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  J[853] += dqdci;      // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = -k_r * sc[10];
  J[934] += dqdci;      // dwdot[NO]/d[NO3]
  J[949] += -2 * dqdci; // dwdot[NO2]/d[NO3]
  J[952] += dqdci;      // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1066] += dqdT;      // dwdot[NO]/dT
  J[1081] += -2 * dqdT; // dwdot[NO2]/dT
  J[1084] += dqdT;      // dwdot[NO3]/dT

  // reaction 127: HONO + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[26];
  k_f = 12000000 * exp(-(2999.17132819613) * invT);
  dlnkfdT = (2999.17132819613) * invT2;
  // reverse
  phi_r = sc[6] * sc[25];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[26]) + (h_RT[6] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[25] += q; // NO2
  wdot[26] -= q; // HONO
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[157] += dqdci; // dwdot[NO2]/d[O]
  J[158] -= dqdci; // dwdot[HONO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[224] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[829] -= dqdci; // dwdot[O]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[4];
  J[862] -= dqdci; // dwdot[O]/d[HONO]
  J[864] += dqdci; // dwdot[OH]/d[HONO]
  J[883] += dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 128: HONO + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[26];
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  dlnkfdT = (-261.672666218454) * invT2;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[26]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[25] += q; // NO2
  wdot[26] -= q; // HONO
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[190] += dqdci; // dwdot[NO2]/d[H2O]
  J[191] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[26];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[224] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[830] += dqdci; // dwdot[H2O]/d[NO2]
  J[831] -= dqdci; // dwdot[OH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[6];
  J[863] += dqdci; // dwdot[H2O]/d[HONO]
  J[864] -= dqdci; // dwdot[OH]/d[HONO]
  J[883] += dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 129: HONO + NO2 <=> HONO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[25] * sc[26];
  k_f = 200000 * exp(-(16455.1849718143) * invT);
  dlnkfdT = (16455.1849718143) * invT2;
  // reverse
  phi_r = sc[10] * sc[29];
  Kc = exp(-g_RT[10] + g_RT[25] + g_RT[26] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25] + h_RT[26]) + (h_RT[10] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO
  wdot[25] -= q; // NO2
  wdot[26] -= q; // HONO
  wdot[29] += q; // HONO2
  // d()/d[NO]
  dqdci = -k_r * sc[29];
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  J[356] -= dqdci; // dwdot[HONO]/d[NO]
  J[359] += dqdci; // dwdot[HONO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[26];
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  J[854] += dqdci; // dwdot[HONO2]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[25];
  J[868] += dqdci; // dwdot[NO]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  J[887] += dqdci; // dwdot[HONO2]/d[HONO]
  // d()/d[HONO2]
  dqdci = -k_r * sc[10];
  J[967] += dqdci; // dwdot[NO]/d[HONO2]
  J[982] -= dqdci; // dwdot[NO2]/d[HONO2]
  J[983] -= dqdci; // dwdot[HONO]/d[HONO2]
  J[986] += dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT
  J[1085] += dqdT; // dwdot[HONO2]/dT

  // reaction 130: 2 HONO <=> H2O + NO + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[26] * sc[26]);
  k_f = 3.5e-07 * exp(3.64 * logT - (6109.0503228693) * invT);
  dlnkfdT = 3.64 * invT + (6109.0503228693) * invT2;
  // reverse
  phi_r = sc[5] * sc[10] * sc[25];
  Kc = refC * exp(-g_RT[5] - g_RT[10] - g_RT[25] + 2.000000 * g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[26]) + (h_RT[5] + h_RT[10] + h_RT[25]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;      // H2O
  wdot[10] += q;     // NO
  wdot[25] += q;     // NO2
  wdot[26] -= 2 * q; // HONO
  // d()/d[H2O]
  dqdci = -k_r * sc[10] * sc[25];
  J[170] += dqdci;      // dwdot[H2O]/d[H2O]
  J[175] += dqdci;      // dwdot[NO]/d[H2O]
  J[190] += dqdci;      // dwdot[NO2]/d[H2O]
  J[191] += -2 * dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5] * sc[25];
  J[335] += dqdci;      // dwdot[H2O]/d[NO]
  J[340] += dqdci;      // dwdot[NO]/d[NO]
  J[355] += dqdci;      // dwdot[NO2]/d[NO]
  J[356] += -2 * dqdci; // dwdot[HONO]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[5] * sc[10];
  J[830] += dqdci;      // dwdot[H2O]/d[NO2]
  J[835] += dqdci;      // dwdot[NO]/d[NO2]
  J[850] += dqdci;      // dwdot[NO2]/d[NO2]
  J[851] += -2 * dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * 2.000000 * sc[26];
  J[863] += dqdci;      // dwdot[H2O]/d[HONO]
  J[868] += dqdci;      // dwdot[NO]/d[HONO]
  J[883] += dqdci;      // dwdot[NO2]/d[HONO]
  J[884] += -2 * dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1061] += dqdT;      // dwdot[H2O]/dT
  J[1066] += dqdT;      // dwdot[NO]/dT
  J[1081] += dqdT;      // dwdot[NO2]/dT
  J[1082] += -2 * dqdT; // dwdot[HONO]/dT

  // reaction 131: HNO2 + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[27];
  k_f = 170 * exp(1.5 * logT - (1006.43333160944) * invT);
  dlnkfdT = 1.5 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[6] * sc[25];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[25] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[27]) + (h_RT[6] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[25] += q; // NO2
  wdot[27] -= q; // HNO2
  // d()/d[O]
  dqdci = +k_f * sc[27];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[157] += dqdci; // dwdot[NO2]/d[O]
  J[159] -= dqdci; // dwdot[HNO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[225] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[829] -= dqdci; // dwdot[O]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[852] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[4];
  J[895] -= dqdci; // dwdot[O]/d[HNO2]
  J[897] += dqdci; // dwdot[OH]/d[HNO2]
  J[916] += dqdci; // dwdot[NO2]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 132: HNO2 + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[27];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[25] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[27]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[25] += q; // NO2
  wdot[27] -= q; // HNO2
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[190] += dqdci; // dwdot[NO2]/d[H2O]
  J[192] -= dqdci; // dwdot[HNO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[27];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[225] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[830] += dqdci; // dwdot[H2O]/d[NO2]
  J[831] -= dqdci; // dwdot[OH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[852] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[6];
  J[896] += dqdci; // dwdot[H2O]/d[HNO2]
  J[897] -= dqdci; // dwdot[OH]/d[HNO2]
  J[916] += dqdci; // dwdot[NO2]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 134: H + NO3 <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 60000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[25];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[25] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[6] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[25] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[91] += dqdci; // dwdot[NO2]/d[H]
  J[94] -= dqdci; // dwdot[NO3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[226] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[853] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[2];
  J[926] -= dqdci; // dwdot[H]/d[NO3]
  J[930] += dqdci; // dwdot[OH]/d[NO3]
  J[949] += dqdci; // dwdot[NO2]/d[NO3]
  J[952] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1084] -= dqdT; // dwdot[NO3]/dT

  // reaction 135: NO3 + O <=> NO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[25];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[25] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[3] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[4] -= q;  // O
  wdot[25] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[25];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] -= dqdci; // dwdot[O]/d[O2]
  J[124] += dqdci; // dwdot[NO2]/d[O2]
  J[127] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[135] += dqdci; // dwdot[O2]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[157] += dqdci; // dwdot[NO2]/d[O]
  J[160] -= dqdci; // dwdot[NO3]/d[O]
  // d()/d[NO2]
  dqdci = -k_r * sc[3];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[829] -= dqdci; // dwdot[O]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[853] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[4];
  J[927] += dqdci; // dwdot[O2]/d[NO3]
  J[928] -= dqdci; // dwdot[O]/d[NO3]
  J[949] += dqdci; // dwdot[NO2]/d[NO3]
  J[952] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1084] -= dqdT; // dwdot[NO3]/dT

  // reaction 136: NO3 + OH <=> HO2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[28];
  k_f = 14000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[25];
  Kc = exp(g_RT[6] - g_RT[9] - g_RT[25] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[28]) + (h_RT[9] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[9] += q;  // HO2
  wdot[25] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[207] += dqdci; // dwdot[HO2]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[226] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[25];
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[322] += dqdci; // dwdot[NO2]/d[HO2]
  J[325] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[NO2]
  dqdci = -k_r * sc[9];
  J[831] -= dqdci; // dwdot[OH]/d[NO2]
  J[834] += dqdci; // dwdot[HO2]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[853] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[6];
  J[930] -= dqdci; // dwdot[OH]/d[NO3]
  J[933] += dqdci; // dwdot[HO2]/d[NO3]
  J[949] += dqdci; // dwdot[NO2]/d[NO3]
  J[952] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1084] -= dqdT; // dwdot[NO3]/dT

  // reaction 137: HO2 + NO3 <=> NO2 + O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[28];
  k_f = 1500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[6] * sc[25];
  Kc = refC * exp(-g_RT[3] - g_RT[6] + g_RT[9] - g_RT[25] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[9] + h_RT[28]) + (h_RT[3] + h_RT[6] + h_RT[25]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] += q;  // OH
  wdot[9] -= q;  // HO2
  wdot[25] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[6] * sc[25];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[124] += dqdci; // dwdot[NO2]/d[O2]
  J[127] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[3] * sc[25];
  J[201] += dqdci; // dwdot[O2]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[226] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[28];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[322] += dqdci; // dwdot[NO2]/d[HO2]
  J[325] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[NO2]
  dqdci = -k_r * sc[3] * sc[6];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[834] -= dqdci; // dwdot[HO2]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[853] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[9];
  J[927] += dqdci; // dwdot[O2]/d[NO3]
  J[930] += dqdci; // dwdot[OH]/d[NO3]
  J[933] -= dqdci; // dwdot[HO2]/d[NO3]
  J[949] += dqdci; // dwdot[NO2]/d[NO3]
  J[952] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1084] -= dqdT; // dwdot[NO3]/dT

  // reaction 140: H + HONO2 <=> H2 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[29];
  k_f = 560 * exp(1.5 * logT - (8252.7533191974) * invT);
  dlnkfdT = 1.5 * invT + (8252.7533191974) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[29]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[28] += q; // NO3
  wdot[29] -= q; // HONO2
  // d()/d[H2]
  dqdci = -k_r * sc[28];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[61] += dqdci; // dwdot[NO3]/d[H2]
  J[62] -= dqdci; // dwdot[HONO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[94] += dqdci; // dwdot[NO3]/d[H]
  J[95] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[NO3]
  dqdci = -k_r * sc[1];
  J[925] += dqdci; // dwdot[H2]/d[NO3]
  J[926] -= dqdci; // dwdot[H]/d[NO3]
  J[952] += dqdci; // dwdot[NO3]/d[NO3]
  J[953] -= dqdci; // dwdot[HONO2]/d[NO3]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[958] += dqdci; // dwdot[H2]/d[HONO2]
  J[959] -= dqdci; // dwdot[H]/d[HONO2]
  J[985] += dqdci; // dwdot[NO3]/d[HONO2]
  J[986] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1084] += dqdT; // dwdot[NO3]/dT
  J[1085] -= dqdT; // dwdot[HONO2]/dT

  // reaction 141: H + HONO2 <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[29];
  k_f = 6.1e-05 * exp(3.3 * logT - (3162.71674458266) * invT);
  dlnkfdT = 3.3 * invT + (3162.71674458266) * invT2;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[25] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[29]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[25] += q; // NO2
  wdot[29] -= q; // HONO2
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[91] += dqdci; // dwdot[NO2]/d[H]
  J[95] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[190] += dqdci; // dwdot[NO2]/d[H2O]
  J[194] -= dqdci; // dwdot[HONO2]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[830] += dqdci; // dwdot[H2O]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[854] -= dqdci; // dwdot[HONO2]/d[NO2]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[959] -= dqdci; // dwdot[H]/d[HONO2]
  J[962] += dqdci; // dwdot[H2O]/d[HONO2]
  J[982] += dqdci; // dwdot[NO2]/d[HONO2]
  J[986] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1085] -= dqdT; // dwdot[HONO2]/dT

  // reaction 142: H + HONO2 <=> HONO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[29];
  k_f = 0.38 * exp(2.3 * logT - (3510.43946065372) * invT);
  dlnkfdT = 2.3 * invT + (3510.43946065372) * invT2;
  // reverse
  phi_r = sc[6] * sc[26];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[26] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[29]) + (h_RT[6] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[26] += q; // HONO
  wdot[29] -= q; // HONO2
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[92] += dqdci; // dwdot[HONO]/d[H]
  J[95] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[26];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[224] += dqdci; // dwdot[HONO]/d[OH]
  J[227] -= dqdci; // dwdot[HONO2]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[6];
  J[860] -= dqdci; // dwdot[H]/d[HONO]
  J[864] += dqdci; // dwdot[OH]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  J[887] -= dqdci; // dwdot[HONO2]/d[HONO]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[959] -= dqdci; // dwdot[H]/d[HONO2]
  J[963] += dqdci; // dwdot[OH]/d[HONO2]
  J[983] += dqdci; // dwdot[HONO]/d[HONO2]
  J[986] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT
  J[1085] -= dqdT; // dwdot[HONO2]/dT

  // reaction 143: HONO2 + OH <=> H2O + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[29];
  k_f = 10000 * exp(-(-623.988665597852) * invT);
  dlnkfdT = (-623.988665597852) * invT2;
  // reverse
  phi_r = sc[5] * sc[28];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[29]) + (h_RT[5] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[28] += q; // NO3
  wdot[29] -= q; // HONO2
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[193] += dqdci; // dwdot[NO3]/d[H2O]
  J[194] -= dqdci; // dwdot[HONO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[29];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[226] += dqdci; // dwdot[NO3]/d[OH]
  J[227] -= dqdci; // dwdot[HONO2]/d[OH]
  // d()/d[NO3]
  dqdci = -k_r * sc[5];
  J[929] += dqdci; // dwdot[H2O]/d[NO3]
  J[930] -= dqdci; // dwdot[OH]/d[NO3]
  J[952] += dqdci; // dwdot[NO3]/d[NO3]
  J[953] -= dqdci; // dwdot[HONO2]/d[NO3]
  // d()/d[HONO2]
  dqdci = +k_f * sc[6];
  J[962] += dqdci; // dwdot[H2O]/d[HONO2]
  J[963] -= dqdci; // dwdot[OH]/d[HONO2]
  J[985] += dqdci; // dwdot[NO3]/d[HONO2]
  J[986] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1084] += dqdT; // dwdot[NO3]/dT
  J[1085] -= dqdT; // dwdot[HONO2]/dT

  // reaction 145: H + HNO3 <=> H2 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[31];
  k_f = 556 * exp(1.5 * logT - (8252.7533191974) * invT);
  dlnkfdT = 1.5 * invT + (8252.7533191974) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[28] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[31]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[28] += q; // NO3
  wdot[31] -= q; // HNO3
  // d()/d[H2]
  dqdci = -k_r * sc[28];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[61] += dqdci; // dwdot[NO3]/d[H2]
  J[64] -= dqdci; // dwdot[HNO3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[31];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[94] += dqdci; // dwdot[NO3]/d[H]
  J[97] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[NO3]
  dqdci = -k_r * sc[1];
  J[925] += dqdci; // dwdot[H2]/d[NO3]
  J[926] -= dqdci; // dwdot[H]/d[NO3]
  J[952] += dqdci; // dwdot[NO3]/d[NO3]
  J[955] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[2];
  J[1024] += dqdci; // dwdot[H2]/d[HNO3]
  J[1025] -= dqdci; // dwdot[H]/d[HNO3]
  J[1051] += dqdci; // dwdot[NO3]/d[HNO3]
  J[1054] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1084] += dqdT; // dwdot[NO3]/dT
  J[1087] -= dqdT; // dwdot[HNO3]/dT

  // reaction 146: H + HNO3 <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[31];
  k_f = 6.08e-05 * exp(3.3 * logT - (3162.71674458266) * invT);
  dlnkfdT = 3.3 * invT + (3162.71674458266) * invT2;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[25] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[31]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[25] += q; // NO2
  wdot[31] -= q; // HNO3
  // d()/d[H]
  dqdci = +k_f * sc[31];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[91] += dqdci; // dwdot[NO2]/d[H]
  J[97] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[190] += dqdci; // dwdot[NO2]/d[H2O]
  J[196] -= dqdci; // dwdot[HNO3]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[830] += dqdci; // dwdot[H2O]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[856] -= dqdci; // dwdot[HNO3]/d[NO2]
  // d()/d[HNO3]
  dqdci = +k_f * sc[2];
  J[1025] -= dqdci; // dwdot[H]/d[HNO3]
  J[1028] += dqdci; // dwdot[H2O]/d[HNO3]
  J[1048] += dqdci; // dwdot[NO2]/d[HNO3]
  J[1054] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1087] -= dqdT; // dwdot[HNO3]/dT

  // reaction 147: H + HNO3 <=> HONO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[31];
  k_f = 0.382 * exp(2.3 * logT - (3510.43946065372) * invT);
  dlnkfdT = 2.3 * invT + (3510.43946065372) * invT2;
  // reverse
  phi_r = sc[6] * sc[26];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[26] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[31]) + (h_RT[6] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[26] += q; // HONO
  wdot[31] -= q; // HNO3
  // d()/d[H]
  dqdci = +k_f * sc[31];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[92] += dqdci; // dwdot[HONO]/d[H]
  J[97] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[26];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[224] += dqdci; // dwdot[HONO]/d[OH]
  J[229] -= dqdci; // dwdot[HNO3]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[6];
  J[860] -= dqdci; // dwdot[H]/d[HONO]
  J[864] += dqdci; // dwdot[OH]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  J[889] -= dqdci; // dwdot[HNO3]/d[HONO]
  // d()/d[HNO3]
  dqdci = +k_f * sc[2];
  J[1025] -= dqdci; // dwdot[H]/d[HNO3]
  J[1029] += dqdci; // dwdot[OH]/d[HNO3]
  J[1049] += dqdci; // dwdot[HONO]/d[HNO3]
  J[1054] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT
  J[1087] -= dqdT; // dwdot[HNO3]/dT

  // reaction 148: HNO3 + OH <=> H2O + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[31];
  k_f = 10300 * exp(-(-623.988665597852) * invT);
  dlnkfdT = (-623.988665597852) * invT2;
  // reverse
  phi_r = sc[5] * sc[28];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[28] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[31]) + (h_RT[5] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[28] += q; // NO3
  wdot[31] -= q; // HNO3
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[193] += dqdci; // dwdot[NO3]/d[H2O]
  J[196] -= dqdci; // dwdot[HNO3]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[31];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[226] += dqdci; // dwdot[NO3]/d[OH]
  J[229] -= dqdci; // dwdot[HNO3]/d[OH]
  // d()/d[NO3]
  dqdci = -k_r * sc[5];
  J[929] += dqdci; // dwdot[H2O]/d[NO3]
  J[930] -= dqdci; // dwdot[OH]/d[NO3]
  J[952] += dqdci; // dwdot[NO3]/d[NO3]
  J[955] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[6];
  J[1028] += dqdci; // dwdot[H2O]/d[HNO3]
  J[1029] -= dqdci; // dwdot[OH]/d[HNO3]
  J[1051] += dqdci; // dwdot[NO3]/d[HNO3]
  J[1054] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1084] += dqdT; // dwdot[NO3]/dT
  J[1087] -= dqdT; // dwdot[HNO3]/dT

  // reaction 150: H + HON <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 24000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = exp(g_RT[2] - g_RT[2] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[2] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] += q; // HNO
  wdot[24] -= q; // HON
  // d()/d[H]
  dqdci = +k_f * sc[24] - k_r * sc[23];
  J[89] += dqdci; // dwdot[HNO]/d[H]
  J[90] -= dqdci; // dwdot[HON]/d[H]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[783] -= dqdci; // dwdot[HON]/d[HNO]
  // d()/d[HON]
  dqdci = +k_f * sc[2];
  J[815] += dqdci; // dwdot[HNO]/d[HON]
  J[816] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT

  // reaction 151: H + HON <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[13] += q; // NH
  wdot[24] -= q; // HON
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[79] += dqdci; // dwdot[NH]/d[H]
  J[90] -= dqdci; // dwdot[HON]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[211] += dqdci; // dwdot[NH]/d[OH]
  J[222] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[6];
  J[431] -= dqdci; // dwdot[H]/d[NH]
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[442] += dqdci; // dwdot[NH]/d[NH]
  J[453] -= dqdci; // dwdot[HON]/d[NH]
  // d()/d[HON]
  dqdci = +k_f * sc[2];
  J[794] -= dqdci; // dwdot[H]/d[HON]
  J[798] += dqdci; // dwdot[OH]/d[HON]
  J[805] += dqdci; // dwdot[NH]/d[HON]
  J[816] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1069] += dqdT; // dwdot[NH]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT

  // reaction 152: HON + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[10] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[10] += q; // NO
  wdot[24] -= q; // HON
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[156] -= dqdci; // dwdot[HON]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[222] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[354] -= dqdci; // dwdot[HON]/d[NO]
  // d()/d[HON]
  dqdci = +k_f * sc[4];
  J[796] -= dqdci; // dwdot[O]/d[HON]
  J[798] += dqdci; // dwdot[OH]/d[HON]
  J[802] += dqdci; // dwdot[NO]/d[HON]
  J[816] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT

  // reaction 153: HON + OH <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[24];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[26];
  Kc = exp(-g_RT[2] + g_RT[6] + g_RT[24] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[24]) + (h_RT[2] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[6] -= q;  // OH
  wdot[24] -= q; // HON
  wdot[26] += q; // HONO
  // d()/d[H]
  dqdci = -k_r * sc[26];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  J[90] -= dqdci; // dwdot[HON]/d[H]
  J[92] += dqdci; // dwdot[HONO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[222] -= dqdci; // dwdot[HON]/d[OH]
  J[224] += dqdci; // dwdot[HONO]/d[OH]
  // d()/d[HON]
  dqdci = +k_f * sc[6];
  J[794] += dqdci; // dwdot[H]/d[HON]
  J[798] -= dqdci; // dwdot[OH]/d[HON]
  J[816] -= dqdci; // dwdot[HON]/d[HON]
  J[818] += dqdci; // dwdot[HONO]/d[HON]
  // d()/d[HONO]
  dqdci = -k_r * sc[2];
  J[860] += dqdci; // dwdot[H]/d[HONO]
  J[864] -= dqdci; // dwdot[OH]/d[HONO]
  J[882] -= dqdci; // dwdot[HON]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 154: HON + O2 <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[24];
  k_f = 1000000 * exp(-(2499.98039571785) * invT);
  dlnkfdT = (2499.98039571785) * invT2;
  // reverse
  phi_r = sc[6] * sc[25];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[24] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[24]) + (h_RT[6] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // OH
  wdot[24] -= q; // HON
  wdot[25] += q; // NO2
  // d()/d[O2]
  dqdci = +k_f * sc[24];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[123] -= dqdci; // dwdot[HON]/d[O2]
  J[124] += dqdci; // dwdot[NO2]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[201] -= dqdci; // dwdot[O2]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[222] -= dqdci; // dwdot[HON]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HON]
  dqdci = +k_f * sc[3];
  J[795] -= dqdci; // dwdot[O2]/d[HON]
  J[798] += dqdci; // dwdot[OH]/d[HON]
  J[816] -= dqdci; // dwdot[HON]/d[HON]
  J[817] += dqdci; // dwdot[NO2]/d[HON]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[828] -= dqdci; // dwdot[O2]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[849] -= dqdci; // dwdot[HON]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT

  // reaction 156: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[30];
  k_f = 64 * exp(1.835 * logT - (6789.39925503728) * invT);
  dlnkfdT = 1.835 * invT + (6789.39925503728) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[30]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[6] += dqdci;  // dwdot[OH]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[66] += dqdci; // dwdot[N2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[96] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[198] += dqdci; // dwdot[N2]/d[OH]
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[228] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[992] -= dqdci;  // dwdot[H]/d[N2O]
  J[996] += dqdci;  // dwdot[OH]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 157: H + N2O <=> N2 + OHV
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[30];
  k_f = 160000000 * exp(-(25311.7982899774) * invT);
  dlnkfdT = (25311.7982899774) * invT2;
  // reverse
  phi_r = sc[0] * sc[7];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[7] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[30]) + (h_RT[0] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] -= q;  // H
  wdot[7] += q;  // OHV
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[7];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[7] += dqdci;  // dwdot[OHV]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[66] += dqdci; // dwdot[N2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[73] += dqdci; // dwdot[OHV]/d[H]
  J[96] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OHV]
  dqdci = -k_r * sc[0];
  J[231] += dqdci; // dwdot[N2]/d[OHV]
  J[233] -= dqdci; // dwdot[H]/d[OHV]
  J[238] += dqdci; // dwdot[OHV]/d[OHV]
  J[261] -= dqdci; // dwdot[N2O]/d[OHV]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[992] -= dqdci;  // dwdot[H]/d[N2O]
  J[997] += dqdci;  // dwdot[OHV]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1063] += dqdT; // dwdot[OHV]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 158: N2O + O <=> N2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[30];
  k_f = 3690000 * exp(-(8019.26078626401) * invT);
  dlnkfdT = (8019.26078626401) * invT2;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = exp(-g_RT[0] - g_RT[3] + g_RT[4] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[30]) + (h_RT[0] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] += q;  // O2
  wdot[4] -= q;  // O
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[3];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] += dqdci;  // dwdot[O2]/d[N2]
  J[4] -= dqdci;  // dwdot[O]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[99] += dqdci;  // dwdot[N2]/d[O2]
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] -= dqdci; // dwdot[O]/d[O2]
  J[129] -= dqdci; // dwdot[N2O]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[30];
  J[132] += dqdci; // dwdot[N2]/d[O]
  J[135] += dqdci; // dwdot[O2]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[162] -= dqdci; // dwdot[N2O]/d[O]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[993] += dqdci;  // dwdot[O2]/d[N2O]
  J[994] -= dqdci;  // dwdot[O]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 159: N2O + O <=> 2 NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[30];
  k_f = 91500000 * exp(-(13928.5340928088) * invT);
  dlnkfdT = (13928.5340928088) * invT2;
  // reverse
  phi_r = (sc[10] * sc[10]);
  Kc = exp(g_RT[4] - 2.000000 * g_RT[10] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[30]) + (2.000000 * h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;      // O
  wdot[10] += 2 * q; // NO
  wdot[30] -= q;     // N2O
  // d()/d[O]
  dqdci = +k_f * sc[30];
  J[136] -= dqdci;     // dwdot[O]/d[O]
  J[142] += 2 * dqdci; // dwdot[NO]/d[O]
  J[162] -= dqdci;     // dwdot[N2O]/d[O]
  // d()/d[NO]
  dqdci = -k_r * 2.000000 * sc[10];
  J[334] -= dqdci;     // dwdot[O]/d[NO]
  J[340] += 2 * dqdci; // dwdot[NO]/d[NO]
  J[360] -= dqdci;     // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[994] -= dqdci;      // dwdot[O]/d[N2O]
  J[1000] += 2 * dqdci; // dwdot[NO]/d[N2O]
  J[1020] -= dqdci;     // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1060] -= dqdT;     // dwdot[O]/dT
  J[1066] += 2 * dqdT; // dwdot[NO]/dT
  J[1086] -= dqdT;     // dwdot[N2O]/dT

  // reaction 160: N2O + OH <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[30];
  k_f = 1.3e-08 * exp(4.72 * logT - (18397.6013018206) * invT);
  dlnkfdT = 4.72 * invT + (18397.6013018206) * invT2;
  // reverse
  phi_r = sc[0] * sc[9];
  Kc = exp(-g_RT[0] + g_RT[6] - g_RT[9] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[30]) + (h_RT[0] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[6] -= q;  // OH
  wdot[9] += q;  // HO2
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[9];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[6] -= dqdci;  // dwdot[OH]/d[N2]
  J[9] += dqdci;  // dwdot[HO2]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[OH]
  dqdci = +k_f * sc[30];
  J[198] += dqdci; // dwdot[N2]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[207] += dqdci; // dwdot[HO2]/d[OH]
  J[228] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[297] += dqdci; // dwdot[N2]/d[HO2]
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[327] -= dqdci; // dwdot[N2O]/d[HO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[6];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[996] -= dqdci;  // dwdot[OH]/d[N2O]
  J[999] += dqdci;  // dwdot[HO2]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 161: N2O + OH <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[30];
  k_f = 1.2e-10 * exp(4.33 * logT - (12620.6739783824) * invT);
  dlnkfdT = 4.33 * invT + (12620.6739783824) * invT2;
  // reverse
  phi_r = sc[10] * sc[23];
  Kc = exp(g_RT[6] - g_RT[10] - g_RT[23] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[30]) + (h_RT[10] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[10] += q; // NO
  wdot[23] += q; // HNO
  wdot[30] -= q; // N2O
  // d()/d[OH]
  dqdci = +k_f * sc[30];
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  J[228] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[23];
  J[336] -= dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] += dqdci; // dwdot[HNO]/d[NO]
  J[360] -= dqdci; // dwdot[N2O]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[10];
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[789] -= dqdci; // dwdot[N2O]/d[HNO]
  // d()/d[N2O]
  dqdci = +k_f * sc[6];
  J[996] -= dqdci;  // dwdot[OH]/d[N2O]
  J[1000] += dqdci; // dwdot[NO]/d[N2O]
  J[1013] += dqdci; // dwdot[HNO]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 162: N2O + NO <=> N2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[30];
  k_f = 0.53 * exp(2.23 * logT - (23289.3705101082) * invT);
  dlnkfdT = 2.23 * invT + (23289.3705101082) * invT2;
  // reverse
  phi_r = sc[0] * sc[25];
  Kc = exp(-g_RT[0] + g_RT[10] - g_RT[25] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[30]) + (h_RT[0] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[10] -= q; // NO
  wdot[25] += q; // NO2
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[25];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[10] -= dqdci; // dwdot[NO]/d[N2]
  J[25] += dqdci; // dwdot[NO2]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[NO]
  dqdci = +k_f * sc[30];
  J[330] += dqdci; // dwdot[N2]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[355] += dqdci; // dwdot[NO2]/d[NO]
  J[360] -= dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[0];
  J[825] += dqdci; // dwdot[N2]/d[NO2]
  J[835] -= dqdci; // dwdot[NO]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[855] -= dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[10];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[1000] -= dqdci; // dwdot[NO]/d[N2O]
  J[1015] += dqdci; // dwdot[NO2]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 163: 2 NH2 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 170 * exp(1.62 * logT - (5929.40197317701) * invT);
  dlnkfdT = 1.62 * invT + (5929.40197317701) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H2
  wdot[12] -= 2 * q; // NH2
  wdot[18] += q;     // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[34] += dqdci;      // dwdot[H2]/d[H2]
  J[45] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[51] += dqdci;      // dwdot[N2H2]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[12];
  J[397] += dqdci;      // dwdot[H2]/d[NH2]
  J[408] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[414] += dqdci;      // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[1];
  J[595] += dqdci;      // dwdot[H2]/d[N2H2]
  J[606] += -2 * dqdci; // dwdot[NH2]/d[N2H2]
  J[612] += dqdci;      // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1057] += dqdT;      // dwdot[H2]/dT
  J[1068] += -2 * dqdT; // dwdot[NH2]/dT
  J[1074] += dqdT;      // dwdot[N2H2]/dT

  // reaction 164: 2 NH2 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 0.072 * exp(1.88 * logT - (4429.31309241314) * invT);
  dlnkfdT = 1.88 * invT + (4429.31309241314) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[1] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H2
  wdot[12] -= 2 * q; // NH2
  wdot[19] += q;     // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[34] += dqdci;      // dwdot[H2]/d[H2]
  J[45] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[52] += dqdci;      // dwdot[H2NN]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[12];
  J[397] += dqdci;      // dwdot[H2]/d[NH2]
  J[408] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[415] += dqdci;      // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[1];
  J[628] += dqdci;      // dwdot[H2]/d[H2NN]
  J[639] += -2 * dqdci; // dwdot[NH2]/d[H2NN]
  J[646] += dqdci;      // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1057] += dqdT;      // dwdot[H2]/dT
  J[1068] += -2 * dqdT; // dwdot[NH2]/dT
  J[1075] += dqdT;      // dwdot[H2NN]/dT

  // reaction 165: NH + NH2 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[13];
  k_f = 430000000 * exp(-0.272 * logT - (-38.7476832669634) * invT);
  dlnkfdT = -0.272 * invT + (-38.7476832669634) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(-g_RT[2] + g_RT[12] + g_RT[13] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[13]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[12] -= q; // NH2
  wdot[13] -= q; // NH
  wdot[18] += q; // N2H2
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[78] -= dqdci; // dwdot[NH2]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  J[84] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NH2]
  dqdci = +k_f * sc[13];
  J[398] += dqdci; // dwdot[H]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[414] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[12];
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[441] -= dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[447] += dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[596] += dqdci; // dwdot[H]/d[N2H2]
  J[606] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[607] -= dqdci; // dwdot[NH]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 166: HNOH + NH2 <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[22];
  k_f = 1e-05 * exp(3.46 * logT - (-235.002182930804) * invT);
  dlnkfdT = 3.46 * invT + (-235.002182930804) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(-g_RT[6] + g_RT[12] - g_RT[17] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[22]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[12] -= q; // NH2
  wdot[17] += q; // N2H3
  wdot[22] -= q; // HNOH
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[215] += dqdci; // dwdot[N2H3]/d[OH]
  J[220] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[22];
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[413] += dqdci; // dwdot[N2H3]/d[NH2]
  J[418] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[6];
  J[567] += dqdci; // dwdot[OH]/d[N2H3]
  J[573] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[583] -= dqdci; // dwdot[HNOH]/d[N2H3]
  // d()/d[HNOH]
  dqdci = +k_f * sc[12];
  J[732] += dqdci; // dwdot[OH]/d[HNOH]
  J[738] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[743] += dqdci; // dwdot[N2H3]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT

  // reaction 167: HNOH + NH2 <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[22];
  k_f = 88000000000 * exp(-1.08 * logT - (560.080149040653) * invT);
  dlnkfdT = -1.08 * invT + (560.080149040653) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(-g_RT[5] + g_RT[12] - g_RT[19] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[22]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[12] -= q; // NH2
  wdot[19] += q; // H2NN
  wdot[22] -= q; // HNOH
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[184] += dqdci; // dwdot[H2NN]/d[H2O]
  J[187] -= dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[22];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[415] += dqdci; // dwdot[H2NN]/d[NH2]
  J[418] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[5];
  J[632] += dqdci; // dwdot[H2O]/d[H2NN]
  J[639] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[646] += dqdci; // dwdot[H2NN]/d[H2NN]
  J[649] -= dqdci; // dwdot[HNOH]/d[H2NN]
  // d()/d[HNOH]
  dqdci = +k_f * sc[12];
  J[731] += dqdci; // dwdot[H2O]/d[HNOH]
  J[738] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[745] += dqdci; // dwdot[H2NN]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1075] += dqdT; // dwdot[H2NN]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT

  // reaction 169: N2H4 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16];
  k_f = 140000000000000 * exp(-(37696.4636520974) * invT);
  dlnkfdT = (37696.4636520974) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = refC * exp(-g_RT[1] + g_RT[16] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[1] + h_RT[19]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[16] -= q; // N2H4
  wdot[19] += q; // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[49] -= dqdci; // dwdot[N2H4]/d[H2]
  J[52] += dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[N2H4]
  dqdci = +k_f;
  J[529] += dqdci; // dwdot[H2]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[547] += dqdci; // dwdot[H2NN]/d[N2H4]
  // d()/d[H2NN]
  dqdci = -k_r * sc[1];
  J[628] += dqdci; // dwdot[H2]/d[H2NN]
  J[643] -= dqdci; // dwdot[N2H4]/d[H2NN]
  J[646] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1075] += dqdT; // dwdot[H2NN]/dT

  // reaction 170: H + N2H4 <=> H2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 7000000 * exp(-(1258.0416645118) * invT);
  dlnkfdT = (1258.0416645118) * invT2;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[49] -= dqdci; // dwdot[N2H4]/d[H2]
  J[50] += dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[N2H4]/d[H]
  J[83] += dqdci; // dwdot[N2H3]/d[H]
  // d()/d[N2H4]
  dqdci = +k_f * sc[2];
  J[529] += dqdci; // dwdot[H2]/d[N2H4]
  J[530] -= dqdci; // dwdot[H]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[1];
  J[562] += dqdci; // dwdot[H2]/d[N2H3]
  J[563] -= dqdci; // dwdot[H]/d[N2H3]
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT

  // reaction 171: H + N2H4 <=> NH2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 0.23 * exp(1.42 * logT - (4127.38309293031) * invT);
  dlnkfdT = 1.42 * invT + (4127.38309293031) * invT2;
  // reverse
  phi_r = sc[11] * sc[12];
  Kc = exp(g_RT[2] - g_RT[11] - g_RT[12] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[11] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[11] += q; // NH3
  wdot[12] += q; // NH2
  wdot[16] -= q; // N2H4
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[77] += dqdci; // dwdot[NH3]/d[H]
  J[78] += dqdci; // dwdot[NH2]/d[H]
  J[82] -= dqdci; // dwdot[N2H4]/d[H]
  // d()/d[NH3]
  dqdci = -k_r * sc[12];
  J[365] -= dqdci; // dwdot[H]/d[NH3]
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] += dqdci; // dwdot[NH2]/d[NH3]
  J[379] -= dqdci; // dwdot[N2H4]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[11];
  J[398] -= dqdci; // dwdot[H]/d[NH2]
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[412] -= dqdci; // dwdot[N2H4]/d[NH2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[2];
  J[530] -= dqdci; // dwdot[H]/d[N2H4]
  J[539] += dqdci; // dwdot[NH3]/d[N2H4]
  J[540] += dqdci; // dwdot[NH2]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT

  // reaction 172: N2H4 + O <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 150000 * exp(-(-639.085165571994) * invT);
  dlnkfdT = (-639.085165571994) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[148] -= dqdci; // dwdot[N2H4]/d[O]
  J[149] += dqdci; // dwdot[N2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[214] -= dqdci; // dwdot[N2H4]/d[OH]
  J[215] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[532] -= dqdci; // dwdot[O]/d[N2H4]
  J[534] += dqdci; // dwdot[OH]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[6];
  J[565] -= dqdci; // dwdot[O]/d[N2H3]
  J[567] += dqdci; // dwdot[OH]/d[N2H3]
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT

  // reaction 173: N2H4 + O <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 290000 * exp(-(-639.085165571994) * invT);
  dlnkfdT = (-639.085165571994) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // H2O
  wdot[16] -= q; // N2H4
  wdot[18] += q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[137] += dqdci; // dwdot[H2O]/d[O]
  J[148] -= dqdci; // dwdot[N2H4]/d[O]
  J[150] += dqdci; // dwdot[N2H2]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[169] -= dqdci; // dwdot[O]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[181] -= dqdci; // dwdot[N2H4]/d[H2O]
  J[183] += dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[532] -= dqdci; // dwdot[O]/d[N2H4]
  J[533] += dqdci; // dwdot[H2O]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[546] += dqdci; // dwdot[N2H2]/d[N2H4]
  // d()/d[N2H2]
  dqdci = -k_r * sc[5];
  J[598] -= dqdci; // dwdot[O]/d[N2H2]
  J[599] += dqdci; // dwdot[H2O]/d[N2H2]
  J[610] -= dqdci; // dwdot[N2H4]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 174: N2H4 + OH <=> H2O + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[16];
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  dlnkfdT = (-160.022899725901) * invT2;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[16]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[181] -= dqdci; // dwdot[N2H4]/d[H2O]
  J[182] += dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[214] -= dqdci; // dwdot[N2H4]/d[OH]
  J[215] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H4]
  dqdci = +k_f * sc[6];
  J[533] += dqdci; // dwdot[H2O]/d[N2H4]
  J[534] -= dqdci; // dwdot[OH]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[5];
  J[566] += dqdci; // dwdot[H2O]/d[N2H3]
  J[567] -= dqdci; // dwdot[OH]/d[N2H3]
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT

  // reaction 175: N2H4 + NH2 <=> N2H3 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[16];
  k_f = 7.6e-07 * exp(4 * logT - (2037.02106317751) * invT);
  dlnkfdT = 4 * invT + (2037.02106317751) * invT2;
  // reverse
  phi_r = sc[11] * sc[17];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[16]) + (h_RT[11] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  // d()/d[NH3]
  dqdci = -k_r * sc[17];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[379] -= dqdci; // dwdot[N2H4]/d[NH3]
  J[380] += dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[16];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[412] -= dqdci; // dwdot[N2H4]/d[NH2]
  J[413] += dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[12];
  J[539] += dqdci; // dwdot[NH3]/d[N2H4]
  J[540] -= dqdci; // dwdot[NH2]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[11];
  J[572] += dqdci; // dwdot[NH3]/d[N2H3]
  J[573] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT

  // reaction 176: N2H4 + NO <=> HNO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 6e-05 * exp(3.16 * logT - (15521.7180567466) * invT);
  dlnkfdT = 3.16 * invT + (15521.7180567466) * invT2;
  // reverse
  phi_r = sc[17] * sc[23];
  Kc = exp(g_RT[10] + g_RT[16] - g_RT[17] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[17] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NO
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  wdot[23] += q; // HNO
  // d()/d[NO]
  dqdci = +k_f * sc[16];
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[346] -= dqdci; // dwdot[N2H4]/d[NO]
  J[347] += dqdci; // dwdot[N2H3]/d[NO]
  J[353] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[N2H4]
  dqdci = +k_f * sc[10];
  J[538] -= dqdci; // dwdot[NO]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[551] += dqdci; // dwdot[HNO]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[23];
  J[571] -= dqdci; // dwdot[NO]/d[N2H3]
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[584] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[17];
  J[769] -= dqdci; // dwdot[NO]/d[HNO]
  J[775] -= dqdci; // dwdot[N2H4]/d[HNO]
  J[776] += dqdci; // dwdot[N2H3]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 177: N2H4 + NO2 <=> HONO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[25];
  k_f = 8.2e-05 * exp(3.13 * logT - (4458.49965902982) * invT);
  dlnkfdT = 3.13 * invT + (4458.49965902982) * invT2;
  // reverse
  phi_r = sc[17] * sc[26];
  Kc = exp(g_RT[16] - g_RT[17] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[25]) + (h_RT[17] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  wdot[25] -= q; // NO2
  wdot[26] += q; // HONO
  // d()/d[N2H4]
  dqdci = +k_f * sc[25];
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[553] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[554] += dqdci; // dwdot[HONO]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[26];
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[586] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[587] += dqdci; // dwdot[HONO]/d[N2H3]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[841] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[842] += dqdci; // dwdot[N2H3]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[17];
  J[874] -= dqdci; // dwdot[N2H4]/d[HONO]
  J[875] += dqdci; // dwdot[N2H3]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 178: N2H4 + NO2 <=> HNO2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[25];
  k_f = 2.4e-08 * exp(4.14 * logT - (3998.5596264843) * invT);
  dlnkfdT = 4.14 * invT + (3998.5596264843) * invT2;
  // reverse
  phi_r = sc[17] * sc[27];
  Kc = exp(g_RT[16] - g_RT[17] + g_RT[25] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[25]) + (h_RT[17] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  wdot[25] -= q; // NO2
  wdot[27] += q; // HNO2
  // d()/d[N2H4]
  dqdci = +k_f * sc[25];
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[553] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[555] += dqdci; // dwdot[HNO2]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[27];
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[586] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[588] += dqdci; // dwdot[HNO2]/d[N2H3]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[841] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[842] += dqdci; // dwdot[N2H3]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[852] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[17];
  J[907] -= dqdci; // dwdot[N2H4]/d[HNO2]
  J[908] += dqdci; // dwdot[N2H3]/d[HNO2]
  J[916] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[918] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1083] += dqdT; // dwdot[HNO2]/dT

  // reaction 179: H + N2H3 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 240 * exp(1.5 * logT - (-5.0321666580472) * invT);
  dlnkfdT = 1.5 * invT + (-5.0321666580472) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[50] -= dqdci; // dwdot[N2H3]/d[H2]
  J[51] += dqdci; // dwdot[N2H2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[83] -= dqdci; // dwdot[N2H3]/d[H]
  J[84] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[N2H3]
  dqdci = +k_f * sc[2];
  J[562] += dqdci; // dwdot[H2]/d[N2H3]
  J[563] -= dqdci; // dwdot[H]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[1];
  J[595] += dqdci; // dwdot[H2]/d[N2H2]
  J[596] -= dqdci; // dwdot[H]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 180: N2H3 + O <=> N2H2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 170 * exp(1.5 * logT - (-325.077966109849) * invT);
  dlnkfdT = 1.5 * invT + (-325.077966109849) * invT2;
  // reverse
  phi_r = sc[6] * sc[18];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[6] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[149] -= dqdci; // dwdot[N2H3]/d[O]
  J[150] += dqdci; // dwdot[N2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[215] -= dqdci; // dwdot[N2H3]/d[OH]
  J[216] += dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[565] -= dqdci; // dwdot[O]/d[N2H3]
  J[567] += dqdci; // dwdot[OH]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[6];
  J[598] -= dqdci; // dwdot[O]/d[N2H2]
  J[600] += dqdci; // dwdot[OH]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 181: N2H3 + O <=> HNO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[23];
  Kc = exp(g_RT[4] - g_RT[12] + g_RT[17] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[12] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[12] += q; // NH2
  wdot[17] -= q; // N2H3
  wdot[23] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[144] += dqdci; // dwdot[NH2]/d[O]
  J[149] -= dqdci; // dwdot[N2H3]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[23];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[413] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[565] -= dqdci; // dwdot[O]/d[N2H3]
  J[573] += dqdci; // dwdot[NH2]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[584] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[12];
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[771] += dqdci; // dwdot[NH2]/d[HNO]
  J[776] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 182: N2H3 + O => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[12] += q; // NH2
  wdot[17] -= q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[144] += dqdci; // dwdot[NH2]/d[O]
  J[149] -= dqdci; // dwdot[N2H3]/d[O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[563] += dqdci; // dwdot[H]/d[N2H3]
  J[565] -= dqdci; // dwdot[O]/d[N2H3]
  J[571] += dqdci; // dwdot[NO]/d[N2H3]
  J[573] += dqdci; // dwdot[NH2]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT

  // reaction 183: N2H3 + OH <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 1.2 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[182] -= dqdci; // dwdot[N2H3]/d[H2O]
  J[183] += dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[215] -= dqdci; // dwdot[N2H3]/d[OH]
  J[216] += dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[6];
  J[566] += dqdci; // dwdot[H2O]/d[N2H3]
  J[567] -= dqdci; // dwdot[OH]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[5];
  J[599] += dqdci; // dwdot[H2O]/d[N2H2]
  J[600] -= dqdci; // dwdot[OH]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 184: N2H3 + OH <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[17] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[17] -= q; // N2H3
  wdot[19] += q; // H2NN
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[182] -= dqdci; // dwdot[N2H3]/d[H2O]
  J[184] += dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[215] -= dqdci; // dwdot[N2H3]/d[OH]
  J[217] += dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[6];
  J[566] += dqdci; // dwdot[H2O]/d[N2H3]
  J[567] -= dqdci; // dwdot[OH]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[580] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[5];
  J[632] += dqdci; // dwdot[H2O]/d[H2NN]
  J[633] -= dqdci; // dwdot[OH]/d[H2NN]
  J[644] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[646] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1075] += dqdT; // dwdot[H2NN]/dT

  // reaction 185: N2H3 + OH <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 1000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[11] * sc[23];
  Kc = exp(g_RT[6] - g_RT[11] + g_RT[17] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[11] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[11] += q; // NH3
  wdot[17] -= q; // N2H3
  wdot[23] += q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[209] += dqdci; // dwdot[NH3]/d[OH]
  J[215] -= dqdci; // dwdot[N2H3]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[369] -= dqdci; // dwdot[OH]/d[NH3]
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[380] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[386] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * sc[6];
  J[567] -= dqdci; // dwdot[OH]/d[N2H3]
  J[572] += dqdci; // dwdot[NH3]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[584] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[11];
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[770] += dqdci; // dwdot[NH3]/d[HNO]
  J[776] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 186: HO2 + N2H3 <=> H2O2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[17];
  k_f = 0.014 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[8] * sc[18];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[17]) + (h_RT[8] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[H2O2]
  dqdci = -k_r * sc[18];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[281] -= dqdci; // dwdot[N2H3]/d[H2O2]
  J[282] += dqdci; // dwdot[N2H2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[314] -= dqdci; // dwdot[N2H3]/d[HO2]
  J[315] += dqdci; // dwdot[N2H2]/d[HO2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[9];
  J[569] += dqdci; // dwdot[H2O2]/d[N2H3]
  J[570] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[8];
  J[602] += dqdci; // dwdot[H2O2]/d[N2H2]
  J[603] -= dqdci; // dwdot[HO2]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 187: HO2 + N2H3 <=> N2H4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[17];
  k_f = 0.92 * exp(1.94 * logT - (1069.83863150083) * invT);
  dlnkfdT = 1.94 * invT + (1069.83863150083) * invT2;
  // reverse
  phi_r = sc[3] * sc[16];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[17]) + (h_RT[3] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[9] -= q;  // HO2
  wdot[16] += q; // N2H4
  wdot[17] -= q; // N2H3
  // d()/d[O2]
  dqdci = -k_r * sc[16];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[115] += dqdci; // dwdot[N2H4]/d[O2]
  J[116] -= dqdci; // dwdot[N2H3]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[313] += dqdci; // dwdot[N2H4]/d[HO2]
  J[314] -= dqdci; // dwdot[N2H3]/d[HO2]
  // d()/d[N2H4]
  dqdci = -k_r * sc[3];
  J[531] += dqdci; // dwdot[O2]/d[N2H4]
  J[537] -= dqdci; // dwdot[HO2]/d[N2H4]
  J[544] += dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] -= dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = +k_f * sc[9];
  J[564] += dqdci; // dwdot[O2]/d[N2H3]
  J[570] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[577] += dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1072] += dqdT; // dwdot[N2H4]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT

  // reaction 188: N2H3 + NH2 <=> N2H2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[17];
  k_f = 0.92 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[17]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[NH3]
  dqdci = -k_r * sc[18];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[380] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[381] += dqdci; // dwdot[N2H2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[17];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[413] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[414] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[12];
  J[572] += dqdci; // dwdot[NH3]/d[N2H3]
  J[573] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[11];
  J[605] += dqdci; // dwdot[NH3]/d[N2H2]
  J[606] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 189: N2H3 + NH2 <=> H2NN + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[17];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[19];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[17] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[17]) + (h_RT[11] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[17] -= q; // N2H3
  wdot[19] += q; // H2NN
  // d()/d[NH3]
  dqdci = -k_r * sc[19];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[380] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[382] += dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[17];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[413] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[415] += dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[12];
  J[572] += dqdci; // dwdot[NH3]/d[N2H3]
  J[573] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[580] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[11];
  J[638] += dqdci; // dwdot[NH3]/d[H2NN]
  J[639] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[644] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[646] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1075] += dqdT; // dwdot[H2NN]/dT

  // reaction 190: N2H3 + NH <=> N2H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[17];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[18];
  Kc = exp(-g_RT[12] + g_RT[13] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[17]) + (h_RT[12] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[NH2]
  dqdci = -k_r * sc[18];
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[413] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[414] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[17];
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[446] -= dqdci; // dwdot[N2H3]/d[NH]
  J[447] += dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[13];
  J[573] += dqdci; // dwdot[NH2]/d[N2H3]
  J[574] -= dqdci; // dwdot[NH]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[12];
  J[606] += dqdci; // dwdot[NH2]/d[N2H2]
  J[607] -= dqdci; // dwdot[NH]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 191: H + N2H2 <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 110000000 * exp(-(1574.06173063716) * invT);
  dlnkfdT = (1574.06173063716) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[48] += dqdci; // dwdot[NNH]/d[H2]
  J[51] -= dqdci; // dwdot[N2H2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[81] += dqdci; // dwdot[NNH]/d[H]
  J[84] -= dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[1];
  J[496] += dqdci; // dwdot[H2]/d[NNH]
  J[497] -= dqdci; // dwdot[H]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[2];
  J[595] += dqdci; // dwdot[H2]/d[N2H2]
  J[596] -= dqdci; // dwdot[H]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 192: N2H2 + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 330 * exp(1.5 * logT - (250.098682904946) * invT);
  dlnkfdT = 1.5 * invT + (250.098682904946) * invT2;
  // reverse
  phi_r = sc[6] * sc[15];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[6] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[147] += dqdci; // dwdot[NNH]/d[O]
  J[150] -= dqdci; // dwdot[N2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[213] += dqdci; // dwdot[NNH]/d[OH]
  J[216] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[499] -= dqdci; // dwdot[O]/d[NNH]
  J[501] += dqdci; // dwdot[OH]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[4];
  J[598] -= dqdci; // dwdot[O]/d[N2H2]
  J[600] += dqdci; // dwdot[OH]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 193: N2H2 + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(g_RT[4] - g_RT[10] - g_RT[12] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[12] += q; // NH2
  wdot[18] -= q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[144] += dqdci; // dwdot[NH2]/d[O]
  J[150] -= dqdci; // dwdot[N2H2]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[12];
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[342] += dqdci; // dwdot[NH2]/d[NO]
  J[348] -= dqdci; // dwdot[N2H2]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[10];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[406] += dqdci; // dwdot[NO]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[414] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[4];
  J[598] -= dqdci; // dwdot[O]/d[N2H2]
  J[604] += dqdci; // dwdot[NO]/d[N2H2]
  J[606] += dqdci; // dwdot[NH2]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 194: N2H2 + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[18];
  k_f = 5.9e-05 * exp(3.4 * logT - (684.374665494419) * invT);
  dlnkfdT = 3.4 * invT + (684.374665494419) * invT2;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[18]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[180] += dqdci; // dwdot[NNH]/d[H2O]
  J[183] -= dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[213] += dqdci; // dwdot[NNH]/d[OH]
  J[216] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[500] += dqdci; // dwdot[H2O]/d[NNH]
  J[501] -= dqdci; // dwdot[OH]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[6];
  J[599] += dqdci; // dwdot[H2O]/d[N2H2]
  J[600] -= dqdci; // dwdot[OH]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 195: N2H2 + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[18];
  k_f = 8.8e-08 * exp(4.05 * logT - (810.178831945599) * invT);
  dlnkfdT = 4.05 * invT + (810.178831945599) * invT2;
  // reverse
  phi_r = sc[11] * sc[15];
  Kc = exp(-g_RT[11] + g_RT[12] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[18]) + (h_RT[11] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[NH3]
  dqdci = -k_r * sc[15];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[378] += dqdci; // dwdot[NNH]/d[NH3]
  J[381] -= dqdci; // dwdot[N2H2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[411] += dqdci; // dwdot[NNH]/d[NH2]
  J[414] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[11];
  J[506] += dqdci; // dwdot[NH3]/d[NNH]
  J[507] -= dqdci; // dwdot[NH2]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[12];
  J[605] += dqdci; // dwdot[NH3]/d[N2H2]
  J[606] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 196: N2H2 + NH <=> NH2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[18];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[12] * sc[15];
  Kc = exp(-g_RT[12] + g_RT[13] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[18]) + (h_RT[12] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[NH2]
  dqdci = -k_r * sc[15];
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[411] += dqdci; // dwdot[NNH]/d[NH2]
  J[414] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[18];
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[444] += dqdci; // dwdot[NNH]/d[NH]
  J[447] -= dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[NNH]
  dqdci = -k_r * sc[12];
  J[507] += dqdci; // dwdot[NH2]/d[NNH]
  J[508] -= dqdci; // dwdot[NH]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[13];
  J[606] += dqdci; // dwdot[NH2]/d[N2H2]
  J[607] -= dqdci; // dwdot[NH]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 197: N2H2 + NO <=> N2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 4000000 * exp(-(5999.34908972387) * invT);
  dlnkfdT = (5999.34908972387) * invT2;
  // reverse
  phi_r = sc[12] * sc[30];
  Kc = exp(g_RT[10] - g_RT[12] + g_RT[18] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[12] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NO
  wdot[12] += q; // NH2
  wdot[18] -= q; // N2H2
  wdot[30] += q; // N2O
  // d()/d[NO]
  dqdci = +k_f * sc[18];
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[342] += dqdci; // dwdot[NH2]/d[NO]
  J[348] -= dqdci; // dwdot[N2H2]/d[NO]
  J[360] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[30];
  J[406] -= dqdci; // dwdot[NO]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[414] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[426] += dqdci; // dwdot[N2O]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[10];
  J[604] -= dqdci; // dwdot[NO]/d[N2H2]
  J[606] += dqdci; // dwdot[NH2]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[624] += dqdci; // dwdot[N2O]/d[N2H2]
  // d()/d[N2O]
  dqdci = -k_r * sc[12];
  J[1000] -= dqdci; // dwdot[NO]/d[N2O]
  J[1002] += dqdci; // dwdot[NH2]/d[N2O]
  J[1008] -= dqdci; // dwdot[N2H2]/d[N2O]
  J[1020] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT
  J[1086] += dqdT; // dwdot[N2O]/dT

  // reaction 198: H2NN <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19];
  k_f = 3.4e+26 * exp(-4.83 * logT - (23262.7000268206) * invT);
  dlnkfdT = -4.83 * invT + (23262.7000268206) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = refC * exp(-g_RT[2] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[2] + h_RT[15]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[81] += dqdci; // dwdot[NNH]/d[H]
  J[85] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[497] += dqdci; // dwdot[H]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[629] += dqdci; // dwdot[H]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 199: H2NN <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19];
  k_f = 250000000000000 * exp(-(26562.2917045021) * invT);
  dlnkfdT = (26562.2917045021) * invT2;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = refC * exp(-g_RT[0] - g_RT[1] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[0] + h_RT[1]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] += q;  // H2
  wdot[19] -= q; // H2NN
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] += dqdci;  // dwdot[H2]/d[N2]
  J[19] -= dqdci; // dwdot[H2NN]/d[N2]
  // d()/d[H2]
  dqdci = -k_r * sc[0];
  J[33] += dqdci; // dwdot[N2]/d[H2]
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[52] -= dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[627] += dqdci; // dwdot[N2]/d[H2NN]
  J[628] += dqdci; // dwdot[H2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 200: H2NN <=> N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19];
  k_f = 130000000000000 * exp(-(23616.4613428813) * invT);
  dlnkfdT = (23616.4613428813) * invT2;
  // reverse
  phi_r = sc[18];
  Kc = exp(-g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // N2H2
  wdot[19] -= q; // H2NN
  // d()/d[N2H2]
  dqdci = -k_r;
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[613] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[645] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 201: H + H2NN <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 480 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[48] += dqdci; // dwdot[NNH]/d[H2]
  J[52] -= dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[81] += dqdci; // dwdot[NNH]/d[H]
  J[85] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[1];
  J[496] += dqdci; // dwdot[H2]/d[NNH]
  J[497] -= dqdci; // dwdot[H]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[628] += dqdci; // dwdot[H2]/d[H2NN]
  J[629] -= dqdci; // dwdot[H]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 202: H + H2NN <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(g_RT[2] - g_RT[2] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // N2H2
  wdot[19] -= q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[19] - k_r * sc[18];
  J[84] += dqdci; // dwdot[N2H2]/d[H]
  J[85] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[613] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[645] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 203: H2NN + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 330 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[6] * sc[15];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[6] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[147] += dqdci; // dwdot[NNH]/d[O]
  J[151] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[213] += dqdci; // dwdot[NNH]/d[OH]
  J[217] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[499] -= dqdci; // dwdot[O]/d[NNH]
  J[501] += dqdci; // dwdot[OH]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[631] -= dqdci; // dwdot[O]/d[H2NN]
  J[633] += dqdci; // dwdot[OH]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 204: H2NN + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(g_RT[4] - g_RT[10] - g_RT[12] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[12] += q; // NH2
  wdot[19] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[144] += dqdci; // dwdot[NH2]/d[O]
  J[151] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[12];
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[342] += dqdci; // dwdot[NH2]/d[NO]
  J[349] -= dqdci; // dwdot[H2NN]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[10];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[406] += dqdci; // dwdot[NO]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[415] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[631] -= dqdci; // dwdot[O]/d[H2NN]
  J[637] += dqdci; // dwdot[NO]/d[H2NN]
  J[639] += dqdci; // dwdot[NH2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 205: H2NN + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[19];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[19]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[180] += dqdci; // dwdot[NNH]/d[H2O]
  J[184] -= dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[213] += dqdci; // dwdot[NNH]/d[OH]
  J[217] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[500] += dqdci; // dwdot[H2O]/d[NNH]
  J[501] -= dqdci; // dwdot[OH]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[6];
  J[632] += dqdci; // dwdot[H2O]/d[H2NN]
  J[633] -= dqdci; // dwdot[OH]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 206: H2NN + OH => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[19];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] += q;  // H
  wdot[6] -= q;  // OH
  wdot[10] += q; // NO
  wdot[12] += q; // NH2
  wdot[19] -= q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[210] += dqdci; // dwdot[NH2]/d[OH]
  J[217] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[6];
  J[629] += dqdci; // dwdot[H]/d[H2NN]
  J[633] -= dqdci; // dwdot[OH]/d[H2NN]
  J[637] += dqdci; // dwdot[NO]/d[H2NN]
  J[639] += dqdci; // dwdot[NH2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 207: H2NN + HO2 => NH2 + NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q;  // OH
  wdot[9] -= q;  // HO2
  wdot[10] += q; // NO
  wdot[12] += q; // NH2
  wdot[19] -= q; // H2NN
  // d()/d[HO2]
  dqdci = +k_f * sc[19];
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[307] += dqdci; // dwdot[NO]/d[HO2]
  J[309] += dqdci; // dwdot[NH2]/d[HO2]
  J[316] -= dqdci; // dwdot[H2NN]/d[HO2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[9];
  J[633] += dqdci; // dwdot[OH]/d[H2NN]
  J[636] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[637] += dqdci; // dwdot[NO]/d[H2NN]
  J[639] += dqdci; // dwdot[NH2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 208: H2NN + HO2 <=> H2O2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[8] * sc[15];
  Kc = exp(-g_RT[8] + g_RT[9] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[19]) + (h_RT[8] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[H2O2]
  dqdci = -k_r * sc[15];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[279] += dqdci; // dwdot[NNH]/d[H2O2]
  J[283] -= dqdci; // dwdot[H2NN]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[19];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[312] += dqdci; // dwdot[NNH]/d[HO2]
  J[316] -= dqdci; // dwdot[H2NN]/d[HO2]
  // d()/d[NNH]
  dqdci = -k_r * sc[8];
  J[503] += dqdci; // dwdot[H2O2]/d[NNH]
  J[504] -= dqdci; // dwdot[HO2]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[9];
  J[635] += dqdci; // dwdot[H2O2]/d[H2NN]
  J[636] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 209: H2NN + O2 <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 1500000 * exp(-(2999.67454486193) * invT);
  dlnkfdT = (2999.67454486193) * invT2;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(g_RT[3] - g_RT[12] + g_RT[19] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[12] += q; // NH2
  wdot[19] -= q; // H2NN
  wdot[25] += q; // NO2
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[111] += dqdci; // dwdot[NH2]/d[O2]
  J[118] -= dqdci; // dwdot[H2NN]/d[O2]
  J[124] += dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NH2]
  dqdci = -k_r * sc[25];
  J[399] -= dqdci; // dwdot[O2]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[415] -= dqdci; // dwdot[H2NN]/d[NH2]
  J[421] += dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[630] -= dqdci; // dwdot[O2]/d[H2NN]
  J[639] += dqdci; // dwdot[NH2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[652] += dqdci; // dwdot[NO2]/d[H2NN]
  // d()/d[NO2]
  dqdci = -k_r * sc[12];
  J[828] -= dqdci; // dwdot[O2]/d[NO2]
  J[837] += dqdci; // dwdot[NH2]/d[NO2]
  J[844] -= dqdci; // dwdot[H2NN]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT

  // reaction 210: H2NN + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[19];
  k_f = 1.8 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[11] * sc[15];
  Kc = exp(-g_RT[11] + g_RT[12] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[19]) + (h_RT[11] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[NH3]
  dqdci = -k_r * sc[15];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[378] += dqdci; // dwdot[NNH]/d[NH3]
  J[382] -= dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[19];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[411] += dqdci; // dwdot[NNH]/d[NH2]
  J[415] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[11];
  J[506] += dqdci; // dwdot[NH3]/d[NNH]
  J[507] -= dqdci; // dwdot[NH2]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[12];
  J[638] += dqdci; // dwdot[NH3]/d[H2NN]
  J[639] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 211: HNO2 <=> HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[27];
  k_f = 4.68e+24 * exp(-4.52 * logT - (21799.3459626605) * invT);
  dlnkfdT = -4.52 * invT + (21799.3459626605) * invT2;
  // reverse
  phi_r = sc[26];
  Kc = exp(-g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[27]) + (h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[26] += q; // HONO
  wdot[27] -= q; // HNO2
  // d()/d[HONO]
  dqdci = -k_r;
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  J[885] -= dqdci; // dwdot[HNO2]/d[HONO]
  // d()/d[HNO2]
  dqdci = +k_f;
  J[917] += dqdci; // dwdot[HONO]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1082] += dqdT; // dwdot[HONO]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 212: H + NO2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[25];
  k_f = 101000 * exp(0.84 * logT - (-532.403232421393) * invT);
  dlnkfdT = 0.84 * invT + (-532.403232421393) * invT2;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[10] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[25]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[10] += q; // NO
  wdot[25] -= q; // NO2
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[91] -= dqdci; // dwdot[NO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[223] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[332] -= dqdci; // dwdot[H]/d[NO]
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT

  // reaction 213: NO + OH <=> HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 6.35e+17 * exp(-3.97 * logT - (1118.14743141809) * invT);
  dlnkfdT = -3.97 * invT + (1118.14743141809) * invT2;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(g_RT[6] + g_RT[10] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[10] -= q; // NO
  wdot[26] += q; // HONO
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] -= dqdci; // dwdot[NO]/d[OH]
  J[224] += dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[6];
  J[336] -= dqdci; // dwdot[OH]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[356] += dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = -k_r;
  J[864] -= dqdci; // dwdot[OH]/d[HONO]
  J[868] -= dqdci; // dwdot[NO]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 214: NO + OH <=> HNO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 204000000000 * exp(-2.49 * logT - (2578.98541224919) * invT);
  dlnkfdT = -2.49 * invT + (2578.98541224919) * invT2;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(g_RT[6] + g_RT[10] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[10] -= q; // NO
  wdot[27] += q; // HNO2
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] -= dqdci; // dwdot[NO]/d[OH]
  J[225] += dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[6];
  J[336] -= dqdci; // dwdot[OH]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[357] += dqdci; // dwdot[HNO2]/d[NO]
  // d()/d[HNO2]
  dqdci = -k_r;
  J[897] -= dqdci; // dwdot[OH]/d[HNO2]
  J[901] -= dqdci; // dwdot[NO]/d[HNO2]
  J[918] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1083] += dqdT; // dwdot[HNO2]/dT

  // reaction 215: H + HONO <=> H2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[26];
  k_f = 0.00189 * exp(2.83 * logT - (715.926350440375) * invT);
  dlnkfdT = 2.83 * invT + (715.926350440375) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[26]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[25] += q; // NO2
  wdot[26] -= q; // HONO
  // d()/d[H2]
  dqdci = -k_r * sc[25];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[58] += dqdci; // dwdot[NO2]/d[H2]
  J[59] -= dqdci; // dwdot[HONO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[91] += dqdci; // dwdot[NO2]/d[H]
  J[92] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[NO2]
  dqdci = -k_r * sc[1];
  J[826] += dqdci; // dwdot[H2]/d[NO2]
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[859] += dqdci; // dwdot[H2]/d[HONO]
  J[860] -= dqdci; // dwdot[H]/d[HONO]
  J[883] += dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 216: H + HNO2 <=> H2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 0.0233 * exp(2.77 * logT - (-1017.45377659056) * invT);
  dlnkfdT = 2.77 * invT + (-1017.45377659056) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[25] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[25] += q; // NO2
  wdot[27] -= q; // HNO2
  // d()/d[H2]
  dqdci = -k_r * sc[25];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[58] += dqdci; // dwdot[NO2]/d[H2]
  J[60] -= dqdci; // dwdot[HNO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[91] += dqdci; // dwdot[NO2]/d[H]
  J[93] -= dqdci; // dwdot[HNO2]/d[H]
  // d()/d[NO2]
  dqdci = -k_r * sc[1];
  J[826] += dqdci; // dwdot[H2]/d[NO2]
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[852] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[2];
  J[892] += dqdci; // dwdot[H2]/d[HNO2]
  J[893] -= dqdci; // dwdot[H]/d[HNO2]
  J[916] += dqdci; // dwdot[NO2]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 217: H + HONO <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[26];
  k_f = 26000 * exp(0.76 * logT - (2383.23412925115) * invT);
  dlnkfdT = 0.76 * invT + (2383.23412925115) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[10] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[26]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[10] += q; // NO
  wdot[26] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[92] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[NO]/d[H2O]
  J[191] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[332] -= dqdci; // dwdot[H]/d[NO]
  J[335] += dqdci; // dwdot[H2O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[356] -= dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[860] -= dqdci; // dwdot[H]/d[HONO]
  J[863] += dqdci; // dwdot[H2O]/d[HONO]
  J[868] += dqdci; // dwdot[NO]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 218: HNO + OH <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[23];
  k_f = 0.00967 * exp(2.49 * logT - (2643.39714547219) * invT);
  dlnkfdT = 2.49 * invT + (2643.39714547219) * invT2;
  // reverse
  phi_r = sc[2] * sc[26];
  Kc = exp(-g_RT[2] + g_RT[6] + g_RT[23] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[23]) + (h_RT[2] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[6] -= q;  // OH
  wdot[23] -= q; // HNO
  wdot[26] += q; // HONO
  // d()/d[H]
  dqdci = -k_r * sc[26];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  J[89] -= dqdci; // dwdot[HNO]/d[H]
  J[92] += dqdci; // dwdot[HONO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[221] -= dqdci; // dwdot[HNO]/d[OH]
  J[224] += dqdci; // dwdot[HONO]/d[OH]
  // d()/d[HNO]
  dqdci = +k_f * sc[6];
  J[761] += dqdci; // dwdot[H]/d[HNO]
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  J[785] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[HONO]
  dqdci = -k_r * sc[2];
  J[860] += dqdci; // dwdot[H]/d[HONO]
  J[864] -= dqdci; // dwdot[OH]/d[HONO]
  J[881] -= dqdci; // dwdot[HNO]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 219: HNO + OH <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[23];
  k_f = 260000 * exp(0.23 * logT - (2220.69514619623) * invT);
  dlnkfdT = 0.23 * invT + (2220.69514619623) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[10] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[23]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[10] += q; // NO
  wdot[23] -= q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[175] += dqdci; // dwdot[NO]/d[H2O]
  J[188] -= dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[221] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[335] += dqdci; // dwdot[H2O]/d[NO]
  J[336] -= dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[6];
  J[764] += dqdci; // dwdot[H2O]/d[HNO]
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT

  // reaction 220: H2 + N2O <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[30];
  k_f = 7000000 * exp(-(16354.5416386534) * invT);
  dlnkfdT = (16354.5416386534) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[5] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[30]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] -= q;  // H2
  wdot[5] += q;  // H2O
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] -= dqdci;  // dwdot[H2]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H2]
  dqdci = +k_f * sc[30];
  J[33] += dqdci; // dwdot[N2]/d[H2]
  J[34] -= dqdci; // dwdot[H2]/d[H2]
  J[38] += dqdci; // dwdot[H2O]/d[H2]
  J[63] -= dqdci; // dwdot[N2O]/d[H2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[165] += dqdci; // dwdot[N2]/d[H2O]
  J[166] -= dqdci; // dwdot[H2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[195] -= dqdci; // dwdot[N2O]/d[H2O]
  // d()/d[N2O]
  dqdci = +k_f * sc[1];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[991] -= dqdci;  // dwdot[H2]/d[N2O]
  J[995] += dqdci;  // dwdot[H2O]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1057] -= dqdT; // dwdot[H2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 221: NH3 + OH <=> H2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[11];
  k_f = 0.004299 * exp(2.83021 * logT - (-216.785739628673) * invT);
  dlnkfdT = 2.83021 * invT + (-216.785739628673) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[11]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[11] -= q; // NH3
  wdot[12] += q; // NH2
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[176] -= dqdci; // dwdot[NH3]/d[H2O]
  J[177] += dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[209] -= dqdci; // dwdot[NH3]/d[OH]
  J[210] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH3]
  dqdci = +k_f * sc[6];
  J[368] += dqdci; // dwdot[H2O]/d[NH3]
  J[369] -= dqdci; // dwdot[OH]/d[NH3]
  J[374] -= dqdci; // dwdot[NH3]/d[NH3]
  J[375] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[5];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[402] -= dqdci; // dwdot[OH]/d[NH2]
  J[407] -= dqdci; // dwdot[NH3]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1067] -= dqdT; // dwdot[NH3]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT

  // reaction 222: H + HNO2 <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 3400 * exp(1.07 * logT - (2790.83962855298) * invT);
  dlnkfdT = 1.07 * invT + (2790.83962855298) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[10] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[10] += q; // NO
  wdot[27] -= q; // HNO2
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[93] -= dqdci; // dwdot[HNO2]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[NO]/d[H2O]
  J[192] -= dqdci; // dwdot[HNO2]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[332] -= dqdci; // dwdot[H]/d[NO]
  J[335] += dqdci; // dwdot[H2O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[357] -= dqdci; // dwdot[HNO2]/d[NO]
  // d()/d[HNO2]
  dqdci = +k_f * sc[2];
  J[893] -= dqdci; // dwdot[H]/d[HNO2]
  J[896] += dqdci; // dwdot[H2O]/d[HNO2]
  J[901] += dqdci; // dwdot[NO]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 223: H + HNO2 <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 41.4 * exp(1.76 * logT - (2826.56801182511) * invT);
  dlnkfdT = 1.76 * invT + (2826.56801182511) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[23] += q; // HNO
  wdot[27] -= q; // HNO2
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[89] += dqdci; // dwdot[HNO]/d[H]
  J[93] -= dqdci; // dwdot[HNO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  J[225] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[761] -= dqdci; // dwdot[H]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[786] -= dqdci; // dwdot[HNO2]/d[HNO]
  // d()/d[HNO2]
  dqdci = +k_f * sc[2];
  J[893] -= dqdci; // dwdot[H]/d[HNO2]
  J[897] += dqdci; // dwdot[OH]/d[HNO2]
  J[914] += dqdci; // dwdot[HNO]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 226: HO2 + NH2 <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 250000000000 * exp(-1.28 * logT - (586.750632328303) * invT);
  dlnkfdT = -1.28 * invT + (586.750632328303) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(-g_RT[6] + g_RT[9] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[9] -= q;  // HO2
  wdot[12] -= q; // NH2
  wdot[21] += q; // H2NO
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[219] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[309] -= dqdci; // dwdot[NH2]/d[HO2]
  J[318] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[417] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[6];
  J[699] += dqdci; // dwdot[OH]/d[H2NO]
  J[702] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[705] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 227: NH2 + NO <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 26000000000000 * exp(-2.369 * logT - (437.798499250106) * invT);
  dlnkfdT = -2.369 * invT + (437.798499250106) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] - g_RT[5] + g_RT[10] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] += q;  // H2O
  wdot[10] -= q; // NO
  wdot[12] -= q; // NH2
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[10] -= dqdci; // dwdot[NO]/d[N2]
  J[12] -= dqdci; // dwdot[NH2]/d[N2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[165] += dqdci; // dwdot[N2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] -= dqdci; // dwdot[NO]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[330] += dqdci; // dwdot[N2]/d[NO]
  J[335] += dqdci; // dwdot[H2O]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[342] -= dqdci; // dwdot[NH2]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[396] += dqdci; // dwdot[N2]/d[NH2]
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[406] -= dqdci; // dwdot[NO]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT

  // reaction 228: NH2 + NO <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 43000 * exp(0.294 * logT - (-435.785632586887) * invT);
  dlnkfdT = 0.294 * invT + (-435.785632586887) * invT2;
  // reverse
  phi_r = sc[6] * sc[15];
  Kc = exp(-g_RT[6] + g_RT[10] + g_RT[12] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (h_RT[6] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[10] -= q; // NO
  wdot[12] -= q; // NH2
  wdot[15] += q; // NNH
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] -= dqdci; // dwdot[NO]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[213] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[342] -= dqdci; // dwdot[NH2]/d[NO]
  J[345] += dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[406] -= dqdci; // dwdot[NO]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[411] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[501] += dqdci; // dwdot[OH]/d[NNH]
  J[505] -= dqdci; // dwdot[NO]/d[NNH]
  J[507] -= dqdci; // dwdot[NH2]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT

  // reaction 229: H2NO + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 0.00023 * exp(2.994 * logT - (8303.07498577788) * invT);
  dlnkfdT = 2.994 * invT + (8303.07498577788) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[9] += q;  // HO2
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[108] += dqdci; // dwdot[HO2]/d[O2]
  J[120] -= dqdci; // dwdot[H2NO]/d[O2]
  J[122] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[23];
  J[300] -= dqdci; // dwdot[O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[318] -= dqdci; // dwdot[H2NO]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[3];
  J[696] -= dqdci; // dwdot[O2]/d[H2NO]
  J[702] += dqdci; // dwdot[HO2]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[762] -= dqdci; // dwdot[O2]/d[HNO]
  J[768] += dqdci; // dwdot[HO2]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 230: HO2 + NH2 <=> NH3 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 0.017 * exp(1.55 * logT - (1020.02018158617) * invT);
  dlnkfdT = 1.55 * invT + (1020.02018158617) * invT2;
  // reverse
  phi_r = sc[3] * sc[11];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[3] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[9] -= q;  // HO2
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  // d()/d[O2]
  dqdci = -k_r * sc[11];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[110] += dqdci; // dwdot[NH3]/d[O2]
  J[111] -= dqdci; // dwdot[NH2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[308] += dqdci; // dwdot[NH3]/d[HO2]
  J[309] -= dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[NH3]
  dqdci = -k_r * sc[3];
  J[366] += dqdci; // dwdot[O2]/d[NH3]
  J[372] -= dqdci; // dwdot[HO2]/d[NH3]
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[399] += dqdci; // dwdot[O2]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT

  // reaction 231: N2H2 <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18];
  k_f = 3.1e+41 * exp(-8.42 * logT - (38295.7947010708) * invT);
  dlnkfdT = -8.42 * invT + (38295.7947010708) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = refC * exp(-g_RT[2] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18]) + (h_RT[2] + h_RT[15]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[81] += dqdci; // dwdot[NNH]/d[H]
  J[84] -= dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[497] += dqdci; // dwdot[H]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f;
  J[596] += dqdci; // dwdot[H]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 232: HNO + NO2 <=> HONO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[25];
  k_f = 0.0007847 * exp(3.059 * logT - (1953.68838332024) * invT);
  dlnkfdT = 3.059 * invT + (1953.68838332024) * invT2;
  // reverse
  phi_r = sc[10] * sc[26];
  Kc = exp(-g_RT[10] + g_RT[23] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[25]) + (h_RT[10] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO
  wdot[23] -= q; // HNO
  wdot[25] -= q; // NO2
  wdot[26] += q; // HONO
  // d()/d[NO]
  dqdci = -k_r * sc[26];
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  J[356] += dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[25];
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  J[784] -= dqdci; // dwdot[NO2]/d[HNO]
  J[785] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[23];
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[848] -= dqdci; // dwdot[HNO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[10];
  J[868] += dqdci; // dwdot[NO]/d[HONO]
  J[881] -= dqdci; // dwdot[HNO]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 233: HNO + O2 <=> HO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 0.398956 * exp(2.3026 * logT - (7349.68069074425) * invT);
  dlnkfdT = 2.3026 * invT + (7349.68069074425) * invT2;
  // reverse
  phi_r = sc[9] * sc[10];
  Kc = exp(g_RT[3] - g_RT[9] - g_RT[10] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[9] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[9] += q;  // HO2
  wdot[10] += q; // NO
  wdot[23] -= q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[108] += dqdci; // dwdot[HO2]/d[O2]
  J[109] += dqdci; // dwdot[NO]/d[O2]
  J[122] -= dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[10];
  J[300] -= dqdci; // dwdot[O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[307] += dqdci; // dwdot[NO]/d[HO2]
  J[320] -= dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NO]
  dqdci = -k_r * sc[9];
  J[333] -= dqdci; // dwdot[O2]/d[NO]
  J[339] += dqdci; // dwdot[HO2]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[3];
  J[762] -= dqdci; // dwdot[O2]/d[HNO]
  J[768] += dqdci; // dwdot[HO2]/d[HNO]
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT

  // reaction 234: N2H3 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 1.8e+45 * exp(-9.39 * logT - (35296.1201562088) * invT);
  dlnkfdT = -9.39 * invT + (35296.1201562088) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = refC * exp(-g_RT[2] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[2] + h_RT[18]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[83] -= dqdci; // dwdot[N2H3]/d[H]
  J[84] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[N2H3]
  dqdci = +k_f;
  J[563] += dqdci; // dwdot[H]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[596] += dqdci; // dwdot[H]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  amrex::Real c_R[32], dcRdT[32], e_RT[32];
  amrex::Real* eh_RT;
  if (HP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 32; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[1056 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 32; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 32; ++m) {
      dehmixdc += eh_RT[m] * J[k * 33 + m];
    }
    J[k * 33 + 32] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[1088] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[32];

  for (int k = 0; k < 32; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 32; k++) {
    J[1056 + k] *= 1.e-6;
    J[k * 33 + 32] *= 1.e6;
  }
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int consP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 1089; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[32];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real invT = 1.0 / T;
  const amrex::Real invT2 = invT * invT;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 32; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[32];
  gibbs(g_RT, T);

  // compute the species enthalpy
  amrex::Real h_RT[32];
  speciesEnthalpy(h_RT, T);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[32];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 10: H + OH (+M) <=> H2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.5 - 1) * sc[1] + (13 - 1) * sc[5];
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 25000000 * exp(0.234 * logT - (-57.366699901738) * invT);
  dlnkfdT = 0.234 * invT + (-57.366699901738) * invT2;
  // pressure-fall-off
  k_0 = 4.53e+21 * exp(-1.81 * logT - (247.582599575922) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.81 * invT + (247.582599575922) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.73) * exp(-T / 1e-30);
  Fcent2 = 0.73 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(g_RT[2] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[6]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q; // H
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (1 - 1) * dcdc_fac;
    J[2] -= dqdci; // dwdot[H]/d[N2]
    J[5] += dqdci; // dwdot[H2O]/d[N2]
    J[6] -= dqdci; // dwdot[OH]/d[N2]
    // d()/d[H2]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[35] -= dqdci; // dwdot[H]/d[H2]
    J[38] += dqdci; // dwdot[H2O]/d[H2]
    J[39] -= dqdci; // dwdot[OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[6];
    J[68] -= dqdci; // dwdot[H]/d[H]
    J[71] += dqdci; // dwdot[H2O]/d[H]
    J[72] -= dqdci; // dwdot[OH]/d[H]
    // d()/d[O2]
    dqdci = (1 - 1) * dcdc_fac;
    J[101] -= dqdci; // dwdot[H]/d[O2]
    J[104] += dqdci; // dwdot[H2O]/d[O2]
    J[105] -= dqdci; // dwdot[OH]/d[O2]
    // d()/d[H2O]
    dqdci = (13 - 1) * dcdc_fac - k_r;
    J[167] -= dqdci; // dwdot[H]/d[H2O]
    J[170] += dqdci; // dwdot[H2O]/d[H2O]
    J[171] -= dqdci; // dwdot[OH]/d[H2O]
    // d()/d[OH]
    dqdci = +k_f * sc[2];
    J[200] -= dqdci; // dwdot[H]/d[OH]
    J[203] += dqdci; // dwdot[H2O]/d[OH]
    J[204] -= dqdci; // dwdot[OH]/d[OH]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = 1.5 * dcdc_fac;
    dqdc[2] = dcdc_fac + k_f * sc[6];
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 13 * dcdc_fac - k_r;
    dqdc[6] = dcdc_fac + k_f * sc[2];
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] -= dqdc[k];
      J[33 * k + 5] += dqdc[k];
      J[33 * k + 6] -= dqdc[k];
    }
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT

  // reaction 22: H2O2 (+M) <=> 2 OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.5 - 1) * sc[0] + (3.7 - 1) * sc[1] + (0.79 - 1) * sc[3] +
          (5.1 - 1) * sc[5] + (5.2 - 1) * sc[8];
  // forward
  phi_f = sc[8];
  k_f = 2000000000000 * exp(0.9 * logT - (24531.3092413143) * invT);
  dlnkfdT = 0.9 * invT + (24531.3092413143) * invT2;
  // pressure-fall-off
  k_0 = 2.3530181e+24 * exp(-2.2929358 * logT - (24528.4937440691) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.2929358 * invT + (24528.4937440691) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.43) * exp(-T / 1e-30);
  Fcent2 = 0.43 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = (sc[6] * sc[6]);
  Kc = refC * exp(-2.000000 * g_RT[6] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8]) + (2.000000 * h_RT[6]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[6] += 2 * q; // OH
  wdot[8] -= q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[6] += 2 * dqdci; // dwdot[OH]/d[N2]
    J[8] -= dqdci;     // dwdot[H2O2]/d[N2]
    // d()/d[H2]
    dqdci = (3.7 - 1) * dcdc_fac;
    J[39] += 2 * dqdci; // dwdot[OH]/d[H2]
    J[41] -= dqdci;     // dwdot[H2O2]/d[H2]
    // d()/d[O2]
    dqdci = (0.79 - 1) * dcdc_fac;
    J[105] += 2 * dqdci; // dwdot[OH]/d[O2]
    J[107] -= dqdci;     // dwdot[H2O2]/d[O2]
    // d()/d[H2O]
    dqdci = (5.1 - 1) * dcdc_fac;
    J[171] += 2 * dqdci; // dwdot[OH]/d[H2O]
    J[173] -= dqdci;     // dwdot[H2O2]/d[H2O]
    // d()/d[OH]
    dqdci = -k_r * 2.000000 * sc[6];
    J[204] += 2 * dqdci; // dwdot[OH]/d[OH]
    J[206] -= dqdci;     // dwdot[H2O2]/d[OH]
    // d()/d[H2O2]
    dqdci = (5.2 - 1) * dcdc_fac + k_f;
    J[270] += 2 * dqdci; // dwdot[OH]/d[H2O2]
    J[272] -= dqdci;     // dwdot[H2O2]/d[H2O2]
  } else {
    dqdc[0] = 1.5 * dcdc_fac;
    dqdc[1] = 3.7 * dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = 0.79 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 5.1 * dcdc_fac;
    dqdc[6] = dcdc_fac - k_r * 2.000000 * sc[6];
    dqdc[7] = dcdc_fac;
    dqdc[8] = 5.2 * dcdc_fac + k_f;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 6] += 2 * dqdc[k];
      J[33 * k + 8] -= dqdc[k];
    }
  }
  J[1062] += 2 * dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT;     // dwdot[H2O2]/dT

  // reaction 35: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.35 - 1) * sc[1] + (0.9 - 1) * sc[3] + (16.6 - 1) * sc[5];
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 4660000 * exp(0.44 * logT);
  dlnkfdT = 0.44 * invT;
  // pressure-fall-off
  k_0 = 1.225e+19 * exp(-1.2 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.2 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1);
  Fcent2 = 0.5 * exp(-T / 10000000000);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1 - Fcent2 / 10000000000);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[9];
  Kc = refCinv * exp(g_RT[2] + g_RT[3] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q; // H
  wdot[3] -= q; // O2
  wdot[9] += q; // HO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (1.35 - 1) * dcdc_fac;
    J[35] -= dqdci; // dwdot[H]/d[H2]
    J[36] -= dqdci; // dwdot[O2]/d[H2]
    J[42] += dqdci; // dwdot[HO2]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[3];
    J[68] -= dqdci; // dwdot[H]/d[H]
    J[69] -= dqdci; // dwdot[O2]/d[H]
    J[75] += dqdci; // dwdot[HO2]/d[H]
    // d()/d[O2]
    dqdci = (0.9 - 1) * dcdc_fac + k_f * sc[2];
    J[101] -= dqdci; // dwdot[H]/d[O2]
    J[102] -= dqdci; // dwdot[O2]/d[O2]
    J[108] += dqdci; // dwdot[HO2]/d[O2]
    // d()/d[H2O]
    dqdci = (16.6 - 1) * dcdc_fac;
    J[167] -= dqdci; // dwdot[H]/d[H2O]
    J[168] -= dqdci; // dwdot[O2]/d[H2O]
    J[174] += dqdci; // dwdot[HO2]/d[H2O]
    // d()/d[HO2]
    dqdci = -k_r;
    J[299] -= dqdci; // dwdot[H]/d[HO2]
    J[300] -= dqdci; // dwdot[O2]/d[HO2]
    J[306] += dqdci; // dwdot[HO2]/d[HO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = 1.35 * dcdc_fac;
    dqdc[2] = dcdc_fac + k_f * sc[3];
    dqdc[3] = 0.9 * dcdc_fac + k_f * sc[2];
    dqdc[4] = dcdc_fac;
    dqdc[5] = 16.6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac - k_r;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] -= dqdc[k];
      J[33 * k + 3] -= dqdc[k];
      J[33 * k + 9] += dqdc[k];
    }
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT

  // reaction 82: NH2OH (+M) <=> NH2 + OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[20];
  k_f = 1.4e+20 * exp(-1.31 * logT - (32246.1239447664) * invT);
  dlnkfdT = -1.31 * invT + (32246.1239447664) * invT2;
  // pressure-fall-off
  k_0 = 5.4e+37 * exp(-5.96 * logT - (33606.3185924366) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.96 * invT + (33606.3185924366) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.31) * exp(-T / 1e-30);
  Fcent2 = 0.31 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = refC * exp(-g_RT[6] - g_RT[12] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20]) + (h_RT[6] + h_RT[12]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[6] += q;  // OH
  wdot[12] += q; // NH2
  wdot[20] -= q; // NH2OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[OH]
    dqdci = -k_r * sc[12];
    J[204] += dqdci; // dwdot[OH]/d[OH]
    J[210] += dqdci; // dwdot[NH2]/d[OH]
    J[218] -= dqdci; // dwdot[NH2OH]/d[OH]
    // d()/d[NH2]
    dqdci = -k_r * sc[6];
    J[402] += dqdci; // dwdot[OH]/d[NH2]
    J[408] += dqdci; // dwdot[NH2]/d[NH2]
    J[416] -= dqdci; // dwdot[NH2OH]/d[NH2]
    // d()/d[NH2OH]
    dqdci = +k_f;
    J[666] += dqdci; // dwdot[OH]/d[NH2OH]
    J[672] += dqdci; // dwdot[NH2]/d[NH2OH]
    J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac - k_r * sc[12];
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac - k_r * sc[6];
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac + k_f;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 6] += dqdc[k];
      J[33 * k + 12] += dqdc[k];
      J[33 * k + 20] -= dqdc[k];
    }
  }
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 121: NO + O (+M) <=> NO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.8 - 1) * sc[3] + (10 - 1) * sc[5] + (1.8 - 1) * sc[10] +
          (6.2 - 1) * sc[25] + (4.4 - 1) * sc[30];
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 1300000000 * exp(-0.75 * logT);
  dlnkfdT = -0.75 * invT;
  // pressure-fall-off
  k_0 = 9.44e+24 * exp(-2.87 * logT - (780.48904866312) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.87 * invT + (780.48904866312) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.962) * exp(-T / 10);
  Fcent2 = 0.962 * exp(-T / 7962);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 10 - Fcent2 / 7962);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[25];
  Kc = refCinv * exp(g_RT[4] + g_RT[10] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[25]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // O
  wdot[10] -= q; // NO
  wdot[25] += q; // NO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[O2]
    dqdci = (0.8 - 1) * dcdc_fac;
    J[103] -= dqdci; // dwdot[O]/d[O2]
    J[109] -= dqdci; // dwdot[NO]/d[O2]
    J[124] += dqdci; // dwdot[NO2]/d[O2]
    // d()/d[O]
    dqdci = +k_f * sc[10];
    J[136] -= dqdci; // dwdot[O]/d[O]
    J[142] -= dqdci; // dwdot[NO]/d[O]
    J[157] += dqdci; // dwdot[NO2]/d[O]
    // d()/d[H2O]
    dqdci = (10 - 1) * dcdc_fac;
    J[169] -= dqdci; // dwdot[O]/d[H2O]
    J[175] -= dqdci; // dwdot[NO]/d[H2O]
    J[190] += dqdci; // dwdot[NO2]/d[H2O]
    // d()/d[NO]
    dqdci = (1.8 - 1) * dcdc_fac + k_f * sc[4];
    J[334] -= dqdci; // dwdot[O]/d[NO]
    J[340] -= dqdci; // dwdot[NO]/d[NO]
    J[355] += dqdci; // dwdot[NO2]/d[NO]
    // d()/d[NO2]
    dqdci = (6.2 - 1) * dcdc_fac - k_r;
    J[829] -= dqdci; // dwdot[O]/d[NO2]
    J[835] -= dqdci; // dwdot[NO]/d[NO2]
    J[850] += dqdci; // dwdot[NO2]/d[NO2]
    // d()/d[N2O]
    dqdci = (4.4 - 1) * dcdc_fac;
    J[994] -= dqdci;  // dwdot[O]/d[N2O]
    J[1000] -= dqdci; // dwdot[NO]/d[N2O]
    J[1015] += dqdci; // dwdot[NO2]/d[N2O]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = 0.8 * dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * sc[10];
    dqdc[5] = 10 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 1.8 * dcdc_fac + k_f * sc[4];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = 6.2 * dcdc_fac - k_r;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = 4.4 * dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 4] -= dqdc[k];
      J[33 * k + 10] -= dqdc[k];
      J[33 * k + 25] += dqdc[k];
    }
  }
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT

  // reaction 133: NO2 + O (+M) <=> NO3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[4] * sc[25];
  k_f = 3500000 * exp(0.24 * logT);
  dlnkfdT = 0.24 * invT;
  // pressure-fall-off
  k_0 = 2.5e+20 * exp(-1.5 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.5 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.71) * exp(-T / 1e-30);
  Fcent2 = 0.71 * exp(-T / 1700);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1700 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[28];
  Kc = refCinv * exp(g_RT[4] + g_RT[25] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[25]) + (h_RT[28]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // O
  wdot[25] -= q; // NO2
  wdot[28] += q; // NO3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[O]
    dqdci = +k_f * sc[25];
    J[136] -= dqdci; // dwdot[O]/d[O]
    J[157] -= dqdci; // dwdot[NO2]/d[O]
    J[160] += dqdci; // dwdot[NO3]/d[O]
    // d()/d[NO2]
    dqdci = +k_f * sc[4];
    J[829] -= dqdci; // dwdot[O]/d[NO2]
    J[850] -= dqdci; // dwdot[NO2]/d[NO2]
    J[853] += dqdci; // dwdot[NO3]/d[NO2]
    // d()/d[NO3]
    dqdci = -k_r;
    J[928] -= dqdci; // dwdot[O]/d[NO3]
    J[949] -= dqdci; // dwdot[NO2]/d[NO3]
    J[952] += dqdci; // dwdot[NO3]/d[NO3]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * sc[25];
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac + k_f * sc[4];
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac - k_r;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 4] -= dqdc[k];
      J[33 * k + 25] -= dqdc[k];
      J[33 * k + 28] += dqdc[k];
    }
  }
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1084] += dqdT; // dwdot[NO3]/dT

  // reaction 139: NO2 + OH (+M) <=> HONO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[6] * sc[25];
  k_f = 16300000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 3.13e+25 * exp(-3 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.41) * exp(-T / 1e-30);
  Fcent2 = 0.41 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[6] + g_RT[25] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[25]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[6] -= q;  // OH
  wdot[25] -= q; // NO2
  wdot[29] += q; // HONO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[OH]
    dqdci = +k_f * sc[25];
    J[204] -= dqdci; // dwdot[OH]/d[OH]
    J[223] -= dqdci; // dwdot[NO2]/d[OH]
    J[227] += dqdci; // dwdot[HONO2]/d[OH]
    // d()/d[NO2]
    dqdci = +k_f * sc[6];
    J[831] -= dqdci; // dwdot[OH]/d[NO2]
    J[850] -= dqdci; // dwdot[NO2]/d[NO2]
    J[854] += dqdci; // dwdot[HONO2]/d[NO2]
    // d()/d[HONO2]
    dqdci = -k_r;
    J[963] -= dqdci; // dwdot[OH]/d[HONO2]
    J[982] -= dqdci; // dwdot[NO2]/d[HONO2]
    J[986] += dqdci; // dwdot[HONO2]/d[HONO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac + k_f * sc[25];
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac + k_f * sc[6];
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac - k_r;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 6] -= dqdc[k];
      J[33 * k + 25] -= dqdc[k];
      J[33 * k + 29] += dqdc[k];
    }
  }
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1085] += dqdT; // dwdot[HONO2]/dT

  // reaction 168: 2 NH2 (+M) <=> N2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 560000000 * exp(-0.414 * logT - (33.2122999431115) * invT);
  dlnkfdT = -0.414 * invT + (33.2122999431115) * invT2;
  // pressure-fall-off
  k_0 = 1.6e+34 * exp(-5.49 * logT - (999.891514953978) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.49 * invT + (999.891514953978) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.31) * exp(-T / 1e-30);
  Fcent2 = 0.31 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[16];
  Kc = refCinv * exp(2.000000 * g_RT[12] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[16]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[12] -= 2 * q; // NH2
  wdot[16] += q;     // N2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[NH2]
    dqdci = +k_f * 2.000000 * sc[12];
    J[408] += -2 * dqdci; // dwdot[NH2]/d[NH2]
    J[412] += dqdci;      // dwdot[N2H4]/d[NH2]
    // d()/d[N2H4]
    dqdci = -k_r;
    J[540] += -2 * dqdci; // dwdot[NH2]/d[N2H4]
    J[544] += dqdci;      // dwdot[N2H4]/d[N2H4]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac + k_f * 2.000000 * sc[12];
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac - k_r;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 12] += -2 * dqdc[k];
      J[33 * k + 16] += dqdc[k];
    }
  }
  J[1068] += -2 * dqdT; // dwdot[NH2]/dT
  J[1072] += dqdT;      // dwdot[N2H4]/dT

  // reaction 224: H + NH2 (+M) <=> NH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 160000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 3.6e+22 * exp(-1.76 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.76 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[11];
  Kc = refCinv * exp(g_RT[2] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[12]) + (h_RT[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // H
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H]
    dqdci = +k_f * sc[12];
    J[68] -= dqdci; // dwdot[H]/d[H]
    J[77] += dqdci; // dwdot[NH3]/d[H]
    J[78] -= dqdci; // dwdot[NH2]/d[H]
    // d()/d[NH3]
    dqdci = -k_r;
    J[365] -= dqdci; // dwdot[H]/d[NH3]
    J[374] += dqdci; // dwdot[NH3]/d[NH3]
    J[375] -= dqdci; // dwdot[NH2]/d[NH3]
    // d()/d[NH2]
    dqdci = +k_f * sc[2];
    J[398] -= dqdci; // dwdot[H]/d[NH2]
    J[407] += dqdci; // dwdot[NH3]/d[NH2]
    J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac + k_f * sc[12];
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac - k_r;
    dqdc[12] = dcdc_fac + k_f * sc[2];
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] -= dqdc[k];
      J[33 * k + 11] += dqdc[k];
      J[33 * k + 12] -= dqdc[k];
    }
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT

  // reaction 225: H + NO (+M) <=> HNO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha =
    mixture + (1.6 - 1) * sc[0] + sc[1] + (1.5 - 1) * sc[3] + (10 - 1) * sc[5];
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 1520000000 * exp(-0.41 * logT);
  dlnkfdT = -0.41 * invT;
  // pressure-fall-off
  k_0 = 240000000000000 * exp(0.206 * logT - (-779.985831997315) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = 0.206 * invT + (-779.985831997315) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.82) * exp(-T / 1e-30);
  Fcent2 = 0.82 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[23];
  Kc = refCinv * exp(g_RT[2] + g_RT[10] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[23]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // H
  wdot[10] -= q; // NO
  wdot[23] += q; // HNO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (1.6 - 1) * dcdc_fac;
    J[2] -= dqdci;  // dwdot[H]/d[N2]
    J[10] -= dqdci; // dwdot[NO]/d[N2]
    J[23] += dqdci; // dwdot[HNO]/d[N2]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[35] -= dqdci; // dwdot[H]/d[H2]
    J[43] -= dqdci; // dwdot[NO]/d[H2]
    J[56] += dqdci; // dwdot[HNO]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[10];
    J[68] -= dqdci; // dwdot[H]/d[H]
    J[76] -= dqdci; // dwdot[NO]/d[H]
    J[89] += dqdci; // dwdot[HNO]/d[H]
    // d()/d[O2]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[101] -= dqdci; // dwdot[H]/d[O2]
    J[109] -= dqdci; // dwdot[NO]/d[O2]
    J[122] += dqdci; // dwdot[HNO]/d[O2]
    // d()/d[H2O]
    dqdci = (10 - 1) * dcdc_fac;
    J[167] -= dqdci; // dwdot[H]/d[H2O]
    J[175] -= dqdci; // dwdot[NO]/d[H2O]
    J[188] += dqdci; // dwdot[HNO]/d[H2O]
    // d()/d[NO]
    dqdci = +k_f * sc[2];
    J[332] -= dqdci; // dwdot[H]/d[NO]
    J[340] -= dqdci; // dwdot[NO]/d[NO]
    J[353] += dqdci; // dwdot[HNO]/d[NO]
    // d()/d[HNO]
    dqdci = -k_r;
    J[761] -= dqdci; // dwdot[H]/d[HNO]
    J[769] -= dqdci; // dwdot[NO]/d[HNO]
    J[782] += dqdci; // dwdot[HNO]/d[HNO]
  } else {
    dqdc[0] = 1.6 * dcdc_fac;
    dqdc[1] = 2 * dcdc_fac;
    dqdc[2] = dcdc_fac + k_f * sc[10];
    dqdc[3] = 1.5 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 10 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac + k_f * sc[2];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac - k_r;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] -= dqdc[k];
      J[33 * k + 10] -= dqdc[k];
      J[33 * k + 23] += dqdc[k];
    }
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 155: N2O (+M) <=> N2 + O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.7 - 1) * sc[0] + (1.4 - 1) * sc[3] + (12 - 1) * sc[5] +
          (3 - 1) * sc[10] + (3.5 - 1) * sc[30];
  // forward
  phi_f = sc[30];
  k_f = 169000000000 * exp(-(29011.9504336395) * invT);
  dlnkfdT = (29011.9504336395) * invT2;
  // pressure-fall-off
  k_0 = 720000000000000 * exp(-(28889.668783849) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (28889.668783849) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = refC * exp(-g_RT[0] - g_RT[4] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30]) + (h_RT[0] + h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] += q;  // O
  wdot[30] -= q; // N2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (1.7 - 1) * dcdc_fac - k_r * sc[4];
    J[0] += dqdci;  // dwdot[N2]/d[N2]
    J[4] += dqdci;  // dwdot[O]/d[N2]
    J[30] -= dqdci; // dwdot[N2O]/d[N2]
    // d()/d[O2]
    dqdci = (1.4 - 1) * dcdc_fac;
    J[99] += dqdci;  // dwdot[N2]/d[O2]
    J[103] += dqdci; // dwdot[O]/d[O2]
    J[129] -= dqdci; // dwdot[N2O]/d[O2]
    // d()/d[O]
    dqdci = -k_r * sc[0];
    J[132] += dqdci; // dwdot[N2]/d[O]
    J[136] += dqdci; // dwdot[O]/d[O]
    J[162] -= dqdci; // dwdot[N2O]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * dcdc_fac;
    J[165] += dqdci; // dwdot[N2]/d[H2O]
    J[169] += dqdci; // dwdot[O]/d[H2O]
    J[195] -= dqdci; // dwdot[N2O]/d[H2O]
    // d()/d[NO]
    dqdci = (3 - 1) * dcdc_fac;
    J[330] += dqdci; // dwdot[N2]/d[NO]
    J[334] += dqdci; // dwdot[O]/d[NO]
    J[360] -= dqdci; // dwdot[N2O]/d[NO]
    // d()/d[N2O]
    dqdci = (3.5 - 1) * dcdc_fac + k_f;
    J[990] += dqdci;  // dwdot[N2]/d[N2O]
    J[994] += dqdci;  // dwdot[O]/d[N2O]
    J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  } else {
    dqdc[0] = 1.7 * dcdc_fac - k_r * sc[4];
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = 1.4 * dcdc_fac;
    dqdc[4] = dcdc_fac - k_r * sc[0];
    dqdc[5] = 12 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 3 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = 3.5 * dcdc_fac + k_f;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 0] += dqdc[k];
      J[33 * k + 4] += dqdc[k];
      J[33 * k + 30] -= dqdc[k];
    }
  }
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 0: H2 + M <=> 2 H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[5];
  // forward
  phi_f = sc[1];
  k_f = 45770000000000 * exp(-1.4 * logT - (52535.8199100127) * invT);
  dlnkfdT = -1.4 * invT + (52535.8199100127) * invT2;
  // reverse
  phi_r = (sc[2] * sc[2]);
  Kc = refC * exp(g_RT[1] - 2.000000 * g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1]) + (2.000000 * h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H2
  wdot[2] += 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor + k_f;
    J[34] -= dqdci;     // dwdot[H2]/d[H2]
    J[35] += 2 * dqdci; // dwdot[H]/d[H2]
    // d()/d[H]
    dqdci = -k_r * 2.000000 * sc[2];
    J[67] -= dqdci;     // dwdot[H2]/d[H]
    J[68] += 2 * dqdci; // dwdot[H]/d[H]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[166] -= dqdci;     // dwdot[H2]/d[H2O]
    J[167] += 2 * dqdci; // dwdot[H]/d[H2O]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = 2.5 * q_nocor + k_f;
    dqdc[2] = q_nocor - k_r * 2.000000 * sc[2];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 12 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 2] += 2 * dqdc[k];
    }
  }
  J[1057] -= dqdT;     // dwdot[H2]/dT
  J[1058] += 2 * dqdT; // dwdot[H]/dT

  // reaction 4: 2 H + O2 <=> H2 + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[2] * sc[2]) * sc[3];
  k_f = 88000000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[1] * sc[3];
  Kc = refCinv * exp(-g_RT[1] + 2.000000 * g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[2] + h_RT[3]) + (h_RT[1] + h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;     // H2
  wdot[2] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[3];
  J[34] += dqdci;      // dwdot[H2]/d[H2]
  J[35] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[2] * sc[3];
  J[67] += dqdci;      // dwdot[H2]/d[H]
  J[68] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2] * sc[2] - k_r * sc[1];
  J[100] += dqdci;      // dwdot[H2]/d[O2]
  J[101] += -2 * dqdci; // dwdot[H]/d[O2]
  // d()/dT
  J[1057] += dqdT;      // dwdot[H2]/dT
  J[1058] += -2 * dqdT; // dwdot[H]/dT

  // reaction 6: H + O + O2 <=> OH + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3] * sc[4];
  k_f = 73500000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = refCinv * exp(g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[3] + h_RT[4]) + (h_RT[3] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[4];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2] * sc[4] - k_r * sc[6];
  J[101] -= dqdci; // dwdot[H]/d[O2]
  J[103] -= dqdci; // dwdot[O]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[2] * sc[3];
  J[134] -= dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT

  // reaction 7: H + OH + O2 <=> H2O + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3] * sc[6];
  k_f = 25600000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = refCinv * exp(g_RT[2] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[3] + h_RT[6]) + (h_RT[3] + h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[6];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2] * sc[6] - k_r * sc[5];
  J[101] -= dqdci; // dwdot[H]/d[O2]
  J[104] += dqdci; // dwdot[H2O]/d[O2]
  J[105] -= dqdci; // dwdot[OH]/d[O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[2] * sc[3];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT

  // reaction 8: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[5];
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 6165 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(-g_RT[3] + 2.000000 * g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[4] -= 2 * q; // O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor;
    J[36] += dqdci;      // dwdot[O2]/d[H2]
    J[37] += -2 * dqdci; // dwdot[O]/d[H2]
    // d()/d[O2]
    dqdci = -k_r;
    J[102] += dqdci;      // dwdot[O2]/d[O2]
    J[103] += -2 * dqdci; // dwdot[O]/d[O2]
    // d()/d[O]
    dqdci = +k_f * 2.000000 * sc[4];
    J[135] += dqdci;      // dwdot[O2]/d[O]
    J[136] += -2 * dqdci; // dwdot[O]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[168] += dqdci;      // dwdot[O2]/d[H2O]
    J[169] += -2 * dqdci; // dwdot[O]/d[H2O]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = 2.5 * q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor - k_r;
    dqdc[4] = q_nocor + k_f * 2.000000 * sc[4];
    dqdc[5] = 12 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 3] += dqdc[k];
      J[33 * k + 4] += -2 * dqdc[k];
    }
  }
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1060] += -2 * dqdT; // dwdot[O]/dT

  // reaction 12: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[5];
  // forward
  phi_f = sc[2] * sc[4];
  k_f = 4714000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[4]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor;
    J[35] -= dqdci; // dwdot[H]/d[H2]
    J[37] -= dqdci; // dwdot[O]/d[H2]
    J[39] += dqdci; // dwdot[OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[4];
    J[68] -= dqdci; // dwdot[H]/d[H]
    J[70] -= dqdci; // dwdot[O]/d[H]
    J[72] += dqdci; // dwdot[OH]/d[H]
    // d()/d[O]
    dqdci = +k_f * sc[2];
    J[134] -= dqdci; // dwdot[H]/d[O]
    J[136] -= dqdci; // dwdot[O]/d[O]
    J[138] += dqdci; // dwdot[OH]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[167] -= dqdci; // dwdot[H]/d[H2O]
    J[169] -= dqdci; // dwdot[O]/d[H2O]
    J[171] += dqdci; // dwdot[OH]/d[H2O]
    // d()/d[OH]
    dqdci = -k_r;
    J[200] -= dqdci; // dwdot[H]/d[OH]
    J[202] -= dqdci; // dwdot[O]/d[OH]
    J[204] += dqdci; // dwdot[OH]/d[OH]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = 2.5 * q_nocor;
    dqdc[2] = q_nocor + k_f * sc[4];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor + k_f * sc[2];
    dqdc[5] = 12 * q_nocor;
    dqdc[6] = q_nocor - k_r;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] -= dqdc[k];
      J[33 * k + 4] -= dqdc[k];
      J[33 * k + 6] += dqdc[k];
    }
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT

  // reaction 13: H + O + M <=> OHV + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[1] + (0.8 - 1) * sc[3] + (12 - 1) * sc[5];
  // forward
  phi_f = sc[2] * sc[4];
  k_f = 443 * exp(-(5032.1666580472) * invT);
  dlnkfdT = (5032.1666580472) * invT2;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(g_RT[2] + g_RT[4] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[4]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[4] -= q; // O
  wdot[7] += q; // OHV
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[35] -= dqdci; // dwdot[H]/d[H2]
    J[37] -= dqdci; // dwdot[O]/d[H2]
    J[40] += dqdci; // dwdot[OHV]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[4];
    J[68] -= dqdci; // dwdot[H]/d[H]
    J[70] -= dqdci; // dwdot[O]/d[H]
    J[73] += dqdci; // dwdot[OHV]/d[H]
    // d()/d[O2]
    dqdci = (0.8 - 1) * q_nocor;
    J[101] -= dqdci; // dwdot[H]/d[O2]
    J[103] -= dqdci; // dwdot[O]/d[O2]
    J[106] += dqdci; // dwdot[OHV]/d[O2]
    // d()/d[O]
    dqdci = +k_f * sc[2];
    J[134] -= dqdci; // dwdot[H]/d[O]
    J[136] -= dqdci; // dwdot[O]/d[O]
    J[139] += dqdci; // dwdot[OHV]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[167] -= dqdci; // dwdot[H]/d[H2O]
    J[169] -= dqdci; // dwdot[O]/d[H2O]
    J[172] += dqdci; // dwdot[OHV]/d[H2O]
    // d()/d[OHV]
    dqdci = -k_r;
    J[233] -= dqdci; // dwdot[H]/d[OHV]
    J[235] -= dqdci; // dwdot[O]/d[OHV]
    J[238] += dqdci; // dwdot[OHV]/d[OHV]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = 2 * q_nocor;
    dqdc[2] = q_nocor + k_f * sc[4];
    dqdc[3] = 0.8 * q_nocor;
    dqdc[4] = q_nocor + k_f * sc[2];
    dqdc[5] = 12 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor - k_r;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] -= dqdc[k];
      J[33 * k + 4] -= dqdc[k];
      J[33 * k + 7] += dqdc[k];
    }
  }
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1063] += dqdT; // dwdot[OHV]/dT

  // reaction 95: H2NO + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[21];
  k_f = 2.8e+18 * exp(-2.83 * logT - (32666.3098607134) * invT);
  dlnkfdT = -2.83 * invT + (32666.3098607134) * invT2;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = refC * exp(-g_RT[2] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21]) + (h_RT[2] + h_RT[23]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[23];
    J[68] += dqdci; // dwdot[H]/d[H]
    J[87] -= dqdci; // dwdot[H2NO]/d[H]
    J[89] += dqdci; // dwdot[HNO]/d[H]
    // d()/d[H2O]
    dqdci = (10 - 1) * q_nocor;
    J[167] += dqdci; // dwdot[H]/d[H2O]
    J[186] -= dqdci; // dwdot[H2NO]/d[H2O]
    J[188] += dqdci; // dwdot[HNO]/d[H2O]
    // d()/d[H2NO]
    dqdci = +k_f;
    J[695] += dqdci; // dwdot[H]/d[H2NO]
    J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
    J[716] += dqdci; // dwdot[HNO]/d[H2NO]
    // d()/d[HNO]
    dqdci = -k_r * sc[2];
    J[761] += dqdci; // dwdot[H]/d[HNO]
    J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
    J[782] += dqdci; // dwdot[HNO]/d[HNO]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor - k_r * sc[23];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 10 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor + k_f;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor - k_r * sc[2];
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] += dqdc[k];
      J[33 * k + 21] -= dqdc[k];
      J[33 * k + 23] += dqdc[k];
    }
  }
  J[1058] += dqdT; // dwdot[H]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 96: H2NO + M <=> HNOH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[21];
  k_f = 1.1e+23 * exp(-4 * logT - (22141.5332954077) * invT);
  dlnkfdT = -4 * invT + (22141.5332954077) * invT2;
  // reverse
  phi_r = sc[22];
  Kc = exp(g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21]) + (h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[21] -= q; // H2NO
  wdot[22] += q; // HNOH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2O]
    dqdci = (10 - 1) * q_nocor;
    J[186] -= dqdci; // dwdot[H2NO]/d[H2O]
    J[187] += dqdci; // dwdot[HNOH]/d[H2O]
    // d()/d[H2NO]
    dqdci = +k_f;
    J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
    J[715] += dqdci; // dwdot[HNOH]/d[H2NO]
    // d()/d[HNOH]
    dqdci = -k_r;
    J[747] -= dqdci; // dwdot[H2NO]/d[HNOH]
    J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 10 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor + k_f;
    dqdc[22] = q_nocor - k_r;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 21] -= dqdc[k];
      J[33 * k + 22] += dqdc[k];
    }
  }
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 105: HNOH + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[22];
  k_f = 2e+18 * exp(-2.84 * logT - (29656.5709825354) * invT);
  dlnkfdT = -2.84 * invT + (29656.5709825354) * invT2;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = refC * exp(-g_RT[2] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22]) + (h_RT[2] + h_RT[23]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[23];
    J[68] += dqdci; // dwdot[H]/d[H]
    J[88] -= dqdci; // dwdot[HNOH]/d[H]
    J[89] += dqdci; // dwdot[HNO]/d[H]
    // d()/d[H2O]
    dqdci = (10 - 1) * q_nocor;
    J[167] += dqdci; // dwdot[H]/d[H2O]
    J[187] -= dqdci; // dwdot[HNOH]/d[H2O]
    J[188] += dqdci; // dwdot[HNO]/d[H2O]
    // d()/d[HNOH]
    dqdci = +k_f;
    J[728] += dqdci; // dwdot[H]/d[HNOH]
    J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
    J[749] += dqdci; // dwdot[HNO]/d[HNOH]
    // d()/d[HNO]
    dqdci = -k_r * sc[2];
    J[761] += dqdci; // dwdot[H]/d[HNO]
    J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
    J[782] += dqdci; // dwdot[HNO]/d[HNO]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor - k_r * sc[23];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 10 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor + k_f;
    dqdc[23] = q_nocor - k_r * sc[2];
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] += dqdc[k];
      J[33 * k + 22] -= dqdc[k];
      J[33 * k + 23] += dqdc[k];
    }
  }
  J[1058] += dqdT; // dwdot[H]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 138: NO3 + NO2 <=> NO + O2 + NO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[25] * sc[28];
  k_f = 50000 * exp(-(1479.45699746588) * invT);
  dlnkfdT = (1479.45699746588) * invT2;
  // reverse
  phi_r = sc[3] * sc[10] * sc[25];
  Kc = refC * exp(-g_RT[3] - g_RT[10] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25] + h_RT[28]) + (h_RT[3] + h_RT[10] + h_RT[25]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[10] += q; // NO
  wdot[28] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[10] * sc[25];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[109] += dqdci; // dwdot[NO]/d[O2]
  J[127] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[3] * sc[25];
  J[333] += dqdci; // dwdot[O2]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[358] -= dqdci; // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[28] - k_r * sc[3] * sc[10];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[853] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[25];
  J[927] += dqdci; // dwdot[O2]/d[NO3]
  J[934] += dqdci; // dwdot[NO]/d[NO3]
  J[952] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1084] -= dqdT; // dwdot[NO3]/dT

  // reaction 144: HO2 + NO + M <=> HNO3 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 1500000000000 * exp(-3.5 * logT - (1107.07666477038) * invT);
  dlnkfdT = -3.5 * invT + (1107.07666477038) * invT2;
  // reverse
  phi_r = sc[31];
  Kc = refCinv * exp(g_RT[9] + g_RT[10] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[31]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // HO2
  wdot[10] -= q; // NO
  wdot[31] += q; // HNO3
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[HO2]
    dqdci = +k_f * sc[10];
    J[306] -= dqdci; // dwdot[HO2]/d[HO2]
    J[307] -= dqdci; // dwdot[NO]/d[HO2]
    J[328] += dqdci; // dwdot[HNO3]/d[HO2]
    // d()/d[NO]
    dqdci = +k_f * sc[9];
    J[339] -= dqdci; // dwdot[HO2]/d[NO]
    J[340] -= dqdci; // dwdot[NO]/d[NO]
    J[361] += dqdci; // dwdot[HNO3]/d[NO]
    // d()/d[HNO3]
    dqdci = -k_r;
    J[1032] -= dqdci; // dwdot[HO2]/d[HNO3]
    J[1033] -= dqdci; // dwdot[NO]/d[HNO3]
    J[1054] += dqdci; // dwdot[HNO3]/d[HNO3]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor + k_f * sc[10];
    dqdc[10] = q_nocor + k_f * sc[9];
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor - k_r;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 9] -= dqdc[k];
      J[33 * k + 10] -= dqdc[k];
      J[33 * k + 31] += dqdc[k];
    }
  }
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1087] += dqdT; // dwdot[HNO3]/dT

  // reaction 149: HON + M <=> H + NO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (7 - 1) * sc[5];
  // forward
  phi_f = sc[24];
  k_f = 51000000000000 * exp(-1.73 * logT - (8074.11140283673) * invT);
  dlnkfdT = -1.73 * invT + (8074.11140283673) * invT2;
  // reverse
  phi_r = sc[2] * sc[10];
  Kc = refC * exp(-g_RT[2] - g_RT[10] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24]) + (h_RT[2] + h_RT[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[10] += q; // NO
  wdot[24] -= q; // HON
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[10];
    J[68] += dqdci; // dwdot[H]/d[H]
    J[76] += dqdci; // dwdot[NO]/d[H]
    J[90] -= dqdci; // dwdot[HON]/d[H]
    // d()/d[H2O]
    dqdci = (7 - 1) * q_nocor;
    J[167] += dqdci; // dwdot[H]/d[H2O]
    J[175] += dqdci; // dwdot[NO]/d[H2O]
    J[189] -= dqdci; // dwdot[HON]/d[H2O]
    // d()/d[NO]
    dqdci = -k_r * sc[2];
    J[332] += dqdci; // dwdot[H]/d[NO]
    J[340] += dqdci; // dwdot[NO]/d[NO]
    J[354] -= dqdci; // dwdot[HON]/d[NO]
    // d()/d[HON]
    dqdci = +k_f;
    J[794] += dqdci; // dwdot[H]/d[HON]
    J[802] += dqdci; // dwdot[NO]/d[HON]
    J[816] -= dqdci; // dwdot[HON]/d[HON]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor - k_r * sc[10];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 7 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor - k_r * sc[2];
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor + k_f;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] += dqdc[k];
      J[33 * k + 10] += dqdc[k];
      J[33 * k + 24] -= dqdc[k];
    }
  }
  J[1058] += dqdT; // dwdot[H]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT

  // reaction 1: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 3800000 * exp(-(3999.56605981591) * invT);
  dlnkfdT = (3999.56605981591) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H2
  wdot[2] += q; // H
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[34] -= dqdci; // dwdot[H2]/d[H2]
  J[35] += dqdci; // dwdot[H]/d[H2]
  J[37] -= dqdci; // dwdot[O]/d[H2]
  J[39] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[6];
  J[67] -= dqdci; // dwdot[H2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[133] -= dqdci; // dwdot[H2]/d[O]
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[199] -= dqdci; // dwdot[H2]/d[OH]
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT

  // reaction 2: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 880000000 * exp(-(9649.1795668055) * invT);
  dlnkfdT = (9649.1795668055) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H2
  wdot[2] += q; // H
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[34] -= dqdci; // dwdot[H2]/d[H2]
  J[35] += dqdci; // dwdot[H]/d[H2]
  J[37] -= dqdci; // dwdot[O]/d[H2]
  J[39] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[6];
  J[67] -= dqdci; // dwdot[H2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[133] -= dqdci; // dwdot[H2]/d[O]
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[199] -= dqdci; // dwdot[H2]/d[OH]
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT

  // reaction 3: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 220 * exp(1.51 * logT - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H2
  wdot[2] += q; // H
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[6];
  J[34] -= dqdci; // dwdot[H2]/d[H2]
  J[35] += dqdci; // dwdot[H]/d[H2]
  J[38] += dqdci; // dwdot[H2O]/d[H2]
  J[39] -= dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[5];
  J[67] -= dqdci; // dwdot[H2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[166] -= dqdci; // dwdot[H2]/d[H2O]
  J[167] += dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[1];
  J[199] -= dqdci; // dwdot[H2]/d[OH]
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT

  // reaction 5: 2 H + O2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[2] * sc[2]) * sc[3];
  k_f = 40000000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = (sc[6] * sc[6]);
  Kc = refCinv * exp(2.000000 * g_RT[2] + g_RT[3] - 2.000000 * g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[2] + h_RT[3]) + (2.000000 * h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= 2 * q; // H
  wdot[3] -= q;     // O2
  wdot[6] += 2 * q; // OH
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[2] * sc[3];
  J[68] += -2 * dqdci; // dwdot[H]/d[H]
  J[69] -= dqdci;      // dwdot[O2]/d[H]
  J[72] += 2 * dqdci;  // dwdot[OH]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2] * sc[2];
  J[101] += -2 * dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci;      // dwdot[O2]/d[O2]
  J[105] += 2 * dqdci;  // dwdot[OH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[6];
  J[200] += -2 * dqdci; // dwdot[H]/d[OH]
  J[201] -= dqdci;      // dwdot[O2]/d[OH]
  J[204] += 2 * dqdci;  // dwdot[OH]/d[OH]
  // d()/dT
  J[1058] += -2 * dqdT; // dwdot[H]/dT
  J[1059] -= dqdT;      // dwdot[O2]/dT
  J[1062] += 2 * dqdT;  // dwdot[OH]/dT

  // reaction 9: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 104000000 * exp(-(7692.16995349094) * invT);
  dlnkfdT = (7692.16995349094) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[2] + g_RT[3] - g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[3] -= q; // O2
  wdot[4] += q; // O
  wdot[6] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[69] -= dqdci; // dwdot[O2]/d[H]
  J[70] += dqdci; // dwdot[O]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2];
  J[101] -= dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[O]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[134] -= dqdci; // dwdot[H]/d[O]
  J[135] -= dqdci; // dwdot[O2]/d[O]
  J[136] += dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[4];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[201] -= dqdci; // dwdot[O2]/d[OH]
  J[202] += dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT

  // reaction 11: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 2.88 * exp(1.79 * logT - (-880.629165158259) * invT);
  dlnkfdT = 1.79 * invT + (-880.629165158259) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(-g_RT[4] - g_RT[5] + 2.000000 * g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;     // O
  wdot[5] += q;     // H2O
  wdot[6] -= 2 * q; // OH
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[136] += dqdci;      // dwdot[O]/d[O]
  J[137] += dqdci;      // dwdot[H2O]/d[O]
  J[138] += -2 * dqdci; // dwdot[OH]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[169] += dqdci;      // dwdot[O]/d[H2O]
  J[170] += dqdci;      // dwdot[H2O]/d[H2O]
  J[171] += -2 * dqdci; // dwdot[OH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[6];
  J[202] += dqdci;      // dwdot[O]/d[OH]
  J[203] += dqdci;      // dwdot[H2O]/d[OH]
  J[204] += -2 * dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1060] += dqdT;      // dwdot[O]/dT
  J[1061] += dqdT;      // dwdot[H2O]/dT
  J[1062] += -2 * dqdT; // dwdot[OH]/dT

  // reaction 14: H2O + OHV <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 5920000 * exp(0.5 * logT - (-432.766332592059) * invT);
  dlnkfdT = 0.5 * invT + (-432.766332592059) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[5] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[H2O]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[171] += dqdci; // dwdot[OH]/d[H2O]
  J[172] -= dqdci; // dwdot[OHV]/d[H2O]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[5];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 15: H2 + OHV <=> H2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 2950000 * exp(0.5 * logT - (-223.428199617296) * invT);
  dlnkfdT = 0.5 * invT + (-223.428199617296) * invT2;
  // reverse
  phi_r = sc[1] * sc[6];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[1] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[H2]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[39] += dqdci; // dwdot[OH]/d[H2]
  J[40] -= dqdci; // dwdot[OHV]/d[H2]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[1];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 16: N2 + OHV <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[7];
  k_f = 2100000 * exp(0.5 * logT - (-242.550432917875) * invT);
  dlnkfdT = 0.5 * invT + (-242.550432917875) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(g_RT[0] - g_RT[0] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[7]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[N2]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[6] += dqdci; // dwdot[OH]/d[N2]
  J[7] -= dqdci; // dwdot[OHV]/d[N2]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[0];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 17: OH + OHV <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[7];
  k_f = 1500000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = (sc[6] * sc[6]);
  Kc = exp(g_RT[6] - 2.000000 * g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[7]) + (2.000000 * h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[OH]
  dqdci = +k_f * sc[7] - k_r * 2.000000 * sc[6];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[6];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 18: H + OHV <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 1500000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[2] - g_RT[2] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[H]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[73] -= dqdci; // dwdot[OHV]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[2];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 19: OHV <=> OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7];
  k_f = 1400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6];
  Kc = exp(-g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7]) + (h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[OH]
  dqdci = -k_r;
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f;
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 20: O2 + OHV <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 2100000 * exp(0.5 * logT - (-242.550432917875) * invT);
  dlnkfdT = 0.5 * invT + (-242.550432917875) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(g_RT[3] - g_RT[3] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[O2]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[106] -= dqdci; // dwdot[OHV]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[3];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 21: O + OHV <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 1500000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[4] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q; // OH
  wdot[7] -= q; // OHV
  // d()/d[O]
  dqdci = +k_f * sc[7] - k_r * sc[6];
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[139] -= dqdci; // dwdot[OHV]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[4];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[205] -= dqdci; // dwdot[OHV]/d[OH]
  // d()/d[OHV]
  dqdci = +k_f * sc[4];
  J[237] += dqdci; // dwdot[OH]/d[OHV]
  J[238] -= dqdci; // dwdot[OHV]/d[OHV]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1063] -= dqdT; // dwdot[OHV]/dT

  // reaction 23: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  dlnkfdT = (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[6] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[8]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[5] += q; // H2O
  wdot[6] += q; // OH
  wdot[8] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[74] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] += dqdci; // dwdot[OH]/d[H2O]
  J[173] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[206] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[266] -= dqdci; // dwdot[H]/d[H2O2]
  J[269] += dqdci; // dwdot[H2O]/d[H2O2]
  J[270] += dqdci; // dwdot[OH]/d[H2O2]
  J[272] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT; // dwdot[H2O2]/dT

  // reaction 24: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 5.02 * exp(2.07 * logT - (2163.83166296029) * invT);
  dlnkfdT = 2.07 * invT + (2163.83166296029) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[8] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[8]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H2
  wdot[2] -= q; // H
  wdot[8] -= q; // H2O2
  wdot[9] += q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[41] -= dqdci; // dwdot[H2O2]/d[H2]
  J[42] += dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[74] -= dqdci; // dwdot[H2O2]/d[H]
  J[75] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[265] += dqdci; // dwdot[H2]/d[H2O2]
  J[266] -= dqdci; // dwdot[H]/d[H2O2]
  J[272] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[1];
  J[298] += dqdci; // dwdot[H2]/d[HO2]
  J[299] -= dqdci; // dwdot[H]/d[HO2]
  J[305] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1064] -= dqdT; // dwdot[H2O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT

  // reaction 25: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 9.55 * exp(2 * logT - (1997.77016324474) * invT);
  dlnkfdT = 2 * invT + (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[6] * sc[9];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[8] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[8]) + (h_RT[6] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  wdot[8] -= q; // H2O2
  wdot[9] += q; // HO2
  // d()/d[O]
  dqdci = +k_f * sc[8];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[140] -= dqdci; // dwdot[H2O2]/d[O]
  J[141] += dqdci; // dwdot[HO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[206] -= dqdci; // dwdot[H2O2]/d[OH]
  J[207] += dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[268] -= dqdci; // dwdot[O]/d[H2O2]
  J[270] += dqdci; // dwdot[OH]/d[H2O2]
  J[272] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[301] -= dqdci; // dwdot[O]/d[HO2]
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[305] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT; // dwdot[H2O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT

  // reaction 26: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[8];
  k_f = 1740000 * exp(-(160.022899725901) * invT);
  dlnkfdT = (160.022899725901) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[8] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  wdot[8] -= q; // H2O2
  wdot[9] += q; // HO2
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[173] -= dqdci; // dwdot[H2O2]/d[H2O]
  J[174] += dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[206] -= dqdci; // dwdot[H2O2]/d[OH]
  J[207] += dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[6];
  J[269] += dqdci; // dwdot[H2O]/d[H2O2]
  J[270] -= dqdci; // dwdot[OH]/d[H2O2]
  J[272] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[305] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT; // dwdot[H2O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT

  // reaction 27: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[8];
  k_f = 75900000 * exp(-(3657.88194373451) * invT);
  dlnkfdT = (3657.88194373451) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[8] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  wdot[8] -= q; // H2O2
  wdot[9] += q; // HO2
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[173] -= dqdci; // dwdot[H2O2]/d[H2O]
  J[174] += dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[206] -= dqdci; // dwdot[H2O2]/d[OH]
  J[207] += dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[6];
  J[269] += dqdci; // dwdot[H2O]/d[H2O2]
  J[270] -= dqdci; // dwdot[OH]/d[H2O2]
  J[272] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[305] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT; // dwdot[H2O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT

  // reaction 28: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 2.8 * exp(2.09 * logT - (-730.167382082648) * invT);
  dlnkfdT = 2.09 * invT + (-730.167382082648) * invT2;
  // reverse
  phi_r = sc[1] * sc[3];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[1] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H2
  wdot[2] -= q; // H
  wdot[3] += q; // O2
  wdot[9] -= q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[3];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[36] += dqdci; // dwdot[O2]/d[H2]
  J[42] -= dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[9];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[69] += dqdci; // dwdot[O2]/d[H]
  J[75] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = -k_r * sc[1];
  J[100] += dqdci; // dwdot[H2]/d[O2]
  J[101] -= dqdci; // dwdot[H]/d[O2]
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[298] += dqdci; // dwdot[H2]/d[HO2]
  J[299] -= dqdci; // dwdot[H]/d[HO2]
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT

  // reaction 29: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 70790000 * exp(-(148.448916412392) * invT);
  dlnkfdT = (148.448916412392) * invT2;
  // reverse
  phi_r = (sc[6] * sc[6]);
  Kc = exp(g_RT[2] - 2.000000 * g_RT[6] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (2.000000 * h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;     // H
  wdot[6] += 2 * q; // OH
  wdot[9] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[9];
  J[68] -= dqdci;     // dwdot[H]/d[H]
  J[72] += 2 * dqdci; // dwdot[OH]/d[H]
  J[75] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[6];
  J[200] -= dqdci;     // dwdot[H]/d[OH]
  J[204] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[299] -= dqdci;     // dwdot[H]/d[HO2]
  J[303] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1058] -= dqdT;     // dwdot[H]/dT
  J[1062] += 2 * dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT;     // dwdot[HO2]/dT

  // reaction 30: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 32500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[6] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[4] -= q; // O
  wdot[6] += q; // OH
  wdot[9] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] -= dqdci; // dwdot[O]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[9];
  J[135] += dqdci; // dwdot[O2]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[141] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[201] += dqdci; // dwdot[O2]/d[OH]
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[301] -= dqdci; // dwdot[O]/d[HO2]
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT

  // reaction 31: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[9];
  k_f = 193000000000000 * exp(-2.49 * logT - (293.999304829749) * invT);
  dlnkfdT = -2.49 * invT + (293.999304829749) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] - g_RT[5] + g_RT[6] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[9]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  wdot[9] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[104] += dqdci; // dwdot[H2O]/d[O2]
  J[105] -= dqdci; // dwdot[OH]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[168] += dqdci; // dwdot[O2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[174] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[201] += dqdci; // dwdot[O2]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[6];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT

  // reaction 32: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[9];
  k_f = 1210 * exp(1.24 * logT - (-657.996047872935) * invT);
  dlnkfdT = 1.24 * invT + (-657.996047872935) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] - g_RT[5] + g_RT[6] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[9]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[5] += q; // H2O
  wdot[6] -= q; // OH
  wdot[9] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[104] += dqdci; // dwdot[H2O]/d[O2]
  J[105] -= dqdci; // dwdot[OH]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[168] += dqdci; // dwdot[O2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[174] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[201] += dqdci; // dwdot[O2]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[6];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT

  // reaction 33: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[9] * sc[9]);
  k_f = 12140 * exp(0.422 * logT - (-745.022338057204) * invT);
  dlnkfdT = 0.422 * invT + (-745.022338057204) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(-g_RT[3] - g_RT[8] + 2.000000 * g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[9]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[8] += q;     // H2O2
  wdot[9] -= 2 * q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[8];
  J[102] += dqdci;      // dwdot[O2]/d[O2]
  J[107] += dqdci;      // dwdot[H2O2]/d[O2]
  J[108] += -2 * dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[267] += dqdci;      // dwdot[O2]/d[H2O2]
  J[272] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[273] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[9];
  J[300] += dqdci;      // dwdot[O2]/d[HO2]
  J[305] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[306] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1064] += dqdT;      // dwdot[H2O2]/dT
  J[1065] += -2 * dqdT; // dwdot[HO2]/dT

  // reaction 34: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[9] * sc[9]);
  k_f = 16880000000 * exp(-0.681 * logT - (6507.42682852026) * invT);
  dlnkfdT = -0.681 * invT + (6507.42682852026) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(-g_RT[3] - g_RT[8] + 2.000000 * g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[9]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[8] += q;     // H2O2
  wdot[9] -= 2 * q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[8];
  J[102] += dqdci;      // dwdot[O2]/d[O2]
  J[107] += dqdci;      // dwdot[H2O2]/d[O2]
  J[108] += -2 * dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[267] += dqdci;      // dwdot[O2]/d[H2O2]
  J[272] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[273] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[9];
  J[300] += dqdci;      // dwdot[O2]/d[HO2]
  J[305] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[306] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1064] += dqdT;      // dwdot[H2O2]/dT
  J[1065] += -2 * dqdT; // dwdot[HO2]/dT

  // reaction 36: H + NH3 <=> H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 0.64 * exp(2.39 * logT - (5118.2167078998) * invT);
  dlnkfdT = 2.39 * invT + (5118.2167078998) * invT2;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[11] -= q; // NH3
  wdot[12] += q; // NH2
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[44] -= dqdci; // dwdot[NH3]/d[H2]
  J[45] += dqdci; // dwdot[NH2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[NH3]/d[H]
  J[78] += dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH3]
  dqdci = +k_f * sc[2];
  J[364] += dqdci; // dwdot[H2]/d[NH3]
  J[365] -= dqdci; // dwdot[H]/d[NH3]
  J[374] -= dqdci; // dwdot[NH3]/d[NH3]
  J[375] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[1];
  J[397] += dqdci; // dwdot[H2]/d[NH2]
  J[398] -= dqdci; // dwdot[H]/d[NH2]
  J[407] -= dqdci; // dwdot[NH3]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1067] -= dqdT; // dwdot[NH3]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT

  // reaction 37: NH3 + O <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 9.4 * exp(1.94 * logT - (3250.77966109849) * invT);
  dlnkfdT = 1.94 * invT + (3250.77966109849) * invT2;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[11] -= q; // NH3
  wdot[12] += q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[143] -= dqdci; // dwdot[NH3]/d[O]
  J[144] += dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[209] -= dqdci; // dwdot[NH3]/d[OH]
  J[210] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH3]
  dqdci = +k_f * sc[4];
  J[367] -= dqdci; // dwdot[O]/d[NH3]
  J[369] += dqdci; // dwdot[OH]/d[NH3]
  J[374] -= dqdci; // dwdot[NH3]/d[NH3]
  J[375] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[6];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[407] -= dqdci; // dwdot[NH3]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1067] -= dqdT; // dwdot[NH3]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT

  // reaction 38: HO2 + NH3 <=> H2O2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[11];
  k_f = 300000 * exp(-(11070.7666477038) * invT);
  dlnkfdT = (11070.7666477038) * invT2;
  // reverse
  phi_r = sc[8] * sc[12];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[11]) + (h_RT[8] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[11] -= q; // NH3
  wdot[12] += q; // NH2
  // d()/d[H2O2]
  dqdci = -k_r * sc[12];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[275] -= dqdci; // dwdot[NH3]/d[H2O2]
  J[276] += dqdci; // dwdot[NH2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[308] -= dqdci; // dwdot[NH3]/d[HO2]
  J[309] += dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[NH3]
  dqdci = +k_f * sc[9];
  J[371] += dqdci; // dwdot[H2O2]/d[NH3]
  J[372] -= dqdci; // dwdot[HO2]/d[NH3]
  J[374] -= dqdci; // dwdot[NH3]/d[NH3]
  J[375] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[8];
  J[404] += dqdci; // dwdot[H2O2]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[407] -= dqdci; // dwdot[NH3]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1067] -= dqdT; // dwdot[NH3]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT

  // reaction 39: H2 + NH <=> H + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 21000000 * exp(-(7758.09133671136) * invT);
  dlnkfdT = (7758.09133671136) * invT2;
  // reverse
  phi_r = sc[2] * sc[12];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[13]) + (h_RT[2] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H2
  wdot[2] += q;  // H
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  // d()/d[H2]
  dqdci = +k_f * sc[13];
  J[34] -= dqdci; // dwdot[H2]/d[H2]
  J[35] += dqdci; // dwdot[H]/d[H2]
  J[45] += dqdci; // dwdot[NH2]/d[H2]
  J[46] -= dqdci; // dwdot[NH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[67] -= dqdci; // dwdot[H2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[78] += dqdci; // dwdot[NH2]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[NH2]
  dqdci = -k_r * sc[2];
  J[397] -= dqdci; // dwdot[H2]/d[NH2]
  J[398] += dqdci; // dwdot[H]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[1];
  J[430] -= dqdci; // dwdot[H2]/d[NH]
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT

  // reaction 40: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 660000000 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[2] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[12] -= q; // NH2
  wdot[23] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[78] -= dqdci; // dwdot[NH2]/d[H]
  J[89] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[144] -= dqdci; // dwdot[NH2]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[398] += dqdci; // dwdot[H]/d[NH2]
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[761] += dqdci; // dwdot[H]/d[HNO]
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 41: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 7000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[12] -= q; // NH2
  wdot[13] += q; // NH
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[144] -= dqdci; // dwdot[NH2]/d[O]
  J[145] += dqdci; // dwdot[NH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[211] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[409] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[6];
  J[433] -= dqdci; // dwdot[O]/d[NH]
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[441] -= dqdci; // dwdot[NH2]/d[NH]
  J[442] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1069] += dqdT; // dwdot[NH]/dT

  // reaction 42: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 8.6e-07 * exp(4.01 * logT - (841.881481891296) * invT);
  dlnkfdT = 4.01 * invT + (841.881481891296) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[12] -= q; // NH2
  wdot[13] += q; // NH
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[144] -= dqdci; // dwdot[NH2]/d[O]
  J[145] += dqdci; // dwdot[NH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[211] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[409] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[6];
  J[433] -= dqdci; // dwdot[O]/d[NH]
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[441] -= dqdci; // dwdot[NH2]/d[NH]
  J[442] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1069] += dqdT; // dwdot[NH]/dT

  // reaction 43: NH2 + OH <=> H2O + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 3.3 * exp(1.949 * logT - (-109.198016479624) * invT);
  dlnkfdT = 1.949 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[5] * sc[13];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[5] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[12] -= q; // NH2
  wdot[13] += q; // NH
  // d()/d[H2O]
  dqdci = -k_r * sc[13];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[178] += dqdci; // dwdot[NH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[211] += dqdci; // dwdot[NH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[6];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[402] -= dqdci; // dwdot[OH]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[409] += dqdci; // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[5];
  J[434] += dqdci; // dwdot[H2O]/d[NH]
  J[435] -= dqdci; // dwdot[OH]/d[NH]
  J[441] -= dqdci; // dwdot[NH2]/d[NH]
  J[442] += dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1069] += dqdT; // dwdot[NH]/dT

  // reaction 44: HO2 + NH2 <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 16 * exp(0.55 * logT - (264.188749547478) * invT);
  dlnkfdT = 0.55 * invT + (264.188749547478) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[9] -= q;  // HO2
  wdot[12] -= q; // NH2
  wdot[23] += q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[174] -= dqdci; // dwdot[HO2]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[188] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[309] -= dqdci; // dwdot[NH2]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[764] += dqdci; // dwdot[H2O]/d[HNO]
  J[768] -= dqdci; // dwdot[HO2]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 45: HO2 + NH2 <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 5700000000 * exp(-1.12 * logT - (355.774182723937) * invT);
  dlnkfdT = -1.12 * invT + (355.774182723937) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[9] -= q;  // HO2
  wdot[12] -= q; // NH2
  wdot[23] += q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[174] -= dqdci; // dwdot[HO2]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[188] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[309] -= dqdci; // dwdot[NH2]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[764] += dqdci; // dwdot[H2O]/d[HNO]
  J[768] -= dqdci; // dwdot[HO2]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 46: HO2 + NH2 <=> H2O + HON
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 21 * exp(0.64 * logT - (408.108715967628) * invT);
  dlnkfdT = 0.64 * invT + (408.108715967628) * invT2;
  // reverse
  phi_r = sc[5] * sc[24];
  Kc = exp(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[5] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[9] -= q;  // HO2
  wdot[12] -= q; // NH2
  wdot[24] += q; // HON
  // d()/d[H2O]
  dqdci = -k_r * sc[24];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[174] -= dqdci; // dwdot[HO2]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[189] += dqdci; // dwdot[HON]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[302] += dqdci; // dwdot[H2O]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[309] -= dqdci; // dwdot[NH2]/d[HO2]
  J[321] += dqdci; // dwdot[HON]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[420] += dqdci; // dwdot[HON]/d[NH2]
  // d()/d[HON]
  dqdci = -k_r * sc[5];
  J[797] += dqdci; // dwdot[H2O]/d[HON]
  J[801] -= dqdci; // dwdot[HO2]/d[HON]
  J[804] -= dqdci; // dwdot[NH2]/d[HON]
  J[816] += dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1080] += dqdT; // dwdot[HON]/dT

  // reaction 47: NH2 + O2 <=> H2NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 260000 * exp(0.4872 * logT - (14618.4441416271) * invT);
  dlnkfdT = 0.4872 * invT + (14618.4441416271) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[12] -= q; // NH2
  wdot[21] += q; // H2NO
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[O]/d[O2]
  J[111] -= dqdci; // dwdot[NH2]/d[O2]
  J[120] += dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[21];
  J[135] -= dqdci; // dwdot[O2]/d[O]
  J[136] += dqdci; // dwdot[O]/d[O]
  J[144] -= dqdci; // dwdot[NH2]/d[O]
  J[153] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[399] -= dqdci; // dwdot[O2]/d[NH2]
  J[400] += dqdci; // dwdot[O]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[417] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[696] -= dqdci; // dwdot[O2]/d[H2NO]
  J[697] += dqdci; // dwdot[O]/d[H2NO]
  J[705] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 48: NH2 + O2 <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 2.9e-08 * exp(3.764 * logT - (9150.99506765883) * invT);
  dlnkfdT = 3.764 * invT + (9150.99506765883) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // OH
  wdot[12] -= q; // NH2
  wdot[23] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[111] -= dqdci; // dwdot[NH2]/d[O2]
  J[122] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[201] -= dqdci; // dwdot[O2]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[399] -= dqdci; // dwdot[O2]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[762] -= dqdci; // dwdot[O2]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 49: 2 NH2 <=> NH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 5.6e-06 * exp(3.53 * logT - (277.775599524205) * invT);
  dlnkfdT = 3.53 * invT + (277.775599524205) * invT2;
  // reverse
  phi_r = sc[11] * sc[13];
  Kc = exp(-g_RT[11] + 2.000000 * g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[11] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q;     // NH3
  wdot[12] -= 2 * q; // NH2
  wdot[13] += q;     // NH
  // d()/d[NH3]
  dqdci = -k_r * sc[13];
  J[374] += dqdci;      // dwdot[NH3]/d[NH3]
  J[375] += -2 * dqdci; // dwdot[NH2]/d[NH3]
  J[376] += dqdci;      // dwdot[NH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[12];
  J[407] += dqdci;      // dwdot[NH3]/d[NH2]
  J[408] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[409] += dqdci;      // dwdot[NH]/d[NH2]
  // d()/d[NH]
  dqdci = -k_r * sc[11];
  J[440] += dqdci;      // dwdot[NH3]/d[NH]
  J[441] += -2 * dqdci; // dwdot[NH2]/d[NH]
  J[442] += dqdci;      // dwdot[NH]/d[NH]
  // d()/dT
  J[1067] += dqdT;      // dwdot[NH3]/dT
  J[1068] += -2 * dqdT; // dwdot[NH2]/dT
  J[1069] += dqdT;      // dwdot[NH]/dT

  // reaction 50: NH + NH2 <=> N + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[13];
  k_f = 0.0096 * exp(2.46 * logT - (53.844183241105) * invT);
  dlnkfdT = 2.46 * invT + (53.844183241105) * invT2;
  // reverse
  phi_r = sc[11] * sc[14];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[13] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[13]) + (h_RT[11] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[13] -= q; // NH
  wdot[14] += q; // N
  // d()/d[NH3]
  dqdci = -k_r * sc[14];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[376] -= dqdci; // dwdot[NH]/d[NH3]
  J[377] += dqdci; // dwdot[N]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[13];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[410] += dqdci; // dwdot[N]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[12];
  J[440] += dqdci; // dwdot[NH3]/d[NH]
  J[441] -= dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[443] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[11];
  J[473] += dqdci; // dwdot[NH3]/d[N]
  J[474] -= dqdci; // dwdot[NH2]/d[N]
  J[475] -= dqdci; // dwdot[NH]/d[N]
  J[476] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1070] += dqdT; // dwdot[N]/dT

  // reaction 51: N + NH2 <=> 2 H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[14];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * (sc[2] * sc[2]);
  Kc = refC * exp(-g_RT[0] - 2.000000 * g_RT[2] + g_RT[12] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[12] + h_RT[14]) + (h_RT[0] + 2.000000 * h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // N2
  wdot[2] += 2 * q; // H
  wdot[12] -= q;    // NH2
  wdot[14] -= q;    // N
  // d()/d[N2]
  dqdci = -k_r * sc[2] * sc[2];
  J[0] += dqdci;     // dwdot[N2]/d[N2]
  J[2] += 2 * dqdci; // dwdot[H]/d[N2]
  J[12] -= dqdci;    // dwdot[NH2]/d[N2]
  J[14] -= dqdci;    // dwdot[N]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0] * 2.000000 * sc[2];
  J[66] += dqdci;     // dwdot[N2]/d[H]
  J[68] += 2 * dqdci; // dwdot[H]/d[H]
  J[78] -= dqdci;     // dwdot[NH2]/d[H]
  J[80] -= dqdci;     // dwdot[N]/d[H]
  // d()/d[NH2]
  dqdci = +k_f * sc[14];
  J[396] += dqdci;     // dwdot[N2]/d[NH2]
  J[398] += 2 * dqdci; // dwdot[H]/d[NH2]
  J[408] -= dqdci;     // dwdot[NH2]/d[NH2]
  J[410] -= dqdci;     // dwdot[N]/d[NH2]
  // d()/d[N]
  dqdci = +k_f * sc[12];
  J[462] += dqdci;     // dwdot[N2]/d[N]
  J[464] += 2 * dqdci; // dwdot[H]/d[N]
  J[474] -= dqdci;     // dwdot[NH2]/d[N]
  J[476] -= dqdci;     // dwdot[N]/d[N]
  // d()/dT
  J[1056] += dqdT;     // dwdot[N2]/dT
  J[1058] += 2 * dqdT; // dwdot[H]/dT
  J[1068] -= dqdT;     // dwdot[NH2]/dT
  J[1070] -= dqdT;     // dwdot[N]/dT

  // reaction 52: HNO + NH2 <=> NH3 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[23];
  k_f = 0.00059 * exp(2.95 * logT - (-1745.65861367657) * invT);
  dlnkfdT = 2.95 * invT + (-1745.65861367657) * invT2;
  // reverse
  phi_r = sc[10] * sc[11];
  Kc = exp(-g_RT[10] - g_RT[11] + g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[23]) + (h_RT[10] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[23] -= q; // HNO
  // d()/d[NO]
  dqdci = -k_r * sc[11];
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[341] += dqdci; // dwdot[NH3]/d[NO]
  J[342] -= dqdci; // dwdot[NH2]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NH3]
  dqdci = -k_r * sc[10];
  J[373] += dqdci; // dwdot[NO]/d[NH3]
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[386] -= dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[406] += dqdci; // dwdot[NO]/d[NH2]
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] -= dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = +k_f * sc[12];
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[770] += dqdci; // dwdot[NH3]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT

  // reaction 53: HONO + NH2 <=> NH3 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[26];
  k_f = 7.1e-05 * exp(3.02 * logT - (-2485.89032907532) * invT);
  dlnkfdT = 3.02 * invT + (-2485.89032907532) * invT2;
  // reverse
  phi_r = sc[11] * sc[25];
  Kc = exp(-g_RT[11] + g_RT[12] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[26]) + (h_RT[11] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[25] += q; // NO2
  wdot[26] -= q; // HONO
  // d()/d[NH3]
  dqdci = -k_r * sc[25];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[388] += dqdci; // dwdot[NO2]/d[NH3]
  J[389] -= dqdci; // dwdot[HONO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[26];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[421] += dqdci; // dwdot[NO2]/d[NH2]
  J[422] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NO2]
  dqdci = -k_r * sc[11];
  J[836] += dqdci; // dwdot[NH3]/d[NO2]
  J[837] -= dqdci; // dwdot[NH2]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[12];
  J[869] += dqdci; // dwdot[NH3]/d[HONO]
  J[870] -= dqdci; // dwdot[NH2]/d[HONO]
  J[883] += dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 54: NH2 + NO2 <=> H2NO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[25];
  k_f = 860000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[10] * sc[21];
  Kc = exp(-g_RT[10] + g_RT[12] - g_RT[21] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[25]) + (h_RT[10] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO
  wdot[12] -= q; // NH2
  wdot[21] += q; // H2NO
  wdot[25] -= q; // NO2
  // d()/d[NO]
  dqdci = -k_r * sc[21];
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[342] -= dqdci; // dwdot[NH2]/d[NO]
  J[351] += dqdci; // dwdot[H2NO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[25];
  J[406] += dqdci; // dwdot[NO]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[417] += dqdci; // dwdot[H2NO]/d[NH2]
  J[421] -= dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[10];
  J[703] += dqdci; // dwdot[NO]/d[H2NO]
  J[705] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[718] -= dqdci; // dwdot[NO2]/d[H2NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[12];
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[837] -= dqdci; // dwdot[NH2]/d[NO2]
  J[846] += dqdci; // dwdot[H2NO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT

  // reaction 55: NH2 + NO2 <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[25];
  k_f = 220000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[5] * sc[30];
  Kc = exp(-g_RT[5] + g_RT[12] + g_RT[25] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[25]) + (h_RT[5] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[12] -= q; // NH2
  wdot[25] -= q; // NO2
  wdot[30] += q; // N2O
  // d()/d[H2O]
  dqdci = -k_r * sc[30];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[190] -= dqdci; // dwdot[NO2]/d[H2O]
  J[195] += dqdci; // dwdot[N2O]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[25];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[421] -= dqdci; // dwdot[NO2]/d[NH2]
  J[426] += dqdci; // dwdot[N2O]/d[NH2]
  // d()/d[NO2]
  dqdci = +k_f * sc[12];
  J[830] += dqdci; // dwdot[H2O]/d[NO2]
  J[837] -= dqdci; // dwdot[NH2]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[855] += dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[995] += dqdci;  // dwdot[H2O]/d[N2O]
  J[1002] -= dqdci; // dwdot[NH2]/d[N2O]
  J[1015] -= dqdci; // dwdot[NO2]/d[N2O]
  J[1020] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1086] += dqdT; // dwdot[N2O]/dT

  // reaction 56: H + NH <=> H2 + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[13];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[13] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[13]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[13] -= q; // NH
  wdot[14] += q; // N
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[46] -= dqdci; // dwdot[NH]/d[H2]
  J[47] += dqdci; // dwdot[N]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  J[80] += dqdci; // dwdot[N]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[2];
  J[430] += dqdci; // dwdot[H2]/d[NH]
  J[431] -= dqdci; // dwdot[H]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[443] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[1];
  J[463] += dqdci; // dwdot[H2]/d[N]
  J[464] -= dqdci; // dwdot[H]/d[N]
  J[475] -= dqdci; // dwdot[NH]/d[N]
  J[476] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1070] += dqdT; // dwdot[N]/dT

  // reaction 57: NH + O <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 92000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[10];
  Kc = exp(-g_RT[2] + g_RT[4] - g_RT[10] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[2] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[13] -= q; // NH
  // d()/d[H]
  dqdci = -k_r * sc[10];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[145] -= dqdci; // dwdot[NH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[332] += dqdci; // dwdot[H]/d[NO]
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[343] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[433] -= dqdci; // dwdot[O]/d[NH]
  J[439] += dqdci; // dwdot[NO]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT

  // reaction 58: NH + OH <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[13];
  k_f = 320000000 * exp(-0.376 * logT - (-23.1479666270171) * invT);
  dlnkfdT = -0.376 * invT + (-23.1479666270171) * invT2;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = exp(-g_RT[2] + g_RT[6] + g_RT[13] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[13]) + (h_RT[2] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[6] -= q;  // OH
  wdot[13] -= q; // NH
  wdot[23] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  J[89] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[211] -= dqdci; // dwdot[NH]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[6];
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[435] -= dqdci; // dwdot[OH]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[452] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[761] += dqdci; // dwdot[H]/d[HNO]
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[772] -= dqdci; // dwdot[NH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 59: NH + OH <=> H2O + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[13];
  k_f = 16 * exp(1.733 * logT - (-289.852799503519) * invT);
  dlnkfdT = 1.733 * invT + (-289.852799503519) * invT2;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[13] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[13]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[13] -= q; // NH
  wdot[14] += q; // N
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[178] -= dqdci; // dwdot[NH]/d[H2O]
  J[179] += dqdci; // dwdot[N]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[211] -= dqdci; // dwdot[NH]/d[OH]
  J[212] += dqdci; // dwdot[N]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[6];
  J[434] += dqdci; // dwdot[H2O]/d[NH]
  J[435] -= dqdci; // dwdot[OH]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[443] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[5];
  J[467] += dqdci; // dwdot[H2O]/d[N]
  J[468] -= dqdci; // dwdot[OH]/d[N]
  J[475] -= dqdci; // dwdot[NH]/d[N]
  J[476] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1070] += dqdT; // dwdot[N]/dT

  // reaction 60: NH + O2 <=> HNO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 24000000 * exp(-(6969.55082139537) * invT);
  dlnkfdT = (6969.55082139537) * invT2;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[13] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[13] -= q; // NH
  wdot[23] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[13];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[O]/d[O2]
  J[112] -= dqdci; // dwdot[NH]/d[O2]
  J[122] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[23];
  J[135] -= dqdci; // dwdot[O2]/d[O]
  J[136] += dqdci; // dwdot[O]/d[O]
  J[145] -= dqdci; // dwdot[NH]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[432] -= dqdci; // dwdot[O2]/d[NH]
  J[433] += dqdci; // dwdot[O]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[452] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[762] -= dqdci; // dwdot[O2]/d[HNO]
  J[763] += dqdci; // dwdot[O]/d[HNO]
  J[772] -= dqdci; // dwdot[NH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 61: NH + O2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 99000 * exp(-(769.921498681221) * invT);
  dlnkfdT = (769.921498681221) * invT2;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[10] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // OH
  wdot[10] += q; // NO
  wdot[13] -= q; // NH
  // d()/d[O2]
  dqdci = +k_f * sc[13];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[109] += dqdci; // dwdot[NO]/d[O2]
  J[112] -= dqdci; // dwdot[NH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[201] -= dqdci; // dwdot[O2]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[211] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[333] -= dqdci; // dwdot[O2]/d[NO]
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[343] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[432] -= dqdci; // dwdot[O2]/d[NH]
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[439] += dqdci; // dwdot[NO]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT

  // reaction 62: 2 NH <=> N + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[13] * sc[13]);
  k_f = 5.7e-07 * exp(3.88 * logT - (172.100099705214) * invT);
  dlnkfdT = 3.88 * invT + (172.100099705214) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(-g_RT[12] + 2.000000 * g_RT[13] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[13]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q;     // NH2
  wdot[13] -= 2 * q; // NH
  wdot[14] += q;     // N
  // d()/d[NH2]
  dqdci = -k_r * sc[14];
  J[408] += dqdci;      // dwdot[NH2]/d[NH2]
  J[409] += -2 * dqdci; // dwdot[NH]/d[NH2]
  J[410] += dqdci;      // dwdot[N]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[13];
  J[441] += dqdci;      // dwdot[NH2]/d[NH]
  J[442] += -2 * dqdci; // dwdot[NH]/d[NH]
  J[443] += dqdci;      // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[12];
  J[474] += dqdci;      // dwdot[NH2]/d[N]
  J[475] += -2 * dqdci; // dwdot[NH]/d[N]
  J[476] += dqdci;      // dwdot[N]/d[N]
  // d()/dT
  J[1068] += dqdT;      // dwdot[NH2]/dT
  J[1069] += -2 * dqdT; // dwdot[NH]/dT
  J[1070] += dqdT;      // dwdot[N]/dT

  // reaction 63: N + NH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[14];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[2];
  Kc = exp(-g_RT[0] - g_RT[2] + g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[14]) + (h_RT[0] + h_RT[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] += q;  // H
  wdot[13] -= q; // NH
  wdot[14] -= q; // N
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] += dqdci;  // dwdot[H]/d[N2]
  J[13] -= dqdci; // dwdot[NH]/d[N2]
  J[14] -= dqdci; // dwdot[N]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[66] += dqdci; // dwdot[N2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  J[80] -= dqdci; // dwdot[N]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[14];
  J[429] += dqdci; // dwdot[N2]/d[NH]
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[443] -= dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = +k_f * sc[13];
  J[462] += dqdci; // dwdot[N2]/d[N]
  J[464] += dqdci; // dwdot[H]/d[N]
  J[475] -= dqdci; // dwdot[NH]/d[N]
  J[476] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1070] -= dqdT; // dwdot[N]/dT

  // reaction 64: NH + NO <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 2700000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[2] * sc[30];
  Kc = exp(-g_RT[2] + g_RT[10] + g_RT[13] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (h_RT[2] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[10] -= q; // NO
  wdot[13] -= q; // NH
  wdot[30] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[30];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[NO]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  J[96] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[NO]
  dqdci = +k_f * sc[13];
  J[332] += dqdci; // dwdot[H]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[343] -= dqdci; // dwdot[NH]/d[NO]
  J[360] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[439] -= dqdci; // dwdot[NO]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[459] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[992] += dqdci;  // dwdot[H]/d[N2O]
  J[1000] -= dqdci; // dwdot[NO]/d[N2O]
  J[1003] -= dqdci; // dwdot[NH]/d[N2O]
  J[1020] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1086] += dqdT; // dwdot[N2O]/dT

  // reaction 65: NH + NO <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 680000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] - g_RT[6] + g_RT[10] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[6] += q;  // OH
  wdot[10] -= q; // NO
  wdot[13] -= q; // NH
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[6] += dqdci;  // dwdot[OH]/d[N2]
  J[10] -= dqdci; // dwdot[NO]/d[N2]
  J[13] -= dqdci; // dwdot[NH]/d[N2]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[198] += dqdci; // dwdot[N2]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] -= dqdci; // dwdot[NO]/d[OH]
  J[211] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[13];
  J[330] += dqdci; // dwdot[N2]/d[NO]
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[343] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[429] += dqdci; // dwdot[N2]/d[NH]
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[439] -= dqdci; // dwdot[NO]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT

  // reaction 66: HONO + NH <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[26];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(-g_RT[12] + g_RT[13] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[26]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[25] += q; // NO2
  wdot[26] -= q; // HONO
  // d()/d[NH2]
  dqdci = -k_r * sc[25];
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[421] += dqdci; // dwdot[NO2]/d[NH2]
  J[422] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[26];
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[454] += dqdci; // dwdot[NO2]/d[NH]
  J[455] -= dqdci; // dwdot[HONO]/d[NH]
  // d()/d[NO2]
  dqdci = -k_r * sc[12];
  J[837] += dqdci; // dwdot[NH2]/d[NO2]
  J[838] -= dqdci; // dwdot[NH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[13];
  J[870] += dqdci; // dwdot[NH2]/d[HONO]
  J[871] -= dqdci; // dwdot[NH]/d[HONO]
  J[883] += dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 67: NH + NO2 <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[25];
  k_f = 4100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[30];
  Kc = exp(-g_RT[6] + g_RT[13] + g_RT[25] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[25]) + (h_RT[6] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[13] -= q; // NH
  wdot[25] -= q; // NO2
  wdot[30] += q; // N2O
  // d()/d[OH]
  dqdci = -k_r * sc[30];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[211] -= dqdci; // dwdot[NH]/d[OH]
  J[223] -= dqdci; // dwdot[NO2]/d[OH]
  J[228] += dqdci; // dwdot[N2O]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[25];
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[454] -= dqdci; // dwdot[NO2]/d[NH]
  J[459] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[NO2]
  dqdci = +k_f * sc[13];
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[838] -= dqdci; // dwdot[NH]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[855] += dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[6];
  J[996] += dqdci;  // dwdot[OH]/d[N2O]
  J[1003] -= dqdci; // dwdot[NH]/d[N2O]
  J[1015] -= dqdci; // dwdot[NO2]/d[N2O]
  J[1020] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1086] += dqdT; // dwdot[N2O]/dT

  // reaction 68: NH + NO2 <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[25];
  k_f = 5900000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[23];
  Kc = exp(-g_RT[10] + g_RT[13] - g_RT[23] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[25]) + (h_RT[10] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO
  wdot[13] -= q; // NH
  wdot[23] += q; // HNO
  wdot[25] -= q; // NO2
  // d()/d[NO]
  dqdci = -k_r * sc[23];
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[343] -= dqdci; // dwdot[NH]/d[NO]
  J[353] += dqdci; // dwdot[HNO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[25];
  J[439] += dqdci; // dwdot[NO]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[452] += dqdci; // dwdot[HNO]/d[NH]
  J[454] -= dqdci; // dwdot[NO2]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[10];
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[772] -= dqdci; // dwdot[NH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[784] -= dqdci; // dwdot[NO2]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[13];
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[838] -= dqdci; // dwdot[NH]/d[NO2]
  J[848] += dqdci; // dwdot[HNO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT

  // reaction 69: N + OH <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[14];
  k_f = 38000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[10];
  Kc = exp(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[14]) + (h_RT[2] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[6] -= q;  // OH
  wdot[10] += q; // NO
  wdot[14] -= q; // N
  // d()/d[H]
  dqdci = -k_r * sc[10];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[80] -= dqdci; // dwdot[N]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[212] -= dqdci; // dwdot[N]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[332] += dqdci; // dwdot[H]/d[NO]
  J[336] -= dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[344] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[6];
  J[464] += dqdci; // dwdot[H]/d[N]
  J[468] -= dqdci; // dwdot[OH]/d[N]
  J[472] += dqdci; // dwdot[NO]/d[N]
  J[476] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1070] -= dqdT; // dwdot[N]/dT

  // reaction 70: N + O2 <=> NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 9030 * exp(1 * logT - (3269.90189439907) * invT);
  dlnkfdT = 1 * invT + (3269.90189439907) * invT2;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[10] += q; // NO
  wdot[14] -= q; // N
  // d()/d[O2]
  dqdci = +k_f * sc[14];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[O]/d[O2]
  J[109] += dqdci; // dwdot[NO]/d[O2]
  J[113] -= dqdci; // dwdot[N]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[10];
  J[135] -= dqdci; // dwdot[O2]/d[O]
  J[136] += dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[146] -= dqdci; // dwdot[N]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[333] -= dqdci; // dwdot[O2]/d[NO]
  J[334] += dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[344] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[3];
  J[465] -= dqdci; // dwdot[O2]/d[N]
  J[466] += dqdci; // dwdot[O]/d[N]
  J[472] += dqdci; // dwdot[NO]/d[N]
  J[476] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1070] -= dqdT; // dwdot[N]/dT

  // reaction 71: N + NO <=> N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 11280000 * exp(0.14 * logT);
  dlnkfdT = 0.14 * invT;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] - g_RT[4] + g_RT[10] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] += q;  // O
  wdot[10] -= q; // NO
  wdot[14] -= q; // N
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] += dqdci;  // dwdot[O]/d[N2]
  J[10] -= dqdci; // dwdot[NO]/d[N2]
  J[14] -= dqdci; // dwdot[N]/d[N2]
  // d()/d[O]
  dqdci = -k_r * sc[0];
  J[132] += dqdci; // dwdot[N2]/d[O]
  J[136] += dqdci; // dwdot[O]/d[O]
  J[142] -= dqdci; // dwdot[NO]/d[O]
  J[146] -= dqdci; // dwdot[N]/d[O]
  // d()/d[NO]
  dqdci = +k_f * sc[14];
  J[330] += dqdci; // dwdot[N2]/d[NO]
  J[334] += dqdci; // dwdot[O]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[344] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[10];
  J[462] += dqdci; // dwdot[N2]/d[N]
  J[466] += dqdci; // dwdot[O]/d[N]
  J[472] -= dqdci; // dwdot[NO]/d[N]
  J[476] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1060] += dqdT; // dwdot[O]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1070] -= dqdT; // dwdot[N]/dT

  // reaction 72: NNH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15];
  k_f = 1000000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[2];
  Kc = refC * exp(-g_RT[0] - g_RT[2] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15]) + (h_RT[0] + h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] += q;  // H
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] += dqdci;  // dwdot[H]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[66] += dqdci; // dwdot[N2]/d[H]
  J[68] += dqdci; // dwdot[H]/d[H]
  J[81] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[NNH]
  dqdci = +k_f;
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[497] += dqdci; // dwdot[H]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 73: H + NNH <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = exp(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[0] + h_RT[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] += dqdci;  // dwdot[H2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H2]
  dqdci = -k_r * sc[0];
  J[33] += dqdci; // dwdot[N2]/d[H2]
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[48] -= dqdci; // dwdot[NNH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[66] += dqdci; // dwdot[N2]/d[H]
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[81] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[NNH]
  dqdci = +k_f * sc[2];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[496] += dqdci; // dwdot[H2]/d[NNH]
  J[497] -= dqdci; // dwdot[H]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 74: NNH + O <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 190000000 * exp(-0.274 * logT - (-11.0707666477038) * invT);
  dlnkfdT = -0.274 * invT + (-11.0707666477038) * invT2;
  // reverse
  phi_r = sc[2] * sc[30];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[15] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[2] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[15] -= q; // NNH
  wdot[30] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[30];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[70] -= dqdci; // dwdot[O]/d[H]
  J[81] -= dqdci; // dwdot[NNH]/d[H]
  J[96] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[147] -= dqdci; // dwdot[NNH]/d[O]
  J[162] += dqdci; // dwdot[N2O]/d[O]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[497] += dqdci; // dwdot[H]/d[NNH]
  J[499] -= dqdci; // dwdot[O]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  J[525] += dqdci; // dwdot[N2O]/d[NNH]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[992] += dqdci;  // dwdot[H]/d[N2O]
  J[994] -= dqdci;  // dwdot[O]/d[N2O]
  J[1005] -= dqdci; // dwdot[NNH]/d[N2O]
  J[1020] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT
  J[1086] += dqdT; // dwdot[N2O]/dT

  // reaction 75: NNH + O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 12000000 * exp(0.145 * logT - (-109.198016479624) * invT);
  dlnkfdT = 0.145 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] + g_RT[4] - g_RT[6] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] -= dqdci;  // dwdot[O]/d[N2]
  J[6] += dqdci;  // dwdot[OH]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[132] += dqdci; // dwdot[N2]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[147] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[198] += dqdci; // dwdot[N2]/d[OH]
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[213] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[499] -= dqdci; // dwdot[O]/d[NNH]
  J[501] += dqdci; // dwdot[OH]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 76: NNH + O <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 520000 * exp(0.381 * logT - (-205.81561631413) * invT);
  dlnkfdT = 0.381 * invT + (-205.81561631413) * invT2;
  // reverse
  phi_r = sc[10] * sc[13];
  Kc = exp(g_RT[4] - g_RT[10] - g_RT[13] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[10] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[13] += q; // NH
  wdot[15] -= q; // NNH
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[145] += dqdci; // dwdot[NH]/d[O]
  J[147] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[13];
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[343] += dqdci; // dwdot[NH]/d[NO]
  J[345] -= dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH]
  dqdci = -k_r * sc[10];
  J[433] -= dqdci; // dwdot[O]/d[NH]
  J[439] += dqdci; // dwdot[NO]/d[NH]
  J[442] += dqdci; // dwdot[NH]/d[NH]
  J[444] -= dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[499] -= dqdci; // dwdot[O]/d[NNH]
  J[505] += dqdci; // dwdot[NO]/d[NNH]
  J[508] += dqdci; // dwdot[NH]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1069] += dqdT; // dwdot[NH]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 77: NNH + OH <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[15];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[15]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[6] -= dqdci;  // dwdot[OH]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[165] += dqdci; // dwdot[N2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[180] -= dqdci; // dwdot[NNH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[198] += dqdci; // dwdot[N2]/d[OH]
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[213] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[6];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[500] += dqdci; // dwdot[H2O]/d[NNH]
  J[501] -= dqdci; // dwdot[OH]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 78: NNH + O2 <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 560000000 * exp(-0.385 * logT - (-6.54181665546136) * invT);
  dlnkfdT = -0.385 * invT + (-6.54181665546136) * invT2;
  // reverse
  phi_r = sc[0] * sc[9];
  Kc = exp(-g_RT[0] + g_RT[3] - g_RT[9] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[0] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] -= q;  // O2
  wdot[9] += q;  // HO2
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[9];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] -= dqdci;  // dwdot[O2]/d[N2]
  J[9] += dqdci;  // dwdot[HO2]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[O2]
  dqdci = +k_f * sc[15];
  J[99] += dqdci;  // dwdot[N2]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[108] += dqdci; // dwdot[HO2]/d[O2]
  J[114] -= dqdci; // dwdot[NNH]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[297] += dqdci; // dwdot[N2]/d[HO2]
  J[300] -= dqdci; // dwdot[O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[312] -= dqdci; // dwdot[NNH]/d[HO2]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[498] -= dqdci; // dwdot[O2]/d[NNH]
  J[504] += dqdci; // dwdot[HO2]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 79: NH + NNH <=> N2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[15];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[12];
  Kc = exp(-g_RT[0] - g_RT[12] + g_RT[13] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[15]) + (h_RT[0] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[12];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[12] += dqdci; // dwdot[NH2]/d[N2]
  J[13] -= dqdci; // dwdot[NH]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NH2]
  dqdci = -k_r * sc[0];
  J[396] += dqdci; // dwdot[N2]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[411] -= dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[15];
  J[429] += dqdci; // dwdot[N2]/d[NH]
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[444] -= dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[13];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[507] += dqdci; // dwdot[NH2]/d[NNH]
  J[508] -= dqdci; // dwdot[NH]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 80: NH2 + NNH <=> N2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[15];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[11];
  Kc = exp(-g_RT[0] - g_RT[11] + g_RT[12] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[15]) + (h_RT[0] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[15] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[11];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[11] += dqdci; // dwdot[NH3]/d[N2]
  J[12] -= dqdci; // dwdot[NH2]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NH3]
  dqdci = -k_r * sc[0];
  J[363] += dqdci; // dwdot[N2]/d[NH3]
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[378] -= dqdci; // dwdot[NNH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[396] += dqdci; // dwdot[N2]/d[NH2]
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[411] -= dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = +k_f * sc[12];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[506] += dqdci; // dwdot[NH3]/d[NNH]
  J[507] -= dqdci; // dwdot[NH2]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT

  // reaction 81: NNH + NO <=> HNO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[23];
  Kc = exp(-g_RT[0] + g_RT[10] + g_RT[15] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[0] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[10] -= q; // NO
  wdot[15] -= q; // NNH
  wdot[23] += q; // HNO
  // d()/d[N2]
  dqdci = -k_r * sc[23];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[10] -= dqdci; // dwdot[NO]/d[N2]
  J[15] -= dqdci; // dwdot[NNH]/d[N2]
  J[23] += dqdci; // dwdot[HNO]/d[N2]
  // d()/d[NO]
  dqdci = +k_f * sc[15];
  J[330] += dqdci; // dwdot[N2]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[345] -= dqdci; // dwdot[NNH]/d[NO]
  J[353] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NNH]
  dqdci = +k_f * sc[10];
  J[495] += dqdci; // dwdot[N2]/d[NNH]
  J[505] -= dqdci; // dwdot[NO]/d[NNH]
  J[510] -= dqdci; // dwdot[NNH]/d[NNH]
  J[518] += dqdci; // dwdot[HNO]/d[NNH]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[759] += dqdci; // dwdot[N2]/d[HNO]
  J[769] -= dqdci; // dwdot[NO]/d[HNO]
  J[774] -= dqdci; // dwdot[NNH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1071] -= dqdT; // dwdot[NNH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 83: H + NH2OH <=> H2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 480 * exp(1.5 * logT - (3144.60094461369) * invT);
  dlnkfdT = 1.5 * invT + (3144.60094461369) * invT2;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[53] -= dqdci; // dwdot[NH2OH]/d[H2]
  J[55] += dqdci; // dwdot[HNOH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[86] -= dqdci; // dwdot[NH2OH]/d[H]
  J[88] += dqdci; // dwdot[HNOH]/d[H]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[2];
  J[661] += dqdci; // dwdot[H2]/d[NH2OH]
  J[662] -= dqdci; // dwdot[H]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[1];
  J[727] += dqdci; // dwdot[H2]/d[HNOH]
  J[728] -= dqdci; // dwdot[H]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 84: H + NH2OH <=> H2 + H2NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 240 * exp(1.5 * logT - (2549.79884563251) * invT);
  dlnkfdT = 1.5 * invT + (2549.79884563251) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[53] -= dqdci; // dwdot[NH2OH]/d[H2]
  J[54] += dqdci; // dwdot[H2NO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[86] -= dqdci; // dwdot[NH2OH]/d[H]
  J[87] += dqdci; // dwdot[H2NO]/d[H]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[2];
  J[661] += dqdci; // dwdot[H2]/d[NH2OH]
  J[662] -= dqdci; // dwdot[H]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[1];
  J[694] += dqdci; // dwdot[H2]/d[H2NO]
  J[695] -= dqdci; // dwdot[H]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 85: NH2OH + O <=> HNOH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 330 * exp(1.5 * logT - (1944.93241333524) * invT);
  dlnkfdT = 1.5 * invT + (1944.93241333524) * invT2;
  // reverse
  phi_r = sc[6] * sc[22];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[6] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[152] -= dqdci; // dwdot[NH2OH]/d[O]
  J[154] += dqdci; // dwdot[HNOH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[22];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[218] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[220] += dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[664] -= dqdci; // dwdot[O]/d[NH2OH]
  J[666] += dqdci; // dwdot[OH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[6];
  J[730] -= dqdci; // dwdot[O]/d[HNOH]
  J[732] += dqdci; // dwdot[OH]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 86: NH2OH + O <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 170 * exp(1.5 * logT - (1514.68216407221) * invT);
  dlnkfdT = 1.5 * invT + (1514.68216407221) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[152] -= dqdci; // dwdot[NH2OH]/d[O]
  J[153] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[218] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[219] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[664] -= dqdci; // dwdot[O]/d[NH2OH]
  J[666] += dqdci; // dwdot[OH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[6];
  J[697] -= dqdci; // dwdot[O]/d[H2NO]
  J[699] += dqdci; // dwdot[OH]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 87: NH2OH + OH <=> H2O + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[20];
  k_f = 0.015 * exp(2.61 * logT - (-1779.87734695129) * invT);
  dlnkfdT = 2.61 * invT + (-1779.87734695129) * invT2;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[20]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[185] -= dqdci; // dwdot[NH2OH]/d[H2O]
  J[187] += dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[218] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[220] += dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[6];
  J[665] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[666] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[5];
  J[731] += dqdci; // dwdot[H2O]/d[HNOH]
  J[732] -= dqdci; // dwdot[OH]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 88: NH2OH + OH <=> H2NO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[20];
  k_f = 0.15 * exp(2.28 * logT - (-652.168798882917) * invT);
  dlnkfdT = 2.28 * invT + (-652.168798882917) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[20]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[185] -= dqdci; // dwdot[NH2OH]/d[H2O]
  J[186] += dqdci; // dwdot[H2NO]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[218] -= dqdci; // dwdot[NH2OH]/d[OH]
  J[219] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[6];
  J[665] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[666] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[5];
  J[698] += dqdci; // dwdot[H2O]/d[H2NO]
  J[699] -= dqdci; // dwdot[OH]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 89: NH2 + NH2OH <=> HNOH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 1.1e-07 * exp(4 * logT - (-48.8120165830578) * invT);
  dlnkfdT = 4 * invT + (-48.8120165830578) * invT2;
  // reverse
  phi_r = sc[11] * sc[22];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[11] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[NH3]
  dqdci = -k_r * sc[22];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2OH]/d[NH3]
  J[385] += dqdci; // dwdot[HNOH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[418] += dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[12];
  J[671] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[672] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[11];
  J[737] += dqdci; // dwdot[NH3]/d[HNOH]
  J[738] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 90: NH2 + NH2OH <=> H2NO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 9.5e-06 * exp(3.42 * logT - (-509.758482460181) * invT);
  dlnkfdT = 3.42 * invT + (-509.758482460181) * invT2;
  // reverse
  phi_r = sc[11] * sc[21];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[11] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2OH]/d[NH3]
  J[384] += dqdci; // dwdot[H2NO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[417] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[12];
  J[671] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[672] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[11];
  J[704] += dqdci; // dwdot[NH3]/d[H2NO]
  J[705] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 91: NH + NH2OH <=> HNOH + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[20];
  k_f = 2.9e-09 * exp(4.4 * logT - (787.030865318582) * invT);
  dlnkfdT = 4.4 * invT + (787.030865318582) * invT2;
  // reverse
  phi_r = sc[12] * sc[22];
  Kc = exp(-g_RT[12] + g_RT[13] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[20]) + (h_RT[12] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[NH2]
  dqdci = -k_r * sc[22];
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[418] += dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[20];
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[449] -= dqdci; // dwdot[NH2OH]/d[NH]
  J[451] += dqdci; // dwdot[HNOH]/d[NH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[13];
  J[672] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[673] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[12];
  J[738] += dqdci; // dwdot[NH2]/d[HNOH]
  J[739] -= dqdci; // dwdot[NH]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 92: NH + NH2OH <=> H2NO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[20];
  k_f = 1.5e-09 * exp(4.6 * logT - (1219.79719791064) * invT);
  dlnkfdT = 4.6 * invT + (1219.79719791064) * invT2;
  // reverse
  phi_r = sc[12] * sc[21];
  Kc = exp(-g_RT[12] + g_RT[13] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[20]) + (h_RT[12] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[NH2]
  dqdci = -k_r * sc[21];
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2OH]/d[NH2]
  J[417] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[20];
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[449] -= dqdci; // dwdot[NH2OH]/d[NH]
  J[450] += dqdci; // dwdot[H2NO]/d[NH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[13];
  J[672] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[673] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[12];
  J[705] += dqdci; // dwdot[NH2]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 93: HO2 + NH2OH <=> H2O2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 0.029 * exp(2.69 * logT - (4809.24167509571) * invT);
  dlnkfdT = 2.69 * invT + (4809.24167509571) * invT2;
  // reverse
  phi_r = sc[8] * sc[22];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[8] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[20] -= q; // NH2OH
  wdot[22] += q; // HNOH
  // d()/d[H2O2]
  dqdci = -k_r * sc[22];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[284] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  J[286] += dqdci; // dwdot[HNOH]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[317] -= dqdci; // dwdot[NH2OH]/d[HO2]
  J[319] += dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[9];
  J[668] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[669] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] += dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[8];
  J[734] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[735] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[746] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] += dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1078] += dqdT; // dwdot[HNOH]/dT

  // reaction 94: HO2 + NH2OH <=> H2NO + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 0.014 * exp(2.69 * logT - (3229.64456113469) * invT);
  dlnkfdT = 2.69 * invT + (3229.64456113469) * invT2;
  // reverse
  phi_r = sc[8] * sc[21];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[8] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[20] -= q; // NH2OH
  wdot[21] += q; // H2NO
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[284] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  J[285] += dqdci; // dwdot[H2NO]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[317] -= dqdci; // dwdot[NH2OH]/d[HO2]
  J[318] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[9];
  J[668] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[669] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[680] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[681] += dqdci; // dwdot[H2NO]/d[NH2OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[8];
  J[701] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[702] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[713] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1076] -= dqdT; // dwdot[NH2OH]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 97: H + H2NO <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 30 * exp(2 * logT - (1006.43333160944) * invT);
  dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[54] -= dqdci; // dwdot[H2NO]/d[H2]
  J[56] += dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[87] -= dqdci; // dwdot[H2NO]/d[H]
  J[89] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[694] += dqdci; // dwdot[H2]/d[H2NO]
  J[695] -= dqdci; // dwdot[H]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[760] += dqdci; // dwdot[H2]/d[HNO]
  J[761] -= dqdci; // dwdot[H]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 98: H + H2NO <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[12] += q; // NH2
  wdot[21] -= q; // H2NO
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[78] += dqdci; // dwdot[NH2]/d[H]
  J[87] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] += dqdci; // dwdot[NH2]/d[OH]
  J[219] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[6];
  J[398] -= dqdci; // dwdot[H]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[417] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[695] -= dqdci; // dwdot[H]/d[H2NO]
  J[699] += dqdci; // dwdot[OH]/d[H2NO]
  J[705] += dqdci; // dwdot[NH2]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT

  // reaction 99: H2NO + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 30 * exp(2 * logT - (1006.43333160944) * invT);
  dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[153] -= dqdci; // dwdot[H2NO]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[219] -= dqdci; // dwdot[H2NO]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2NO]
  dqdci = +k_f * sc[4];
  J[697] -= dqdci; // dwdot[O]/d[H2NO]
  J[699] += dqdci; // dwdot[OH]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 100: H2NO + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[21];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[21]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[186] -= dqdci; // dwdot[H2NO]/d[H2O]
  J[188] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[219] -= dqdci; // dwdot[H2NO]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2NO]
  dqdci = +k_f * sc[6];
  J[698] += dqdci; // dwdot[H2O]/d[H2NO]
  J[699] -= dqdci; // dwdot[OH]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[764] += dqdci; // dwdot[H2O]/d[HNO]
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 101: H2NO + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[8] * sc[23];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[8] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[H2O2]
  dqdci = -k_r * sc[23];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[285] -= dqdci; // dwdot[H2NO]/d[H2O2]
  J[287] += dqdci; // dwdot[HNO]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[21];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[318] -= dqdci; // dwdot[H2NO]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[9];
  J[701] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[702] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[8];
  J[767] += dqdci; // dwdot[H2O2]/d[HNO]
  J[768] -= dqdci; // dwdot[HO2]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 102: H2NO + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[21];
  k_f = 3000000 * exp(-(503.21666580472) * invT);
  dlnkfdT = (503.21666580472) * invT2;
  // reverse
  phi_r = sc[11] * sc[23];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[21]) + (h_RT[11] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[H2NO]/d[NH3]
  J[386] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[21];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[417] -= dqdci; // dwdot[H2NO]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[12];
  J[704] += dqdci; // dwdot[NH3]/d[H2NO]
  J[705] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[11];
  J[770] += dqdci; // dwdot[NH3]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 103: H2NO + NO <=> 2 HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[21];
  k_f = 0.02 * exp(2 * logT - (6541.81665546136) * invT);
  dlnkfdT = 2 * invT + (6541.81665546136) * invT2;
  // reverse
  phi_r = (sc[23] * sc[23]);
  Kc = exp(g_RT[10] + g_RT[21] - 2.000000 * g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[21]) + (2.000000 * h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q;     // NO
  wdot[21] -= q;     // H2NO
  wdot[23] += 2 * q; // HNO
  // d()/d[NO]
  dqdci = +k_f * sc[21];
  J[340] -= dqdci;     // dwdot[NO]/d[NO]
  J[351] -= dqdci;     // dwdot[H2NO]/d[NO]
  J[353] += 2 * dqdci; // dwdot[HNO]/d[NO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[10];
  J[703] -= dqdci;     // dwdot[NO]/d[H2NO]
  J[714] -= dqdci;     // dwdot[H2NO]/d[H2NO]
  J[716] += 2 * dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * 2.000000 * sc[23];
  J[769] -= dqdci;     // dwdot[NO]/d[HNO]
  J[780] -= dqdci;     // dwdot[H2NO]/d[HNO]
  J[782] += 2 * dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1066] -= dqdT;     // dwdot[NO]/dT
  J[1077] -= dqdT;     // dwdot[H2NO]/dT
  J[1079] += 2 * dqdT; // dwdot[HNO]/dT

  // reaction 104: H2NO + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21] * sc[25];
  k_f = 0.044 * exp(2.64 * logT - (2032.99532985107) * invT);
  dlnkfdT = 2.64 * invT + (2032.99532985107) * invT2;
  // reverse
  phi_r = sc[23] * sc[26];
  Kc = exp(g_RT[21] - g_RT[23] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21] + h_RT[25]) + (h_RT[23] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  wdot[25] -= q; // NO2
  wdot[26] += q; // HONO
  // d()/d[H2NO]
  dqdci = +k_f * sc[25];
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  J[718] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[719] += dqdci; // dwdot[HONO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[26];
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[784] -= dqdci; // dwdot[NO2]/d[HNO]
  J[785] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[21];
  J[846] -= dqdci; // dwdot[H2NO]/d[NO2]
  J[848] += dqdci; // dwdot[HNO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[23];
  J[879] -= dqdci; // dwdot[H2NO]/d[HONO]
  J[881] += dqdci; // dwdot[HNO]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 106: H + HNOH <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[12] += q; // NH2
  wdot[22] -= q; // HNOH
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[78] += dqdci; // dwdot[NH2]/d[H]
  J[88] -= dqdci; // dwdot[HNOH]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] += dqdci; // dwdot[NH2]/d[OH]
  J[220] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[6];
  J[398] -= dqdci; // dwdot[H]/d[NH2]
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[418] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[2];
  J[728] -= dqdci; // dwdot[H]/d[HNOH]
  J[732] += dqdci; // dwdot[OH]/d[HNOH]
  J[738] += dqdci; // dwdot[NH2]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT

  // reaction 107: H + HNOH <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 480 * exp(1.5 * logT - (190.215899674184) * invT);
  dlnkfdT = 1.5 * invT + (190.215899674184) * invT2;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[55] -= dqdci; // dwdot[HNOH]/d[H2]
  J[56] += dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[88] -= dqdci; // dwdot[HNOH]/d[H]
  J[89] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[HNOH]
  dqdci = +k_f * sc[2];
  J[727] += dqdci; // dwdot[H2]/d[HNOH]
  J[728] -= dqdci; // dwdot[H]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[760] += dqdci; // dwdot[H2]/d[HNO]
  J[761] -= dqdci; // dwdot[H]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 108: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[154] -= dqdci; // dwdot[HNOH]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[220] -= dqdci; // dwdot[HNOH]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[4];
  J[730] -= dqdci; // dwdot[O]/d[HNOH]
  J[732] += dqdci; // dwdot[OH]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 109: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 330 * exp(1.5 * logT - (-180.15156635809) * invT);
  dlnkfdT = 1.5 * invT + (-180.15156635809) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[154] -= dqdci; // dwdot[HNOH]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[220] -= dqdci; // dwdot[HNOH]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[4];
  J[730] -= dqdci; // dwdot[O]/d[HNOH]
  J[732] += dqdci; // dwdot[OH]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 110: HNOH + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[22];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[22]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[187] -= dqdci; // dwdot[HNOH]/d[H2O]
  J[188] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[220] -= dqdci; // dwdot[HNOH]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[6];
  J[731] += dqdci; // dwdot[H2O]/d[HNOH]
  J[732] -= dqdci; // dwdot[OH]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[764] += dqdci; // dwdot[H2O]/d[HNO]
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 111: HNOH + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[22];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[8] * sc[23];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[22]) + (h_RT[8] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[H2O2]
  dqdci = -k_r * sc[23];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[286] -= dqdci; // dwdot[HNOH]/d[H2O2]
  J[287] += dqdci; // dwdot[HNO]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[319] -= dqdci; // dwdot[HNOH]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[9];
  J[734] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[735] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[8];
  J[767] += dqdci; // dwdot[H2O2]/d[HNO]
  J[768] -= dqdci; // dwdot[HO2]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 112: HNOH + HO2 <=> NH2OH + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[22];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[3] * sc[20];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[20] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[22]) + (h_RT[3] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[9] -= q;  // HO2
  wdot[20] += q; // NH2OH
  wdot[22] -= q; // HNOH
  // d()/d[O2]
  dqdci = -k_r * sc[20];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[119] += dqdci; // dwdot[NH2OH]/d[O2]
  J[121] -= dqdci; // dwdot[HNOH]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[317] += dqdci; // dwdot[NH2OH]/d[HO2]
  J[319] -= dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[NH2OH]
  dqdci = -k_r * sc[3];
  J[663] += dqdci; // dwdot[O2]/d[NH2OH]
  J[669] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[680] += dqdci; // dwdot[NH2OH]/d[NH2OH]
  J[682] -= dqdci; // dwdot[HNOH]/d[NH2OH]
  // d()/d[HNOH]
  dqdci = +k_f * sc[9];
  J[729] += dqdci; // dwdot[O2]/d[HNOH]
  J[735] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[746] += dqdci; // dwdot[NH2OH]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1076] += dqdT; // dwdot[NH2OH]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT

  // reaction 113: HNOH + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[22];
  k_f = 3000000 * exp(-(12580.416645118) * invT);
  dlnkfdT = (12580.416645118) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[22]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[9] += q;  // HO2
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[22];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[108] += dqdci; // dwdot[HO2]/d[O2]
  J[121] -= dqdci; // dwdot[HNOH]/d[O2]
  J[122] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[23];
  J[300] -= dqdci; // dwdot[O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[319] -= dqdci; // dwdot[HNOH]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[3];
  J[729] -= dqdci; // dwdot[O2]/d[HNOH]
  J[735] += dqdci; // dwdot[HO2]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[762] -= dqdci; // dwdot[O2]/d[HNO]
  J[768] += dqdci; // dwdot[HO2]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 114: HNOH + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[22];
  k_f = 1.8 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[11] * sc[23];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[22]) + (h_RT[11] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[385] -= dqdci; // dwdot[HNOH]/d[NH3]
  J[386] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[22];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] -= dqdci; // dwdot[HNOH]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[12];
  J[737] += dqdci; // dwdot[NH3]/d[HNOH]
  J[738] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[11];
  J[770] += dqdci; // dwdot[NH3]/d[HNO]
  J[771] -= dqdci; // dwdot[NH2]/d[HNO]
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 115: HNOH + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[22] * sc[25];
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[23] * sc[26];
  Kc = exp(g_RT[22] - g_RT[23] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22] + h_RT[25]) + (h_RT[23] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[22] -= q; // HNOH
  wdot[23] += q; // HNO
  wdot[25] -= q; // NO2
  wdot[26] += q; // HONO
  // d()/d[HNOH]
  dqdci = +k_f * sc[25];
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[749] += dqdci; // dwdot[HNO]/d[HNOH]
  J[751] -= dqdci; // dwdot[NO2]/d[HNOH]
  J[752] += dqdci; // dwdot[HONO]/d[HNOH]
  // d()/d[HNO]
  dqdci = -k_r * sc[26];
  J[781] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[784] -= dqdci; // dwdot[NO2]/d[HNO]
  J[785] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[22];
  J[847] -= dqdci; // dwdot[HNOH]/d[NO2]
  J[848] += dqdci; // dwdot[HNO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[23];
  J[880] -= dqdci; // dwdot[HNOH]/d[HONO]
  J[881] += dqdci; // dwdot[HNO]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 116: H + HNO <=> H2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[23];
  k_f = 66000 * exp(0.94 * logT - (249.092249573336) * invT);
  dlnkfdT = 0.94 * invT + (249.092249573336) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[23]) + (h_RT[1] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[10] += q; // NO
  wdot[23] -= q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[10];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[43] += dqdci; // dwdot[NO]/d[H2]
  J[56] -= dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[89] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[331] += dqdci; // dwdot[H2]/d[NO]
  J[332] -= dqdci; // dwdot[H]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[2];
  J[760] += dqdci; // dwdot[H2]/d[HNO]
  J[761] -= dqdci; // dwdot[H]/d[HNO]
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT

  // reaction 117: HNO + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 23000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[10] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[10] += q; // NO
  wdot[23] -= q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[155] -= dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[221] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[4];
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT

  // reaction 118: HNO + HO2 <=> HNO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[23];
  k_f = 0.002 * exp(2.36 * logT - (4518.88565892638) * invT);
  dlnkfdT = 2.36 * invT + (4518.88565892638) * invT2;
  // reverse
  phi_r = sc[6] * sc[27];
  Kc = exp(-g_RT[6] + g_RT[9] + g_RT[23] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[23]) + (h_RT[6] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[9] -= q;  // HO2
  wdot[23] -= q; // HNO
  wdot[27] += q; // HNO2
  // d()/d[OH]
  dqdci = -k_r * sc[27];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  J[221] -= dqdci; // dwdot[HNO]/d[OH]
  J[225] += dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[320] -= dqdci; // dwdot[HNO]/d[HO2]
  J[324] += dqdci; // dwdot[HNO2]/d[HO2]
  // d()/d[HNO]
  dqdci = +k_f * sc[9];
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[768] -= dqdci; // dwdot[HO2]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  J[786] += dqdci; // dwdot[HNO2]/d[HNO]
  // d()/d[HNO2]
  dqdci = -k_r * sc[6];
  J[897] += dqdci; // dwdot[OH]/d[HNO2]
  J[900] -= dqdci; // dwdot[HO2]/d[HNO2]
  J[914] -= dqdci; // dwdot[HNO]/d[HNO2]
  J[918] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT
  J[1083] += dqdT; // dwdot[HNO2]/dT

  // reaction 119: 2 HNO <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[23] * sc[23]);
  k_f = 900 * exp(-(1559.97166399463) * invT);
  dlnkfdT = (1559.97166399463) * invT2;
  // reverse
  phi_r = sc[5] * sc[30];
  Kc = exp(-g_RT[5] + 2.000000 * g_RT[23] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[23]) + (h_RT[5] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;      // H2O
  wdot[23] -= 2 * q; // HNO
  wdot[30] += q;     // N2O
  // d()/d[H2O]
  dqdci = -k_r * sc[30];
  J[170] += dqdci;      // dwdot[H2O]/d[H2O]
  J[188] += -2 * dqdci; // dwdot[HNO]/d[H2O]
  J[195] += dqdci;      // dwdot[N2O]/d[H2O]
  // d()/d[HNO]
  dqdci = +k_f * 2.000000 * sc[23];
  J[764] += dqdci;      // dwdot[H2O]/d[HNO]
  J[782] += -2 * dqdci; // dwdot[HNO]/d[HNO]
  J[789] += dqdci;      // dwdot[N2O]/d[HNO]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[995] += dqdci;       // dwdot[H2O]/d[N2O]
  J[1013] += -2 * dqdci; // dwdot[HNO]/d[N2O]
  J[1020] += dqdci;      // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1061] += dqdT;      // dwdot[H2O]/dT
  J[1079] += -2 * dqdT; // dwdot[HNO]/dT
  J[1086] += dqdT;      // dwdot[N2O]/dT

  // reaction 120: HO2 + NO <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 2100000 * exp(-(-250.098682904946) * invT);
  dlnkfdT = (-250.098682904946) * invT2;
  // reverse
  phi_r = sc[6] * sc[25];
  Kc = exp(-g_RT[6] + g_RT[9] + g_RT[10] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[6] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[9] -= q;  // HO2
  wdot[10] -= q; // NO
  wdot[25] += q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  J[208] -= dqdci; // dwdot[NO]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[307] -= dqdci; // dwdot[NO]/d[HO2]
  J[322] += dqdci; // dwdot[NO2]/d[HO2]
  // d()/d[NO]
  dqdci = +k_f * sc[9];
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[339] -= dqdci; // dwdot[HO2]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[355] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[834] -= dqdci; // dwdot[HO2]/d[NO2]
  J[835] -= dqdci; // dwdot[NO]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT

  // reaction 122: NO2 + O <=> NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[25];
  k_f = 5860000 * exp(-(-119.765566461523) * invT);
  dlnkfdT = (-119.765566461523) * invT2;
  // reverse
  phi_r = sc[3] * sc[10];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[10] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[25]) + (h_RT[3] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[25] -= q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[10];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] -= dqdci; // dwdot[O]/d[O2]
  J[109] += dqdci; // dwdot[NO]/d[O2]
  J[124] -= dqdci; // dwdot[NO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[135] += dqdci; // dwdot[O2]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[157] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[3];
  J[333] += dqdci; // dwdot[O2]/d[NO]
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[4];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[829] -= dqdci; // dwdot[O]/d[NO2]
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT

  // reaction 123: HO2 + NO2 <=> HONO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[25];
  k_f = 1.9e-06 * exp(3.32 * logT - (1531.79153070957) * invT);
  dlnkfdT = 3.32 * invT + (1531.79153070957) * invT2;
  // reverse
  phi_r = sc[3] * sc[26];
  Kc = exp(-g_RT[3] + g_RT[9] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[25]) + (h_RT[3] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[9] -= q;  // HO2
  wdot[25] -= q; // NO2
  wdot[26] += q; // HONO
  // d()/d[O2]
  dqdci = -k_r * sc[26];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[124] -= dqdci; // dwdot[NO2]/d[O2]
  J[125] += dqdci; // dwdot[HONO]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[25];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[322] -= dqdci; // dwdot[NO2]/d[HO2]
  J[323] += dqdci; // dwdot[HONO]/d[HO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[9];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[834] -= dqdci; // dwdot[HO2]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[3];
  J[861] += dqdci; // dwdot[O2]/d[HONO]
  J[867] -= dqdci; // dwdot[HO2]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 124: HO2 + NO2 <=> HNO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[25];
  k_f = 1.9e-05 * exp(3.26 * logT - (2507.52864570492) * invT);
  dlnkfdT = 3.26 * invT + (2507.52864570492) * invT2;
  // reverse
  phi_r = sc[3] * sc[27];
  Kc = exp(-g_RT[3] + g_RT[9] + g_RT[25] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[25]) + (h_RT[3] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[9] -= q;  // HO2
  wdot[25] -= q; // NO2
  wdot[27] += q; // HNO2
  // d()/d[O2]
  dqdci = -k_r * sc[27];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[124] -= dqdci; // dwdot[NO2]/d[O2]
  J[126] += dqdci; // dwdot[HNO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[25];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[322] -= dqdci; // dwdot[NO2]/d[HO2]
  J[324] += dqdci; // dwdot[HNO2]/d[HO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[9];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[834] -= dqdci; // dwdot[HO2]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[852] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[3];
  J[894] += dqdci; // dwdot[O2]/d[HNO2]
  J[900] -= dqdci; // dwdot[HO2]/d[HNO2]
  J[916] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[918] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1083] += dqdT; // dwdot[HNO2]/dT

  // reaction 125: 2 NO2 <=> 2 NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[25] * sc[25]);
  k_f = 4500000 * exp(-(13888.2767595445) * invT);
  dlnkfdT = (13888.2767595445) * invT2;
  // reverse
  phi_r = sc[3] * (sc[10] * sc[10]);
  Kc = refC * exp(-g_RT[3] - 2.000000 * g_RT[10] + 2.000000 * g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[25]) + (h_RT[3] + 2.000000 * h_RT[10]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;      // O2
  wdot[10] += 2 * q; // NO
  wdot[25] -= 2 * q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[10] * sc[10];
  J[102] += dqdci;      // dwdot[O2]/d[O2]
  J[109] += 2 * dqdci;  // dwdot[NO]/d[O2]
  J[124] += -2 * dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[3] * 2.000000 * sc[10];
  J[333] += dqdci;      // dwdot[O2]/d[NO]
  J[340] += 2 * dqdci;  // dwdot[NO]/d[NO]
  J[355] += -2 * dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[25];
  J[828] += dqdci;      // dwdot[O2]/d[NO2]
  J[835] += 2 * dqdci;  // dwdot[NO]/d[NO2]
  J[850] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1066] += 2 * dqdT;  // dwdot[NO]/dT
  J[1081] += -2 * dqdT; // dwdot[NO2]/dT

  // reaction 126: 2 NO2 <=> NO + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[25] * sc[25]);
  k_f = 9600 * exp(0.73 * logT - (10517.2283153186) * invT);
  dlnkfdT = 0.73 * invT + (10517.2283153186) * invT2;
  // reverse
  phi_r = sc[10] * sc[28];
  Kc = exp(-g_RT[10] + 2.000000 * g_RT[25] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[25]) + (h_RT[10] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q;     // NO
  wdot[25] -= 2 * q; // NO2
  wdot[28] += q;     // NO3
  // d()/d[NO]
  dqdci = -k_r * sc[28];
  J[340] += dqdci;      // dwdot[NO]/d[NO]
  J[355] += -2 * dqdci; // dwdot[NO2]/d[NO]
  J[358] += dqdci;      // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[25];
  J[835] += dqdci;      // dwdot[NO]/d[NO2]
  J[850] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  J[853] += dqdci;      // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = -k_r * sc[10];
  J[934] += dqdci;      // dwdot[NO]/d[NO3]
  J[949] += -2 * dqdci; // dwdot[NO2]/d[NO3]
  J[952] += dqdci;      // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1066] += dqdT;      // dwdot[NO]/dT
  J[1081] += -2 * dqdT; // dwdot[NO2]/dT
  J[1084] += dqdT;      // dwdot[NO3]/dT

  // reaction 127: HONO + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[26];
  k_f = 12000000 * exp(-(2999.17132819613) * invT);
  dlnkfdT = (2999.17132819613) * invT2;
  // reverse
  phi_r = sc[6] * sc[25];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[26]) + (h_RT[6] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[25] += q; // NO2
  wdot[26] -= q; // HONO
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[157] += dqdci; // dwdot[NO2]/d[O]
  J[158] -= dqdci; // dwdot[HONO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[224] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[829] -= dqdci; // dwdot[O]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[4];
  J[862] -= dqdci; // dwdot[O]/d[HONO]
  J[864] += dqdci; // dwdot[OH]/d[HONO]
  J[883] += dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 128: HONO + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[26];
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  dlnkfdT = (-261.672666218454) * invT2;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[26]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[25] += q; // NO2
  wdot[26] -= q; // HONO
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[190] += dqdci; // dwdot[NO2]/d[H2O]
  J[191] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[26];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[224] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[830] += dqdci; // dwdot[H2O]/d[NO2]
  J[831] -= dqdci; // dwdot[OH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[6];
  J[863] += dqdci; // dwdot[H2O]/d[HONO]
  J[864] -= dqdci; // dwdot[OH]/d[HONO]
  J[883] += dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 129: HONO + NO2 <=> HONO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[25] * sc[26];
  k_f = 200000 * exp(-(16455.1849718143) * invT);
  dlnkfdT = (16455.1849718143) * invT2;
  // reverse
  phi_r = sc[10] * sc[29];
  Kc = exp(-g_RT[10] + g_RT[25] + g_RT[26] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25] + h_RT[26]) + (h_RT[10] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO
  wdot[25] -= q; // NO2
  wdot[26] -= q; // HONO
  wdot[29] += q; // HONO2
  // d()/d[NO]
  dqdci = -k_r * sc[29];
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  J[356] -= dqdci; // dwdot[HONO]/d[NO]
  J[359] += dqdci; // dwdot[HONO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[26];
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  J[854] += dqdci; // dwdot[HONO2]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[25];
  J[868] += dqdci; // dwdot[NO]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  J[887] += dqdci; // dwdot[HONO2]/d[HONO]
  // d()/d[HONO2]
  dqdci = -k_r * sc[10];
  J[967] += dqdci; // dwdot[NO]/d[HONO2]
  J[982] -= dqdci; // dwdot[NO2]/d[HONO2]
  J[983] -= dqdci; // dwdot[HONO]/d[HONO2]
  J[986] += dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT
  J[1085] += dqdT; // dwdot[HONO2]/dT

  // reaction 130: 2 HONO <=> H2O + NO + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[26] * sc[26]);
  k_f = 3.5e-07 * exp(3.64 * logT - (6109.0503228693) * invT);
  dlnkfdT = 3.64 * invT + (6109.0503228693) * invT2;
  // reverse
  phi_r = sc[5] * sc[10] * sc[25];
  Kc = refC * exp(-g_RT[5] - g_RT[10] - g_RT[25] + 2.000000 * g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[26]) + (h_RT[5] + h_RT[10] + h_RT[25]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;      // H2O
  wdot[10] += q;     // NO
  wdot[25] += q;     // NO2
  wdot[26] -= 2 * q; // HONO
  // d()/d[H2O]
  dqdci = -k_r * sc[10] * sc[25];
  J[170] += dqdci;      // dwdot[H2O]/d[H2O]
  J[175] += dqdci;      // dwdot[NO]/d[H2O]
  J[190] += dqdci;      // dwdot[NO2]/d[H2O]
  J[191] += -2 * dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5] * sc[25];
  J[335] += dqdci;      // dwdot[H2O]/d[NO]
  J[340] += dqdci;      // dwdot[NO]/d[NO]
  J[355] += dqdci;      // dwdot[NO2]/d[NO]
  J[356] += -2 * dqdci; // dwdot[HONO]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[5] * sc[10];
  J[830] += dqdci;      // dwdot[H2O]/d[NO2]
  J[835] += dqdci;      // dwdot[NO]/d[NO2]
  J[850] += dqdci;      // dwdot[NO2]/d[NO2]
  J[851] += -2 * dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * 2.000000 * sc[26];
  J[863] += dqdci;      // dwdot[H2O]/d[HONO]
  J[868] += dqdci;      // dwdot[NO]/d[HONO]
  J[883] += dqdci;      // dwdot[NO2]/d[HONO]
  J[884] += -2 * dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1061] += dqdT;      // dwdot[H2O]/dT
  J[1066] += dqdT;      // dwdot[NO]/dT
  J[1081] += dqdT;      // dwdot[NO2]/dT
  J[1082] += -2 * dqdT; // dwdot[HONO]/dT

  // reaction 131: HNO2 + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[27];
  k_f = 170 * exp(1.5 * logT - (1006.43333160944) * invT);
  dlnkfdT = 1.5 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[6] * sc[25];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[25] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[27]) + (h_RT[6] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[25] += q; // NO2
  wdot[27] -= q; // HNO2
  // d()/d[O]
  dqdci = +k_f * sc[27];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[157] += dqdci; // dwdot[NO2]/d[O]
  J[159] -= dqdci; // dwdot[HNO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[225] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[829] -= dqdci; // dwdot[O]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[852] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[4];
  J[895] -= dqdci; // dwdot[O]/d[HNO2]
  J[897] += dqdci; // dwdot[OH]/d[HNO2]
  J[916] += dqdci; // dwdot[NO2]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 132: HNO2 + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[27];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[25] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[27]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[25] += q; // NO2
  wdot[27] -= q; // HNO2
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[190] += dqdci; // dwdot[NO2]/d[H2O]
  J[192] -= dqdci; // dwdot[HNO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[27];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[225] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[830] += dqdci; // dwdot[H2O]/d[NO2]
  J[831] -= dqdci; // dwdot[OH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[852] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[6];
  J[896] += dqdci; // dwdot[H2O]/d[HNO2]
  J[897] -= dqdci; // dwdot[OH]/d[HNO2]
  J[916] += dqdci; // dwdot[NO2]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 134: H + NO3 <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 60000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[25];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[25] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[6] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[25] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[91] += dqdci; // dwdot[NO2]/d[H]
  J[94] -= dqdci; // dwdot[NO3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[226] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[853] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[2];
  J[926] -= dqdci; // dwdot[H]/d[NO3]
  J[930] += dqdci; // dwdot[OH]/d[NO3]
  J[949] += dqdci; // dwdot[NO2]/d[NO3]
  J[952] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1084] -= dqdT; // dwdot[NO3]/dT

  // reaction 135: NO3 + O <=> NO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[25];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[25] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[3] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[4] -= q;  // O
  wdot[25] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[25];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] -= dqdci; // dwdot[O]/d[O2]
  J[124] += dqdci; // dwdot[NO2]/d[O2]
  J[127] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[135] += dqdci; // dwdot[O2]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[157] += dqdci; // dwdot[NO2]/d[O]
  J[160] -= dqdci; // dwdot[NO3]/d[O]
  // d()/d[NO2]
  dqdci = -k_r * sc[3];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[829] -= dqdci; // dwdot[O]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[853] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[4];
  J[927] += dqdci; // dwdot[O2]/d[NO3]
  J[928] -= dqdci; // dwdot[O]/d[NO3]
  J[949] += dqdci; // dwdot[NO2]/d[NO3]
  J[952] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1084] -= dqdT; // dwdot[NO3]/dT

  // reaction 136: NO3 + OH <=> HO2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[28];
  k_f = 14000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[25];
  Kc = exp(g_RT[6] - g_RT[9] - g_RT[25] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[28]) + (h_RT[9] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[9] += q;  // HO2
  wdot[25] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[207] += dqdci; // dwdot[HO2]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[226] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[25];
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[322] += dqdci; // dwdot[NO2]/d[HO2]
  J[325] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[NO2]
  dqdci = -k_r * sc[9];
  J[831] -= dqdci; // dwdot[OH]/d[NO2]
  J[834] += dqdci; // dwdot[HO2]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[853] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[6];
  J[930] -= dqdci; // dwdot[OH]/d[NO3]
  J[933] += dqdci; // dwdot[HO2]/d[NO3]
  J[949] += dqdci; // dwdot[NO2]/d[NO3]
  J[952] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1084] -= dqdT; // dwdot[NO3]/dT

  // reaction 137: HO2 + NO3 <=> NO2 + O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[28];
  k_f = 1500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[6] * sc[25];
  Kc = refC * exp(-g_RT[3] - g_RT[6] + g_RT[9] - g_RT[25] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[9] + h_RT[28]) + (h_RT[3] + h_RT[6] + h_RT[25]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] += q;  // OH
  wdot[9] -= q;  // HO2
  wdot[25] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[6] * sc[25];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[124] += dqdci; // dwdot[NO2]/d[O2]
  J[127] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[3] * sc[25];
  J[201] += dqdci; // dwdot[O2]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  J[226] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[28];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[322] += dqdci; // dwdot[NO2]/d[HO2]
  J[325] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[NO2]
  dqdci = -k_r * sc[3] * sc[6];
  J[828] += dqdci; // dwdot[O2]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[834] -= dqdci; // dwdot[HO2]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[853] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[9];
  J[927] += dqdci; // dwdot[O2]/d[NO3]
  J[930] += dqdci; // dwdot[OH]/d[NO3]
  J[933] -= dqdci; // dwdot[HO2]/d[NO3]
  J[949] += dqdci; // dwdot[NO2]/d[NO3]
  J[952] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1084] -= dqdT; // dwdot[NO3]/dT

  // reaction 140: H + HONO2 <=> H2 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[29];
  k_f = 560 * exp(1.5 * logT - (8252.7533191974) * invT);
  dlnkfdT = 1.5 * invT + (8252.7533191974) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[29]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[28] += q; // NO3
  wdot[29] -= q; // HONO2
  // d()/d[H2]
  dqdci = -k_r * sc[28];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[61] += dqdci; // dwdot[NO3]/d[H2]
  J[62] -= dqdci; // dwdot[HONO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[94] += dqdci; // dwdot[NO3]/d[H]
  J[95] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[NO3]
  dqdci = -k_r * sc[1];
  J[925] += dqdci; // dwdot[H2]/d[NO3]
  J[926] -= dqdci; // dwdot[H]/d[NO3]
  J[952] += dqdci; // dwdot[NO3]/d[NO3]
  J[953] -= dqdci; // dwdot[HONO2]/d[NO3]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[958] += dqdci; // dwdot[H2]/d[HONO2]
  J[959] -= dqdci; // dwdot[H]/d[HONO2]
  J[985] += dqdci; // dwdot[NO3]/d[HONO2]
  J[986] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1084] += dqdT; // dwdot[NO3]/dT
  J[1085] -= dqdT; // dwdot[HONO2]/dT

  // reaction 141: H + HONO2 <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[29];
  k_f = 6.1e-05 * exp(3.3 * logT - (3162.71674458266) * invT);
  dlnkfdT = 3.3 * invT + (3162.71674458266) * invT2;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[25] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[29]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[25] += q; // NO2
  wdot[29] -= q; // HONO2
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[91] += dqdci; // dwdot[NO2]/d[H]
  J[95] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[190] += dqdci; // dwdot[NO2]/d[H2O]
  J[194] -= dqdci; // dwdot[HONO2]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[830] += dqdci; // dwdot[H2O]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[854] -= dqdci; // dwdot[HONO2]/d[NO2]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[959] -= dqdci; // dwdot[H]/d[HONO2]
  J[962] += dqdci; // dwdot[H2O]/d[HONO2]
  J[982] += dqdci; // dwdot[NO2]/d[HONO2]
  J[986] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1085] -= dqdT; // dwdot[HONO2]/dT

  // reaction 142: H + HONO2 <=> HONO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[29];
  k_f = 0.38 * exp(2.3 * logT - (3510.43946065372) * invT);
  dlnkfdT = 2.3 * invT + (3510.43946065372) * invT2;
  // reverse
  phi_r = sc[6] * sc[26];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[26] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[29]) + (h_RT[6] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[26] += q; // HONO
  wdot[29] -= q; // HONO2
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[92] += dqdci; // dwdot[HONO]/d[H]
  J[95] -= dqdci; // dwdot[HONO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[26];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[224] += dqdci; // dwdot[HONO]/d[OH]
  J[227] -= dqdci; // dwdot[HONO2]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[6];
  J[860] -= dqdci; // dwdot[H]/d[HONO]
  J[864] += dqdci; // dwdot[OH]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  J[887] -= dqdci; // dwdot[HONO2]/d[HONO]
  // d()/d[HONO2]
  dqdci = +k_f * sc[2];
  J[959] -= dqdci; // dwdot[H]/d[HONO2]
  J[963] += dqdci; // dwdot[OH]/d[HONO2]
  J[983] += dqdci; // dwdot[HONO]/d[HONO2]
  J[986] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT
  J[1085] -= dqdT; // dwdot[HONO2]/dT

  // reaction 143: HONO2 + OH <=> H2O + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[29];
  k_f = 10000 * exp(-(-623.988665597852) * invT);
  dlnkfdT = (-623.988665597852) * invT2;
  // reverse
  phi_r = sc[5] * sc[28];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[29]) + (h_RT[5] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[28] += q; // NO3
  wdot[29] -= q; // HONO2
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[193] += dqdci; // dwdot[NO3]/d[H2O]
  J[194] -= dqdci; // dwdot[HONO2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[29];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[226] += dqdci; // dwdot[NO3]/d[OH]
  J[227] -= dqdci; // dwdot[HONO2]/d[OH]
  // d()/d[NO3]
  dqdci = -k_r * sc[5];
  J[929] += dqdci; // dwdot[H2O]/d[NO3]
  J[930] -= dqdci; // dwdot[OH]/d[NO3]
  J[952] += dqdci; // dwdot[NO3]/d[NO3]
  J[953] -= dqdci; // dwdot[HONO2]/d[NO3]
  // d()/d[HONO2]
  dqdci = +k_f * sc[6];
  J[962] += dqdci; // dwdot[H2O]/d[HONO2]
  J[963] -= dqdci; // dwdot[OH]/d[HONO2]
  J[985] += dqdci; // dwdot[NO3]/d[HONO2]
  J[986] -= dqdci; // dwdot[HONO2]/d[HONO2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1084] += dqdT; // dwdot[NO3]/dT
  J[1085] -= dqdT; // dwdot[HONO2]/dT

  // reaction 145: H + HNO3 <=> H2 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[31];
  k_f = 556 * exp(1.5 * logT - (8252.7533191974) * invT);
  dlnkfdT = 1.5 * invT + (8252.7533191974) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[28] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[31]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[28] += q; // NO3
  wdot[31] -= q; // HNO3
  // d()/d[H2]
  dqdci = -k_r * sc[28];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[61] += dqdci; // dwdot[NO3]/d[H2]
  J[64] -= dqdci; // dwdot[HNO3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[31];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[94] += dqdci; // dwdot[NO3]/d[H]
  J[97] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[NO3]
  dqdci = -k_r * sc[1];
  J[925] += dqdci; // dwdot[H2]/d[NO3]
  J[926] -= dqdci; // dwdot[H]/d[NO3]
  J[952] += dqdci; // dwdot[NO3]/d[NO3]
  J[955] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[2];
  J[1024] += dqdci; // dwdot[H2]/d[HNO3]
  J[1025] -= dqdci; // dwdot[H]/d[HNO3]
  J[1051] += dqdci; // dwdot[NO3]/d[HNO3]
  J[1054] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1084] += dqdT; // dwdot[NO3]/dT
  J[1087] -= dqdT; // dwdot[HNO3]/dT

  // reaction 146: H + HNO3 <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[31];
  k_f = 6.08e-05 * exp(3.3 * logT - (3162.71674458266) * invT);
  dlnkfdT = 3.3 * invT + (3162.71674458266) * invT2;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[25] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[31]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[25] += q; // NO2
  wdot[31] -= q; // HNO3
  // d()/d[H]
  dqdci = +k_f * sc[31];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[91] += dqdci; // dwdot[NO2]/d[H]
  J[97] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[190] += dqdci; // dwdot[NO2]/d[H2O]
  J[196] -= dqdci; // dwdot[HNO3]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[830] += dqdci; // dwdot[H2O]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[856] -= dqdci; // dwdot[HNO3]/d[NO2]
  // d()/d[HNO3]
  dqdci = +k_f * sc[2];
  J[1025] -= dqdci; // dwdot[H]/d[HNO3]
  J[1028] += dqdci; // dwdot[H2O]/d[HNO3]
  J[1048] += dqdci; // dwdot[NO2]/d[HNO3]
  J[1054] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1087] -= dqdT; // dwdot[HNO3]/dT

  // reaction 147: H + HNO3 <=> HONO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[31];
  k_f = 0.382 * exp(2.3 * logT - (3510.43946065372) * invT);
  dlnkfdT = 2.3 * invT + (3510.43946065372) * invT2;
  // reverse
  phi_r = sc[6] * sc[26];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[26] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[31]) + (h_RT[6] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[26] += q; // HONO
  wdot[31] -= q; // HNO3
  // d()/d[H]
  dqdci = +k_f * sc[31];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[92] += dqdci; // dwdot[HONO]/d[H]
  J[97] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[26];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[224] += dqdci; // dwdot[HONO]/d[OH]
  J[229] -= dqdci; // dwdot[HNO3]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[6];
  J[860] -= dqdci; // dwdot[H]/d[HONO]
  J[864] += dqdci; // dwdot[OH]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  J[889] -= dqdci; // dwdot[HNO3]/d[HONO]
  // d()/d[HNO3]
  dqdci = +k_f * sc[2];
  J[1025] -= dqdci; // dwdot[H]/d[HNO3]
  J[1029] += dqdci; // dwdot[OH]/d[HNO3]
  J[1049] += dqdci; // dwdot[HONO]/d[HNO3]
  J[1054] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT
  J[1087] -= dqdT; // dwdot[HNO3]/dT

  // reaction 148: HNO3 + OH <=> H2O + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[31];
  k_f = 10300 * exp(-(-623.988665597852) * invT);
  dlnkfdT = (-623.988665597852) * invT2;
  // reverse
  phi_r = sc[5] * sc[28];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[28] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[31]) + (h_RT[5] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[28] += q; // NO3
  wdot[31] -= q; // HNO3
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[193] += dqdci; // dwdot[NO3]/d[H2O]
  J[196] -= dqdci; // dwdot[HNO3]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[31];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[226] += dqdci; // dwdot[NO3]/d[OH]
  J[229] -= dqdci; // dwdot[HNO3]/d[OH]
  // d()/d[NO3]
  dqdci = -k_r * sc[5];
  J[929] += dqdci; // dwdot[H2O]/d[NO3]
  J[930] -= dqdci; // dwdot[OH]/d[NO3]
  J[952] += dqdci; // dwdot[NO3]/d[NO3]
  J[955] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[6];
  J[1028] += dqdci; // dwdot[H2O]/d[HNO3]
  J[1029] -= dqdci; // dwdot[OH]/d[HNO3]
  J[1051] += dqdci; // dwdot[NO3]/d[HNO3]
  J[1054] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1084] += dqdT; // dwdot[NO3]/dT
  J[1087] -= dqdT; // dwdot[HNO3]/dT

  // reaction 150: H + HON <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 24000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = exp(g_RT[2] - g_RT[2] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[2] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] += q; // HNO
  wdot[24] -= q; // HON
  // d()/d[H]
  dqdci = +k_f * sc[24] - k_r * sc[23];
  J[89] += dqdci; // dwdot[HNO]/d[H]
  J[90] -= dqdci; // dwdot[HON]/d[H]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[783] -= dqdci; // dwdot[HON]/d[HNO]
  // d()/d[HON]
  dqdci = +k_f * sc[2];
  J[815] += dqdci; // dwdot[HNO]/d[HON]
  J[816] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT

  // reaction 151: H + HON <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[13] += q; // NH
  wdot[24] -= q; // HON
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[79] += dqdci; // dwdot[NH]/d[H]
  J[90] -= dqdci; // dwdot[HON]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[211] += dqdci; // dwdot[NH]/d[OH]
  J[222] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[6];
  J[431] -= dqdci; // dwdot[H]/d[NH]
  J[435] += dqdci; // dwdot[OH]/d[NH]
  J[442] += dqdci; // dwdot[NH]/d[NH]
  J[453] -= dqdci; // dwdot[HON]/d[NH]
  // d()/d[HON]
  dqdci = +k_f * sc[2];
  J[794] -= dqdci; // dwdot[H]/d[HON]
  J[798] += dqdci; // dwdot[OH]/d[HON]
  J[805] += dqdci; // dwdot[NH]/d[HON]
  J[816] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1069] += dqdT; // dwdot[NH]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT

  // reaction 152: HON + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[10] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[10] += q; // NO
  wdot[24] -= q; // HON
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[156] -= dqdci; // dwdot[HON]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[222] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[354] -= dqdci; // dwdot[HON]/d[NO]
  // d()/d[HON]
  dqdci = +k_f * sc[4];
  J[796] -= dqdci; // dwdot[O]/d[HON]
  J[798] += dqdci; // dwdot[OH]/d[HON]
  J[802] += dqdci; // dwdot[NO]/d[HON]
  J[816] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT

  // reaction 153: HON + OH <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[24];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[26];
  Kc = exp(-g_RT[2] + g_RT[6] + g_RT[24] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[24]) + (h_RT[2] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[6] -= q;  // OH
  wdot[24] -= q; // HON
  wdot[26] += q; // HONO
  // d()/d[H]
  dqdci = -k_r * sc[26];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  J[90] -= dqdci; // dwdot[HON]/d[H]
  J[92] += dqdci; // dwdot[HONO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[222] -= dqdci; // dwdot[HON]/d[OH]
  J[224] += dqdci; // dwdot[HONO]/d[OH]
  // d()/d[HON]
  dqdci = +k_f * sc[6];
  J[794] += dqdci; // dwdot[H]/d[HON]
  J[798] -= dqdci; // dwdot[OH]/d[HON]
  J[816] -= dqdci; // dwdot[HON]/d[HON]
  J[818] += dqdci; // dwdot[HONO]/d[HON]
  // d()/d[HONO]
  dqdci = -k_r * sc[2];
  J[860] += dqdci; // dwdot[H]/d[HONO]
  J[864] -= dqdci; // dwdot[OH]/d[HONO]
  J[882] -= dqdci; // dwdot[HON]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 154: HON + O2 <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[24];
  k_f = 1000000 * exp(-(2499.98039571785) * invT);
  dlnkfdT = (2499.98039571785) * invT2;
  // reverse
  phi_r = sc[6] * sc[25];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[24] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[24]) + (h_RT[6] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // OH
  wdot[24] -= q; // HON
  wdot[25] += q; // NO2
  // d()/d[O2]
  dqdci = +k_f * sc[24];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[OH]/d[O2]
  J[123] -= dqdci; // dwdot[HON]/d[O2]
  J[124] += dqdci; // dwdot[NO2]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[201] -= dqdci; // dwdot[O2]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[222] -= dqdci; // dwdot[HON]/d[OH]
  J[223] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HON]
  dqdci = +k_f * sc[3];
  J[795] -= dqdci; // dwdot[O2]/d[HON]
  J[798] += dqdci; // dwdot[OH]/d[HON]
  J[816] -= dqdci; // dwdot[HON]/d[HON]
  J[817] += dqdci; // dwdot[NO2]/d[HON]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[828] -= dqdci; // dwdot[O2]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[849] -= dqdci; // dwdot[HON]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1080] -= dqdT; // dwdot[HON]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT

  // reaction 156: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[30];
  k_f = 64 * exp(1.835 * logT - (6789.39925503728) * invT);
  dlnkfdT = 1.835 * invT + (6789.39925503728) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[30]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[6] += dqdci;  // dwdot[OH]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[66] += dqdci; // dwdot[N2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[96] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[198] += dqdci; // dwdot[N2]/d[OH]
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[228] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[992] -= dqdci;  // dwdot[H]/d[N2O]
  J[996] += dqdci;  // dwdot[OH]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 157: H + N2O <=> N2 + OHV
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[30];
  k_f = 160000000 * exp(-(25311.7982899774) * invT);
  dlnkfdT = (25311.7982899774) * invT2;
  // reverse
  phi_r = sc[0] * sc[7];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[7] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[30]) + (h_RT[0] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] -= q;  // H
  wdot[7] += q;  // OHV
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[7];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[7] += dqdci;  // dwdot[OHV]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[66] += dqdci; // dwdot[N2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[73] += dqdci; // dwdot[OHV]/d[H]
  J[96] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OHV]
  dqdci = -k_r * sc[0];
  J[231] += dqdci; // dwdot[N2]/d[OHV]
  J[233] -= dqdci; // dwdot[H]/d[OHV]
  J[238] += dqdci; // dwdot[OHV]/d[OHV]
  J[261] -= dqdci; // dwdot[N2O]/d[OHV]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[992] -= dqdci;  // dwdot[H]/d[N2O]
  J[997] += dqdci;  // dwdot[OHV]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1063] += dqdT; // dwdot[OHV]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 158: N2O + O <=> N2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[30];
  k_f = 3690000 * exp(-(8019.26078626401) * invT);
  dlnkfdT = (8019.26078626401) * invT2;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = exp(-g_RT[0] - g_RT[3] + g_RT[4] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[30]) + (h_RT[0] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] += q;  // O2
  wdot[4] -= q;  // O
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[3];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] += dqdci;  // dwdot[O2]/d[N2]
  J[4] -= dqdci;  // dwdot[O]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[99] += dqdci;  // dwdot[N2]/d[O2]
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] -= dqdci; // dwdot[O]/d[O2]
  J[129] -= dqdci; // dwdot[N2O]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[30];
  J[132] += dqdci; // dwdot[N2]/d[O]
  J[135] += dqdci; // dwdot[O2]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[162] -= dqdci; // dwdot[N2O]/d[O]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[993] += dqdci;  // dwdot[O2]/d[N2O]
  J[994] -= dqdci;  // dwdot[O]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 159: N2O + O <=> 2 NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[30];
  k_f = 91500000 * exp(-(13928.5340928088) * invT);
  dlnkfdT = (13928.5340928088) * invT2;
  // reverse
  phi_r = (sc[10] * sc[10]);
  Kc = exp(g_RT[4] - 2.000000 * g_RT[10] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[30]) + (2.000000 * h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;      // O
  wdot[10] += 2 * q; // NO
  wdot[30] -= q;     // N2O
  // d()/d[O]
  dqdci = +k_f * sc[30];
  J[136] -= dqdci;     // dwdot[O]/d[O]
  J[142] += 2 * dqdci; // dwdot[NO]/d[O]
  J[162] -= dqdci;     // dwdot[N2O]/d[O]
  // d()/d[NO]
  dqdci = -k_r * 2.000000 * sc[10];
  J[334] -= dqdci;     // dwdot[O]/d[NO]
  J[340] += 2 * dqdci; // dwdot[NO]/d[NO]
  J[360] -= dqdci;     // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[994] -= dqdci;      // dwdot[O]/d[N2O]
  J[1000] += 2 * dqdci; // dwdot[NO]/d[N2O]
  J[1020] -= dqdci;     // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1060] -= dqdT;     // dwdot[O]/dT
  J[1066] += 2 * dqdT; // dwdot[NO]/dT
  J[1086] -= dqdT;     // dwdot[N2O]/dT

  // reaction 160: N2O + OH <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[30];
  k_f = 1.3e-08 * exp(4.72 * logT - (18397.6013018206) * invT);
  dlnkfdT = 4.72 * invT + (18397.6013018206) * invT2;
  // reverse
  phi_r = sc[0] * sc[9];
  Kc = exp(-g_RT[0] + g_RT[6] - g_RT[9] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[30]) + (h_RT[0] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[6] -= q;  // OH
  wdot[9] += q;  // HO2
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[9];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[6] -= dqdci;  // dwdot[OH]/d[N2]
  J[9] += dqdci;  // dwdot[HO2]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[OH]
  dqdci = +k_f * sc[30];
  J[198] += dqdci; // dwdot[N2]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[207] += dqdci; // dwdot[HO2]/d[OH]
  J[228] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[297] += dqdci; // dwdot[N2]/d[HO2]
  J[303] -= dqdci; // dwdot[OH]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[327] -= dqdci; // dwdot[N2O]/d[HO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[6];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[996] -= dqdci;  // dwdot[OH]/d[N2O]
  J[999] += dqdci;  // dwdot[HO2]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 161: N2O + OH <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[30];
  k_f = 1.2e-10 * exp(4.33 * logT - (12620.6739783824) * invT);
  dlnkfdT = 4.33 * invT + (12620.6739783824) * invT2;
  // reverse
  phi_r = sc[10] * sc[23];
  Kc = exp(g_RT[6] - g_RT[10] - g_RT[23] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[30]) + (h_RT[10] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[10] += q; // NO
  wdot[23] += q; // HNO
  wdot[30] -= q; // N2O
  // d()/d[OH]
  dqdci = +k_f * sc[30];
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  J[228] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[23];
  J[336] -= dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] += dqdci; // dwdot[HNO]/d[NO]
  J[360] -= dqdci; // dwdot[N2O]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[10];
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[789] -= dqdci; // dwdot[N2O]/d[HNO]
  // d()/d[N2O]
  dqdci = +k_f * sc[6];
  J[996] -= dqdci;  // dwdot[OH]/d[N2O]
  J[1000] += dqdci; // dwdot[NO]/d[N2O]
  J[1013] += dqdci; // dwdot[HNO]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 162: N2O + NO <=> N2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[30];
  k_f = 0.53 * exp(2.23 * logT - (23289.3705101082) * invT);
  dlnkfdT = 2.23 * invT + (23289.3705101082) * invT2;
  // reverse
  phi_r = sc[0] * sc[25];
  Kc = exp(-g_RT[0] + g_RT[10] - g_RT[25] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[30]) + (h_RT[0] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[10] -= q; // NO
  wdot[25] += q; // NO2
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[25];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[10] -= dqdci; // dwdot[NO]/d[N2]
  J[25] += dqdci; // dwdot[NO2]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[NO]
  dqdci = +k_f * sc[30];
  J[330] += dqdci; // dwdot[N2]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[355] += dqdci; // dwdot[NO2]/d[NO]
  J[360] -= dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[0];
  J[825] += dqdci; // dwdot[N2]/d[NO2]
  J[835] -= dqdci; // dwdot[NO]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[855] -= dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[10];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[1000] -= dqdci; // dwdot[NO]/d[N2O]
  J[1015] += dqdci; // dwdot[NO2]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 163: 2 NH2 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 170 * exp(1.62 * logT - (5929.40197317701) * invT);
  dlnkfdT = 1.62 * invT + (5929.40197317701) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H2
  wdot[12] -= 2 * q; // NH2
  wdot[18] += q;     // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[34] += dqdci;      // dwdot[H2]/d[H2]
  J[45] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[51] += dqdci;      // dwdot[N2H2]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[12];
  J[397] += dqdci;      // dwdot[H2]/d[NH2]
  J[408] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[414] += dqdci;      // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[1];
  J[595] += dqdci;      // dwdot[H2]/d[N2H2]
  J[606] += -2 * dqdci; // dwdot[NH2]/d[N2H2]
  J[612] += dqdci;      // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1057] += dqdT;      // dwdot[H2]/dT
  J[1068] += -2 * dqdT; // dwdot[NH2]/dT
  J[1074] += dqdT;      // dwdot[N2H2]/dT

  // reaction 164: 2 NH2 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 0.072 * exp(1.88 * logT - (4429.31309241314) * invT);
  dlnkfdT = 1.88 * invT + (4429.31309241314) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[1] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H2
  wdot[12] -= 2 * q; // NH2
  wdot[19] += q;     // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[34] += dqdci;      // dwdot[H2]/d[H2]
  J[45] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[52] += dqdci;      // dwdot[H2NN]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[12];
  J[397] += dqdci;      // dwdot[H2]/d[NH2]
  J[408] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[415] += dqdci;      // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[1];
  J[628] += dqdci;      // dwdot[H2]/d[H2NN]
  J[639] += -2 * dqdci; // dwdot[NH2]/d[H2NN]
  J[646] += dqdci;      // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1057] += dqdT;      // dwdot[H2]/dT
  J[1068] += -2 * dqdT; // dwdot[NH2]/dT
  J[1075] += dqdT;      // dwdot[H2NN]/dT

  // reaction 165: NH + NH2 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[13];
  k_f = 430000000 * exp(-0.272 * logT - (-38.7476832669634) * invT);
  dlnkfdT = -0.272 * invT + (-38.7476832669634) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(-g_RT[2] + g_RT[12] + g_RT[13] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[13]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[12] -= q; // NH2
  wdot[13] -= q; // NH
  wdot[18] += q; // N2H2
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[78] -= dqdci; // dwdot[NH2]/d[H]
  J[79] -= dqdci; // dwdot[NH]/d[H]
  J[84] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NH2]
  dqdci = +k_f * sc[13];
  J[398] += dqdci; // dwdot[H]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[414] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[12];
  J[431] += dqdci; // dwdot[H]/d[NH]
  J[441] -= dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[447] += dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[596] += dqdci; // dwdot[H]/d[N2H2]
  J[606] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[607] -= dqdci; // dwdot[NH]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 166: HNOH + NH2 <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[22];
  k_f = 1e-05 * exp(3.46 * logT - (-235.002182930804) * invT);
  dlnkfdT = 3.46 * invT + (-235.002182930804) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(-g_RT[6] + g_RT[12] - g_RT[17] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[22]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[12] -= q; // NH2
  wdot[17] += q; // N2H3
  wdot[22] -= q; // HNOH
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[215] += dqdci; // dwdot[N2H3]/d[OH]
  J[220] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[22];
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[413] += dqdci; // dwdot[N2H3]/d[NH2]
  J[418] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[6];
  J[567] += dqdci; // dwdot[OH]/d[N2H3]
  J[573] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[583] -= dqdci; // dwdot[HNOH]/d[N2H3]
  // d()/d[HNOH]
  dqdci = +k_f * sc[12];
  J[732] += dqdci; // dwdot[OH]/d[HNOH]
  J[738] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[743] += dqdci; // dwdot[N2H3]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT

  // reaction 167: HNOH + NH2 <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[22];
  k_f = 88000000000 * exp(-1.08 * logT - (560.080149040653) * invT);
  dlnkfdT = -1.08 * invT + (560.080149040653) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(-g_RT[5] + g_RT[12] - g_RT[19] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[22]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[12] -= q; // NH2
  wdot[19] += q; // H2NN
  wdot[22] -= q; // HNOH
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  J[184] += dqdci; // dwdot[H2NN]/d[H2O]
  J[187] -= dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[22];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[415] += dqdci; // dwdot[H2NN]/d[NH2]
  J[418] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[5];
  J[632] += dqdci; // dwdot[H2O]/d[H2NN]
  J[639] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[646] += dqdci; // dwdot[H2NN]/d[H2NN]
  J[649] -= dqdci; // dwdot[HNOH]/d[H2NN]
  // d()/d[HNOH]
  dqdci = +k_f * sc[12];
  J[731] += dqdci; // dwdot[H2O]/d[HNOH]
  J[738] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[745] += dqdci; // dwdot[H2NN]/d[HNOH]
  J[748] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1075] += dqdT; // dwdot[H2NN]/dT
  J[1078] -= dqdT; // dwdot[HNOH]/dT

  // reaction 169: N2H4 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16];
  k_f = 140000000000000 * exp(-(37696.4636520974) * invT);
  dlnkfdT = (37696.4636520974) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = refC * exp(-g_RT[1] + g_RT[16] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[1] + h_RT[19]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[16] -= q; // N2H4
  wdot[19] += q; // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[49] -= dqdci; // dwdot[N2H4]/d[H2]
  J[52] += dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[N2H4]
  dqdci = +k_f;
  J[529] += dqdci; // dwdot[H2]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[547] += dqdci; // dwdot[H2NN]/d[N2H4]
  // d()/d[H2NN]
  dqdci = -k_r * sc[1];
  J[628] += dqdci; // dwdot[H2]/d[H2NN]
  J[643] -= dqdci; // dwdot[N2H4]/d[H2NN]
  J[646] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1075] += dqdT; // dwdot[H2NN]/dT

  // reaction 170: H + N2H4 <=> H2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 7000000 * exp(-(1258.0416645118) * invT);
  dlnkfdT = (1258.0416645118) * invT2;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[49] -= dqdci; // dwdot[N2H4]/d[H2]
  J[50] += dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[N2H4]/d[H]
  J[83] += dqdci; // dwdot[N2H3]/d[H]
  // d()/d[N2H4]
  dqdci = +k_f * sc[2];
  J[529] += dqdci; // dwdot[H2]/d[N2H4]
  J[530] -= dqdci; // dwdot[H]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[1];
  J[562] += dqdci; // dwdot[H2]/d[N2H3]
  J[563] -= dqdci; // dwdot[H]/d[N2H3]
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT

  // reaction 171: H + N2H4 <=> NH2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 0.23 * exp(1.42 * logT - (4127.38309293031) * invT);
  dlnkfdT = 1.42 * invT + (4127.38309293031) * invT2;
  // reverse
  phi_r = sc[11] * sc[12];
  Kc = exp(g_RT[2] - g_RT[11] - g_RT[12] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[11] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[11] += q; // NH3
  wdot[12] += q; // NH2
  wdot[16] -= q; // N2H4
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[77] += dqdci; // dwdot[NH3]/d[H]
  J[78] += dqdci; // dwdot[NH2]/d[H]
  J[82] -= dqdci; // dwdot[N2H4]/d[H]
  // d()/d[NH3]
  dqdci = -k_r * sc[12];
  J[365] -= dqdci; // dwdot[H]/d[NH3]
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] += dqdci; // dwdot[NH2]/d[NH3]
  J[379] -= dqdci; // dwdot[N2H4]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[11];
  J[398] -= dqdci; // dwdot[H]/d[NH2]
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[412] -= dqdci; // dwdot[N2H4]/d[NH2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[2];
  J[530] -= dqdci; // dwdot[H]/d[N2H4]
  J[539] += dqdci; // dwdot[NH3]/d[N2H4]
  J[540] += dqdci; // dwdot[NH2]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT

  // reaction 172: N2H4 + O <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 150000 * exp(-(-639.085165571994) * invT);
  dlnkfdT = (-639.085165571994) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[148] -= dqdci; // dwdot[N2H4]/d[O]
  J[149] += dqdci; // dwdot[N2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[214] -= dqdci; // dwdot[N2H4]/d[OH]
  J[215] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[532] -= dqdci; // dwdot[O]/d[N2H4]
  J[534] += dqdci; // dwdot[OH]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[6];
  J[565] -= dqdci; // dwdot[O]/d[N2H3]
  J[567] += dqdci; // dwdot[OH]/d[N2H3]
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT

  // reaction 173: N2H4 + O <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 290000 * exp(-(-639.085165571994) * invT);
  dlnkfdT = (-639.085165571994) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // H2O
  wdot[16] -= q; // N2H4
  wdot[18] += q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[137] += dqdci; // dwdot[H2O]/d[O]
  J[148] -= dqdci; // dwdot[N2H4]/d[O]
  J[150] += dqdci; // dwdot[N2H2]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[169] -= dqdci; // dwdot[O]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[181] -= dqdci; // dwdot[N2H4]/d[H2O]
  J[183] += dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[532] -= dqdci; // dwdot[O]/d[N2H4]
  J[533] += dqdci; // dwdot[H2O]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[546] += dqdci; // dwdot[N2H2]/d[N2H4]
  // d()/d[N2H2]
  dqdci = -k_r * sc[5];
  J[598] -= dqdci; // dwdot[O]/d[N2H2]
  J[599] += dqdci; // dwdot[H2O]/d[N2H2]
  J[610] -= dqdci; // dwdot[N2H4]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 174: N2H4 + OH <=> H2O + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[16];
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  dlnkfdT = (-160.022899725901) * invT2;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[16]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[181] -= dqdci; // dwdot[N2H4]/d[H2O]
  J[182] += dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[214] -= dqdci; // dwdot[N2H4]/d[OH]
  J[215] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H4]
  dqdci = +k_f * sc[6];
  J[533] += dqdci; // dwdot[H2O]/d[N2H4]
  J[534] -= dqdci; // dwdot[OH]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[5];
  J[566] += dqdci; // dwdot[H2O]/d[N2H3]
  J[567] -= dqdci; // dwdot[OH]/d[N2H3]
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT

  // reaction 175: N2H4 + NH2 <=> N2H3 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[16];
  k_f = 7.6e-07 * exp(4 * logT - (2037.02106317751) * invT);
  dlnkfdT = 4 * invT + (2037.02106317751) * invT2;
  // reverse
  phi_r = sc[11] * sc[17];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[16]) + (h_RT[11] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  // d()/d[NH3]
  dqdci = -k_r * sc[17];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[379] -= dqdci; // dwdot[N2H4]/d[NH3]
  J[380] += dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[16];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[412] -= dqdci; // dwdot[N2H4]/d[NH2]
  J[413] += dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[12];
  J[539] += dqdci; // dwdot[NH3]/d[N2H4]
  J[540] -= dqdci; // dwdot[NH2]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[11];
  J[572] += dqdci; // dwdot[NH3]/d[N2H3]
  J[573] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT

  // reaction 176: N2H4 + NO <=> HNO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 6e-05 * exp(3.16 * logT - (15521.7180567466) * invT);
  dlnkfdT = 3.16 * invT + (15521.7180567466) * invT2;
  // reverse
  phi_r = sc[17] * sc[23];
  Kc = exp(g_RT[10] + g_RT[16] - g_RT[17] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[17] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NO
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  wdot[23] += q; // HNO
  // d()/d[NO]
  dqdci = +k_f * sc[16];
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[346] -= dqdci; // dwdot[N2H4]/d[NO]
  J[347] += dqdci; // dwdot[N2H3]/d[NO]
  J[353] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[N2H4]
  dqdci = +k_f * sc[10];
  J[538] -= dqdci; // dwdot[NO]/d[N2H4]
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[551] += dqdci; // dwdot[HNO]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[23];
  J[571] -= dqdci; // dwdot[NO]/d[N2H3]
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[584] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[17];
  J[769] -= dqdci; // dwdot[NO]/d[HNO]
  J[775] -= dqdci; // dwdot[N2H4]/d[HNO]
  J[776] += dqdci; // dwdot[N2H3]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 177: N2H4 + NO2 <=> HONO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[25];
  k_f = 8.2e-05 * exp(3.13 * logT - (4458.49965902982) * invT);
  dlnkfdT = 3.13 * invT + (4458.49965902982) * invT2;
  // reverse
  phi_r = sc[17] * sc[26];
  Kc = exp(g_RT[16] - g_RT[17] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[25]) + (h_RT[17] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  wdot[25] -= q; // NO2
  wdot[26] += q; // HONO
  // d()/d[N2H4]
  dqdci = +k_f * sc[25];
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[553] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[554] += dqdci; // dwdot[HONO]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[26];
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[586] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[587] += dqdci; // dwdot[HONO]/d[N2H3]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[841] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[842] += dqdci; // dwdot[N2H3]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[17];
  J[874] -= dqdci; // dwdot[N2H4]/d[HONO]
  J[875] += dqdci; // dwdot[N2H3]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 178: N2H4 + NO2 <=> HNO2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[25];
  k_f = 2.4e-08 * exp(4.14 * logT - (3998.5596264843) * invT);
  dlnkfdT = 4.14 * invT + (3998.5596264843) * invT2;
  // reverse
  phi_r = sc[17] * sc[27];
  Kc = exp(g_RT[16] - g_RT[17] + g_RT[25] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[25]) + (h_RT[17] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] -= q; // N2H4
  wdot[17] += q; // N2H3
  wdot[25] -= q; // NO2
  wdot[27] += q; // HNO2
  // d()/d[N2H4]
  dqdci = +k_f * sc[25];
  J[544] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[553] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[555] += dqdci; // dwdot[HNO2]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[27];
  J[577] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[586] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[588] += dqdci; // dwdot[HNO2]/d[N2H3]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[841] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[842] += dqdci; // dwdot[N2H3]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[852] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[17];
  J[907] -= dqdci; // dwdot[N2H4]/d[HNO2]
  J[908] += dqdci; // dwdot[N2H3]/d[HNO2]
  J[916] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[918] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1072] -= dqdT; // dwdot[N2H4]/dT
  J[1073] += dqdT; // dwdot[N2H3]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1083] += dqdT; // dwdot[HNO2]/dT

  // reaction 179: H + N2H3 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 240 * exp(1.5 * logT - (-5.0321666580472) * invT);
  dlnkfdT = 1.5 * invT + (-5.0321666580472) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[50] -= dqdci; // dwdot[N2H3]/d[H2]
  J[51] += dqdci; // dwdot[N2H2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[83] -= dqdci; // dwdot[N2H3]/d[H]
  J[84] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[N2H3]
  dqdci = +k_f * sc[2];
  J[562] += dqdci; // dwdot[H2]/d[N2H3]
  J[563] -= dqdci; // dwdot[H]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[1];
  J[595] += dqdci; // dwdot[H2]/d[N2H2]
  J[596] -= dqdci; // dwdot[H]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 180: N2H3 + O <=> N2H2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 170 * exp(1.5 * logT - (-325.077966109849) * invT);
  dlnkfdT = 1.5 * invT + (-325.077966109849) * invT2;
  // reverse
  phi_r = sc[6] * sc[18];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[6] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[149] -= dqdci; // dwdot[N2H3]/d[O]
  J[150] += dqdci; // dwdot[N2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[215] -= dqdci; // dwdot[N2H3]/d[OH]
  J[216] += dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[565] -= dqdci; // dwdot[O]/d[N2H3]
  J[567] += dqdci; // dwdot[OH]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[6];
  J[598] -= dqdci; // dwdot[O]/d[N2H2]
  J[600] += dqdci; // dwdot[OH]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 181: N2H3 + O <=> HNO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[23];
  Kc = exp(g_RT[4] - g_RT[12] + g_RT[17] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[12] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[12] += q; // NH2
  wdot[17] -= q; // N2H3
  wdot[23] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[144] += dqdci; // dwdot[NH2]/d[O]
  J[149] -= dqdci; // dwdot[N2H3]/d[O]
  J[155] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[23];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[413] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[419] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[565] -= dqdci; // dwdot[O]/d[N2H3]
  J[573] += dqdci; // dwdot[NH2]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[584] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[12];
  J[763] -= dqdci; // dwdot[O]/d[HNO]
  J[771] += dqdci; // dwdot[NH2]/d[HNO]
  J[776] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 182: N2H3 + O => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[12] += q; // NH2
  wdot[17] -= q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[134] += dqdci; // dwdot[H]/d[O]
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[144] += dqdci; // dwdot[NH2]/d[O]
  J[149] -= dqdci; // dwdot[N2H3]/d[O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[563] += dqdci; // dwdot[H]/d[N2H3]
  J[565] -= dqdci; // dwdot[O]/d[N2H3]
  J[571] += dqdci; // dwdot[NO]/d[N2H3]
  J[573] += dqdci; // dwdot[NH2]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT

  // reaction 183: N2H3 + OH <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 1.2 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[182] -= dqdci; // dwdot[N2H3]/d[H2O]
  J[183] += dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[215] -= dqdci; // dwdot[N2H3]/d[OH]
  J[216] += dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[6];
  J[566] += dqdci; // dwdot[H2O]/d[N2H3]
  J[567] -= dqdci; // dwdot[OH]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[5];
  J[599] += dqdci; // dwdot[H2O]/d[N2H2]
  J[600] -= dqdci; // dwdot[OH]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 184: N2H3 + OH <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[17] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[17] -= q; // N2H3
  wdot[19] += q; // H2NN
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[182] -= dqdci; // dwdot[N2H3]/d[H2O]
  J[184] += dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[215] -= dqdci; // dwdot[N2H3]/d[OH]
  J[217] += dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[6];
  J[566] += dqdci; // dwdot[H2O]/d[N2H3]
  J[567] -= dqdci; // dwdot[OH]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[580] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[5];
  J[632] += dqdci; // dwdot[H2O]/d[H2NN]
  J[633] -= dqdci; // dwdot[OH]/d[H2NN]
  J[644] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[646] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1075] += dqdT; // dwdot[H2NN]/dT

  // reaction 185: N2H3 + OH <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 1000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[11] * sc[23];
  Kc = exp(g_RT[6] - g_RT[11] + g_RT[17] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[11] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[11] += q; // NH3
  wdot[17] -= q; // N2H3
  wdot[23] += q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[209] += dqdci; // dwdot[NH3]/d[OH]
  J[215] -= dqdci; // dwdot[N2H3]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[369] -= dqdci; // dwdot[OH]/d[NH3]
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[380] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[386] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * sc[6];
  J[567] -= dqdci; // dwdot[OH]/d[N2H3]
  J[572] += dqdci; // dwdot[NH3]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[584] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[11];
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[770] += dqdci; // dwdot[NH3]/d[HNO]
  J[776] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 186: HO2 + N2H3 <=> H2O2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[17];
  k_f = 0.014 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[8] * sc[18];
  Kc = exp(-g_RT[8] + g_RT[9] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[17]) + (h_RT[8] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[H2O2]
  dqdci = -k_r * sc[18];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[281] -= dqdci; // dwdot[N2H3]/d[H2O2]
  J[282] += dqdci; // dwdot[N2H2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[314] -= dqdci; // dwdot[N2H3]/d[HO2]
  J[315] += dqdci; // dwdot[N2H2]/d[HO2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[9];
  J[569] += dqdci; // dwdot[H2O2]/d[N2H3]
  J[570] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[8];
  J[602] += dqdci; // dwdot[H2O2]/d[N2H2]
  J[603] -= dqdci; // dwdot[HO2]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 187: HO2 + N2H3 <=> N2H4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[17];
  k_f = 0.92 * exp(1.94 * logT - (1069.83863150083) * invT);
  dlnkfdT = 1.94 * invT + (1069.83863150083) * invT2;
  // reverse
  phi_r = sc[3] * sc[16];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[17]) + (h_RT[3] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[9] -= q;  // HO2
  wdot[16] += q; // N2H4
  wdot[17] -= q; // N2H3
  // d()/d[O2]
  dqdci = -k_r * sc[16];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[115] += dqdci; // dwdot[N2H4]/d[O2]
  J[116] -= dqdci; // dwdot[N2H3]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[313] += dqdci; // dwdot[N2H4]/d[HO2]
  J[314] -= dqdci; // dwdot[N2H3]/d[HO2]
  // d()/d[N2H4]
  dqdci = -k_r * sc[3];
  J[531] += dqdci; // dwdot[O2]/d[N2H4]
  J[537] -= dqdci; // dwdot[HO2]/d[N2H4]
  J[544] += dqdci; // dwdot[N2H4]/d[N2H4]
  J[545] -= dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = +k_f * sc[9];
  J[564] += dqdci; // dwdot[O2]/d[N2H3]
  J[570] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[577] += dqdci; // dwdot[N2H4]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1072] += dqdT; // dwdot[N2H4]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT

  // reaction 188: N2H3 + NH2 <=> N2H2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[17];
  k_f = 0.92 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[17]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[NH3]
  dqdci = -k_r * sc[18];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[380] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[381] += dqdci; // dwdot[N2H2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[17];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[413] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[414] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[12];
  J[572] += dqdci; // dwdot[NH3]/d[N2H3]
  J[573] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[11];
  J[605] += dqdci; // dwdot[NH3]/d[N2H2]
  J[606] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 189: N2H3 + NH2 <=> H2NN + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[17];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[19];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[17] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[17]) + (h_RT[11] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[17] -= q; // N2H3
  wdot[19] += q; // H2NN
  // d()/d[NH3]
  dqdci = -k_r * sc[19];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[380] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[382] += dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[17];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[413] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[415] += dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[12];
  J[572] += dqdci; // dwdot[NH3]/d[N2H3]
  J[573] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[580] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[11];
  J[638] += dqdci; // dwdot[NH3]/d[H2NN]
  J[639] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[644] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[646] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1075] += dqdT; // dwdot[H2NN]/dT

  // reaction 190: N2H3 + NH <=> N2H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[17];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[18];
  Kc = exp(-g_RT[12] + g_RT[13] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[17]) + (h_RT[12] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[NH2]
  dqdci = -k_r * sc[18];
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[413] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[414] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[17];
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[446] -= dqdci; // dwdot[N2H3]/d[NH]
  J[447] += dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[N2H3]
  dqdci = +k_f * sc[13];
  J[573] += dqdci; // dwdot[NH2]/d[N2H3]
  J[574] -= dqdci; // dwdot[NH]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[12];
  J[606] += dqdci; // dwdot[NH2]/d[N2H2]
  J[607] -= dqdci; // dwdot[NH]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  // reaction 191: H + N2H2 <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 110000000 * exp(-(1574.06173063716) * invT);
  dlnkfdT = (1574.06173063716) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[48] += dqdci; // dwdot[NNH]/d[H2]
  J[51] -= dqdci; // dwdot[N2H2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[81] += dqdci; // dwdot[NNH]/d[H]
  J[84] -= dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[1];
  J[496] += dqdci; // dwdot[H2]/d[NNH]
  J[497] -= dqdci; // dwdot[H]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[2];
  J[595] += dqdci; // dwdot[H2]/d[N2H2]
  J[596] -= dqdci; // dwdot[H]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 192: N2H2 + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 330 * exp(1.5 * logT - (250.098682904946) * invT);
  dlnkfdT = 1.5 * invT + (250.098682904946) * invT2;
  // reverse
  phi_r = sc[6] * sc[15];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[6] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[147] += dqdci; // dwdot[NNH]/d[O]
  J[150] -= dqdci; // dwdot[N2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[213] += dqdci; // dwdot[NNH]/d[OH]
  J[216] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[499] -= dqdci; // dwdot[O]/d[NNH]
  J[501] += dqdci; // dwdot[OH]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[4];
  J[598] -= dqdci; // dwdot[O]/d[N2H2]
  J[600] += dqdci; // dwdot[OH]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 193: N2H2 + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(g_RT[4] - g_RT[10] - g_RT[12] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[12] += q; // NH2
  wdot[18] -= q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[144] += dqdci; // dwdot[NH2]/d[O]
  J[150] -= dqdci; // dwdot[N2H2]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[12];
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[342] += dqdci; // dwdot[NH2]/d[NO]
  J[348] -= dqdci; // dwdot[N2H2]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[10];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[406] += dqdci; // dwdot[NO]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[414] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[4];
  J[598] -= dqdci; // dwdot[O]/d[N2H2]
  J[604] += dqdci; // dwdot[NO]/d[N2H2]
  J[606] += dqdci; // dwdot[NH2]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 194: N2H2 + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[18];
  k_f = 5.9e-05 * exp(3.4 * logT - (684.374665494419) * invT);
  dlnkfdT = 3.4 * invT + (684.374665494419) * invT2;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[18]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[180] += dqdci; // dwdot[NNH]/d[H2O]
  J[183] -= dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[213] += dqdci; // dwdot[NNH]/d[OH]
  J[216] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[500] += dqdci; // dwdot[H2O]/d[NNH]
  J[501] -= dqdci; // dwdot[OH]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[6];
  J[599] += dqdci; // dwdot[H2O]/d[N2H2]
  J[600] -= dqdci; // dwdot[OH]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 195: N2H2 + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[18];
  k_f = 8.8e-08 * exp(4.05 * logT - (810.178831945599) * invT);
  dlnkfdT = 4.05 * invT + (810.178831945599) * invT2;
  // reverse
  phi_r = sc[11] * sc[15];
  Kc = exp(-g_RT[11] + g_RT[12] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[18]) + (h_RT[11] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[NH3]
  dqdci = -k_r * sc[15];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[378] += dqdci; // dwdot[NNH]/d[NH3]
  J[381] -= dqdci; // dwdot[N2H2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[411] += dqdci; // dwdot[NNH]/d[NH2]
  J[414] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[11];
  J[506] += dqdci; // dwdot[NH3]/d[NNH]
  J[507] -= dqdci; // dwdot[NH2]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[12];
  J[605] += dqdci; // dwdot[NH3]/d[N2H2]
  J[606] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 196: N2H2 + NH <=> NH2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[18];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[12] * sc[15];
  Kc = exp(-g_RT[12] + g_RT[13] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[18]) + (h_RT[12] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // NH2
  wdot[13] -= q; // NH
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[NH2]
  dqdci = -k_r * sc[15];
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[409] -= dqdci; // dwdot[NH]/d[NH2]
  J[411] += dqdci; // dwdot[NNH]/d[NH2]
  J[414] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH]
  dqdci = +k_f * sc[18];
  J[441] += dqdci; // dwdot[NH2]/d[NH]
  J[442] -= dqdci; // dwdot[NH]/d[NH]
  J[444] += dqdci; // dwdot[NNH]/d[NH]
  J[447] -= dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[NNH]
  dqdci = -k_r * sc[12];
  J[507] += dqdci; // dwdot[NH2]/d[NNH]
  J[508] -= dqdci; // dwdot[NH]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[13];
  J[606] += dqdci; // dwdot[NH2]/d[N2H2]
  J[607] -= dqdci; // dwdot[NH]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1069] -= dqdT; // dwdot[NH]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 197: N2H2 + NO <=> N2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 4000000 * exp(-(5999.34908972387) * invT);
  dlnkfdT = (5999.34908972387) * invT2;
  // reverse
  phi_r = sc[12] * sc[30];
  Kc = exp(g_RT[10] - g_RT[12] + g_RT[18] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[12] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NO
  wdot[12] += q; // NH2
  wdot[18] -= q; // N2H2
  wdot[30] += q; // N2O
  // d()/d[NO]
  dqdci = +k_f * sc[18];
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[342] += dqdci; // dwdot[NH2]/d[NO]
  J[348] -= dqdci; // dwdot[N2H2]/d[NO]
  J[360] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[30];
  J[406] -= dqdci; // dwdot[NO]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[414] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[426] += dqdci; // dwdot[N2O]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[10];
  J[604] -= dqdci; // dwdot[NO]/d[N2H2]
  J[606] += dqdci; // dwdot[NH2]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[624] += dqdci; // dwdot[N2O]/d[N2H2]
  // d()/d[N2O]
  dqdci = -k_r * sc[12];
  J[1000] -= dqdci; // dwdot[NO]/d[N2O]
  J[1002] += dqdci; // dwdot[NH2]/d[N2O]
  J[1008] -= dqdci; // dwdot[N2H2]/d[N2O]
  J[1020] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT
  J[1086] += dqdT; // dwdot[N2O]/dT

  // reaction 198: H2NN <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19];
  k_f = 3.4e+26 * exp(-4.83 * logT - (23262.7000268206) * invT);
  dlnkfdT = -4.83 * invT + (23262.7000268206) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = refC * exp(-g_RT[2] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[2] + h_RT[15]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[81] += dqdci; // dwdot[NNH]/d[H]
  J[85] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[497] += dqdci; // dwdot[H]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[629] += dqdci; // dwdot[H]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 199: H2NN <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19];
  k_f = 250000000000000 * exp(-(26562.2917045021) * invT);
  dlnkfdT = (26562.2917045021) * invT2;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = refC * exp(-g_RT[0] - g_RT[1] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[0] + h_RT[1]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] += q;  // H2
  wdot[19] -= q; // H2NN
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] += dqdci;  // dwdot[H2]/d[N2]
  J[19] -= dqdci; // dwdot[H2NN]/d[N2]
  // d()/d[H2]
  dqdci = -k_r * sc[0];
  J[33] += dqdci; // dwdot[N2]/d[H2]
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[52] -= dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[627] += dqdci; // dwdot[N2]/d[H2NN]
  J[628] += dqdci; // dwdot[H2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 200: H2NN <=> N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19];
  k_f = 130000000000000 * exp(-(23616.4613428813) * invT);
  dlnkfdT = (23616.4613428813) * invT2;
  // reverse
  phi_r = sc[18];
  Kc = exp(-g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // N2H2
  wdot[19] -= q; // H2NN
  // d()/d[N2H2]
  dqdci = -k_r;
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[613] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[645] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 201: H + H2NN <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 480 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[48] += dqdci; // dwdot[NNH]/d[H2]
  J[52] -= dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[81] += dqdci; // dwdot[NNH]/d[H]
  J[85] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[1];
  J[496] += dqdci; // dwdot[H2]/d[NNH]
  J[497] -= dqdci; // dwdot[H]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[628] += dqdci; // dwdot[H2]/d[H2NN]
  J[629] -= dqdci; // dwdot[H]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 202: H + H2NN <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(g_RT[2] - g_RT[2] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // N2H2
  wdot[19] -= q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[19] - k_r * sc[18];
  J[84] += dqdci; // dwdot[N2H2]/d[H]
  J[85] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[613] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[645] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 203: H2NN + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 330 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[6] * sc[15];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[6] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[6] += q;  // OH
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[138] += dqdci; // dwdot[OH]/d[O]
  J[147] += dqdci; // dwdot[NNH]/d[O]
  J[151] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[202] -= dqdci; // dwdot[O]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[213] += dqdci; // dwdot[NNH]/d[OH]
  J[217] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[499] -= dqdci; // dwdot[O]/d[NNH]
  J[501] += dqdci; // dwdot[OH]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[631] -= dqdci; // dwdot[O]/d[H2NN]
  J[633] += dqdci; // dwdot[OH]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 204: H2NN + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(g_RT[4] - g_RT[10] - g_RT[12] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[10] += q; // NO
  wdot[12] += q; // NH2
  wdot[19] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[136] -= dqdci; // dwdot[O]/d[O]
  J[142] += dqdci; // dwdot[NO]/d[O]
  J[144] += dqdci; // dwdot[NH2]/d[O]
  J[151] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[12];
  J[334] -= dqdci; // dwdot[O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[342] += dqdci; // dwdot[NH2]/d[NO]
  J[349] -= dqdci; // dwdot[H2NN]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[10];
  J[400] -= dqdci; // dwdot[O]/d[NH2]
  J[406] += dqdci; // dwdot[NO]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[415] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[631] -= dqdci; // dwdot[O]/d[H2NN]
  J[637] += dqdci; // dwdot[NO]/d[H2NN]
  J[639] += dqdci; // dwdot[NH2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1060] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 205: H2NN + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[19];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[19]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[180] += dqdci; // dwdot[NNH]/d[H2O]
  J[184] -= dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[213] += dqdci; // dwdot[NNH]/d[OH]
  J[217] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[500] += dqdci; // dwdot[H2O]/d[NNH]
  J[501] -= dqdci; // dwdot[OH]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[6];
  J[632] += dqdci; // dwdot[H2O]/d[H2NN]
  J[633] -= dqdci; // dwdot[OH]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 206: H2NN + OH => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[19];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] += q;  // H
  wdot[6] -= q;  // OH
  wdot[10] += q; // NO
  wdot[12] += q; // NH2
  wdot[19] -= q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[210] += dqdci; // dwdot[NH2]/d[OH]
  J[217] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[6];
  J[629] += dqdci; // dwdot[H]/d[H2NN]
  J[633] -= dqdci; // dwdot[OH]/d[H2NN]
  J[637] += dqdci; // dwdot[NO]/d[H2NN]
  J[639] += dqdci; // dwdot[NH2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 207: H2NN + HO2 => NH2 + NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q;  // OH
  wdot[9] -= q;  // HO2
  wdot[10] += q; // NO
  wdot[12] += q; // NH2
  wdot[19] -= q; // H2NN
  // d()/d[HO2]
  dqdci = +k_f * sc[19];
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[307] += dqdci; // dwdot[NO]/d[HO2]
  J[309] += dqdci; // dwdot[NH2]/d[HO2]
  J[316] -= dqdci; // dwdot[H2NN]/d[HO2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[9];
  J[633] += dqdci; // dwdot[OH]/d[H2NN]
  J[636] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[637] += dqdci; // dwdot[NO]/d[H2NN]
  J[639] += dqdci; // dwdot[NH2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 208: H2NN + HO2 <=> H2O2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[8] * sc[15];
  Kc = exp(-g_RT[8] + g_RT[9] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[19]) + (h_RT[8] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O2
  wdot[9] -= q;  // HO2
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[H2O2]
  dqdci = -k_r * sc[15];
  J[272] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[279] += dqdci; // dwdot[NNH]/d[H2O2]
  J[283] -= dqdci; // dwdot[H2NN]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[19];
  J[305] += dqdci; // dwdot[H2O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[312] += dqdci; // dwdot[NNH]/d[HO2]
  J[316] -= dqdci; // dwdot[H2NN]/d[HO2]
  // d()/d[NNH]
  dqdci = -k_r * sc[8];
  J[503] += dqdci; // dwdot[H2O2]/d[NNH]
  J[504] -= dqdci; // dwdot[HO2]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[9];
  J[635] += dqdci; // dwdot[H2O2]/d[H2NN]
  J[636] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1064] += dqdT; // dwdot[H2O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 209: H2NN + O2 <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 1500000 * exp(-(2999.67454486193) * invT);
  dlnkfdT = (2999.67454486193) * invT2;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(g_RT[3] - g_RT[12] + g_RT[19] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[12] += q; // NH2
  wdot[19] -= q; // H2NN
  wdot[25] += q; // NO2
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[111] += dqdci; // dwdot[NH2]/d[O2]
  J[118] -= dqdci; // dwdot[H2NN]/d[O2]
  J[124] += dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NH2]
  dqdci = -k_r * sc[25];
  J[399] -= dqdci; // dwdot[O2]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  J[415] -= dqdci; // dwdot[H2NN]/d[NH2]
  J[421] += dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[630] -= dqdci; // dwdot[O2]/d[H2NN]
  J[639] += dqdci; // dwdot[NH2]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[652] += dqdci; // dwdot[NO2]/d[H2NN]
  // d()/d[NO2]
  dqdci = -k_r * sc[12];
  J[828] -= dqdci; // dwdot[O2]/d[NO2]
  J[837] += dqdci; // dwdot[NH2]/d[NO2]
  J[844] -= dqdci; // dwdot[H2NN]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT

  // reaction 210: H2NN + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[19];
  k_f = 1.8 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[11] * sc[15];
  Kc = exp(-g_RT[11] + g_RT[12] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[19]) + (h_RT[11] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  wdot[15] += q; // NNH
  wdot[19] -= q; // H2NN
  // d()/d[NH3]
  dqdci = -k_r * sc[15];
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  J[378] += dqdci; // dwdot[NNH]/d[NH3]
  J[382] -= dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[19];
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[411] += dqdci; // dwdot[NNH]/d[NH2]
  J[415] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[11];
  J[506] += dqdci; // dwdot[NH3]/d[NNH]
  J[507] -= dqdci; // dwdot[NH2]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[514] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[12];
  J[638] += dqdci; // dwdot[NH3]/d[H2NN]
  J[639] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[642] += dqdci; // dwdot[NNH]/d[H2NN]
  J[646] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1075] -= dqdT; // dwdot[H2NN]/dT

  // reaction 211: HNO2 <=> HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[27];
  k_f = 4.68e+24 * exp(-4.52 * logT - (21799.3459626605) * invT);
  dlnkfdT = -4.52 * invT + (21799.3459626605) * invT2;
  // reverse
  phi_r = sc[26];
  Kc = exp(-g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[27]) + (h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[26] += q; // HONO
  wdot[27] -= q; // HNO2
  // d()/d[HONO]
  dqdci = -k_r;
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  J[885] -= dqdci; // dwdot[HNO2]/d[HONO]
  // d()/d[HNO2]
  dqdci = +k_f;
  J[917] += dqdci; // dwdot[HONO]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1082] += dqdT; // dwdot[HONO]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 212: H + NO2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[25];
  k_f = 101000 * exp(0.84 * logT - (-532.403232421393) * invT);
  dlnkfdT = 0.84 * invT + (-532.403232421393) * invT2;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[10] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[25]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[10] += q; // NO
  wdot[25] -= q; // NO2
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[91] -= dqdci; // dwdot[NO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[223] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[332] -= dqdci; // dwdot[H]/d[NO]
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[831] += dqdci; // dwdot[OH]/d[NO2]
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT

  // reaction 213: NO + OH <=> HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 6.35e+17 * exp(-3.97 * logT - (1118.14743141809) * invT);
  dlnkfdT = -3.97 * invT + (1118.14743141809) * invT2;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(g_RT[6] + g_RT[10] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[10] -= q; // NO
  wdot[26] += q; // HONO
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] -= dqdci; // dwdot[NO]/d[OH]
  J[224] += dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[6];
  J[336] -= dqdci; // dwdot[OH]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[356] += dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = -k_r;
  J[864] -= dqdci; // dwdot[OH]/d[HONO]
  J[868] -= dqdci; // dwdot[NO]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 214: NO + OH <=> HNO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 204000000000 * exp(-2.49 * logT - (2578.98541224919) * invT);
  dlnkfdT = -2.49 * invT + (2578.98541224919) * invT2;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(g_RT[6] + g_RT[10] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[10] -= q; // NO
  wdot[27] += q; // HNO2
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] -= dqdci; // dwdot[NO]/d[OH]
  J[225] += dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[6];
  J[336] -= dqdci; // dwdot[OH]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[357] += dqdci; // dwdot[HNO2]/d[NO]
  // d()/d[HNO2]
  dqdci = -k_r;
  J[897] -= dqdci; // dwdot[OH]/d[HNO2]
  J[901] -= dqdci; // dwdot[NO]/d[HNO2]
  J[918] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1083] += dqdT; // dwdot[HNO2]/dT

  // reaction 215: H + HONO <=> H2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[26];
  k_f = 0.00189 * exp(2.83 * logT - (715.926350440375) * invT);
  dlnkfdT = 2.83 * invT + (715.926350440375) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[26]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[25] += q; // NO2
  wdot[26] -= q; // HONO
  // d()/d[H2]
  dqdci = -k_r * sc[25];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[58] += dqdci; // dwdot[NO2]/d[H2]
  J[59] -= dqdci; // dwdot[HONO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[91] += dqdci; // dwdot[NO2]/d[H]
  J[92] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[NO2]
  dqdci = -k_r * sc[1];
  J[826] += dqdci; // dwdot[H2]/d[NO2]
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[851] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[859] += dqdci; // dwdot[H2]/d[HONO]
  J[860] -= dqdci; // dwdot[H]/d[HONO]
  J[883] += dqdci; // dwdot[NO2]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 216: H + HNO2 <=> H2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 0.0233 * exp(2.77 * logT - (-1017.45377659056) * invT);
  dlnkfdT = 2.77 * invT + (-1017.45377659056) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[25] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[25] += q; // NO2
  wdot[27] -= q; // HNO2
  // d()/d[H2]
  dqdci = -k_r * sc[25];
  J[34] += dqdci; // dwdot[H2]/d[H2]
  J[35] -= dqdci; // dwdot[H]/d[H2]
  J[58] += dqdci; // dwdot[NO2]/d[H2]
  J[60] -= dqdci; // dwdot[HNO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[67] += dqdci; // dwdot[H2]/d[H]
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[91] += dqdci; // dwdot[NO2]/d[H]
  J[93] -= dqdci; // dwdot[HNO2]/d[H]
  // d()/d[NO2]
  dqdci = -k_r * sc[1];
  J[826] += dqdci; // dwdot[H2]/d[NO2]
  J[827] -= dqdci; // dwdot[H]/d[NO2]
  J[850] += dqdci; // dwdot[NO2]/d[NO2]
  J[852] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[2];
  J[892] += dqdci; // dwdot[H2]/d[HNO2]
  J[893] -= dqdci; // dwdot[H]/d[HNO2]
  J[916] += dqdci; // dwdot[NO2]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1081] += dqdT; // dwdot[NO2]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 217: H + HONO <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[26];
  k_f = 26000 * exp(0.76 * logT - (2383.23412925115) * invT);
  dlnkfdT = 0.76 * invT + (2383.23412925115) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[10] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[26]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[10] += q; // NO
  wdot[26] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[92] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[NO]/d[H2O]
  J[191] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[332] -= dqdci; // dwdot[H]/d[NO]
  J[335] += dqdci; // dwdot[H2O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[356] -= dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[860] -= dqdci; // dwdot[H]/d[HONO]
  J[863] += dqdci; // dwdot[H2O]/d[HONO]
  J[868] += dqdci; // dwdot[NO]/d[HONO]
  J[884] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1082] -= dqdT; // dwdot[HONO]/dT

  // reaction 218: HNO + OH <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[23];
  k_f = 0.00967 * exp(2.49 * logT - (2643.39714547219) * invT);
  dlnkfdT = 2.49 * invT + (2643.39714547219) * invT2;
  // reverse
  phi_r = sc[2] * sc[26];
  Kc = exp(-g_RT[2] + g_RT[6] + g_RT[23] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[23]) + (h_RT[2] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[6] -= q;  // OH
  wdot[23] -= q; // HNO
  wdot[26] += q; // HONO
  // d()/d[H]
  dqdci = -k_r * sc[26];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[72] -= dqdci; // dwdot[OH]/d[H]
  J[89] -= dqdci; // dwdot[HNO]/d[H]
  J[92] += dqdci; // dwdot[HONO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[200] += dqdci; // dwdot[H]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[221] -= dqdci; // dwdot[HNO]/d[OH]
  J[224] += dqdci; // dwdot[HONO]/d[OH]
  // d()/d[HNO]
  dqdci = +k_f * sc[6];
  J[761] += dqdci; // dwdot[H]/d[HNO]
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  J[785] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[HONO]
  dqdci = -k_r * sc[2];
  J[860] += dqdci; // dwdot[H]/d[HONO]
  J[864] -= dqdci; // dwdot[OH]/d[HONO]
  J[881] -= dqdci; // dwdot[HNO]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 219: HNO + OH <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[23];
  k_f = 260000 * exp(0.23 * logT - (2220.69514619623) * invT);
  dlnkfdT = 0.23 * invT + (2220.69514619623) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(-g_RT[5] + g_RT[6] - g_RT[10] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[23]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[10] += q; // NO
  wdot[23] -= q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[175] += dqdci; // dwdot[NO]/d[H2O]
  J[188] -= dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[208] += dqdci; // dwdot[NO]/d[OH]
  J[221] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[335] += dqdci; // dwdot[H2O]/d[NO]
  J[336] -= dqdci; // dwdot[OH]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[6];
  J[764] += dqdci; // dwdot[H2O]/d[HNO]
  J[765] -= dqdci; // dwdot[OH]/d[HNO]
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT

  // reaction 220: H2 + N2O <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[30];
  k_f = 7000000 * exp(-(16354.5416386534) * invT);
  dlnkfdT = (16354.5416386534) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[5] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[30]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] -= q;  // H2
  wdot[5] += q;  // H2O
  wdot[30] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] -= dqdci;  // dwdot[H2]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[30] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H2]
  dqdci = +k_f * sc[30];
  J[33] += dqdci; // dwdot[N2]/d[H2]
  J[34] -= dqdci; // dwdot[H2]/d[H2]
  J[38] += dqdci; // dwdot[H2O]/d[H2]
  J[63] -= dqdci; // dwdot[N2O]/d[H2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[165] += dqdci; // dwdot[N2]/d[H2O]
  J[166] -= dqdci; // dwdot[H2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[195] -= dqdci; // dwdot[N2O]/d[H2O]
  // d()/d[N2O]
  dqdci = +k_f * sc[1];
  J[990] += dqdci;  // dwdot[N2]/d[N2O]
  J[991] -= dqdci;  // dwdot[H2]/d[N2O]
  J[995] += dqdci;  // dwdot[H2O]/d[N2O]
  J[1020] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1057] -= dqdT; // dwdot[H2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1086] -= dqdT; // dwdot[N2O]/dT

  // reaction 221: NH3 + OH <=> H2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[11];
  k_f = 0.004299 * exp(2.83021 * logT - (-216.785739628673) * invT);
  dlnkfdT = 2.83021 * invT + (-216.785739628673) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(-g_RT[5] + g_RT[6] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[11]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[6] -= q;  // OH
  wdot[11] -= q; // NH3
  wdot[12] += q; // NH2
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[OH]/d[H2O]
  J[176] -= dqdci; // dwdot[NH3]/d[H2O]
  J[177] += dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[203] += dqdci; // dwdot[H2O]/d[OH]
  J[204] -= dqdci; // dwdot[OH]/d[OH]
  J[209] -= dqdci; // dwdot[NH3]/d[OH]
  J[210] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH3]
  dqdci = +k_f * sc[6];
  J[368] += dqdci; // dwdot[H2O]/d[NH3]
  J[369] -= dqdci; // dwdot[OH]/d[NH3]
  J[374] -= dqdci; // dwdot[NH3]/d[NH3]
  J[375] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[5];
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[402] -= dqdci; // dwdot[OH]/d[NH2]
  J[407] -= dqdci; // dwdot[NH3]/d[NH2]
  J[408] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[OH]/dT
  J[1067] -= dqdT; // dwdot[NH3]/dT
  J[1068] += dqdT; // dwdot[NH2]/dT

  // reaction 222: H + HNO2 <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 3400 * exp(1.07 * logT - (2790.83962855298) * invT);
  dlnkfdT = 1.07 * invT + (2790.83962855298) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[10] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[10] += q; // NO
  wdot[27] -= q; // HNO2
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[71] += dqdci; // dwdot[H2O]/d[H]
  J[76] += dqdci; // dwdot[NO]/d[H]
  J[93] -= dqdci; // dwdot[HNO2]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[167] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[NO]/d[H2O]
  J[192] -= dqdci; // dwdot[HNO2]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[332] -= dqdci; // dwdot[H]/d[NO]
  J[335] += dqdci; // dwdot[H2O]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[357] -= dqdci; // dwdot[HNO2]/d[NO]
  // d()/d[HNO2]
  dqdci = +k_f * sc[2];
  J[893] -= dqdci; // dwdot[H]/d[HNO2]
  J[896] += dqdci; // dwdot[H2O]/d[HNO2]
  J[901] += dqdci; // dwdot[NO]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 223: H + HNO2 <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 41.4 * exp(1.76 * logT - (2826.56801182511) * invT);
  dlnkfdT = 1.76 * invT + (2826.56801182511) * invT2;
  // reverse
  phi_r = sc[6] * sc[23];
  Kc = exp(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[27]) + (h_RT[6] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[6] += q;  // OH
  wdot[23] += q; // HNO
  wdot[27] -= q; // HNO2
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[68] -= dqdci; // dwdot[H]/d[H]
  J[72] += dqdci; // dwdot[OH]/d[H]
  J[89] += dqdci; // dwdot[HNO]/d[H]
  J[93] -= dqdci; // dwdot[HNO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[200] -= dqdci; // dwdot[H]/d[OH]
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[221] += dqdci; // dwdot[HNO]/d[OH]
  J[225] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[761] -= dqdci; // dwdot[H]/d[HNO]
  J[765] += dqdci; // dwdot[OH]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  J[786] -= dqdci; // dwdot[HNO2]/d[HNO]
  // d()/d[HNO2]
  dqdci = +k_f * sc[2];
  J[893] -= dqdci; // dwdot[H]/d[HNO2]
  J[897] += dqdci; // dwdot[OH]/d[HNO2]
  J[914] += dqdci; // dwdot[HNO]/d[HNO2]
  J[918] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT
  J[1083] -= dqdT; // dwdot[HNO2]/dT

  // reaction 226: HO2 + NH2 <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 250000000000 * exp(-1.28 * logT - (586.750632328303) * invT);
  dlnkfdT = -1.28 * invT + (586.750632328303) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(-g_RT[6] + g_RT[9] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[9] -= q;  // HO2
  wdot[12] -= q; // NH2
  wdot[21] += q; // H2NO
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[207] -= dqdci; // dwdot[HO2]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[219] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[303] += dqdci; // dwdot[OH]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[309] -= dqdci; // dwdot[NH2]/d[HO2]
  J[318] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[417] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[6];
  J[699] += dqdci; // dwdot[OH]/d[H2NO]
  J[702] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[705] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[714] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1077] += dqdT; // dwdot[H2NO]/dT

  // reaction 227: NH2 + NO <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 26000000000000 * exp(-2.369 * logT - (437.798499250106) * invT);
  dlnkfdT = -2.369 * invT + (437.798499250106) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] - g_RT[5] + g_RT[10] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] += q;  // H2O
  wdot[10] -= q; // NO
  wdot[12] -= q; // NH2
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[10] -= dqdci; // dwdot[NO]/d[N2]
  J[12] -= dqdci; // dwdot[NH2]/d[N2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[165] += dqdci; // dwdot[N2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] -= dqdci; // dwdot[NO]/d[H2O]
  J[177] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[330] += dqdci; // dwdot[N2]/d[NO]
  J[335] += dqdci; // dwdot[H2O]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[342] -= dqdci; // dwdot[NH2]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[396] += dqdci; // dwdot[N2]/d[NH2]
  J[401] += dqdci; // dwdot[H2O]/d[NH2]
  J[406] -= dqdci; // dwdot[NO]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1056] += dqdT; // dwdot[N2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT

  // reaction 228: NH2 + NO <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 43000 * exp(0.294 * logT - (-435.785632586887) * invT);
  dlnkfdT = 0.294 * invT + (-435.785632586887) * invT2;
  // reverse
  phi_r = sc[6] * sc[15];
  Kc = exp(-g_RT[6] + g_RT[10] + g_RT[12] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (h_RT[6] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[10] -= q; // NO
  wdot[12] -= q; // NH2
  wdot[15] += q; // NNH
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[204] += dqdci; // dwdot[OH]/d[OH]
  J[208] -= dqdci; // dwdot[NO]/d[OH]
  J[210] -= dqdci; // dwdot[NH2]/d[OH]
  J[213] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[336] += dqdci; // dwdot[OH]/d[NO]
  J[340] -= dqdci; // dwdot[NO]/d[NO]
  J[342] -= dqdci; // dwdot[NH2]/d[NO]
  J[345] += dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[402] += dqdci; // dwdot[OH]/d[NH2]
  J[406] -= dqdci; // dwdot[NO]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  J[411] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[501] += dqdci; // dwdot[OH]/d[NNH]
  J[505] -= dqdci; // dwdot[NO]/d[NNH]
  J[507] -= dqdci; // dwdot[NH2]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[1062] += dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[NO]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT

  // reaction 229: H2NO + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 0.00023 * exp(2.994 * logT - (8303.07498577788) * invT);
  dlnkfdT = 2.994 * invT + (8303.07498577788) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[21] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[9] += q;  // HO2
  wdot[21] -= q; // H2NO
  wdot[23] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[108] += dqdci; // dwdot[HO2]/d[O2]
  J[120] -= dqdci; // dwdot[H2NO]/d[O2]
  J[122] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[23];
  J[300] -= dqdci; // dwdot[O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[318] -= dqdci; // dwdot[H2NO]/d[HO2]
  J[320] += dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[3];
  J[696] -= dqdci; // dwdot[O2]/d[H2NO]
  J[702] += dqdci; // dwdot[HO2]/d[H2NO]
  J[714] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[716] += dqdci; // dwdot[HNO]/d[H2NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[762] -= dqdci; // dwdot[O2]/d[HNO]
  J[768] += dqdci; // dwdot[HO2]/d[HNO]
  J[780] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[782] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1077] -= dqdT; // dwdot[H2NO]/dT
  J[1079] += dqdT; // dwdot[HNO]/dT

  // reaction 230: HO2 + NH2 <=> NH3 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 0.017 * exp(1.55 * logT - (1020.02018158617) * invT);
  dlnkfdT = 1.55 * invT + (1020.02018158617) * invT2;
  // reverse
  phi_r = sc[3] * sc[11];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[3] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[9] -= q;  // HO2
  wdot[11] += q; // NH3
  wdot[12] -= q; // NH2
  // d()/d[O2]
  dqdci = -k_r * sc[11];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[HO2]/d[O2]
  J[110] += dqdci; // dwdot[NH3]/d[O2]
  J[111] -= dqdci; // dwdot[NH2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[300] += dqdci; // dwdot[O2]/d[HO2]
  J[306] -= dqdci; // dwdot[HO2]/d[HO2]
  J[308] += dqdci; // dwdot[NH3]/d[HO2]
  J[309] -= dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[NH3]
  dqdci = -k_r * sc[3];
  J[366] += dqdci; // dwdot[O2]/d[NH3]
  J[372] -= dqdci; // dwdot[HO2]/d[NH3]
  J[374] += dqdci; // dwdot[NH3]/d[NH3]
  J[375] -= dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[399] += dqdci; // dwdot[O2]/d[NH2]
  J[405] -= dqdci; // dwdot[HO2]/d[NH2]
  J[407] += dqdci; // dwdot[NH3]/d[NH2]
  J[408] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[HO2]/dT
  J[1067] += dqdT; // dwdot[NH3]/dT
  J[1068] -= dqdT; // dwdot[NH2]/dT

  // reaction 231: N2H2 <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18];
  k_f = 3.1e+41 * exp(-8.42 * logT - (38295.7947010708) * invT);
  dlnkfdT = -8.42 * invT + (38295.7947010708) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = refC * exp(-g_RT[2] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18]) + (h_RT[2] + h_RT[15]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[15] += q; // NNH
  wdot[18] -= q; // N2H2
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[81] += dqdci; // dwdot[NNH]/d[H]
  J[84] -= dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[497] += dqdci; // dwdot[H]/d[NNH]
  J[510] += dqdci; // dwdot[NNH]/d[NNH]
  J[513] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f;
  J[596] += dqdci; // dwdot[H]/d[N2H2]
  J[609] += dqdci; // dwdot[NNH]/d[N2H2]
  J[612] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1071] += dqdT; // dwdot[NNH]/dT
  J[1074] -= dqdT; // dwdot[N2H2]/dT

  // reaction 232: HNO + NO2 <=> HONO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[25];
  k_f = 0.0007847 * exp(3.059 * logT - (1953.68838332024) * invT);
  dlnkfdT = 3.059 * invT + (1953.68838332024) * invT2;
  // reverse
  phi_r = sc[10] * sc[26];
  Kc = exp(-g_RT[10] + g_RT[23] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[25]) + (h_RT[10] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO
  wdot[23] -= q; // HNO
  wdot[25] -= q; // NO2
  wdot[26] += q; // HONO
  // d()/d[NO]
  dqdci = -k_r * sc[26];
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  J[355] -= dqdci; // dwdot[NO2]/d[NO]
  J[356] += dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[25];
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  J[784] -= dqdci; // dwdot[NO2]/d[HNO]
  J[785] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[NO2]
  dqdci = +k_f * sc[23];
  J[835] += dqdci; // dwdot[NO]/d[NO2]
  J[848] -= dqdci; // dwdot[HNO]/d[NO2]
  J[850] -= dqdci; // dwdot[NO2]/d[NO2]
  J[851] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[10];
  J[868] += dqdci; // dwdot[NO]/d[HONO]
  J[881] -= dqdci; // dwdot[HNO]/d[HONO]
  J[883] -= dqdci; // dwdot[NO2]/d[HONO]
  J[884] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT
  J[1081] -= dqdT; // dwdot[NO2]/dT
  J[1082] += dqdT; // dwdot[HONO]/dT

  // reaction 233: HNO + O2 <=> HO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 0.398956 * exp(2.3026 * logT - (7349.68069074425) * invT);
  dlnkfdT = 2.3026 * invT + (7349.68069074425) * invT2;
  // reverse
  phi_r = sc[9] * sc[10];
  Kc = exp(g_RT[3] - g_RT[9] - g_RT[10] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[9] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[9] += q;  // HO2
  wdot[10] += q; // NO
  wdot[23] -= q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[108] += dqdci; // dwdot[HO2]/d[O2]
  J[109] += dqdci; // dwdot[NO]/d[O2]
  J[122] -= dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[10];
  J[300] -= dqdci; // dwdot[O2]/d[HO2]
  J[306] += dqdci; // dwdot[HO2]/d[HO2]
  J[307] += dqdci; // dwdot[NO]/d[HO2]
  J[320] -= dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NO]
  dqdci = -k_r * sc[9];
  J[333] -= dqdci; // dwdot[O2]/d[NO]
  J[339] += dqdci; // dwdot[HO2]/d[NO]
  J[340] += dqdci; // dwdot[NO]/d[NO]
  J[353] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[3];
  J[762] -= dqdci; // dwdot[O2]/d[HNO]
  J[768] += dqdci; // dwdot[HO2]/d[HNO]
  J[769] += dqdci; // dwdot[NO]/d[HNO]
  J[782] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] += dqdT; // dwdot[HO2]/dT
  J[1066] += dqdT; // dwdot[NO]/dT
  J[1079] -= dqdT; // dwdot[HNO]/dT

  // reaction 234: N2H3 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 1.8e+45 * exp(-9.39 * logT - (35296.1201562088) * invT);
  dlnkfdT = -9.39 * invT + (35296.1201562088) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = refC * exp(-g_RT[2] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[2] + h_RT[18]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[17] -= q; // N2H3
  wdot[18] += q; // N2H2
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[68] += dqdci; // dwdot[H]/d[H]
  J[83] -= dqdci; // dwdot[N2H3]/d[H]
  J[84] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[N2H3]
  dqdci = +k_f;
  J[563] += dqdci; // dwdot[H]/d[N2H3]
  J[578] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[579] += dqdci; // dwdot[N2H2]/d[N2H3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[596] += dqdci; // dwdot[H]/d[N2H2]
  J[611] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[612] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[1058] += dqdT; // dwdot[H]/dT
  J[1073] -= dqdT; // dwdot[N2H3]/dT
  J[1074] += dqdT; // dwdot[N2H2]/dT

  amrex::Real c_R[32], dcRdT[32], e_RT[32];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 32; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[1056 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 32; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 32; ++m) {
      dehmixdc += eh_RT[m] * J[k * 33 + m];
    }
    J[k * 33 + 32] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[1088] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[32];

  for (int k = 0; k < 32; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 32; k++) {
    J[1056 + k] *= 1.e-6;
    J[k * 33 + 32] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 130;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 20576;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 32;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 2.80140000E+01;
  WT[1] = 2.01600000E+00;
  WT[2] = 1.00800000E+00;
  WT[3] = 3.19980000E+01;
  WT[4] = 1.59990000E+01;
  WT[5] = 1.80150000E+01;
  WT[6] = 1.70070000E+01;
  WT[7] = 1.70070000E+01;
  WT[8] = 3.40140000E+01;
  WT[9] = 3.30060000E+01;
  WT[10] = 3.00060000E+01;
  WT[11] = 1.70310000E+01;
  WT[12] = 1.60230000E+01;
  WT[13] = 1.50150000E+01;
  WT[14] = 1.40070000E+01;
  WT[15] = 2.90220000E+01;
  WT[16] = 3.20460000E+01;
  WT[17] = 3.10380000E+01;
  WT[18] = 3.00300000E+01;
  WT[19] = 3.00300000E+01;
  WT[20] = 3.30300000E+01;
  WT[21] = 3.20220000E+01;
  WT[22] = 3.20220000E+01;
  WT[23] = 3.10140000E+01;
  WT[24] = 3.10140000E+01;
  WT[25] = 4.60050000E+01;
  WT[26] = 4.70130000E+01;
  WT[27] = 4.70130000E+01;
  WT[28] = 6.20040000E+01;
  WT[29] = 6.30120000E+01;
  WT[30] = 4.40130000E+01;
  WT[31] = 6.30120000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 9.78390000E+01;
  EPS[1] = 3.04690000E+02;
  EPS[2] = 5.41672000E+02;
  EPS[3] = 6.76424000E+02;
  EPS[4] = 2.35686000E+02;
  EPS[5] = 6.37056000E+02;
  EPS[6] = 5.14598000E+02;
  EPS[7] = 8.00000000E+01;
  EPS[8] = 1.36114800E+03;
  EPS[9] = 9.63003000E+02;
  EPS[10] = 1.39320000E+02;
  EPS[11] = 4.81000000E+02;
  EPS[12] = 8.00000000E+01;
  EPS[13] = 8.00000000E+01;
  EPS[14] = 7.14000000E+01;
  EPS[15] = 7.14000000E+01;
  EPS[16] = 2.05000000E+02;
  EPS[17] = 2.00000000E+02;
  EPS[18] = 7.14000000E+01;
  EPS[19] = 7.14000000E+01;
  EPS[20] = 1.16700000E+02;
  EPS[21] = 1.16700000E+02;
  EPS[22] = 1.16700000E+02;
  EPS[23] = 1.70000000E+02;
  EPS[24] = 1.16700000E+02;
  EPS[25] = 3.33590000E+02;
  EPS[26] = 3.50000000E+02;
  EPS[27] = 3.50000000E+02;
  EPS[28] = 4.00000000E+02;
  EPS[29] = 4.00000000E+02;
  EPS[30] = 2.32400000E+02;
  EPS[31] = 3.00000000E+02;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 3.61000000E+00;
  SIG[1] = 2.19000000E+00;
  SIG[2] = 1.53000000E+00;
  SIG[3] = 3.06900000E+00;
  SIG[4] = 2.48500000E+00;
  SIG[5] = 2.94300000E+00;
  SIG[6] = 2.58200000E+00;
  SIG[7] = 2.75000000E+00;
  SIG[8] = 3.17900000E+00;
  SIG[9] = 3.12900000E+00;
  SIG[10] = 3.33900000E+00;
  SIG[11] = 2.92000000E+00;
  SIG[12] = 2.65000000E+00;
  SIG[13] = 2.65000000E+00;
  SIG[14] = 3.29800000E+00;
  SIG[15] = 3.79800000E+00;
  SIG[16] = 4.23000000E+00;
  SIG[17] = 3.90000000E+00;
  SIG[18] = 3.79800000E+00;
  SIG[19] = 3.79800000E+00;
  SIG[20] = 3.49200000E+00;
  SIG[21] = 3.49200000E+00;
  SIG[22] = 3.49200000E+00;
  SIG[23] = 3.43000000E+00;
  SIG[24] = 3.49200000E+00;
  SIG[25] = 3.85200000E+00;
  SIG[26] = 3.95000000E+00;
  SIG[27] = 3.95000000E+00;
  SIG[28] = 4.20000000E+00;
  SIG[29] = 4.20000000E+00;
  SIG[30] = 3.82800000E+00;
  SIG[31] = 3.50000000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 1.85100000E+00;
  DIP[6] = 1.63500000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 1.70200000E+00;
  DIP[9] = 2.14600000E+00;
  DIP[10] = 2.00000000E-01;
  DIP[11] = 1.47000000E+00;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 0.00000000E+00;
  DIP[14] = 0.00000000E+00;
  DIP[15] = 0.00000000E+00;
  DIP[16] = 0.00000000E+00;
  DIP[17] = 0.00000000E+00;
  DIP[18] = 0.00000000E+00;
  DIP[19] = 0.00000000E+00;
  DIP[20] = 0.00000000E+00;
  DIP[21] = 0.00000000E+00;
  DIP[22] = 0.00000000E+00;
  DIP[23] = 1.62000000E+00;
  DIP[24] = 0.00000000E+00;
  DIP[25] = 4.00000000E-01;
  DIP[26] = 1.63900000E+00;
  DIP[27] = 1.63900000E+00;
  DIP[28] = 2.00000000E-01;
  DIP[29] = 2.00000000E-01;
  DIP[30] = 0.00000000E+00;
  DIP[31] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 1.75600000E+00;
  POL[1] = 7.75000000E-01;
  POL[2] = 6.66000000E-01;
  POL[3] = 1.48700000E+00;
  POL[4] = 7.44000000E-01;
  POL[5] = 1.40700000E+00;
  POL[6] = 1.07700000E+00;
  POL[7] = 0.00000000E+00;
  POL[8] = 2.23900000E+00;
  POL[9] = 1.95900000E+00;
  POL[10] = 1.76000000E+00;
  POL[11] = 0.00000000E+00;
  POL[12] = 2.26000000E+00;
  POL[13] = 0.00000000E+00;
  POL[14] = 0.00000000E+00;
  POL[15] = 0.00000000E+00;
  POL[16] = 4.26000000E+00;
  POL[17] = 0.00000000E+00;
  POL[18] = 0.00000000E+00;
  POL[19] = 0.00000000E+00;
  POL[20] = 0.00000000E+00;
  POL[21] = 0.00000000E+00;
  POL[22] = 0.00000000E+00;
  POL[23] = 0.00000000E+00;
  POL[24] = 0.00000000E+00;
  POL[25] = 0.00000000E+00;
  POL[26] = 0.00000000E+00;
  POL[27] = 0.00000000E+00;
  POL[28] = 0.00000000E+00;
  POL[29] = 0.00000000E+00;
  POL[30] = 0.00000000E+00;
  POL[31] = 0.00000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 4.00000000E+00;
  ZROT[1] = 2.80000000E+02;
  ZROT[2] = 0.00000000E+00;
  ZROT[3] = 3.80000000E+00;
  ZROT[4] = 0.00000000E+00;
  ZROT[5] = 4.00000000E+00;
  ZROT[6] = 0.00000000E+00;
  ZROT[7] = 0.00000000E+00;
  ZROT[8] = 3.80000000E+00;
  ZROT[9] = 3.80000000E+00;
  ZROT[10] = 4.00000000E+00;
  ZROT[11] = 1.00000000E+01;
  ZROT[12] = 4.00000000E+00;
  ZROT[13] = 4.00000000E+00;
  ZROT[14] = 0.00000000E+00;
  ZROT[15] = 1.00000000E+00;
  ZROT[16] = 1.50000000E+00;
  ZROT[17] = 1.00000000E+00;
  ZROT[18] = 1.00000000E+00;
  ZROT[19] = 1.00000000E+00;
  ZROT[20] = 1.00000000E+00;
  ZROT[21] = 1.00000000E+00;
  ZROT[22] = 1.00000000E+00;
  ZROT[23] = 1.00000000E+00;
  ZROT[24] = 1.00000000E+00;
  ZROT[25] = 1.00000000E+00;
  ZROT[26] = 1.00000000E+00;
  ZROT[27] = 1.00000000E+00;
  ZROT[28] = 1.00000000E+00;
  ZROT[29] = 1.00000000E+00;
  ZROT[30] = 1.00000000E+00;
  ZROT[31] = 1.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 1;
  NLIN[1] = 1;
  NLIN[2] = 0;
  NLIN[3] = 1;
  NLIN[4] = 0;
  NLIN[5] = 2;
  NLIN[6] = 1;
  NLIN[7] = 1;
  NLIN[8] = 2;
  NLIN[9] = 2;
  NLIN[10] = 1;
  NLIN[11] = 2;
  NLIN[12] = 2;
  NLIN[13] = 1;
  NLIN[14] = 0;
  NLIN[15] = 2;
  NLIN[16] = 2;
  NLIN[17] = 2;
  NLIN[18] = 2;
  NLIN[19] = 2;
  NLIN[20] = 2;
  NLIN[21] = 2;
  NLIN[22] = 2;
  NLIN[23] = 2;
  NLIN[24] = 2;
  NLIN[25] = 2;
  NLIN[26] = 2;
  NLIN[27] = 2;
  NLIN[28] = 2;
  NLIN[29] = 2;
  NLIN[30] = 1;
  NLIN[31] = 2;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -1.65816129E+01;
  COFETA[1] = 2.39739643E+00;
  COFETA[2] = -2.35437351E-01;
  COFETA[3] = 1.05401204E-02;
  COFETA[4] = -2.52089071E+01;
  COFETA[5] = 5.27580943E+00;
  COFETA[6] = -5.73582771E-01;
  COFETA[7] = 2.37365598E-02;
  COFETA[8] = -1.79224569E+01;
  COFETA[9] = 1.81676176E+00;
  COFETA[10] = -3.61774571E-02;
  COFETA[11] = -3.09408105E-03;
  COFETA[12] = -1.12578554E+01;
  COFETA[13] = -1.01304226E+00;
  COFETA[14] = 3.71789981E-01;
  COFETA[15] = -2.23199601E-02;
  COFETA[16] = -2.35114557E+01;
  COFETA[17] = 5.09948302E+00;
  COFETA[18] = -5.70827940E-01;
  COFETA[19] = 2.44387018E-02;
  COFETA[20] = -1.03244296E+01;
  COFETA[21] = -1.46755779E+00;
  COFETA[22] = 4.26171104E-01;
  COFETA[23] = -2.42578267E-02;
  COFETA[24] = -1.23891335E+01;
  COFETA[25] = -5.23424849E-01;
  COFETA[26] = 2.98793191E-01;
  COFETA[27] = -1.85445794E-02;
  COFETA[28] = -1.50620876E+01;
  COFETA[29] = 1.92606504E+00;
  COFETA[30] = -1.73487476E-01;
  COFETA[31] = 7.82572931E-03;
  COFETA[32] = 1.79798159E+00;
  COFETA[33] = -6.39836632E+00;
  COFETA[34] = 1.07407215E+00;
  COFETA[35] = -5.18948058E-02;
  COFETA[36] = -4.37487775E+00;
  COFETA[37] = -3.90548799E+00;
  COFETA[38] = 7.52992593E-01;
  COFETA[39] = -3.84625682E-02;
  COFETA[40] = -1.93553039E+01;
  COFETA[41] = 3.53110792E+00;
  COFETA[42] = -3.82760328E-01;
  COFETA[43] = 1.69306682E-02;
  COFETA[44] = -1.62012713E+01;
  COFETA[45] = 1.18120432E+00;
  COFETA[46] = 4.63884727E-02;
  COFETA[47] = -6.59117057E-03;
  COFETA[48] = -1.50178050E+01;
  COFETA[49] = 1.92606504E+00;
  COFETA[50] = -1.73487476E-01;
  COFETA[51] = 7.82572931E-03;
  COFETA[52] = -1.50502927E+01;
  COFETA[53] = 1.92606504E+00;
  COFETA[54] = -1.73487476E-01;
  COFETA[55] = 7.82572931E-03;
  COFETA[56] = -1.49299043E+01;
  COFETA[57] = 1.69625877E+00;
  COFETA[58] = -1.42936462E-01;
  COFETA[59] = 6.47223426E-03;
  COFETA[60] = -1.48479726E+01;
  COFETA[61] = 1.69625877E+00;
  COFETA[62] = -1.42936462E-01;
  COFETA[63] = 6.47223426E-03;
  COFETA[64] = -2.31744337E+01;
  COFETA[65] = 4.75234877E+00;
  COFETA[66] = -5.32490068E-01;
  COFETA[67] = 2.30536067E-02;
  COFETA[68] = -2.28201370E+01;
  COFETA[69] = 4.68007883E+00;
  COFETA[70] = -5.23982071E-01;
  COFETA[71] = 2.27205629E-02;
  COFETA[72] = -1.48309013E+01;
  COFETA[73] = 1.69625877E+00;
  COFETA[74] = -1.42936462E-01;
  COFETA[75] = 6.47223426E-03;
  COFETA[76] = -1.48309013E+01;
  COFETA[77] = 1.69625877E+00;
  COFETA[78] = -1.42936462E-01;
  COFETA[79] = 6.47223426E-03;
  COFETA[80] = -1.77537834E+01;
  COFETA[81] = 2.90334768E+00;
  COFETA[82] = -3.01373404E-01;
  COFETA[83] = 1.34067714E-02;
  COFETA[84] = -1.77692799E+01;
  COFETA[85] = 2.90334768E+00;
  COFETA[86] = -3.01373404E-01;
  COFETA[87] = 1.34067714E-02;
  COFETA[88] = -1.77692799E+01;
  COFETA[89] = 2.90334768E+00;
  COFETA[90] = -3.01373404E-01;
  COFETA[91] = 1.34067714E-02;
  COFETA[92] = -2.36699071E+01;
  COFETA[93] = 4.84172256E+00;
  COFETA[94] = -5.12532456E-01;
  COFETA[95] = 2.09477827E-02;
  COFETA[96] = -1.77852722E+01;
  COFETA[97] = 2.90334768E+00;
  COFETA[98] = -3.01373404E-01;
  COFETA[99] = 1.34067714E-02;
  COFETA[100] = -2.45521210E+01;
  COFETA[101] = 5.10035343E+00;
  COFETA[102] = -5.40593217E-01;
  COFETA[103] = 2.18914851E-02;
  COFETA[104] = -2.23150644E+01;
  COFETA[105] = 4.04077989E+00;
  COFETA[106] = -3.82676997E-01;
  COFETA[107] = 1.42377885E-02;
  COFETA[108] = -2.23150644E+01;
  COFETA[109] = 4.04077989E+00;
  COFETA[110] = -3.82676997E-01;
  COFETA[111] = 1.42377885E-02;
  COFETA[112] = -2.33966272E+01;
  COFETA[113] = 4.42848782E+00;
  COFETA[114] = -4.28790880E-01;
  COFETA[115] = 1.60516193E-02;
  COFETA[116] = -2.33885640E+01;
  COFETA[117] = 4.42848782E+00;
  COFETA[118] = -4.28790880E-01;
  COFETA[119] = 1.60516193E-02;
  COFETA[120] = -2.38016052E+01;
  COFETA[121] = 5.08149651E+00;
  COFETA[122] = -5.69446240E-01;
  COFETA[123] = 2.44183705E-02;
  COFETA[124] = -2.44040113E+01;
  COFETA[125] = 5.28093720E+00;
  COFETA[126] = -5.75790801E-01;
  COFETA[127] = 2.38952487E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = 1.27467306E+01;
  COFLAM[1] = -3.43487794E+00;
  COFLAM[2] = 6.30343054E-01;
  COFLAM[3] = -3.11266905E-02;
  COFLAM[4] = -1.47588824E+00;
  COFLAM[5] = 3.51803001E+00;
  COFLAM[6] = -3.66039376E-01;
  COFLAM[7] = 1.67715256E-02;
  COFLAM[8] = 1.62742384E+00;
  COFLAM[9] = 1.81676176E+00;
  COFLAM[10] = -3.61774571E-02;
  COFLAM[11] = -3.09408105E-03;
  COFLAM[12] = 1.95202734E+00;
  COFLAM[13] = 9.86255327E-02;
  COFLAM[14] = 2.40748383E-01;
  COFLAM[15] = -1.65327477E-02;
  COFLAM[16] = -6.72613311E+00;
  COFLAM[17] = 5.09948302E+00;
  COFLAM[18] = -5.70827940E-01;
  COFLAM[19] = 2.44387018E-02;
  COFLAM[20] = 2.28441769E+01;
  COFLAM[21] = -8.72303257E+00;
  COFLAM[22] = 1.48501890E+00;
  COFLAM[23] = -7.36702395E-02;
  COFLAM[24] = 1.49071379E+01;
  COFLAM[25] = -4.87146009E+00;
  COFLAM[26] = 8.90368947E-01;
  COFLAM[27] = -4.43180866E-02;
  COFLAM[28] = 1.52119329E+01;
  COFLAM[29] = -3.71003885E+00;
  COFLAM[30] = 6.02585105E-01;
  COFLAM[31] = -2.66901952E-02;
  COFLAM[32] = 1.65498115E+01;
  COFLAM[33] = -6.43723714E+00;
  COFLAM[34] = 1.18810455E+00;
  COFLAM[35] = -6.06349567E-02;
  COFLAM[36] = 9.33597908E+00;
  COFLAM[37] = -3.27102428E+00;
  COFLAM[38] = 7.28610521E-01;
  COFLAM[39] = -3.88285490E-02;
  COFLAM[40] = 8.23395303E+00;
  COFLAM[41] = -1.64671812E+00;
  COFLAM[42] = 4.02080720E-01;
  COFLAM[43] = -2.15884215E-02;
  COFLAM[44] = 2.81006691E+01;
  COFLAM[45] = -1.18286695E+01;
  COFLAM[46] = 2.07362386E+00;
  COFLAM[47] = -1.08246097E-01;
  COFLAM[48] = 2.07189559E+01;
  COFLAM[49] = -6.51340472E+00;
  COFLAM[50] = 1.07360723E+00;
  COFLAM[51] = -5.13908980E-02;
  COFLAM[52] = 1.33671197E+01;
  COFLAM[53] = -2.98235819E+00;
  COFLAM[54] = 5.20506881E-01;
  COFLAM[55] = -2.38052574E-02;
  COFLAM[56] = 1.98838734E+00;
  COFLAM[57] = 1.69625877E+00;
  COFLAM[58] = -1.42936462E-01;
  COFLAM[59] = 6.47223426E-03;
  COFLAM[60] = 1.71972255E+01;
  COFLAM[61] = -5.90740815E+00;
  COFLAM[62] = 1.06247531E+00;
  COFLAM[63] = -5.45109186E-02;
  COFLAM[64] = -9.82252640E+00;
  COFLAM[65] = 4.95004499E+00;
  COFLAM[66] = -3.91273276E-01;
  COFLAM[67] = 1.09891346E-02;
  COFLAM[68] = 5.50695663E+00;
  COFLAM[69] = -1.27684737E+00;
  COFLAM[70] = 4.46782838E-01;
  COFLAM[71] = -2.65843436E-02;
  COFLAM[72] = 2.46479896E+01;
  COFLAM[73] = -9.69135300E+00;
  COFLAM[74] = 1.67413871E+00;
  COFLAM[75] = -8.56251561E-02;
  COFLAM[76] = 1.05520564E+01;
  COFLAM[77] = -3.48974521E+00;
  COFLAM[78] = 7.79332057E-01;
  COFLAM[79] = -4.33408513E-02;
  COFLAM[80] = 3.32098796E+00;
  COFLAM[81] = -1.58156469E-01;
  COFLAM[82] = 2.89843141E-01;
  COFLAM[83] = -1.94688276E-02;
  COFLAM[84] = 8.31989271E+00;
  COFLAM[85] = -2.11676373E+00;
  COFLAM[86] = 5.35453238E-01;
  COFLAM[87] = -2.98758068E-02;
  COFLAM[88] = -5.24397904E-01;
  COFLAM[89] = 1.56246743E+00;
  COFLAM[90] = 2.61415637E-02;
  COFLAM[91] = -6.41699034E-03;
  COFLAM[92] = 3.77024651E+00;
  COFLAM[93] = -5.66954983E-01;
  COFLAM[94] = 3.39171302E-01;
  COFLAM[95] = -2.11573393E-02;
  COFLAM[96] = -1.15022240E+00;
  COFLAM[97] = 2.20354509E+00;
  COFLAM[98] = -1.18766081E-01;
  COFLAM[99] = 2.31649474E-03;
  COFLAM[100] = -1.25909133E+01;
  COFLAM[101] = 6.12370417E+00;
  COFLAM[102] = -5.78661373E-01;
  COFLAM[103] = 1.98466495E-02;
  COFLAM[104] = -8.34714497E+00;
  COFLAM[105] = 4.27995952E+00;
  COFLAM[106] = -3.14697882E-01;
  COFLAM[107] = 7.78753550E-03;
  COFLAM[108] = -1.14314103E+01;
  COFLAM[109] = 5.05905650E+00;
  COFLAM[110] = -3.56409849E-01;
  COFLAM[111] = 6.94597044E-03;
  COFLAM[112] = -2.00228480E+01;
  COFLAM[113] = 9.25697931E+00;
  COFLAM[114] = -1.01429903E+00;
  COFLAM[115] = 3.98353617E-02;
  COFLAM[116] = -2.34392694E+01;
  COFLAM[117] = 1.03832705E+01;
  COFLAM[118] = -1.12892015E+00;
  COFLAM[119] = 4.36670935E-02;
  COFLAM[120] = -1.08852996E+01;
  COFLAM[121] = 5.71840879E+00;
  COFLAM[122] = -5.50076599E-01;
  COFLAM[123] = 1.95335563E-02;
  COFLAM[124] = -2.53120369E+01;
  COFLAM[125] = 1.15654223E+01;
  COFLAM[126] = -1.31712767E+00;
  COFLAM[127] = 5.31648696E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.49902127E+01;
  COFD[1] = 3.26262365E+00;
  COFD[2] = -2.12795147E-01;
  COFD[3] = 9.39113907E-03;
  COFD[4] = -1.73838263E+01;
  COFD[5] = 4.67227081E+00;
  COFD[6] = -3.90204442E-01;
  COFD[7] = 1.68607332E-02;
  COFD[8] = -1.87948965E+01;
  COFD[9] = 5.34757477E+00;
  COFD[10] = -4.68602354E-01;
  COFD[11] = 1.98904976E-02;
  COFD[12] = -2.12044781E+01;
  COFD[13] = 5.49347481E+00;
  COFD[14] = -4.81610133E-01;
  COFD[15] = 2.02170576E-02;
  COFD[16] = -1.73805077E+01;
  COFD[17] = 4.33206495E+00;
  COFD[18] = -3.48467629E-01;
  COFD[19] = 1.51490489E-02;
  COFD[20] = -2.12676629E+01;
  COFD[21] = 5.56691803E+00;
  COFD[22] = -4.88917657E-01;
  COFD[23] = 2.04460626E-02;
  COFD[24] = -2.06298860E+01;
  COFD[25] = 5.41162351E+00;
  COFD[26] = -4.73208335E-01;
  COFD[27] = 1.99405946E-02;
  COFD[28] = -1.40997648E+01;
  COFD[29] = 3.07862627E+00;
  COFD[30] = -1.89296337E-01;
  COFD[31] = 8.38918162E-03;
  COFD[32] = -2.14188860E+01;
  COFD[33] = 5.26674115E+00;
  COFD[34] = -4.20483798E-01;
  COFD[35] = 1.63066645E-02;
  COFD[36] = -2.17644549E+01;
  COFD[37] = 5.53566152E+00;
  COFD[38] = -4.69640351E-01;
  COFD[39] = 1.90053289E-02;
  COFD[40] = -1.59731815E+01;
  COFD[41] = 3.65003553E+00;
  COFD[42] = -2.62219353E-01;
  COFD[43] = 1.14980439E-02;
  COFD[44] = -2.04404299E+01;
  COFD[45] = 5.33626531E+00;
  COFD[46] = -4.67399953E-01;
  COFD[47] = 1.98488974E-02;
  COFD[48] = -1.40493180E+01;
  COFD[49] = 3.07862627E+00;
  COFD[50] = -1.89296337E-01;
  COFD[51] = 8.38918162E-03;
  COFD[52] = -1.40284082E+01;
  COFD[53] = 3.07862627E+00;
  COFD[54] = -1.89296337E-01;
  COFD[55] = 8.38918162E-03;
  COFD[56] = -1.39218740E+01;
  COFD[57] = 2.97368133E+00;
  COFD[58] = -1.75779738E-01;
  COFD[59] = 7.80847104E-03;
  COFD[60] = -1.42731265E+01;
  COFD[61] = 2.97368133E+00;
  COFD[62] = -1.75779738E-01;
  COFD[63] = 7.80847104E-03;
  COFD[64] = -1.76283979E+01;
  COFD[65] = 4.17233662E+00;
  COFD[66] = -3.28948278E-01;
  COFD[67] = 1.43520367E-02;
  COFD[68] = -1.74591494E+01;
  COFD[69] = 4.14501299E+00;
  COFD[70] = -3.25559869E-01;
  COFD[71] = 1.42112379E-02;
  COFD[72] = -1.42814386E+01;
  COFD[73] = 2.97368133E+00;
  COFD[74] = -1.75779738E-01;
  COFD[75] = 7.80847104E-03;
  COFD[76] = -1.42814386E+01;
  COFD[77] = 2.97368133E+00;
  COFD[78] = -1.75779738E-01;
  COFD[79] = 7.80847104E-03;
  COFD[80] = -1.55500170E+01;
  COFD[81] = 3.47081601E+00;
  COFD[82] = -2.39624117E-01;
  COFD[83] = 1.05457294E-02;
  COFD[84] = -1.55428457E+01;
  COFD[85] = 3.47081601E+00;
  COFD[86] = -2.39624117E-01;
  COFD[87] = 1.05457294E-02;
  COFD[88] = -1.55428457E+01;
  COFD[89] = 3.47081601E+00;
  COFD[90] = -2.39624117E-01;
  COFD[91] = 1.05457294E-02;
  COFD[92] = -1.72609666E+01;
  COFD[93] = 4.11679556E+00;
  COFD[94] = -3.22136421E-01;
  COFD[95] = 1.40724121E-02;
  COFD[96] = -1.55353197E+01;
  COFD[97] = 3.47081601E+00;
  COFD[98] = -2.39624117E-01;
  COFD[99] = 1.05457294E-02;
  COFD[100] = -1.93077421E+01;
  COFD[101] = 4.77801306E+00;
  COFD[102] = -4.02643154E-01;
  COFD[103] = 1.73480828E-02;
  COFD[104] = -1.97200980E+01;
  COFD[105] = 4.90903202E+00;
  COFD[106] = -4.18167746E-01;
  COFD[107] = 1.79617398E-02;
  COFD[108] = -1.97200980E+01;
  COFD[109] = 4.90903202E+00;
  COFD[110] = -4.18167746E-01;
  COFD[111] = 1.79617398E-02;
  COFD[112] = -2.00986902E+01;
  COFD[113] = 5.00386762E+00;
  COFD[114] = -4.29467805E-01;
  COFD[115] = 1.84115182E-02;
  COFD[116] = -2.01011855E+01;
  COFD[117] = 5.00386762E+00;
  COFD[118] = -4.29467805E-01;
  COFD[119] = 1.84115182E-02;
  COFD[120] = -1.79857204E+01;
  COFD[121] = 4.31284688E+00;
  COFD[122] = -3.46076308E-01;
  COFD[123] = 1.50495278E-02;
  COFD[124] = -1.89040245E+01;
  COFD[125] = 4.65334848E+00;
  COFD[126] = -3.87925507E-01;
  COFD[127] = 1.67689894E-02;
  COFD[128] = -1.73838263E+01;
  COFD[129] = 4.67227081E+00;
  COFD[130] = -3.90204442E-01;
  COFD[131] = 1.68607332E-02;
  COFD[132] = -1.95194392E+01;
  COFD[133] = 5.58471063E+00;
  COFD[134] = -4.82122802E-01;
  COFD[135] = 1.97899587E-02;
  COFD[136] = -1.82557938E+01;
  COFD[137] = 5.03946848E+00;
  COFD[138] = -3.82556854E-01;
  COFD[139] = 1.43291720E-02;
  COFD[140] = -1.85340684E+01;
  COFD[141] = 4.55114204E+00;
  COFD[142] = -3.05187205E-01;
  COFD[143] = 1.04249773E-02;
  COFD[144] = -1.96712679E+01;
  COFD[145] = 5.56613272E+00;
  COFD[146] = -4.88855599E-01;
  COFD[147] = 2.04449479E-02;
  COFD[148] = -1.79306410E+01;
  COFD[149] = 4.27887144E+00;
  COFD[150] = -2.63194013E-01;
  COFD[151] = 8.34533919E-03;
  COFD[152] = -1.86214529E+01;
  COFD[153] = 4.70308013E+00;
  COFD[154] = -3.29233814E-01;
  COFD[155] = 1.16363636E-02;
  COFD[156] = -1.63030213E+01;
  COFD[157] = 4.40802861E+00;
  COFD[158] = -3.57921522E-01;
  COFD[159] = 1.55426730E-02;
  COFD[160] = -1.26043955E+01;
  COFD[161] = 1.73314237E+00;
  COFD[162] = 1.13925309E-01;
  COFD[163] = -9.76486612E-03;
  COFD[164] = -1.50994572E+01;
  COFD[165] = 2.88701111E+00;
  COFD[166] = -5.47233723E-02;
  COFD[167] = -1.75596429E-03;
  COFD[168] = -1.85416809E+01;
  COFD[169] = 5.10551491E+00;
  COFD[170] = -4.41403301E-01;
  COFD[171] = 1.88794365E-02;
  COFD[172] = -1.93921099E+01;
  COFD[173] = 5.03840349E+00;
  COFD[174] = -3.82384453E-01;
  COFD[175] = 1.43203475E-02;
  COFD[176] = -1.62588765E+01;
  COFD[177] = 4.40802861E+00;
  COFD[178] = -3.57921522E-01;
  COFD[179] = 1.55426730E-02;
  COFD[180] = -1.62551391E+01;
  COFD[181] = 4.40802861E+00;
  COFD[182] = -3.57921522E-01;
  COFD[183] = 1.55426730E-02;
  COFD[184] = -1.61131361E+01;
  COFD[185] = 4.26844419E+00;
  COFD[186] = -3.40796006E-01;
  COFD[187] = 1.48405346E-02;
  COFD[188] = -1.63211782E+01;
  COFD[189] = 4.26844419E+00;
  COFD[190] = -3.40796006E-01;
  COFD[191] = 1.48405346E-02;
  COFD[192] = -1.98769866E+01;
  COFD[193] = 5.42182052E+00;
  COFD[194] = -4.73561326E-01;
  COFD[195] = 1.99169201E-02;
  COFD[196] = -1.97348521E+01;
  COFD[197] = 5.41486066E+00;
  COFD[198] = -4.73395003E-01;
  COFD[199] = 1.99392596E-02;
  COFD[200] = -1.63222695E+01;
  COFD[201] = 4.26844419E+00;
  COFD[202] = -3.40796006E-01;
  COFD[203] = 1.48405346E-02;
  COFD[204] = -1.63222695E+01;
  COFD[205] = 4.26844419E+00;
  COFD[206] = -3.40796006E-01;
  COFD[207] = 1.48405346E-02;
  COFD[208] = -1.79189534E+01;
  COFD[209] = 4.86822204E+00;
  COFD[210] = -4.13144774E-01;
  COFD[211] = 1.77546968E-02;
  COFD[212] = -1.79180488E+01;
  COFD[213] = 4.86822204E+00;
  COFD[214] = -4.13144774E-01;
  COFD[215] = 1.77546968E-02;
  COFD[216] = -1.79180488E+01;
  COFD[217] = 4.86822204E+00;
  COFD[218] = -4.13144774E-01;
  COFD[219] = 1.77546968E-02;
  COFD[220] = -1.95646519E+01;
  COFD[221] = 5.40971367E+00;
  COFD[222] = -4.73092854E-01;
  COFD[223] = 1.99409245E-02;
  COFD[224] = -1.79170873E+01;
  COFD[225] = 4.86822204E+00;
  COFD[226] = -4.13144774E-01;
  COFD[227] = 1.77546968E-02;
  COFD[228] = -2.05515005E+01;
  COFD[229] = 5.57465970E+00;
  COFD[230] = -4.77055796E-01;
  COFD[231] = 1.94209533E-02;
  COFD[232] = -2.05206699E+01;
  COFD[233] = 5.49998925E+00;
  COFD[234] = -4.62058835E-01;
  COFD[235] = 1.85587918E-02;
  COFD[236] = -2.05206699E+01;
  COFD[237] = 5.49998925E+00;
  COFD[238] = -4.62058835E-01;
  COFD[239] = 1.85587918E-02;
  COFD[240] = -2.05393116E+01;
  COFD[241] = 5.44829711E+00;
  COFD[242] = -4.52216958E-01;
  COFD[243] = 1.80073594E-02;
  COFD[244] = -2.05395636E+01;
  COFD[245] = 5.44829711E+00;
  COFD[246] = -4.52216958E-01;
  COFD[247] = 1.80073594E-02;
  COFD[248] = -2.01802645E+01;
  COFD[249] = 5.55720056E+00;
  COFD[250] = -4.88107412E-01;
  COFD[251] = 2.04288041E-02;
  COFD[252] = -2.03566504E+01;
  COFD[253] = 5.58361281E+00;
  COFD[254] = -4.82576419E-01;
  COFD[255] = 1.98333272E-02;
  COFD[256] = -1.87948965E+01;
  COFD[257] = 5.34757477E+00;
  COFD[258] = -4.68602354E-01;
  COFD[259] = 1.98904976E-02;
  COFD[260] = -1.82557938E+01;
  COFD[261] = 5.03946848E+00;
  COFD[262] = -3.82556854E-01;
  COFD[263] = 1.43291720E-02;
  COFD[264] = -1.45549661E+01;
  COFD[265] = 3.46291115E+00;
  COFD[266] = -1.39736175E-01;
  COFD[267] = 2.31709265E-03;
  COFD[268] = -1.37393377E+01;
  COFD[269] = 2.55143901E+00;
  COFD[270] = -5.28480543E-03;
  COFD[271] = -4.12371566E-03;
  COFD[272] = -1.91887476E+01;
  COFD[273] = 5.40412144E+00;
  COFD[274] = -4.44162988E-01;
  COFD[275] = 1.75657645E-02;
  COFD[276] = -1.15100386E+01;
  COFD[277] = 1.55181662E+00;
  COFD[278] = 1.39997932E-01;
  COFD[279] = -1.09856112E-02;
  COFD[280] = -1.26653411E+01;
  COFD[281] = 2.14888338E+00;
  COFD[282] = 5.37698918E-02;
  COFD[283] = -6.93327512E-03;
  COFD[284] = -1.77470337E+01;
  COFD[285] = 5.12603141E+00;
  COFD[286] = -4.43773544E-01;
  COFD[287] = 1.89706048E-02;
  COFD[288] = -4.81110098E+00;
  COFD[289] = -1.45102162E+00;
  COFD[290] = 5.64733616E-01;
  COFD[291] = -3.05824183E-02;
  COFD[292] = -7.39336052E+00;
  COFD[293] = -3.21509994E-01;
  COFD[294] = 4.06772080E-01;
  COFD[295] = -2.33685859E-02;
  COFD[296] = -1.95727700E+01;
  COFD[297] = 5.59935742E+00;
  COFD[298] = -4.91638011E-01;
  COFD[299] = 2.05059822E-02;
  COFD[300] = -1.48331073E+01;
  COFD[301] = 3.08422374E+00;
  COFD[302] = -8.36361657E-02;
  COFD[303] = -3.75590973E-04;
  COFD[304] = -1.76980350E+01;
  COFD[305] = 5.12603141E+00;
  COFD[306] = -4.43773544E-01;
  COFD[307] = 1.89706048E-02;
  COFD[308] = -1.76960523E+01;
  COFD[309] = 5.12603141E+00;
  COFD[310] = -4.43773544E-01;
  COFD[311] = 1.89706048E-02;
  COFD[312] = -1.75782667E+01;
  COFD[313] = 4.98721692E+00;
  COFD[314] = -4.27484432E-01;
  COFD[315] = 1.83325332E-02;
  COFD[316] = -1.77930288E+01;
  COFD[317] = 4.98721692E+00;
  COFD[318] = -4.27484432E-01;
  COFD[319] = 1.83325332E-02;
  COFD[320] = -2.00401152E+01;
  COFD[321] = 5.50980201E+00;
  COFD[322] = -4.64658042E-01;
  COFD[323] = 1.87242142E-02;
  COFD[324] = -1.99421249E+01;
  COFD[325] = 5.52837940E+00;
  COFD[326] = -4.68250137E-01;
  COFD[327] = 1.89272451E-02;
  COFD[328] = -1.77935925E+01;
  COFD[329] = 4.98721692E+00;
  COFD[330] = -4.27484432E-01;
  COFD[331] = 1.83325332E-02;
  COFD[332] = -1.77935925E+01;
  COFD[333] = 4.98721692E+00;
  COFD[334] = -4.27484432E-01;
  COFD[335] = 1.83325332E-02;
  COFD[336] = -1.91027290E+01;
  COFD[337] = 5.43815165E+00;
  COFD[338] = -4.75454575E-01;
  COFD[339] = 1.99902814E-02;
  COFD[340] = -1.91022631E+01;
  COFD[341] = 5.43815165E+00;
  COFD[342] = -4.75454575E-01;
  COFD[343] = 1.99902814E-02;
  COFD[344] = -1.91022631E+01;
  COFD[345] = 5.43815165E+00;
  COFD[346] = -4.75454575E-01;
  COFD[347] = 1.99902814E-02;
  COFD[348] = -1.97126657E+01;
  COFD[349] = 5.45075121E+00;
  COFD[350] = -4.52661157E-01;
  COFD[351] = 1.80316428E-02;
  COFD[352] = -1.91017674E+01;
  COFD[353] = 5.43815165E+00;
  COFD[354] = -4.75454575E-01;
  COFD[355] = 1.99902814E-02;
  COFD[356] = -1.87566542E+01;
  COFD[357] = 4.81544245E+00;
  COFD[358] = -3.47122867E-01;
  COFD[359] = 1.25413729E-02;
  COFD[360] = -1.80489386E+01;
  COFD[361] = 4.42404849E+00;
  COFD[362] = -2.85460331E-01;
  COFD[363] = 9.44380914E-03;
  COFD[364] = -1.80489386E+01;
  COFD[365] = 4.42404849E+00;
  COFD[366] = -2.85460331E-01;
  COFD[367] = 9.44380914E-03;
  COFD[368] = -1.81150380E+01;
  COFD[369] = 4.41675195E+00;
  COFD[370] = -2.84338396E-01;
  COFD[371] = 9.38830631E-03;
  COFD[372] = -1.81151660E+01;
  COFD[373] = 4.41675195E+00;
  COFD[374] = -2.84338396E-01;
  COFD[375] = 9.38830631E-03;
  COFD[376] = -1.98005984E+01;
  COFD[377] = 5.41649600E+00;
  COFD[378] = -4.46472802E-01;
  COFD[379] = 1.76938976E-02;
  COFD[380] = -1.91069838E+01;
  COFD[381] = 5.06843304E+00;
  COFD[382] = -3.87250051E-01;
  COFD[383] = 1.45695775E-02;
  COFD[384] = -2.12044781E+01;
  COFD[385] = 5.49347481E+00;
  COFD[386] = -4.81610133E-01;
  COFD[387] = 2.02170576E-02;
  COFD[388] = -1.85340684E+01;
  COFD[389] = 4.55114204E+00;
  COFD[390] = -3.05187205E-01;
  COFD[391] = 1.04249773E-02;
  COFD[392] = -1.37393377E+01;
  COFD[393] = 2.55143901E+00;
  COFD[394] = -5.28480543E-03;
  COFD[395] = -4.12371566E-03;
  COFD[396] = -1.36779024E+01;
  COFD[397] = 1.61938650E+00;
  COFD[398] = 1.30296800E-01;
  COFD[399] = -1.05322141E-02;
  COFD[400] = -2.05583942E+01;
  COFD[401] = 5.10440151E+00;
  COFD[402] = -3.93085415E-01;
  COFD[403] = 1.48688349E-02;
  COFD[404] = -1.33197019E+01;
  COFD[405] = 1.54784774E+00;
  COFD[406] = 1.40568066E-01;
  COFD[407] = -1.10122845E-02;
  COFD[408] = -1.50173812E+01;
  COFD[409] = 2.38427499E+00;
  COFD[410] = 1.93897486E-02;
  COFD[411] = -5.30329367E-03;
  COFD[412] = -2.03043994E+01;
  COFD[413] = 5.35928403E+00;
  COFD[414] = -4.69547034E-01;
  COFD[415] = 1.99081842E-02;
  COFD[416] = -5.37398857E+00;
  COFD[417] = -2.05578119E+00;
  COFD[418] = 6.48190790E-01;
  COFD[419] = -3.43413027E-02;
  COFD[420] = -9.10493641E+00;
  COFD[421] = -4.30260087E-01;
  COFD[422] = 4.22125882E-01;
  COFD[423] = -2.40767300E-02;
  COFD[424] = -2.16619321E+01;
  COFD[425] = 5.58487924E+00;
  COFD[426] = -4.81510037E-01;
  COFD[427] = 1.97381426E-02;
  COFD[428] = -1.60661375E+01;
  COFD[429] = 2.81984170E+00;
  COFD[430] = -4.48762937E-02;
  COFD[431] = -2.22612380E-03;
  COFD[432] = -2.02500725E+01;
  COFD[433] = 5.35928403E+00;
  COFD[434] = -4.69547034E-01;
  COFD[435] = 1.99081842E-02;
  COFD[436] = -2.02281919E+01;
  COFD[437] = 5.35928403E+00;
  COFD[438] = -4.69547034E-01;
  COFD[439] = 1.99081842E-02;
  COFD[440] = -2.00149231E+01;
  COFD[441] = 5.22399612E+00;
  COFD[442] = -4.54140123E-01;
  COFD[443] = 1.93250042E-02;
  COFD[444] = -2.03891436E+01;
  COFD[445] = 5.22399612E+00;
  COFD[446] = -4.54140123E-01;
  COFD[447] = 1.93250042E-02;
  COFD[448] = -2.16414785E+01;
  COFD[449] = 5.30417405E+00;
  COFD[450] = -4.26814400E-01;
  COFD[451] = 1.66398821E-02;
  COFD[452] = -2.15953972E+01;
  COFD[453] = 5.33737299E+00;
  COFD[454] = -4.32461008E-01;
  COFD[455] = 1.69377852E-02;
  COFD[456] = -2.03980229E+01;
  COFD[457] = 5.22399612E+00;
  COFD[458] = -4.54140123E-01;
  COFD[459] = 1.93250042E-02;
  COFD[460] = -2.03980229E+01;
  COFD[461] = 5.22399612E+00;
  COFD[462] = -4.54140123E-01;
  COFD[463] = 1.93250042E-02;
  COFD[464] = -2.16261817E+01;
  COFD[465] = 5.60677111E+00;
  COFD[466] = -4.91288933E-01;
  COFD[467] = 2.04390126E-02;
  COFD[468] = -2.16184963E+01;
  COFD[469] = 5.60677111E+00;
  COFD[470] = -4.91288933E-01;
  COFD[471] = 2.04390126E-02;
  COFD[472] = -2.16184963E+01;
  COFD[473] = 5.60677111E+00;
  COFD[474] = -4.91288933E-01;
  COFD[475] = 2.04390126E-02;
  COFD[476] = -2.16054974E+01;
  COFD[477] = 5.43604561E+00;
  COFD[478] = -4.50009634E-01;
  COFD[479] = 1.78869955E-02;
  COFD[480] = -2.16104393E+01;
  COFD[481] = 5.60677111E+00;
  COFD[482] = -4.91288933E-01;
  COFD[483] = 2.04390126E-02;
  COFD[484] = -1.97269572E+01;
  COFD[485] = 4.29876651E+00;
  COFD[486] = -2.66236508E-01;
  COFD[487] = 8.49501029E-03;
  COFD[488] = -1.92222964E+01;
  COFD[489] = 4.03815166E+00;
  COFD[490] = -2.26763817E-01;
  COFD[491] = 6.56359846E-03;
  COFD[492] = -1.92222964E+01;
  COFD[493] = 4.03815166E+00;
  COFD[494] = -2.26763817E-01;
  COFD[495] = 6.56359846E-03;
  COFD[496] = -1.87457687E+01;
  COFD[497] = 3.74596774E+00;
  COFD[498] = -1.82224018E-01;
  COFD[499] = 4.37931907E-03;
  COFD[500] = -1.87484988E+01;
  COFD[501] = 3.74596774E+00;
  COFD[502] = -1.82224018E-01;
  COFD[503] = 4.37931907E-03;
  COFD[504] = -2.13132083E+01;
  COFD[505] = 5.12972504E+00;
  COFD[506] = -3.97225519E-01;
  COFD[507] = 1.50822018E-02;
  COFD[508] = -2.02571924E+01;
  COFD[509] = 4.58750049E+00;
  COFD[510] = -3.10877633E-01;
  COFD[511] = 1.07093007E-02;
  COFD[512] = -1.73805077E+01;
  COFD[513] = 4.33206495E+00;
  COFD[514] = -3.48467629E-01;
  COFD[515] = 1.51490489E-02;
  COFD[516] = -1.96712679E+01;
  COFD[517] = 5.56613272E+00;
  COFD[518] = -4.88855599E-01;
  COFD[519] = 2.04449479E-02;
  COFD[520] = -1.91887476E+01;
  COFD[521] = 5.40412144E+00;
  COFD[522] = -4.44162988E-01;
  COFD[523] = 1.75657645E-02;
  COFD[524] = -2.05583942E+01;
  COFD[525] = 5.10440151E+00;
  COFD[526] = -3.93085415E-01;
  COFD[527] = 1.48688349E-02;
  COFD[528] = -1.98743886E+01;
  COFD[529] = 5.37138387E+00;
  COFD[530] = -4.70349634E-01;
  COFD[531] = 1.99117539E-02;
  COFD[532] = -2.01903173E+01;
  COFD[533] = 4.98720519E+00;
  COFD[534] = -3.74208274E-01;
  COFD[535] = 1.39054169E-02;
  COFD[536] = -2.05413374E+01;
  COFD[537] = 5.27421390E+00;
  COFD[538] = -4.21788062E-01;
  COFD[539] = 1.63764834E-02;
  COFD[540] = -1.63433875E+01;
  COFD[541] = 4.10829852E+00;
  COFD[542] = -3.21106093E-01;
  COFD[543] = 1.40306392E-02;
  COFD[544] = -1.60999464E+01;
  COFD[545] = 2.89146335E+00;
  COFD[546] = -5.53764273E-02;
  COFD[547] = -1.72474127E-03;
  COFD[548] = -1.82636580E+01;
  COFD[549] = 3.92568625E+00;
  COFD[550] = -2.09777771E-01;
  COFD[551] = 5.73471422E-03;
  COFD[552] = -1.85684126E+01;
  COFD[553] = 4.78227838E+00;
  COFD[554] = -4.03139649E-01;
  COFD[555] = 1.73672990E-02;
  COFD[556] = -2.09086983E+01;
  COFD[557] = 5.43151412E+00;
  COFD[558] = -4.49193274E-01;
  COFD[559] = 1.78425061E-02;
  COFD[560] = -1.62901467E+01;
  COFD[561] = 4.10829852E+00;
  COFD[562] = -3.21106093E-01;
  COFD[563] = 1.40306392E-02;
  COFD[564] = -1.62736512E+01;
  COFD[565] = 4.10829852E+00;
  COFD[566] = -3.21106093E-01;
  COFD[567] = 1.40306392E-02;
  COFD[568] = -1.60946487E+01;
  COFD[569] = 3.96020923E+00;
  COFD[570] = -3.02239833E-01;
  COFD[571] = 1.32250126E-02;
  COFD[572] = -1.64218813E+01;
  COFD[573] = 3.96020923E+00;
  COFD[574] = -3.02239833E-01;
  COFD[575] = 1.32250126E-02;
  COFD[576] = -2.01683520E+01;
  COFD[577] = 5.22449336E+00;
  COFD[578] = -4.54197900E-01;
  COFD[579] = 1.93272430E-02;
  COFD[580] = -1.99691169E+01;
  COFD[581] = 5.19261190E+00;
  COFD[582] = -4.50474545E-01;
  COFD[583] = 1.91820755E-02;
  COFD[584] = -1.64278814E+01;
  COFD[585] = 3.96020923E+00;
  COFD[586] = -3.02239833E-01;
  COFD[587] = 1.32250126E-02;
  COFD[588] = -1.64278814E+01;
  COFD[589] = 3.96020923E+00;
  COFD[590] = -3.02239833E-01;
  COFD[591] = 1.32250126E-02;
  COFD[592] = -1.79927100E+01;
  COFD[593] = 4.55484692E+00;
  COFD[594] = -3.75689296E-01;
  COFD[595] = 1.62602794E-02;
  COFD[596] = -1.79876002E+01;
  COFD[597] = 4.55484692E+00;
  COFD[598] = -3.75689296E-01;
  COFD[599] = 1.62602794E-02;
  COFD[600] = -1.79876002E+01;
  COFD[601] = 4.55484692E+00;
  COFD[602] = -3.75689296E-01;
  COFD[603] = 1.62602794E-02;
  COFD[604] = -1.96888066E+01;
  COFD[605] = 5.15040427E+00;
  COFD[606] = -4.46135208E-01;
  COFD[607] = 1.90402178E-02;
  COFD[608] = -1.79822151E+01;
  COFD[609] = 4.55484692E+00;
  COFD[610] = -3.75689296E-01;
  COFD[611] = 1.62602794E-02;
  COFD[612] = -2.13990803E+01;
  COFD[613] = 5.60659816E+00;
  COFD[614] = -4.91281714E-01;
  COFD[615] = 2.04392914E-02;
  COFD[616] = -2.14861882E+01;
  COFD[617] = 5.59242407E+00;
  COFD[618] = -4.85816565E-01;
  COFD[619] = 2.00583066E-02;
  COFD[620] = -2.14861882E+01;
  COFD[621] = 5.59242407E+00;
  COFD[622] = -4.85816565E-01;
  COFD[623] = 2.00583066E-02;
  COFD[624] = -2.16477423E+01;
  COFD[625] = 5.58486392E+00;
  COFD[626] = -4.81519993E-01;
  COFD[627] = 1.97390473E-02;
  COFD[628] = -2.16493856E+01;
  COFD[629] = 5.58486392E+00;
  COFD[630] = -4.81519993E-01;
  COFD[631] = 1.97390473E-02;
  COFD[632] = -2.05169488E+01;
  COFD[633] = 5.36450176E+00;
  COFD[634] = -4.69860384E-01;
  COFD[635] = 1.99069280E-02;
  COFD[636] = -2.11106642E+01;
  COFD[637] = 5.55621659E+00;
  COFD[638] = -4.88022203E-01;
  COFD[639] = 2.04267906E-02;
  COFD[640] = -2.12676629E+01;
  COFD[641] = 5.56691803E+00;
  COFD[642] = -4.88917657E-01;
  COFD[643] = 2.04460626E-02;
  COFD[644] = -1.79306410E+01;
  COFD[645] = 4.27887144E+00;
  COFD[646] = -2.63194013E-01;
  COFD[647] = 8.34533919E-03;
  COFD[648] = -1.15100386E+01;
  COFD[649] = 1.55181662E+00;
  COFD[650] = 1.39997932E-01;
  COFD[651] = -1.09856112E-02;
  COFD[652] = -1.33197019E+01;
  COFD[653] = 1.54784774E+00;
  COFD[654] = 1.40568066E-01;
  COFD[655] = -1.10122845E-02;
  COFD[656] = -2.01903173E+01;
  COFD[657] = 4.98720519E+00;
  COFD[658] = -3.74208274E-01;
  COFD[659] = 1.39054169E-02;
  COFD[660] = -1.24427170E+01;
  COFD[661] = 1.18456153E+00;
  COFD[662] = 1.94616600E-01;
  COFD[663] = -1.34822343E-02;
  COFD[664] = -1.33266079E+01;
  COFD[665] = 1.61517478E+00;
  COFD[666] = 1.36053632E-01;
  COFD[667] = -1.08538147E-02;
  COFD[668] = -1.99576009E+01;
  COFD[669] = 5.30058549E+00;
  COFD[670] = -4.63219773E-01;
  COFD[671] = 1.96850193E-02;
  COFD[672] = -6.89412162E+00;
  COFD[673] = -1.29529642E+00;
  COFD[674] = 5.37403516E-01;
  COFD[675] = -2.89881625E-02;
  COFD[676] = -9.90673569E+00;
  COFD[677] = -1.35095002E-02;
  COFD[678] = 3.61493774E-01;
  COFD[679] = -2.10364537E-02;
  COFD[680] = -2.12090586E+01;
  COFD[681] = 5.49663154E+00;
  COFD[682] = -4.71044709E-01;
  COFD[683] = 1.93228596E-02;
  COFD[684] = -1.46997713E+01;
  COFD[685] = 2.24894731E+00;
  COFD[686] = 3.91442622E-02;
  COFD[687] = -6.15851150E-03;
  COFD[688] = -2.10748057E+01;
  COFD[689] = 5.60974106E+00;
  COFD[690] = -4.89833293E-01;
  COFD[691] = 2.03035478E-02;
  COFD[692] = -1.98891503E+01;
  COFD[693] = 5.30058549E+00;
  COFD[694] = -4.63219773E-01;
  COFD[695] = 1.96850193E-02;
  COFD[696] = -1.96674102E+01;
  COFD[697] = 5.15723484E+00;
  COFD[698] = -4.46634377E-01;
  COFD[699] = 1.90459078E-02;
  COFD[700] = -1.99935387E+01;
  COFD[701] = 5.15723484E+00;
  COFD[702] = -4.46634377E-01;
  COFD[703] = 1.90459078E-02;
  COFD[704] = -2.12662740E+01;
  COFD[705] = 5.18725077E+00;
  COFD[706] = -4.06803248E-01;
  COFD[707] = 1.55810248E-02;
  COFD[708] = -2.15007093E+01;
  COFD[709] = 5.40589709E+00;
  COFD[710] = -4.44492794E-01;
  COFD[711] = 1.75840076E-02;
  COFD[712] = -2.00000083E+01;
  COFD[713] = 5.15723484E+00;
  COFD[714] = -4.46634377E-01;
  COFD[715] = 1.90459078E-02;
  COFD[716] = -2.00000083E+01;
  COFD[717] = 5.15723484E+00;
  COFD[718] = -4.46634377E-01;
  COFD[719] = 1.90459078E-02;
  COFD[720] = -2.13301019E+01;
  COFD[721] = 5.58925245E+00;
  COFD[722] = -4.90911390E-01;
  COFD[723] = 2.04973113E-02;
  COFD[724] = -2.13245778E+01;
  COFD[725] = 5.58925245E+00;
  COFD[726] = -4.90911390E-01;
  COFD[727] = 2.04973113E-02;
  COFD[728] = -2.13245778E+01;
  COFD[729] = 5.58925245E+00;
  COFD[730] = -4.90911390E-01;
  COFD[731] = 2.04973113E-02;
  COFD[732] = -2.00750663E+01;
  COFD[733] = 4.64038028E+00;
  COFD[734] = -3.14580773E-01;
  COFD[735] = 1.07964156E-02;
  COFD[736] = -2.13187609E+01;
  COFD[737] = 5.58925245E+00;
  COFD[738] = -4.90911390E-01;
  COFD[739] = 2.04973113E-02;
  COFD[740] = -1.95495195E+01;
  COFD[741] = 4.34590349E+00;
  COFD[742] = -2.75588676E-01;
  COFD[743] = 9.03180802E-03;
  COFD[744] = -1.78468632E+01;
  COFD[745] = 3.51693547E+00;
  COFD[746] = -1.51127699E-01;
  COFD[747] = 3.01551347E-03;
  COFD[748] = -1.78468632E+01;
  COFD[749] = 3.51693547E+00;
  COFD[750] = -1.51127699E-01;
  COFD[751] = 3.01551347E-03;
  COFD[752] = -1.87281672E+01;
  COFD[753] = 3.86810823E+00;
  COFD[754] = -2.01913650E-01;
  COFD[755] = 5.38131185E-03;
  COFD[756] = -1.87299712E+01;
  COFD[757] = 3.86810823E+00;
  COFD[758] = -2.01913650E-01;
  COFD[759] = 5.38131185E-03;
  COFD[760] = -2.12465891E+01;
  COFD[761] = 5.22087939E+00;
  COFD[762] = -4.12455967E-01;
  COFD[763] = 1.58768385E-02;
  COFD[764] = -2.02571119E+01;
  COFD[765] = 4.71715472E+00;
  COFD[766] = -3.31462651E-01;
  COFD[767] = 1.17487656E-02;
  COFD[768] = -2.06298860E+01;
  COFD[769] = 5.41162351E+00;
  COFD[770] = -4.73208335E-01;
  COFD[771] = 1.99405946E-02;
  COFD[772] = -1.86214529E+01;
  COFD[773] = 4.70308013E+00;
  COFD[774] = -3.29233814E-01;
  COFD[775] = 1.16363636E-02;
  COFD[776] = -1.26653411E+01;
  COFD[777] = 2.14888338E+00;
  COFD[778] = 5.37698918E-02;
  COFD[779] = -6.93327512E-03;
  COFD[780] = -1.50173812E+01;
  COFD[781] = 2.38427499E+00;
  COFD[782] = 1.93897486E-02;
  COFD[783] = -5.30329367E-03;
  COFD[784] = -2.05413374E+01;
  COFD[785] = 5.27421390E+00;
  COFD[786] = -4.21788062E-01;
  COFD[787] = 1.63764834E-02;
  COFD[788] = -1.33266079E+01;
  COFD[789] = 1.61517478E+00;
  COFD[790] = 1.36053632E-01;
  COFD[791] = -1.08538147E-02;
  COFD[792] = -1.39152452E+01;
  COFD[793] = 1.90395882E+00;
  COFD[794] = 9.89732295E-02;
  COFD[795] = -9.26092374E-03;
  COFD[796] = -1.91055061E+01;
  COFD[797] = 5.06597831E+00;
  COFD[798] = -4.36784465E-01;
  COFD[799] = 1.86993155E-02;
  COFD[800] = -8.73992234E+00;
  COFD[801] = -4.41147744E-01;
  COFD[802] = 4.19446558E-01;
  COFD[803] = -2.36618158E-02;
  COFD[804] = -1.10005909E+01;
  COFD[805] = 5.08804132E-01;
  COFD[806] = 2.90543350E-01;
  COFD[807] = -1.78768615E-02;
  COFD[808] = -2.08522476E+01;
  COFD[809] = 5.47769609E+00;
  COFD[810] = -4.75718444E-01;
  COFD[811] = 1.98075247E-02;
  COFD[812] = -1.55111940E+01;
  COFD[813] = 2.66518820E+00;
  COFD[814] = -1.92087409E-02;
  COFD[815] = -3.47256223E-03;
  COFD[816] = -2.08492557E+01;
  COFD[817] = 5.60123858E+00;
  COFD[818] = -4.91517756E-01;
  COFD[819] = 2.04863589E-02;
  COFD[820] = -1.90355274E+01;
  COFD[821] = 5.06597831E+00;
  COFD[822] = -4.36784465E-01;
  COFD[823] = 1.86993155E-02;
  COFD[824] = -1.88312632E+01;
  COFD[825] = 4.92071488E+00;
  COFD[826] = -4.19606875E-01;
  COFD[827] = 1.80210998E-02;
  COFD[828] = -1.91613179E+01;
  COFD[829] = 4.92071488E+00;
  COFD[830] = -4.19606875E-01;
  COFD[831] = 1.80210998E-02;
  COFD[832] = -2.14929518E+01;
  COFD[833] = 5.40452913E+00;
  COFD[834] = -4.44238022E-01;
  COFD[835] = 1.75698937E-02;
  COFD[836] = -2.15546544E+01;
  COFD[837] = 5.56890569E+00;
  COFD[838] = -4.75939412E-01;
  COFD[839] = 1.93577131E-02;
  COFD[840] = -1.91675578E+01;
  COFD[841] = 4.92071488E+00;
  COFD[842] = -4.19606875E-01;
  COFD[843] = 1.80210998E-02;
  COFD[844] = -1.91675578E+01;
  COFD[845] = 4.92071488E+00;
  COFD[846] = -4.19606875E-01;
  COFD[847] = 1.80210998E-02;
  COFD[848] = -2.05938068E+01;
  COFD[849] = 5.40874658E+00;
  COFD[850] = -4.73020995E-01;
  COFD[851] = 1.99399523E-02;
  COFD[852] = -2.05884857E+01;
  COFD[853] = 5.40874658E+00;
  COFD[854] = -4.73020995E-01;
  COFD[855] = 1.99399523E-02;
  COFD[856] = -2.05884857E+01;
  COFD[857] = 5.40874658E+00;
  COFD[858] = -4.73020995E-01;
  COFD[859] = 1.99399523E-02;
  COFD[860] = -2.03443489E+01;
  COFD[861] = 4.81068429E+00;
  COFD[862] = -3.37632532E-01;
  COFD[863] = 1.18371950E-02;
  COFD[864] = -2.05828802E+01;
  COFD[865] = 5.40874658E+00;
  COFD[866] = -4.73020995E-01;
  COFD[867] = 1.99399523E-02;
  COFD[868] = -2.02886365E+01;
  COFD[869] = 4.79949855E+00;
  COFD[870] = -3.47210364E-01;
  COFD[871] = 1.26338207E-02;
  COFD[872] = -1.85974012E+01;
  COFD[873] = 3.93750121E+00;
  COFD[874] = -2.14043595E-01;
  COFD[875] = 6.06266776E-03;
  COFD[876] = -1.85974012E+01;
  COFD[877] = 3.93750121E+00;
  COFD[878] = -2.14043595E-01;
  COFD[879] = 6.06266776E-03;
  COFD[880] = -1.99077361E+01;
  COFD[881] = 4.50725879E+00;
  COFD[882] = -2.99428108E-01;
  COFD[883] = 1.01747630E-02;
  COFD[884] = -1.99094607E+01;
  COFD[885] = 4.50725879E+00;
  COFD[886] = -2.99428108E-01;
  COFD[887] = 1.01747630E-02;
  COFD[888] = -2.14908514E+01;
  COFD[889] = 5.46771640E+00;
  COFD[890] = -4.55757452E-01;
  COFD[891] = 1.82016160E-02;
  COFD[892] = -2.09486770E+01;
  COFD[893] = 5.15823358E+00;
  COFD[894] = -4.01965723E-01;
  COFD[895] = 1.53287643E-02;
  COFD[896] = -1.40997648E+01;
  COFD[897] = 3.07862627E+00;
  COFD[898] = -1.89296337E-01;
  COFD[899] = 8.38918162E-03;
  COFD[900] = -1.63030213E+01;
  COFD[901] = 4.40802861E+00;
  COFD[902] = -3.57921522E-01;
  COFD[903] = 1.55426730E-02;
  COFD[904] = -1.77470337E+01;
  COFD[905] = 5.12603141E+00;
  COFD[906] = -4.43773544E-01;
  COFD[907] = 1.89706048E-02;
  COFD[908] = -2.03043994E+01;
  COFD[909] = 5.35928403E+00;
  COFD[910] = -4.69547034E-01;
  COFD[911] = 1.99081842E-02;
  COFD[912] = -1.63433875E+01;
  COFD[913] = 4.10829852E+00;
  COFD[914] = -3.21106093E-01;
  COFD[915] = 1.40306392E-02;
  COFD[916] = -1.99576009E+01;
  COFD[917] = 5.30058549E+00;
  COFD[918] = -4.63219773E-01;
  COFD[919] = 1.96850193E-02;
  COFD[920] = -1.91055061E+01;
  COFD[921] = 5.06597831E+00;
  COFD[922] = -4.36784465E-01;
  COFD[923] = 1.86993155E-02;
  COFD[924] = -1.32399011E+01;
  COFD[925] = 2.90778936E+00;
  COFD[926] = -1.67388544E-01;
  COFD[927] = 7.45220609E-03;
  COFD[928] = -2.13397463E+01;
  COFD[929] = 5.52452502E+00;
  COFD[930] = -4.67506789E-01;
  COFD[931] = 1.88852944E-02;
  COFD[932] = -2.11897945E+01;
  COFD[933] = 5.60191345E+00;
  COFD[934] = -4.91456639E-01;
  COFD[935] = 2.04778219E-02;
  COFD[936] = -1.50056270E+01;
  COFD[937] = 3.44514533E+00;
  COFD[938] = -2.36376839E-01;
  COFD[939] = 1.04085476E-02;
  COFD[940] = -1.89824738E+01;
  COFD[941] = 4.98075560E+00;
  COFD[942] = -4.26721620E-01;
  COFD[943] = 1.83024823E-02;
  COFD[944] = -1.31880809E+01;
  COFD[945] = 2.90778936E+00;
  COFD[946] = -1.67388544E-01;
  COFD[947] = 7.45220609E-03;
  COFD[948] = -1.31710897E+01;
  COFD[949] = 2.90778936E+00;
  COFD[950] = -1.67388544E-01;
  COFD[951] = 7.45220609E-03;
  COFD[952] = -1.31174788E+01;
  COFD[953] = 2.80913567E+00;
  COFD[954] = -1.54536855E-01;
  COFD[955] = 6.89359313E-03;
  COFD[956] = -1.34431749E+01;
  COFD[957] = 2.80913567E+00;
  COFD[958] = -1.54536855E-01;
  COFD[959] = 6.89359313E-03;
  COFD[960] = -1.65648734E+01;
  COFD[961] = 3.92040487E+00;
  COFD[962] = -2.97068442E-01;
  COFD[963] = 1.30000135E-02;
  COFD[964] = -1.63625946E+01;
  COFD[965] = 3.88250968E+00;
  COFD[966] = -2.92155848E-01;
  COFD[967] = 1.27867850E-02;
  COFD[968] = -1.34494148E+01;
  COFD[969] = 2.80913567E+00;
  COFD[970] = -1.54536855E-01;
  COFD[971] = 6.89359313E-03;
  COFD[972] = -1.34494148E+01;
  COFD[973] = 2.80913567E+00;
  COFD[974] = -1.54536855E-01;
  COFD[975] = 6.89359313E-03;
  COFD[976] = -1.45374222E+01;
  COFD[977] = 3.24450689E+00;
  COFD[978] = -2.10570734E-01;
  COFD[979] = 9.30026771E-03;
  COFD[980] = -1.45321011E+01;
  COFD[981] = 3.24450689E+00;
  COFD[982] = -2.10570734E-01;
  COFD[983] = 9.30026771E-03;
  COFD[984] = -1.45321011E+01;
  COFD[985] = 3.24450689E+00;
  COFD[986] = -2.10570734E-01;
  COFD[987] = 9.30026771E-03;
  COFD[988] = -1.55911543E+01;
  COFD[989] = 3.64713354E+00;
  COFD[990] = -2.61891633E-01;
  COFD[991] = 1.14859287E-02;
  COFD[992] = -1.45264956E+01;
  COFD[993] = 3.24450689E+00;
  COFD[994] = -2.10570734E-01;
  COFD[995] = 9.30026771E-03;
  COFD[996] = -1.81524396E+01;
  COFD[997] = 4.51574627E+00;
  COFD[998] = -3.70945448E-01;
  COFD[999] = 1.60681888E-02;
  COFD[1000] = -1.83662079E+01;
  COFD[1001] = 4.58057560E+00;
  COFD[1002] = -3.78845026E-01;
  COFD[1003] = 1.63895472E-02;
  COFD[1004] = -1.83662079E+01;
  COFD[1005] = 4.58057560E+00;
  COFD[1006] = -3.78845026E-01;
  COFD[1007] = 1.63895472E-02;
  COFD[1008] = -1.89496299E+01;
  COFD[1009] = 4.74919572E+00;
  COFD[1010] = -3.99211884E-01;
  COFD[1011] = 1.72117130E-02;
  COFD[1012] = -1.89513545E+01;
  COFD[1013] = 4.74919572E+00;
  COFD[1014] = -3.99211884E-01;
  COFD[1015] = 1.72117130E-02;
  COFD[1016] = -1.69512232E+01;
  COFD[1017] = 4.09077642E+00;
  COFD[1018] = -3.18894990E-01;
  COFD[1019] = 1.39371445E-02;
  COFD[1020] = -1.77199091E+01;
  COFD[1021] = 4.38770680E+00;
  COFD[1022] = -3.55417486E-01;
  COFD[1023] = 1.54395368E-02;
  COFD[1024] = -2.14188860E+01;
  COFD[1025] = 5.26674115E+00;
  COFD[1026] = -4.20483798E-01;
  COFD[1027] = 1.63066645E-02;
  COFD[1028] = -1.26043955E+01;
  COFD[1029] = 1.73314237E+00;
  COFD[1030] = 1.13925309E-01;
  COFD[1031] = -9.76486612E-03;
  COFD[1032] = -4.81110098E+00;
  COFD[1033] = -1.45102162E+00;
  COFD[1034] = 5.64733616E-01;
  COFD[1035] = -3.05824183E-02;
  COFD[1036] = -5.37398857E+00;
  COFD[1037] = -2.05578119E+00;
  COFD[1038] = 6.48190790E-01;
  COFD[1039] = -3.43413027E-02;
  COFD[1040] = -1.60999464E+01;
  COFD[1041] = 2.89146335E+00;
  COFD[1042] = -5.53764273E-02;
  COFD[1043] = -1.72474127E-03;
  COFD[1044] = -6.89412162E+00;
  COFD[1045] = -1.29529642E+00;
  COFD[1046] = 5.37403516E-01;
  COFD[1047] = -2.89881625E-02;
  COFD[1048] = -8.73992234E+00;
  COFD[1049] = -4.41147744E-01;
  COFD[1050] = 4.19446558E-01;
  COFD[1051] = -2.36618158E-02;
  COFD[1052] = -2.13397463E+01;
  COFD[1053] = 5.52452502E+00;
  COFD[1054] = -4.67506789E-01;
  COFD[1055] = 1.88852944E-02;
  COFD[1056] = -1.11281128E+00;
  COFD[1057] = -3.80820278E+00;
  COFD[1058] = 8.68971377E-01;
  COFD[1059] = -4.31699746E-02;
  COFD[1060] = -4.15583151E+00;
  COFD[1061] = -2.54994895E+00;
  COFD[1062] = 7.04221848E-01;
  COFD[1063] = -3.61539745E-02;
  COFD[1064] = -2.02154772E+01;
  COFD[1065] = 4.66732337E+00;
  COFD[1066] = -3.25052442E-01;
  COFD[1067] = 1.14744423E-02;
  COFD[1068] = -9.43281067E+00;
  COFD[1069] = -1.74719572E-01;
  COFD[1070] = 3.82239123E-01;
  COFD[1071] = -2.20181769E-02;
  COFD[1072] = -2.10401761E+01;
  COFD[1073] = 5.31679148E+00;
  COFD[1074] = -4.28922479E-01;
  COFD[1075] = 1.67500088E-02;
  COFD[1076] = -2.12633511E+01;
  COFD[1077] = 5.52452502E+00;
  COFD[1078] = -4.67506789E-01;
  COFD[1079] = 1.88852944E-02;
  COFD[1080] = -2.14880809E+01;
  COFD[1081] = 5.58515442E+00;
  COFD[1082] = -4.80422533E-01;
  COFD[1083] = 1.96465258E-02;
  COFD[1084] = -2.18650187E+01;
  COFD[1085] = 5.58515442E+00;
  COFD[1086] = -4.80422533E-01;
  COFD[1087] = 1.96465258E-02;
  COFD[1088] = -1.79323121E+01;
  COFD[1089] = 3.39627236E+00;
  COFD[1090] = -1.29827785E-01;
  COFD[1091] = 1.84023054E-03;
  COFD[1092] = -1.85273582E+01;
  COFD[1093] = 3.72926260E+00;
  COFD[1094] = -1.79678715E-01;
  COFD[1095] = 4.25460423E-03;
  COFD[1096] = -2.18741579E+01;
  COFD[1097] = 5.58515442E+00;
  COFD[1098] = -4.80422533E-01;
  COFD[1099] = 1.96465258E-02;
  COFD[1100] = -2.18741579E+01;
  COFD[1101] = 5.58515442E+00;
  COFD[1102] = -4.80422533E-01;
  COFD[1103] = 1.96465258E-02;
  COFD[1104] = -2.11637336E+01;
  COFD[1105] = 5.11145017E+00;
  COFD[1106] = -3.94227161E-01;
  COFD[1107] = 1.49273632E-02;
  COFD[1108] = -2.11558116E+01;
  COFD[1109] = 5.11145017E+00;
  COFD[1110] = -3.94227161E-01;
  COFD[1111] = 1.49273632E-02;
  COFD[1112] = -2.11558116E+01;
  COFD[1113] = 5.11145017E+00;
  COFD[1114] = -3.94227161E-01;
  COFD[1115] = 1.49273632E-02;
  COFD[1116] = -1.76131784E+01;
  COFD[1117] = 3.39164172E+00;
  COFD[1118] = -1.32270402E-01;
  COFD[1119] = 2.10177451E-03;
  COFD[1120] = -2.11475104E+01;
  COFD[1121] = 5.11145017E+00;
  COFD[1122] = -3.94227161E-01;
  COFD[1123] = 1.49273632E-02;
  COFD[1124] = -1.39881224E+01;
  COFD[1125] = 1.60191468E+00;
  COFD[1126] = 1.31736721E-01;
  COFD[1127] = -1.05589739E-02;
  COFD[1128] = -1.30125435E+01;
  COFD[1129] = 1.16207110E+00;
  COFD[1130] = 1.92945290E-01;
  COFD[1131] = -1.33237721E-02;
  COFD[1132] = -1.30125435E+01;
  COFD[1133] = 1.16207110E+00;
  COFD[1134] = 1.92945290E-01;
  COFD[1135] = -1.33237721E-02;
  COFD[1136] = -1.22927026E+01;
  COFD[1137] = 7.67727880E-01;
  COFD[1138] = 2.51786955E-01;
  COFD[1139] = -1.61836355E-02;
  COFD[1140] = -1.22955441E+01;
  COFD[1141] = 7.67727880E-01;
  COFD[1142] = 2.51786955E-01;
  COFD[1143] = -1.61836355E-02;
  COFD[1144] = -1.74543070E+01;
  COFD[1145] = 3.19129118E+00;
  COFD[1146] = -9.94113729E-02;
  COFD[1147] = 3.78067789E-04;
  COFD[1148] = -1.51399205E+01;
  COFD[1149] = 2.13221216E+00;
  COFD[1150] = 5.61932887E-02;
  COFD[1151] = -7.04769618E-03;
  COFD[1152] = -2.17644549E+01;
  COFD[1153] = 5.53566152E+00;
  COFD[1154] = -4.69640351E-01;
  COFD[1155] = 1.90053289E-02;
  COFD[1156] = -1.50994572E+01;
  COFD[1157] = 2.88701111E+00;
  COFD[1158] = -5.47233723E-02;
  COFD[1159] = -1.75596429E-03;
  COFD[1160] = -7.39336052E+00;
  COFD[1161] = -3.21509994E-01;
  COFD[1162] = 4.06772080E-01;
  COFD[1163] = -2.33685859E-02;
  COFD[1164] = -9.10493641E+00;
  COFD[1165] = -4.30260087E-01;
  COFD[1166] = 4.22125882E-01;
  COFD[1167] = -2.40767300E-02;
  COFD[1168] = -1.82636580E+01;
  COFD[1169] = 3.92568625E+00;
  COFD[1170] = -2.09777771E-01;
  COFD[1171] = 5.73471422E-03;
  COFD[1172] = -9.90673569E+00;
  COFD[1173] = -1.35095002E-02;
  COFD[1174] = 3.61493774E-01;
  COFD[1175] = -2.10364537E-02;
  COFD[1176] = -1.10005909E+01;
  COFD[1177] = 5.08804132E-01;
  COFD[1178] = 2.90543350E-01;
  COFD[1179] = -1.78768615E-02;
  COFD[1180] = -2.11897945E+01;
  COFD[1181] = 5.60191345E+00;
  COFD[1182] = -4.91456639E-01;
  COFD[1183] = 2.04778219E-02;
  COFD[1184] = -4.15583151E+00;
  COFD[1185] = -2.54994895E+00;
  COFD[1186] = 7.04221848E-01;
  COFD[1187] = -3.61539745E-02;
  COFD[1188] = -6.99234140E+00;
  COFD[1189] = -1.36619668E+00;
  COFD[1190] = 5.46410230E-01;
  COFD[1191] = -2.92634625E-02;
  COFD[1192] = -2.12378111E+01;
  COFD[1193] = 5.25130890E+00;
  COFD[1194] = -4.20618588E-01;
  COFD[1195] = 1.63982495E-02;
  COFD[1196] = -1.20253508E+01;
  COFD[1197] = 9.59483497E-01;
  COFD[1198] = 2.23604980E-01;
  COFD[1199] = -1.47413229E-02;
  COFD[1200] = -2.12432736E+01;
  COFD[1201] = 5.45768724E+00;
  COFD[1202] = -4.53923064E-01;
  COFD[1203] = 1.81008101E-02;
  COFD[1204] = -2.11135170E+01;
  COFD[1205] = 5.60191345E+00;
  COFD[1206] = -4.91456639E-01;
  COFD[1207] = 2.04778219E-02;
  COFD[1208] = -2.10427961E+01;
  COFD[1209] = 5.53228635E+00;
  COFD[1210] = -4.85667196E-01;
  COFD[1211] = 2.03542792E-02;
  COFD[1212] = -2.14183016E+01;
  COFD[1213] = 5.53228635E+00;
  COFD[1214] = -4.85667196E-01;
  COFD[1215] = 2.03542792E-02;
  COFD[1216] = -1.97877741E+01;
  COFD[1217] = 4.29949203E+00;
  COFD[1218] = -2.66347485E-01;
  COFD[1219] = 8.50047058E-03;
  COFD[1220] = -2.04646121E+01;
  COFD[1221] = 4.69994847E+00;
  COFD[1222] = -3.28738270E-01;
  COFD[1223] = 1.16113853E-02;
  COFD[1224] = -2.14273129E+01;
  COFD[1225] = 5.53228635E+00;
  COFD[1226] = -4.85667196E-01;
  COFD[1227] = 2.03542792E-02;
  COFD[1228] = -2.14273129E+01;
  COFD[1229] = 5.53228635E+00;
  COFD[1230] = -4.85667196E-01;
  COFD[1231] = 2.03542792E-02;
  COFD[1232] = -2.17312043E+01;
  COFD[1233] = 5.50441375E+00;
  COFD[1234] = -4.63402274E-01;
  COFD[1235] = 1.86474406E-02;
  COFD[1236] = -2.17233988E+01;
  COFD[1237] = 5.50441375E+00;
  COFD[1238] = -4.63402274E-01;
  COFD[1239] = 1.86474406E-02;
  COFD[1240] = -2.17233988E+01;
  COFD[1241] = 5.50441375E+00;
  COFD[1242] = -4.63402274E-01;
  COFD[1243] = 1.86474406E-02;
  COFD[1244] = -1.87197962E+01;
  COFD[1245] = 3.87187813E+00;
  COFD[1246] = -1.98647530E-01;
  COFD[1247] = 5.15002338E-03;
  COFD[1248] = -2.17152178E+01;
  COFD[1249] = 5.50441375E+00;
  COFD[1250] = -4.63402274E-01;
  COFD[1251] = 1.86474406E-02;
  COFD[1252] = -1.70662616E+01;
  COFD[1253] = 3.02985738E+00;
  COFD[1254] = -7.72084703E-02;
  COFD[1255] = -6.24121266E-04;
  COFD[1256] = -1.53843020E+01;
  COFD[1257] = 2.24850320E+00;
  COFD[1258] = 3.58951681E-02;
  COFD[1259] = -5.92602427E-03;
  COFD[1260] = -1.53843020E+01;
  COFD[1261] = 2.24850320E+00;
  COFD[1262] = 3.58951681E-02;
  COFD[1263] = -5.92602427E-03;
  COFD[1264] = -1.57324108E+01;
  COFD[1265] = 2.33252912E+00;
  COFD[1266] = 2.62440377E-02;
  COFD[1267] = -5.60304878E-03;
  COFD[1268] = -1.57351972E+01;
  COFD[1269] = 2.33252912E+00;
  COFD[1270] = 2.62440377E-02;
  COFD[1271] = -5.60304878E-03;
  COFD[1272] = -1.97980818E+01;
  COFD[1273] = 4.32886122E+00;
  COFD[1274] = -2.70836956E-01;
  COFD[1275] = 8.72135260E-03;
  COFD[1276] = -1.81066148E+01;
  COFD[1277] = 3.52185917E+00;
  COFD[1278] = -1.48506723E-01;
  COFD[1279] = 2.73999922E-03;
  COFD[1280] = -1.59731815E+01;
  COFD[1281] = 3.65003553E+00;
  COFD[1282] = -2.62219353E-01;
  COFD[1283] = 1.14980439E-02;
  COFD[1284] = -1.85416809E+01;
  COFD[1285] = 5.10551491E+00;
  COFD[1286] = -4.41403301E-01;
  COFD[1287] = 1.88794365E-02;
  COFD[1288] = -1.95727700E+01;
  COFD[1289] = 5.59935742E+00;
  COFD[1290] = -4.91638011E-01;
  COFD[1291] = 2.05059822E-02;
  COFD[1292] = -2.16619321E+01;
  COFD[1293] = 5.58487924E+00;
  COFD[1294] = -4.81510037E-01;
  COFD[1295] = 1.97381426E-02;
  COFD[1296] = -1.85684126E+01;
  COFD[1297] = 4.78227838E+00;
  COFD[1298] = -4.03139649E-01;
  COFD[1299] = 1.73672990E-02;
  COFD[1300] = -2.12090586E+01;
  COFD[1301] = 5.49663154E+00;
  COFD[1302] = -4.71044709E-01;
  COFD[1303] = 1.93228596E-02;
  COFD[1304] = -2.08522476E+01;
  COFD[1305] = 5.47769609E+00;
  COFD[1306] = -4.75718444E-01;
  COFD[1307] = 1.98075247E-02;
  COFD[1308] = -1.50056270E+01;
  COFD[1309] = 3.44514533E+00;
  COFD[1310] = -2.36376839E-01;
  COFD[1311] = 1.04085476E-02;
  COFD[1312] = -2.02154772E+01;
  COFD[1313] = 4.66732337E+00;
  COFD[1314] = -3.25052442E-01;
  COFD[1315] = 1.14744423E-02;
  COFD[1316] = -2.12378111E+01;
  COFD[1317] = 5.25130890E+00;
  COFD[1318] = -4.20618588E-01;
  COFD[1319] = 1.63982495E-02;
  COFD[1320] = -1.72149241E+01;
  COFD[1321] = 4.13871828E+00;
  COFD[1322] = -3.24842196E-01;
  COFD[1323] = 1.41844608E-02;
  COFD[1324] = -2.08197209E+01;
  COFD[1325] = 5.44400162E+00;
  COFD[1326] = -4.73747447E-01;
  COFD[1327] = 1.98176244E-02;
  COFD[1328] = -1.49808619E+01;
  COFD[1329] = 3.45509417E+00;
  COFD[1330] = -2.37641474E-01;
  COFD[1331] = 1.04622329E-02;
  COFD[1332] = -1.49318681E+01;
  COFD[1333] = 3.44514533E+00;
  COFD[1334] = -2.36376839E-01;
  COFD[1335] = 1.04085476E-02;
  COFD[1336] = -1.47064783E+01;
  COFD[1337] = 3.28944369E+00;
  COFD[1338] = -2.16061601E-01;
  COFD[1339] = 9.52335607E-03;
  COFD[1340] = -1.50692283E+01;
  COFD[1341] = 3.28944369E+00;
  COFD[1342] = -2.16061601E-01;
  COFD[1343] = 9.52335607E-03;
  COFD[1344] = -1.88170033E+01;
  COFD[1345] = 4.61689241E+00;
  COFD[1346] = -3.83394452E-01;
  COFD[1347] = 1.65802961E-02;
  COFD[1348] = -1.86006790E+01;
  COFD[1349] = 4.57319188E+00;
  COFD[1350] = -3.77933244E-01;
  COFD[1351] = 1.63519311E-02;
  COFD[1352] = -1.50778334E+01;
  COFD[1353] = 3.28944369E+00;
  COFD[1354] = -2.16061601E-01;
  COFD[1355] = 9.52335607E-03;
  COFD[1356] = -1.50778334E+01;
  COFD[1357] = 3.28944369E+00;
  COFD[1358] = -2.16061601E-01;
  COFD[1359] = 9.52335607E-03;
  COFD[1360] = -1.66602047E+01;
  COFD[1361] = 3.90705478E+00;
  COFD[1362] = -2.95335365E-01;
  COFD[1363] = 1.29246736E-02;
  COFD[1364] = -1.66527682E+01;
  COFD[1365] = 3.90705478E+00;
  COFD[1366] = -2.95335365E-01;
  COFD[1367] = 1.29246736E-02;
  COFD[1368] = -1.66527682E+01;
  COFD[1369] = 3.90705478E+00;
  COFD[1370] = -2.95335365E-01;
  COFD[1371] = 1.29246736E-02;
  COFD[1372] = -1.80567655E+01;
  COFD[1373] = 4.43168662E+00;
  COFD[1374] = -3.61195217E-01;
  COFD[1375] = 1.56957124E-02;
  COFD[1376] = -1.66449681E+01;
  COFD[1377] = 3.90705478E+00;
  COFD[1378] = -2.95335365E-01;
  COFD[1379] = 1.29246736E-02;
  COFD[1380] = -2.03723754E+01;
  COFD[1381] = 5.15202220E+00;
  COFD[1382] = -4.45189907E-01;
  COFD[1383] = 1.89513141E-02;
  COFD[1384] = -2.04864468E+01;
  COFD[1385] = 5.16915371E+00;
  COFD[1386] = -4.45770645E-01;
  COFD[1387] = 1.89098733E-02;
  COFD[1388] = -2.04864468E+01;
  COFD[1389] = 5.16915371E+00;
  COFD[1390] = -4.45770645E-01;
  COFD[1391] = 1.89098733E-02;
  COFD[1392] = -2.11602357E+01;
  COFD[1393] = 5.36566969E+00;
  COFD[1394] = -4.69448702E-01;
  COFD[1395] = 1.98660968E-02;
  COFD[1396] = -2.11628509E+01;
  COFD[1397] = 5.36566969E+00;
  COFD[1398] = -4.69448702E-01;
  COFD[1399] = 1.98660968E-02;
  COFD[1400] = -1.91981829E+01;
  COFD[1401] = 4.76392621E+00;
  COFD[1402] = -4.00981139E-01;
  COFD[1403] = 1.72827297E-02;
  COFD[1404] = -2.00915012E+01;
  COFD[1405] = 5.08397108E+00;
  COFD[1406] = -4.38894241E-01;
  COFD[1407] = 1.87819650E-02;
  COFD[1408] = -2.04404299E+01;
  COFD[1409] = 5.33626531E+00;
  COFD[1410] = -4.67399953E-01;
  COFD[1411] = 1.98488974E-02;
  COFD[1412] = -1.93921099E+01;
  COFD[1413] = 5.03840349E+00;
  COFD[1414] = -3.82384453E-01;
  COFD[1415] = 1.43203475E-02;
  COFD[1416] = -1.48331073E+01;
  COFD[1417] = 3.08422374E+00;
  COFD[1418] = -8.36361657E-02;
  COFD[1419] = -3.75590973E-04;
  COFD[1420] = -1.60661375E+01;
  COFD[1421] = 2.81984170E+00;
  COFD[1422] = -4.48762937E-02;
  COFD[1423] = -2.22612380E-03;
  COFD[1424] = -2.09086983E+01;
  COFD[1425] = 5.43151412E+00;
  COFD[1426] = -4.49193274E-01;
  COFD[1427] = 1.78425061E-02;
  COFD[1428] = -1.46997713E+01;
  COFD[1429] = 2.24894731E+00;
  COFD[1430] = 3.91442622E-02;
  COFD[1431] = -6.15851150E-03;
  COFD[1432] = -1.55111940E+01;
  COFD[1433] = 2.66518820E+00;
  COFD[1434] = -1.92087409E-02;
  COFD[1435] = -3.47256223E-03;
  COFD[1436] = -1.89824738E+01;
  COFD[1437] = 4.98075560E+00;
  COFD[1438] = -4.26721620E-01;
  COFD[1439] = 1.83024823E-02;
  COFD[1440] = -9.43281067E+00;
  COFD[1441] = -1.74719572E-01;
  COFD[1442] = 3.82239123E-01;
  COFD[1443] = -2.20181769E-02;
  COFD[1444] = -1.20253508E+01;
  COFD[1445] = 9.59483497E-01;
  COFD[1446] = 2.23604980E-01;
  COFD[1447] = -1.47413229E-02;
  COFD[1448] = -2.08197209E+01;
  COFD[1449] = 5.44400162E+00;
  COFD[1450] = -4.73747447E-01;
  COFD[1451] = 1.98176244E-02;
  COFD[1452] = -1.67853017E+01;
  COFD[1453] = 3.25474819E+00;
  COFD[1454] = -1.10627237E-01;
  COFD[1455] = 1.02616738E-03;
  COFD[1456] = -2.01575499E+01;
  COFD[1457] = 5.37354604E+00;
  COFD[1458] = -4.70508026E-01;
  COFD[1459] = 1.99136682E-02;
  COFD[1460] = -1.89147506E+01;
  COFD[1461] = 4.98075560E+00;
  COFD[1462] = -4.26721620E-01;
  COFD[1463] = 1.83024823E-02;
  COFD[1464] = -1.86830530E+01;
  COFD[1465] = 4.82909392E+00;
  COFD[1466] = -4.08610711E-01;
  COFD[1467] = 1.75802236E-02;
  COFD[1468] = -1.90046955E+01;
  COFD[1469] = 4.82909392E+00;
  COFD[1470] = -4.08610711E-01;
  COFD[1471] = 1.75802236E-02;
  COFD[1472] = -2.17049238E+01;
  COFD[1473] = 5.51601871E+00;
  COFD[1474] = -4.65843688E-01;
  COFD[1475] = 1.87908436E-02;
  COFD[1476] = -2.16335876E+01;
  COFD[1477] = 5.58518186E+00;
  COFD[1478] = -4.80813479E-01;
  COFD[1479] = 1.96787936E-02;
  COFD[1480] = -1.90109410E+01;
  COFD[1481] = 4.82909392E+00;
  COFD[1482] = -4.08610711E-01;
  COFD[1483] = 1.75802236E-02;
  COFD[1484] = -1.90109410E+01;
  COFD[1485] = 4.82909392E+00;
  COFD[1486] = -4.08610711E-01;
  COFD[1487] = 1.75802236E-02;
  COFD[1488] = -2.05737846E+01;
  COFD[1489] = 5.37634919E+00;
  COFD[1490] = -4.70693222E-01;
  COFD[1491] = 1.99144603E-02;
  COFD[1492] = -2.05684585E+01;
  COFD[1493] = 5.37634919E+00;
  COFD[1494] = -4.70693222E-01;
  COFD[1495] = 1.99144603E-02;
  COFD[1496] = -2.05684585E+01;
  COFD[1497] = 5.37634919E+00;
  COFD[1498] = -4.70693222E-01;
  COFD[1499] = 1.99144603E-02;
  COFD[1500] = -2.09713622E+01;
  COFD[1501] = 5.18381370E+00;
  COFD[1502] = -4.05378034E-01;
  COFD[1503] = 1.55112814E-02;
  COFD[1504] = -2.05628479E+01;
  COFD[1505] = 5.37634919E+00;
  COFD[1506] = -4.70693222E-01;
  COFD[1507] = 1.99144603E-02;
  COFD[1508] = -2.07276341E+01;
  COFD[1509] = 4.97149561E+00;
  COFD[1510] = -3.74136752E-01;
  COFD[1511] = 1.39812994E-02;
  COFD[1512] = -1.94494309E+01;
  COFD[1513] = 4.32914628E+00;
  COFD[1514] = -2.75851330E-01;
  COFD[1515] = 9.15485311E-03;
  COFD[1516] = -1.94494309E+01;
  COFD[1517] = 4.32914628E+00;
  COFD[1518] = -2.75851330E-01;
  COFD[1519] = 9.15485311E-03;
  COFD[1520] = -2.03052399E+01;
  COFD[1521] = 4.66192924E+00;
  COFD[1522] = -3.23696484E-01;
  COFD[1523] = 1.13894894E-02;
  COFD[1524] = -2.03069665E+01;
  COFD[1525] = 4.66192924E+00;
  COFD[1526] = -3.23696484E-01;
  COFD[1527] = 1.13894894E-02;
  COFD[1528] = -2.16211139E+01;
  COFD[1529] = 5.50657794E+00;
  COFD[1530] = -4.63927523E-01;
  COFD[1531] = 1.86800112E-02;
  COFD[1532] = -2.12081959E+01;
  COFD[1533] = 5.25015888E+00;
  COFD[1534] = -4.17586588E-01;
  COFD[1535] = 1.61516138E-02;
  COFD[1536] = -1.40493180E+01;
  COFD[1537] = 3.07862627E+00;
  COFD[1538] = -1.89296337E-01;
  COFD[1539] = 8.38918162E-03;
  COFD[1540] = -1.62588765E+01;
  COFD[1541] = 4.40802861E+00;
  COFD[1542] = -3.57921522E-01;
  COFD[1543] = 1.55426730E-02;
  COFD[1544] = -1.76980350E+01;
  COFD[1545] = 5.12603141E+00;
  COFD[1546] = -4.43773544E-01;
  COFD[1547] = 1.89706048E-02;
  COFD[1548] = -2.02500725E+01;
  COFD[1549] = 5.35928403E+00;
  COFD[1550] = -4.69547034E-01;
  COFD[1551] = 1.99081842E-02;
  COFD[1552] = -1.62901467E+01;
  COFD[1553] = 4.10829852E+00;
  COFD[1554] = -3.21106093E-01;
  COFD[1555] = 1.40306392E-02;
  COFD[1556] = -2.10748057E+01;
  COFD[1557] = 5.60974106E+00;
  COFD[1558] = -4.89833293E-01;
  COFD[1559] = 2.03035478E-02;
  COFD[1560] = -2.08492557E+01;
  COFD[1561] = 5.60123858E+00;
  COFD[1562] = -4.91517756E-01;
  COFD[1563] = 2.04863589E-02;
  COFD[1564] = -1.31880809E+01;
  COFD[1565] = 2.90778936E+00;
  COFD[1566] = -1.67388544E-01;
  COFD[1567] = 7.45220609E-03;
  COFD[1568] = -2.10401761E+01;
  COFD[1569] = 5.31679148E+00;
  COFD[1570] = -4.28922479E-01;
  COFD[1571] = 1.67500088E-02;
  COFD[1572] = -2.12432736E+01;
  COFD[1573] = 5.45768724E+00;
  COFD[1574] = -4.53923064E-01;
  COFD[1575] = 1.81008101E-02;
  COFD[1576] = -1.49808619E+01;
  COFD[1577] = 3.45509417E+00;
  COFD[1578] = -2.37641474E-01;
  COFD[1579] = 1.04622329E-02;
  COFD[1580] = -2.01575499E+01;
  COFD[1581] = 5.37354604E+00;
  COFD[1582] = -4.70508026E-01;
  COFD[1583] = 1.99136682E-02;
  COFD[1584] = -1.31360187E+01;
  COFD[1585] = 2.90778936E+00;
  COFD[1586] = -1.67388544E-01;
  COFD[1587] = 7.45220609E-03;
  COFD[1588] = -1.31195110E+01;
  COFD[1589] = 2.90778936E+00;
  COFD[1590] = -1.67388544E-01;
  COFD[1591] = 7.45220609E-03;
  COFD[1592] = -1.30704546E+01;
  COFD[1593] = 2.80913567E+00;
  COFD[1594] = -1.54536855E-01;
  COFD[1595] = 6.89359313E-03;
  COFD[1596] = -1.33934005E+01;
  COFD[1597] = 2.80913567E+00;
  COFD[1598] = -1.54536855E-01;
  COFD[1599] = 6.89359313E-03;
  COFD[1600] = -1.65163449E+01;
  COFD[1601] = 3.92040487E+00;
  COFD[1602] = -2.97068442E-01;
  COFD[1603] = 1.30000135E-02;
  COFD[1604] = -1.63128378E+01;
  COFD[1605] = 3.88250968E+00;
  COFD[1606] = -2.92155848E-01;
  COFD[1607] = 1.27867850E-02;
  COFD[1608] = -1.33994064E+01;
  COFD[1609] = 2.80913567E+00;
  COFD[1610] = -1.54536855E-01;
  COFD[1611] = 6.89359313E-03;
  COFD[1612] = -1.33994064E+01;
  COFD[1613] = 2.80913567E+00;
  COFD[1614] = -1.54536855E-01;
  COFD[1615] = 6.89359313E-03;
  COFD[1616] = -1.44852526E+01;
  COFD[1617] = 3.24450689E+00;
  COFD[1618] = -2.10570734E-01;
  COFD[1619] = 9.30026771E-03;
  COFD[1620] = -1.44801377E+01;
  COFD[1621] = 3.24450689E+00;
  COFD[1622] = -2.10570734E-01;
  COFD[1623] = 9.30026771E-03;
  COFD[1624] = -1.44801377E+01;
  COFD[1625] = 3.24450689E+00;
  COFD[1626] = -2.10570734E-01;
  COFD[1627] = 9.30026771E-03;
  COFD[1628] = -1.72302363E+01;
  COFD[1629] = 4.26072514E+00;
  COFD[1630] = -3.39859252E-01;
  COFD[1631] = 1.48025872E-02;
  COFD[1632] = -1.44747472E+01;
  COFD[1633] = 3.24450689E+00;
  COFD[1634] = -2.10570734E-01;
  COFD[1635] = 9.30026771E-03;
  COFD[1636] = -1.81563854E+01;
  COFD[1637] = 4.53548642E+00;
  COFD[1638] = -3.73358387E-01;
  COFD[1639] = 1.61667533E-02;
  COFD[1640] = -1.90944956E+01;
  COFD[1641] = 4.84648833E+00;
  COFD[1642] = -4.10549293E-01;
  COFD[1643] = 1.76512818E-02;
  COFD[1644] = -1.90944956E+01;
  COFD[1645] = 4.84648833E+00;
  COFD[1646] = -4.10549293E-01;
  COFD[1647] = 1.76512818E-02;
  COFD[1648] = -1.89068168E+01;
  COFD[1649] = 4.75253200E+00;
  COFD[1650] = -3.99612781E-01;
  COFD[1651] = 1.72278125E-02;
  COFD[1652] = -1.89084620E+01;
  COFD[1653] = 4.75253200E+00;
  COFD[1654] = -3.99612781E-01;
  COFD[1655] = 1.72278125E-02;
  COFD[1656] = -1.68989140E+01;
  COFD[1657] = 4.09077642E+00;
  COFD[1658] = -3.18894990E-01;
  COFD[1659] = 1.39371445E-02;
  COFD[1660] = -1.76640371E+01;
  COFD[1661] = 4.38770680E+00;
  COFD[1662] = -3.55417486E-01;
  COFD[1663] = 1.54395368E-02;
  COFD[1664] = -1.40284082E+01;
  COFD[1665] = 3.07862627E+00;
  COFD[1666] = -1.89296337E-01;
  COFD[1667] = 8.38918162E-03;
  COFD[1668] = -1.62551391E+01;
  COFD[1669] = 4.40802861E+00;
  COFD[1670] = -3.57921522E-01;
  COFD[1671] = 1.55426730E-02;
  COFD[1672] = -1.76960523E+01;
  COFD[1673] = 5.12603141E+00;
  COFD[1674] = -4.43773544E-01;
  COFD[1675] = 1.89706048E-02;
  COFD[1676] = -2.02281919E+01;
  COFD[1677] = 5.35928403E+00;
  COFD[1678] = -4.69547034E-01;
  COFD[1679] = 1.99081842E-02;
  COFD[1680] = -1.62736512E+01;
  COFD[1681] = 4.10829852E+00;
  COFD[1682] = -3.21106093E-01;
  COFD[1683] = 1.40306392E-02;
  COFD[1684] = -1.98891503E+01;
  COFD[1685] = 5.30058549E+00;
  COFD[1686] = -4.63219773E-01;
  COFD[1687] = 1.96850193E-02;
  COFD[1688] = -1.90355274E+01;
  COFD[1689] = 5.06597831E+00;
  COFD[1690] = -4.36784465E-01;
  COFD[1691] = 1.86993155E-02;
  COFD[1692] = -1.31710897E+01;
  COFD[1693] = 2.90778936E+00;
  COFD[1694] = -1.67388544E-01;
  COFD[1695] = 7.45220609E-03;
  COFD[1696] = -2.12633511E+01;
  COFD[1697] = 5.52452502E+00;
  COFD[1698] = -4.67506789E-01;
  COFD[1699] = 1.88852944E-02;
  COFD[1700] = -2.11135170E+01;
  COFD[1701] = 5.60191345E+00;
  COFD[1702] = -4.91456639E-01;
  COFD[1703] = 2.04778219E-02;
  COFD[1704] = -1.49318681E+01;
  COFD[1705] = 3.44514533E+00;
  COFD[1706] = -2.36376839E-01;
  COFD[1707] = 1.04085476E-02;
  COFD[1708] = -1.89147506E+01;
  COFD[1709] = 4.98075560E+00;
  COFD[1710] = -4.26721620E-01;
  COFD[1711] = 1.83024823E-02;
  COFD[1712] = -1.31195110E+01;
  COFD[1713] = 2.90778936E+00;
  COFD[1714] = -1.67388544E-01;
  COFD[1715] = 7.45220609E-03;
  COFD[1716] = -1.31035309E+01;
  COFD[1717] = 2.90778936E+00;
  COFD[1718] = -1.67388544E-01;
  COFD[1719] = 7.45220609E-03;
  COFD[1720] = -1.30550382E+01;
  COFD[1721] = 2.80913567E+00;
  COFD[1722] = -1.54536855E-01;
  COFD[1723] = 6.89359313E-03;
  COFD[1724] = -1.33722286E+01;
  COFD[1725] = 2.80913567E+00;
  COFD[1726] = -1.54536855E-01;
  COFD[1727] = 6.89359313E-03;
  COFD[1728] = -1.64944536E+01;
  COFD[1729] = 3.92040487E+00;
  COFD[1730] = -2.97068442E-01;
  COFD[1731] = 1.30000135E-02;
  COFD[1732] = -1.62911759E+01;
  COFD[1733] = 3.88250968E+00;
  COFD[1734] = -2.92155848E-01;
  COFD[1735] = 1.27867850E-02;
  COFD[1736] = -1.33779841E+01;
  COFD[1737] = 2.80913567E+00;
  COFD[1738] = -1.54536855E-01;
  COFD[1739] = 6.89359313E-03;
  COFD[1740] = -1.33779841E+01;
  COFD[1741] = 2.80913567E+00;
  COFD[1742] = -1.54536855E-01;
  COFD[1743] = 6.89359313E-03;
  COFD[1744] = -1.44631465E+01;
  COFD[1745] = 3.24450689E+00;
  COFD[1746] = -2.10570734E-01;
  COFD[1747] = 9.30026771E-03;
  COFD[1748] = -1.44582517E+01;
  COFD[1749] = 3.24450689E+00;
  COFD[1750] = -2.10570734E-01;
  COFD[1751] = 9.30026771E-03;
  COFD[1752] = -1.44582517E+01;
  COFD[1753] = 3.24450689E+00;
  COFD[1754] = -2.10570734E-01;
  COFD[1755] = 9.30026771E-03;
  COFD[1756] = -1.55174229E+01;
  COFD[1757] = 3.64713354E+00;
  COFD[1758] = -2.61891633E-01;
  COFD[1759] = 1.14859287E-02;
  COFD[1760] = -1.44530909E+01;
  COFD[1761] = 3.24450689E+00;
  COFD[1762] = -2.10570734E-01;
  COFD[1763] = 9.30026771E-03;
  COFD[1764] = -1.80756881E+01;
  COFD[1765] = 4.51574627E+00;
  COFD[1766] = -3.70945448E-01;
  COFD[1767] = 1.60681888E-02;
  COFD[1768] = -1.82896493E+01;
  COFD[1769] = 4.58057560E+00;
  COFD[1770] = -3.78845026E-01;
  COFD[1771] = 1.63895472E-02;
  COFD[1772] = -1.82896493E+01;
  COFD[1773] = 4.58057560E+00;
  COFD[1774] = -3.78845026E-01;
  COFD[1775] = 1.63895472E-02;
  COFD[1776] = -1.88711237E+01;
  COFD[1777] = 4.74919572E+00;
  COFD[1778] = -3.99211884E-01;
  COFD[1779] = 1.72117130E-02;
  COFD[1780] = -1.88726854E+01;
  COFD[1781] = 4.74919572E+00;
  COFD[1782] = -3.99211884E-01;
  COFD[1783] = 1.72117130E-02;
  COFD[1784] = -1.68748925E+01;
  COFD[1785] = 4.09077642E+00;
  COFD[1786] = -3.18894990E-01;
  COFD[1787] = 1.39371445E-02;
  COFD[1788] = -1.76379673E+01;
  COFD[1789] = 4.38770680E+00;
  COFD[1790] = -3.55417486E-01;
  COFD[1791] = 1.54395368E-02;
  COFD[1792] = -1.39218740E+01;
  COFD[1793] = 2.97368133E+00;
  COFD[1794] = -1.75779738E-01;
  COFD[1795] = 7.80847104E-03;
  COFD[1796] = -1.61131361E+01;
  COFD[1797] = 4.26844419E+00;
  COFD[1798] = -3.40796006E-01;
  COFD[1799] = 1.48405346E-02;
  COFD[1800] = -1.75782667E+01;
  COFD[1801] = 4.98721692E+00;
  COFD[1802] = -4.27484432E-01;
  COFD[1803] = 1.83325332E-02;
  COFD[1804] = -2.00149231E+01;
  COFD[1805] = 5.22399612E+00;
  COFD[1806] = -4.54140123E-01;
  COFD[1807] = 1.93250042E-02;
  COFD[1808] = -1.60946487E+01;
  COFD[1809] = 3.96020923E+00;
  COFD[1810] = -3.02239833E-01;
  COFD[1811] = 1.32250126E-02;
  COFD[1812] = -1.96674102E+01;
  COFD[1813] = 5.15723484E+00;
  COFD[1814] = -4.46634377E-01;
  COFD[1815] = 1.90459078E-02;
  COFD[1816] = -1.88312632E+01;
  COFD[1817] = 4.92071488E+00;
  COFD[1818] = -4.19606875E-01;
  COFD[1819] = 1.80210998E-02;
  COFD[1820] = -1.31174788E+01;
  COFD[1821] = 2.80913567E+00;
  COFD[1822] = -1.54536855E-01;
  COFD[1823] = 6.89359313E-03;
  COFD[1824] = -2.14880809E+01;
  COFD[1825] = 5.58515442E+00;
  COFD[1826] = -4.80422533E-01;
  COFD[1827] = 1.96465258E-02;
  COFD[1828] = -2.10427961E+01;
  COFD[1829] = 5.53228635E+00;
  COFD[1830] = -4.85667196E-01;
  COFD[1831] = 2.03542792E-02;
  COFD[1832] = -1.47064783E+01;
  COFD[1833] = 3.28944369E+00;
  COFD[1834] = -2.16061601E-01;
  COFD[1835] = 9.52335607E-03;
  COFD[1836] = -1.86830530E+01;
  COFD[1837] = 4.82909392E+00;
  COFD[1838] = -4.08610711E-01;
  COFD[1839] = 1.75802236E-02;
  COFD[1840] = -1.30704546E+01;
  COFD[1841] = 2.80913567E+00;
  COFD[1842] = -1.54536855E-01;
  COFD[1843] = 6.89359313E-03;
  COFD[1844] = -1.30550382E+01;
  COFD[1845] = 2.80913567E+00;
  COFD[1846] = -1.54536855E-01;
  COFD[1847] = 6.89359313E-03;
  COFD[1848] = -1.30341700E+01;
  COFD[1849] = 2.73155251E+00;
  COFD[1850] = -1.44594082E-01;
  COFD[1851] = 6.46883252E-03;
  COFD[1852] = -1.33299692E+01;
  COFD[1853] = 2.73155251E+00;
  COFD[1854] = -1.44594082E-01;
  COFD[1855] = 6.46883252E-03;
  COFD[1856] = -1.61370785E+01;
  COFD[1857] = 3.72316581E+00;
  COFD[1858] = -2.71276511E-01;
  COFD[1859] = 1.18720331E-02;
  COFD[1860] = -1.59394625E+01;
  COFD[1861] = 3.68407693E+00;
  COFD[1862] = -2.66228170E-01;
  COFD[1863] = 1.16542305E-02;
  COFD[1864] = -1.33354626E+01;
  COFD[1865] = 2.73155251E+00;
  COFD[1866] = -1.44594082E-01;
  COFD[1867] = 6.46883252E-03;
  COFD[1868] = -1.33354626E+01;
  COFD[1869] = 2.73155251E+00;
  COFD[1870] = -1.44594082E-01;
  COFD[1871] = 6.46883252E-03;
  COFD[1872] = -1.43687616E+01;
  COFD[1873] = 3.14480429E+00;
  COFD[1874] = -1.97906290E-01;
  COFD[1875] = 8.76325718E-03;
  COFD[1876] = -1.43640965E+01;
  COFD[1877] = 3.14480429E+00;
  COFD[1878] = -1.97906290E-01;
  COFD[1879] = 8.76325718E-03;
  COFD[1880] = -1.43640965E+01;
  COFD[1881] = 3.14480429E+00;
  COFD[1882] = -1.97906290E-01;
  COFD[1883] = 8.76325718E-03;
  COFD[1884] = -1.53918267E+01;
  COFD[1885] = 3.53589065E+00;
  COFD[1886] = -2.47899115E-01;
  COFD[1887] = 1.08975333E-02;
  COFD[1888] = -1.43591756E+01;
  COFD[1889] = 3.14480429E+00;
  COFD[1890] = -1.97906290E-01;
  COFD[1891] = 8.76325718E-03;
  COFD[1892] = -1.78490726E+01;
  COFD[1893] = 4.37690225E+00;
  COFD[1894] = -3.54062330E-01;
  COFD[1895] = 1.53826315E-02;
  COFD[1896] = -1.80541153E+01;
  COFD[1897] = 4.44018708E+00;
  COFD[1898] = -3.61866079E-01;
  COFD[1899] = 1.57042940E-02;
  COFD[1900] = -1.80541153E+01;
  COFD[1901] = 4.44018708E+00;
  COFD[1902] = -3.61866079E-01;
  COFD[1903] = 1.57042940E-02;
  COFD[1904] = -1.86339637E+01;
  COFD[1905] = 4.61260432E+00;
  COFD[1906] = -3.82854484E-01;
  COFD[1907] = 1.65575163E-02;
  COFD[1908] = -1.86354398E+01;
  COFD[1909] = 4.61260432E+00;
  COFD[1910] = -3.82854484E-01;
  COFD[1911] = 1.65575163E-02;
  COFD[1912] = -1.66315381E+01;
  COFD[1913] = 3.93849401E+00;
  COFD[1914] = -2.99416642E-01;
  COFD[1915] = 1.31020815E-02;
  COFD[1916] = -1.74289175E+01;
  COFD[1917] = 4.25122035E+00;
  COFD[1918] = -3.38698235E-01;
  COFD[1919] = 1.47551928E-02;
  COFD[1920] = -1.42731265E+01;
  COFD[1921] = 2.97368133E+00;
  COFD[1922] = -1.75779738E-01;
  COFD[1923] = 7.80847104E-03;
  COFD[1924] = -1.63211782E+01;
  COFD[1925] = 4.26844419E+00;
  COFD[1926] = -3.40796006E-01;
  COFD[1927] = 1.48405346E-02;
  COFD[1928] = -1.77930288E+01;
  COFD[1929] = 4.98721692E+00;
  COFD[1930] = -4.27484432E-01;
  COFD[1931] = 1.83325332E-02;
  COFD[1932] = -2.03891436E+01;
  COFD[1933] = 5.22399612E+00;
  COFD[1934] = -4.54140123E-01;
  COFD[1935] = 1.93250042E-02;
  COFD[1936] = -1.64218813E+01;
  COFD[1937] = 3.96020923E+00;
  COFD[1938] = -3.02239833E-01;
  COFD[1939] = 1.32250126E-02;
  COFD[1940] = -1.99935387E+01;
  COFD[1941] = 5.15723484E+00;
  COFD[1942] = -4.46634377E-01;
  COFD[1943] = 1.90459078E-02;
  COFD[1944] = -1.91613179E+01;
  COFD[1945] = 4.92071488E+00;
  COFD[1946] = -4.19606875E-01;
  COFD[1947] = 1.80210998E-02;
  COFD[1948] = -1.34431749E+01;
  COFD[1949] = 2.80913567E+00;
  COFD[1950] = -1.54536855E-01;
  COFD[1951] = 6.89359313E-03;
  COFD[1952] = -2.18650187E+01;
  COFD[1953] = 5.58515442E+00;
  COFD[1954] = -4.80422533E-01;
  COFD[1955] = 1.96465258E-02;
  COFD[1956] = -2.14183016E+01;
  COFD[1957] = 5.53228635E+00;
  COFD[1958] = -4.85667196E-01;
  COFD[1959] = 2.03542792E-02;
  COFD[1960] = -1.50692283E+01;
  COFD[1961] = 3.28944369E+00;
  COFD[1962] = -2.16061601E-01;
  COFD[1963] = 9.52335607E-03;
  COFD[1964] = -1.90046955E+01;
  COFD[1965] = 4.82909392E+00;
  COFD[1966] = -4.08610711E-01;
  COFD[1967] = 1.75802236E-02;
  COFD[1968] = -1.33934005E+01;
  COFD[1969] = 2.80913567E+00;
  COFD[1970] = -1.54536855E-01;
  COFD[1971] = 6.89359313E-03;
  COFD[1972] = -1.33722286E+01;
  COFD[1973] = 2.80913567E+00;
  COFD[1974] = -1.54536855E-01;
  COFD[1975] = 6.89359313E-03;
  COFD[1976] = -1.33299692E+01;
  COFD[1977] = 2.73155251E+00;
  COFD[1978] = -1.44594082E-01;
  COFD[1979] = 6.46883252E-03;
  COFD[1980] = -1.36807352E+01;
  COFD[1981] = 2.73155251E+00;
  COFD[1982] = -1.44594082E-01;
  COFD[1983] = 6.46883252E-03;
  COFD[1984] = -1.64888415E+01;
  COFD[1985] = 3.72316581E+00;
  COFD[1986] = -2.71276511E-01;
  COFD[1987] = 1.18720331E-02;
  COFD[1988] = -1.62941846E+01;
  COFD[1989] = 3.68407693E+00;
  COFD[1990] = -2.66228170E-01;
  COFD[1991] = 1.16542305E-02;
  COFD[1992] = -1.36891980E+01;
  COFD[1993] = 2.73155251E+00;
  COFD[1994] = -1.44594082E-01;
  COFD[1995] = 6.46883252E-03;
  COFD[1996] = -1.36891980E+01;
  COFD[1997] = 2.73155251E+00;
  COFD[1998] = -1.44594082E-01;
  COFD[1999] = 6.46883252E-03;
  COFD[2000] = -1.47365962E+01;
  COFD[2001] = 3.14480429E+00;
  COFD[2002] = -1.97906290E-01;
  COFD[2003] = 8.76325718E-03;
  COFD[2004] = -1.47292885E+01;
  COFD[2005] = 3.14480429E+00;
  COFD[2006] = -1.97906290E-01;
  COFD[2007] = 8.76325718E-03;
  COFD[2008] = -1.47292885E+01;
  COFD[2009] = 3.14480429E+00;
  COFD[2010] = -1.97906290E-01;
  COFD[2011] = 8.76325718E-03;
  COFD[2012] = -1.57555364E+01;
  COFD[2013] = 3.53589065E+00;
  COFD[2014] = -2.47899115E-01;
  COFD[2015] = 1.08975333E-02;
  COFD[2016] = -1.47216216E+01;
  COFD[2017] = 3.14480429E+00;
  COFD[2018] = -1.97906290E-01;
  COFD[2019] = 8.76325718E-03;
  COFD[2020] = -1.82368559E+01;
  COFD[2021] = 4.37690225E+00;
  COFD[2022] = -3.54062330E-01;
  COFD[2023] = 1.53826315E-02;
  COFD[2024] = -1.84417861E+01;
  COFD[2025] = 4.44018708E+00;
  COFD[2026] = -3.61866079E-01;
  COFD[2027] = 1.57042940E-02;
  COFD[2028] = -1.84417861E+01;
  COFD[2029] = 4.44018708E+00;
  COFD[2030] = -3.61866079E-01;
  COFD[2031] = 1.57042940E-02;
  COFD[2032] = -1.90371890E+01;
  COFD[2033] = 4.61260432E+00;
  COFD[2034] = -3.82854484E-01;
  COFD[2035] = 1.65575163E-02;
  COFD[2036] = -1.90397457E+01;
  COFD[2037] = 4.61260432E+00;
  COFD[2038] = -3.82854484E-01;
  COFD[2039] = 1.65575163E-02;
  COFD[2040] = -1.70163379E+01;
  COFD[2041] = 3.93849401E+00;
  COFD[2042] = -2.99416642E-01;
  COFD[2043] = 1.31020815E-02;
  COFD[2044] = -1.78460568E+01;
  COFD[2045] = 4.25122035E+00;
  COFD[2046] = -3.38698235E-01;
  COFD[2047] = 1.47551928E-02;
  COFD[2048] = -1.76283979E+01;
  COFD[2049] = 4.17233662E+00;
  COFD[2050] = -3.28948278E-01;
  COFD[2051] = 1.43520367E-02;
  COFD[2052] = -1.98769866E+01;
  COFD[2053] = 5.42182052E+00;
  COFD[2054] = -4.73561326E-01;
  COFD[2055] = 1.99169201E-02;
  COFD[2056] = -2.00401152E+01;
  COFD[2057] = 5.50980201E+00;
  COFD[2058] = -4.64658042E-01;
  COFD[2059] = 1.87242142E-02;
  COFD[2060] = -2.16414785E+01;
  COFD[2061] = 5.30417405E+00;
  COFD[2062] = -4.26814400E-01;
  COFD[2063] = 1.66398821E-02;
  COFD[2064] = -2.01683520E+01;
  COFD[2065] = 5.22449336E+00;
  COFD[2066] = -4.54197900E-01;
  COFD[2067] = 1.93272430E-02;
  COFD[2068] = -2.12662740E+01;
  COFD[2069] = 5.18725077E+00;
  COFD[2070] = -4.06803248E-01;
  COFD[2071] = 1.55810248E-02;
  COFD[2072] = -2.14929518E+01;
  COFD[2073] = 5.40452913E+00;
  COFD[2074] = -4.44238022E-01;
  COFD[2075] = 1.75698937E-02;
  COFD[2076] = -1.65648734E+01;
  COFD[2077] = 3.92040487E+00;
  COFD[2078] = -2.97068442E-01;
  COFD[2079] = 1.30000135E-02;
  COFD[2080] = -1.79323121E+01;
  COFD[2081] = 3.39627236E+00;
  COFD[2082] = -1.29827785E-01;
  COFD[2083] = 1.84023054E-03;
  COFD[2084] = -1.97877741E+01;
  COFD[2085] = 4.29949203E+00;
  COFD[2086] = -2.66347485E-01;
  COFD[2087] = 8.50047058E-03;
  COFD[2088] = -1.88170033E+01;
  COFD[2089] = 4.61689241E+00;
  COFD[2090] = -3.83394452E-01;
  COFD[2091] = 1.65802961E-02;
  COFD[2092] = -2.17049238E+01;
  COFD[2093] = 5.51601871E+00;
  COFD[2094] = -4.65843688E-01;
  COFD[2095] = 1.87908436E-02;
  COFD[2096] = -1.65163449E+01;
  COFD[2097] = 3.92040487E+00;
  COFD[2098] = -2.97068442E-01;
  COFD[2099] = 1.30000135E-02;
  COFD[2100] = -1.64944536E+01;
  COFD[2101] = 3.92040487E+00;
  COFD[2102] = -2.97068442E-01;
  COFD[2103] = 1.30000135E-02;
  COFD[2104] = -1.61370785E+01;
  COFD[2105] = 3.72316581E+00;
  COFD[2106] = -2.71276511E-01;
  COFD[2107] = 1.18720331E-02;
  COFD[2108] = -1.64888415E+01;
  COFD[2109] = 3.72316581E+00;
  COFD[2110] = -2.71276511E-01;
  COFD[2111] = 1.18720331E-02;
  COFD[2112] = -2.04168324E+01;
  COFD[2113] = 5.09044464E+00;
  COFD[2114] = -4.39653461E-01;
  COFD[2115] = 1.88117190E-02;
  COFD[2116] = -2.02435759E+01;
  COFD[2117] = 5.06106939E+00;
  COFD[2118] = -4.36210404E-01;
  COFD[2119] = 1.86769307E-02;
  COFD[2120] = -1.64977272E+01;
  COFD[2121] = 3.72316581E+00;
  COFD[2122] = -2.71276511E-01;
  COFD[2123] = 1.18720331E-02;
  COFD[2124] = -1.64977272E+01;
  COFD[2125] = 3.72316581E+00;
  COFD[2126] = -2.71276511E-01;
  COFD[2127] = 1.18720331E-02;
  COFD[2128] = -1.82276511E+01;
  COFD[2129] = 4.38314454E+00;
  COFD[2130] = -3.54844523E-01;
  COFD[2131] = 1.54154407E-02;
  COFD[2132] = -1.82199600E+01;
  COFD[2133] = 4.38314454E+00;
  COFD[2134] = -3.54844523E-01;
  COFD[2135] = 1.54154407E-02;
  COFD[2136] = -1.82199600E+01;
  COFD[2137] = 4.38314454E+00;
  COFD[2138] = -3.54844523E-01;
  COFD[2139] = 1.54154407E-02;
  COFD[2140] = -2.00531585E+01;
  COFD[2141] = 5.03246680E+00;
  COFD[2142] = -4.32834135E-01;
  COFD[2143] = 1.85437527E-02;
  COFD[2144] = -1.82118969E+01;
  COFD[2145] = 4.38314454E+00;
  COFD[2146] = -3.54844523E-01;
  COFD[2147] = 1.54154407E-02;
  COFD[2148] = -2.18246724E+01;
  COFD[2149] = 5.53135282E+00;
  COFD[2150] = -4.85575141E-01;
  COFD[2151] = 2.03514395E-02;
  COFD[2152] = -2.21141548E+01;
  COFD[2153] = 5.60109280E+00;
  COFD[2154] = -4.91529485E-01;
  COFD[2155] = 2.04880803E-02;
  COFD[2156] = -2.21141548E+01;
  COFD[2157] = 5.60109280E+00;
  COFD[2158] = -4.91529485E-01;
  COFD[2159] = 2.04880803E-02;
  COFD[2160] = -2.23027265E+01;
  COFD[2161] = 5.61195798E+00;
  COFD[2162] = -4.90701162E-01;
  COFD[2163] = 2.03641901E-02;
  COFD[2164] = -2.23054593E+01;
  COFD[2165] = 5.61195798E+00;
  COFD[2166] = -4.90701162E-01;
  COFD[2167] = 2.03641901E-02;
  COFD[2168] = -2.07567853E+01;
  COFD[2169] = 5.20655416E+00;
  COFD[2170] = -4.52109025E-01;
  COFD[2171] = 1.92460992E-02;
  COFD[2172] = -2.14329323E+01;
  COFD[2173] = 5.41700226E+00;
  COFD[2174] = -4.73390866E-01;
  COFD[2175] = 1.99277147E-02;
  COFD[2176] = -1.74591494E+01;
  COFD[2177] = 4.14501299E+00;
  COFD[2178] = -3.25559869E-01;
  COFD[2179] = 1.42112379E-02;
  COFD[2180] = -1.97348521E+01;
  COFD[2181] = 5.41486066E+00;
  COFD[2182] = -4.73395003E-01;
  COFD[2183] = 1.99392596E-02;
  COFD[2184] = -1.99421249E+01;
  COFD[2185] = 5.52837940E+00;
  COFD[2186] = -4.68250137E-01;
  COFD[2187] = 1.89272451E-02;
  COFD[2188] = -2.15953972E+01;
  COFD[2189] = 5.33737299E+00;
  COFD[2190] = -4.32461008E-01;
  COFD[2191] = 1.69377852E-02;
  COFD[2192] = -1.99691169E+01;
  COFD[2193] = 5.19261190E+00;
  COFD[2194] = -4.50474545E-01;
  COFD[2195] = 1.91820755E-02;
  COFD[2196] = -2.15007093E+01;
  COFD[2197] = 5.40589709E+00;
  COFD[2198] = -4.44492794E-01;
  COFD[2199] = 1.75840076E-02;
  COFD[2200] = -2.15546544E+01;
  COFD[2201] = 5.56890569E+00;
  COFD[2202] = -4.75939412E-01;
  COFD[2203] = 1.93577131E-02;
  COFD[2204] = -1.63625946E+01;
  COFD[2205] = 3.88250968E+00;
  COFD[2206] = -2.92155848E-01;
  COFD[2207] = 1.27867850E-02;
  COFD[2208] = -1.85273582E+01;
  COFD[2209] = 3.72926260E+00;
  COFD[2210] = -1.79678715E-01;
  COFD[2211] = 4.25460423E-03;
  COFD[2212] = -2.04646121E+01;
  COFD[2213] = 4.69994847E+00;
  COFD[2214] = -3.28738270E-01;
  COFD[2215] = 1.16113853E-02;
  COFD[2216] = -1.86006790E+01;
  COFD[2217] = 4.57319188E+00;
  COFD[2218] = -3.77933244E-01;
  COFD[2219] = 1.63519311E-02;
  COFD[2220] = -2.16335876E+01;
  COFD[2221] = 5.58518186E+00;
  COFD[2222] = -4.80813479E-01;
  COFD[2223] = 1.96787936E-02;
  COFD[2224] = -1.63128378E+01;
  COFD[2225] = 3.88250968E+00;
  COFD[2226] = -2.92155848E-01;
  COFD[2227] = 1.27867850E-02;
  COFD[2228] = -1.62911759E+01;
  COFD[2229] = 3.88250968E+00;
  COFD[2230] = -2.92155848E-01;
  COFD[2231] = 1.27867850E-02;
  COFD[2232] = -1.59394625E+01;
  COFD[2233] = 3.68407693E+00;
  COFD[2234] = -2.66228170E-01;
  COFD[2235] = 1.16542305E-02;
  COFD[2236] = -1.62941846E+01;
  COFD[2237] = 3.68407693E+00;
  COFD[2238] = -2.66228170E-01;
  COFD[2239] = 1.16542305E-02;
  COFD[2240] = -2.02435759E+01;
  COFD[2241] = 5.06106939E+00;
  COFD[2242] = -4.36210404E-01;
  COFD[2243] = 1.86769307E-02;
  COFD[2244] = -2.00640240E+01;
  COFD[2245] = 5.03042083E+00;
  COFD[2246] = -4.32596342E-01;
  COFD[2247] = 1.85345510E-02;
  COFD[2248] = -1.63029340E+01;
  COFD[2249] = 3.68407693E+00;
  COFD[2250] = -2.66228170E-01;
  COFD[2251] = 1.16542305E-02;
  COFD[2252] = -1.63029340E+01;
  COFD[2253] = 3.68407693E+00;
  COFD[2254] = -2.66228170E-01;
  COFD[2255] = 1.16542305E-02;
  COFD[2256] = -1.80379994E+01;
  COFD[2257] = 4.34871946E+00;
  COFD[2258] = -3.50542624E-01;
  COFD[2259] = 1.52355319E-02;
  COFD[2260] = -1.80304320E+01;
  COFD[2261] = 4.34871946E+00;
  COFD[2262] = -3.50542624E-01;
  COFD[2263] = 1.52355319E-02;
  COFD[2264] = -1.80304320E+01;
  COFD[2265] = 4.34871946E+00;
  COFD[2266] = -3.50542624E-01;
  COFD[2267] = 1.52355319E-02;
  COFD[2268] = -1.93302833E+01;
  COFD[2269] = 4.81773195E+00;
  COFD[2270] = -4.07272994E-01;
  COFD[2271] = 1.75276965E-02;
  COFD[2272] = -1.80224967E+01;
  COFD[2273] = 4.34871946E+00;
  COFD[2274] = -3.50542624E-01;
  COFD[2275] = 1.52355319E-02;
  COFD[2276] = -2.16389833E+01;
  COFD[2277] = 5.50267156E+00;
  COFD[2278] = -4.82603324E-01;
  COFD[2279] = 2.02521765E-02;
  COFD[2280] = -2.18166749E+01;
  COFD[2281] = 5.54815127E+00;
  COFD[2282] = -4.87248851E-01;
  COFD[2283] = 2.04040308E-02;
  COFD[2284] = -2.18166749E+01;
  COFD[2285] = 5.54815127E+00;
  COFD[2286] = -4.87248851E-01;
  COFD[2287] = 2.04040308E-02;
  COFD[2288] = -2.21886223E+01;
  COFD[2289] = 5.61086039E+00;
  COFD[2290] = -4.91417738E-01;
  COFD[2291] = 2.04290046E-02;
  COFD[2292] = -2.21912977E+01;
  COFD[2293] = 5.61086039E+00;
  COFD[2294] = -4.91417738E-01;
  COFD[2295] = 2.04290046E-02;
  COFD[2296] = -2.05721233E+01;
  COFD[2297] = 5.17526774E+00;
  COFD[2298] = -4.48472252E-01;
  COFD[2299] = 1.91050891E-02;
  COFD[2300] = -2.12952306E+01;
  COFD[2301] = 5.40830928E+00;
  COFD[2302] = -4.72988519E-01;
  COFD[2303] = 1.99395140E-02;
  COFD[2304] = -1.42814386E+01;
  COFD[2305] = 2.97368133E+00;
  COFD[2306] = -1.75779738E-01;
  COFD[2307] = 7.80847104E-03;
  COFD[2308] = -1.63222695E+01;
  COFD[2309] = 4.26844419E+00;
  COFD[2310] = -3.40796006E-01;
  COFD[2311] = 1.48405346E-02;
  COFD[2312] = -1.77935925E+01;
  COFD[2313] = 4.98721692E+00;
  COFD[2314] = -4.27484432E-01;
  COFD[2315] = 1.83325332E-02;
  COFD[2316] = -2.03980229E+01;
  COFD[2317] = 5.22399612E+00;
  COFD[2318] = -4.54140123E-01;
  COFD[2319] = 1.93250042E-02;
  COFD[2320] = -1.64278814E+01;
  COFD[2321] = 3.96020923E+00;
  COFD[2322] = -3.02239833E-01;
  COFD[2323] = 1.32250126E-02;
  COFD[2324] = -2.00000083E+01;
  COFD[2325] = 5.15723484E+00;
  COFD[2326] = -4.46634377E-01;
  COFD[2327] = 1.90459078E-02;
  COFD[2328] = -1.91675578E+01;
  COFD[2329] = 4.92071488E+00;
  COFD[2330] = -4.19606875E-01;
  COFD[2331] = 1.80210998E-02;
  COFD[2332] = -1.34494148E+01;
  COFD[2333] = 2.80913567E+00;
  COFD[2334] = -1.54536855E-01;
  COFD[2335] = 6.89359313E-03;
  COFD[2336] = -2.18741579E+01;
  COFD[2337] = 5.58515442E+00;
  COFD[2338] = -4.80422533E-01;
  COFD[2339] = 1.96465258E-02;
  COFD[2340] = -2.14273129E+01;
  COFD[2341] = 5.53228635E+00;
  COFD[2342] = -4.85667196E-01;
  COFD[2343] = 2.03542792E-02;
  COFD[2344] = -1.50778334E+01;
  COFD[2345] = 3.28944369E+00;
  COFD[2346] = -2.16061601E-01;
  COFD[2347] = 9.52335607E-03;
  COFD[2348] = -1.90109410E+01;
  COFD[2349] = 4.82909392E+00;
  COFD[2350] = -4.08610711E-01;
  COFD[2351] = 1.75802236E-02;
  COFD[2352] = -1.33994064E+01;
  COFD[2353] = 2.80913567E+00;
  COFD[2354] = -1.54536855E-01;
  COFD[2355] = 6.89359313E-03;
  COFD[2356] = -1.33779841E+01;
  COFD[2357] = 2.80913567E+00;
  COFD[2358] = -1.54536855E-01;
  COFD[2359] = 6.89359313E-03;
  COFD[2360] = -1.33354626E+01;
  COFD[2361] = 2.73155251E+00;
  COFD[2362] = -1.44594082E-01;
  COFD[2363] = 6.46883252E-03;
  COFD[2364] = -1.36891980E+01;
  COFD[2365] = 2.73155251E+00;
  COFD[2366] = -1.44594082E-01;
  COFD[2367] = 6.46883252E-03;
  COFD[2368] = -1.64977272E+01;
  COFD[2369] = 3.72316581E+00;
  COFD[2370] = -2.71276511E-01;
  COFD[2371] = 1.18720331E-02;
  COFD[2372] = -1.63029340E+01;
  COFD[2373] = 3.68407693E+00;
  COFD[2374] = -2.66228170E-01;
  COFD[2375] = 1.16542305E-02;
  COFD[2376] = -1.36978066E+01;
  COFD[2377] = 2.73155251E+00;
  COFD[2378] = -1.44594082E-01;
  COFD[2379] = 6.46883252E-03;
  COFD[2380] = -1.36978066E+01;
  COFD[2381] = 2.73155251E+00;
  COFD[2382] = -1.44594082E-01;
  COFD[2383] = 6.46883252E-03;
  COFD[2384] = -1.47456106E+01;
  COFD[2385] = 3.14480429E+00;
  COFD[2386] = -1.97906290E-01;
  COFD[2387] = 8.76325718E-03;
  COFD[2388] = -1.47381710E+01;
  COFD[2389] = 3.14480429E+00;
  COFD[2390] = -1.97906290E-01;
  COFD[2391] = 8.76325718E-03;
  COFD[2392] = -1.47381710E+01;
  COFD[2393] = 3.14480429E+00;
  COFD[2394] = -1.97906290E-01;
  COFD[2395] = 8.76325718E-03;
  COFD[2396] = -1.57642825E+01;
  COFD[2397] = 3.53589065E+00;
  COFD[2398] = -2.47899115E-01;
  COFD[2399] = 1.08975333E-02;
  COFD[2400] = -1.47303677E+01;
  COFD[2401] = 3.14480429E+00;
  COFD[2402] = -1.97906290E-01;
  COFD[2403] = 8.76325718E-03;
  COFD[2404] = -1.82472544E+01;
  COFD[2405] = 4.37690225E+00;
  COFD[2406] = -3.54062330E-01;
  COFD[2407] = 1.53826315E-02;
  COFD[2408] = -1.84522725E+01;
  COFD[2409] = 4.44018708E+00;
  COFD[2410] = -3.61866079E-01;
  COFD[2411] = 1.57042940E-02;
  COFD[2412] = -1.84522725E+01;
  COFD[2413] = 4.44018708E+00;
  COFD[2414] = -3.61866079E-01;
  COFD[2415] = 1.57042940E-02;
  COFD[2416] = -1.90487540E+01;
  COFD[2417] = 4.61260432E+00;
  COFD[2418] = -3.82854484E-01;
  COFD[2419] = 1.65575163E-02;
  COFD[2420] = -1.90513706E+01;
  COFD[2421] = 4.61260432E+00;
  COFD[2422] = -3.82854484E-01;
  COFD[2423] = 1.65575163E-02;
  COFD[2424] = -1.70265556E+01;
  COFD[2425] = 3.93849401E+00;
  COFD[2426] = -2.99416642E-01;
  COFD[2427] = 1.31020815E-02;
  COFD[2428] = -1.78576817E+01;
  COFD[2429] = 4.25122035E+00;
  COFD[2430] = -3.38698235E-01;
  COFD[2431] = 1.47551928E-02;
  COFD[2432] = -1.42814386E+01;
  COFD[2433] = 2.97368133E+00;
  COFD[2434] = -1.75779738E-01;
  COFD[2435] = 7.80847104E-03;
  COFD[2436] = -1.63222695E+01;
  COFD[2437] = 4.26844419E+00;
  COFD[2438] = -3.40796006E-01;
  COFD[2439] = 1.48405346E-02;
  COFD[2440] = -1.77935925E+01;
  COFD[2441] = 4.98721692E+00;
  COFD[2442] = -4.27484432E-01;
  COFD[2443] = 1.83325332E-02;
  COFD[2444] = -2.03980229E+01;
  COFD[2445] = 5.22399612E+00;
  COFD[2446] = -4.54140123E-01;
  COFD[2447] = 1.93250042E-02;
  COFD[2448] = -1.64278814E+01;
  COFD[2449] = 3.96020923E+00;
  COFD[2450] = -3.02239833E-01;
  COFD[2451] = 1.32250126E-02;
  COFD[2452] = -2.00000083E+01;
  COFD[2453] = 5.15723484E+00;
  COFD[2454] = -4.46634377E-01;
  COFD[2455] = 1.90459078E-02;
  COFD[2456] = -1.91675578E+01;
  COFD[2457] = 4.92071488E+00;
  COFD[2458] = -4.19606875E-01;
  COFD[2459] = 1.80210998E-02;
  COFD[2460] = -1.34494148E+01;
  COFD[2461] = 2.80913567E+00;
  COFD[2462] = -1.54536855E-01;
  COFD[2463] = 6.89359313E-03;
  COFD[2464] = -2.18741579E+01;
  COFD[2465] = 5.58515442E+00;
  COFD[2466] = -4.80422533E-01;
  COFD[2467] = 1.96465258E-02;
  COFD[2468] = -2.14273129E+01;
  COFD[2469] = 5.53228635E+00;
  COFD[2470] = -4.85667196E-01;
  COFD[2471] = 2.03542792E-02;
  COFD[2472] = -1.50778334E+01;
  COFD[2473] = 3.28944369E+00;
  COFD[2474] = -2.16061601E-01;
  COFD[2475] = 9.52335607E-03;
  COFD[2476] = -1.90109410E+01;
  COFD[2477] = 4.82909392E+00;
  COFD[2478] = -4.08610711E-01;
  COFD[2479] = 1.75802236E-02;
  COFD[2480] = -1.33994064E+01;
  COFD[2481] = 2.80913567E+00;
  COFD[2482] = -1.54536855E-01;
  COFD[2483] = 6.89359313E-03;
  COFD[2484] = -1.33779841E+01;
  COFD[2485] = 2.80913567E+00;
  COFD[2486] = -1.54536855E-01;
  COFD[2487] = 6.89359313E-03;
  COFD[2488] = -1.33354626E+01;
  COFD[2489] = 2.73155251E+00;
  COFD[2490] = -1.44594082E-01;
  COFD[2491] = 6.46883252E-03;
  COFD[2492] = -1.36891980E+01;
  COFD[2493] = 2.73155251E+00;
  COFD[2494] = -1.44594082E-01;
  COFD[2495] = 6.46883252E-03;
  COFD[2496] = -1.64977272E+01;
  COFD[2497] = 3.72316581E+00;
  COFD[2498] = -2.71276511E-01;
  COFD[2499] = 1.18720331E-02;
  COFD[2500] = -1.63029340E+01;
  COFD[2501] = 3.68407693E+00;
  COFD[2502] = -2.66228170E-01;
  COFD[2503] = 1.16542305E-02;
  COFD[2504] = -1.36978066E+01;
  COFD[2505] = 2.73155251E+00;
  COFD[2506] = -1.44594082E-01;
  COFD[2507] = 6.46883252E-03;
  COFD[2508] = -1.36978066E+01;
  COFD[2509] = 2.73155251E+00;
  COFD[2510] = -1.44594082E-01;
  COFD[2511] = 6.46883252E-03;
  COFD[2512] = -1.47456106E+01;
  COFD[2513] = 3.14480429E+00;
  COFD[2514] = -1.97906290E-01;
  COFD[2515] = 8.76325718E-03;
  COFD[2516] = -1.47381710E+01;
  COFD[2517] = 3.14480429E+00;
  COFD[2518] = -1.97906290E-01;
  COFD[2519] = 8.76325718E-03;
  COFD[2520] = -1.47381710E+01;
  COFD[2521] = 3.14480429E+00;
  COFD[2522] = -1.97906290E-01;
  COFD[2523] = 8.76325718E-03;
  COFD[2524] = -1.57642825E+01;
  COFD[2525] = 3.53589065E+00;
  COFD[2526] = -2.47899115E-01;
  COFD[2527] = 1.08975333E-02;
  COFD[2528] = -1.47303677E+01;
  COFD[2529] = 3.14480429E+00;
  COFD[2530] = -1.97906290E-01;
  COFD[2531] = 8.76325718E-03;
  COFD[2532] = -1.82472544E+01;
  COFD[2533] = 4.37690225E+00;
  COFD[2534] = -3.54062330E-01;
  COFD[2535] = 1.53826315E-02;
  COFD[2536] = -1.84522725E+01;
  COFD[2537] = 4.44018708E+00;
  COFD[2538] = -3.61866079E-01;
  COFD[2539] = 1.57042940E-02;
  COFD[2540] = -1.84522725E+01;
  COFD[2541] = 4.44018708E+00;
  COFD[2542] = -3.61866079E-01;
  COFD[2543] = 1.57042940E-02;
  COFD[2544] = -1.90487540E+01;
  COFD[2545] = 4.61260432E+00;
  COFD[2546] = -3.82854484E-01;
  COFD[2547] = 1.65575163E-02;
  COFD[2548] = -1.90513706E+01;
  COFD[2549] = 4.61260432E+00;
  COFD[2550] = -3.82854484E-01;
  COFD[2551] = 1.65575163E-02;
  COFD[2552] = -1.70265556E+01;
  COFD[2553] = 3.93849401E+00;
  COFD[2554] = -2.99416642E-01;
  COFD[2555] = 1.31020815E-02;
  COFD[2556] = -1.78576817E+01;
  COFD[2557] = 4.25122035E+00;
  COFD[2558] = -3.38698235E-01;
  COFD[2559] = 1.47551928E-02;
  COFD[2560] = -1.55500170E+01;
  COFD[2561] = 3.47081601E+00;
  COFD[2562] = -2.39624117E-01;
  COFD[2563] = 1.05457294E-02;
  COFD[2564] = -1.79189534E+01;
  COFD[2565] = 4.86822204E+00;
  COFD[2566] = -4.13144774E-01;
  COFD[2567] = 1.77546968E-02;
  COFD[2568] = -1.91027290E+01;
  COFD[2569] = 5.43815165E+00;
  COFD[2570] = -4.75454575E-01;
  COFD[2571] = 1.99902814E-02;
  COFD[2572] = -2.16261817E+01;
  COFD[2573] = 5.60677111E+00;
  COFD[2574] = -4.91288933E-01;
  COFD[2575] = 2.04390126E-02;
  COFD[2576] = -1.79927100E+01;
  COFD[2577] = 4.55484692E+00;
  COFD[2578] = -3.75689296E-01;
  COFD[2579] = 1.62602794E-02;
  COFD[2580] = -2.13301019E+01;
  COFD[2581] = 5.58925245E+00;
  COFD[2582] = -4.90911390E-01;
  COFD[2583] = 2.04973113E-02;
  COFD[2584] = -2.05938068E+01;
  COFD[2585] = 5.40874658E+00;
  COFD[2586] = -4.73020995E-01;
  COFD[2587] = 1.99399523E-02;
  COFD[2588] = -1.45374222E+01;
  COFD[2589] = 3.24450689E+00;
  COFD[2590] = -2.10570734E-01;
  COFD[2591] = 9.30026771E-03;
  COFD[2592] = -2.11637336E+01;
  COFD[2593] = 5.11145017E+00;
  COFD[2594] = -3.94227161E-01;
  COFD[2595] = 1.49273632E-02;
  COFD[2596] = -2.17312043E+01;
  COFD[2597] = 5.50441375E+00;
  COFD[2598] = -4.63402274E-01;
  COFD[2599] = 1.86474406E-02;
  COFD[2600] = -1.66602047E+01;
  COFD[2601] = 3.90705478E+00;
  COFD[2602] = -2.95335365E-01;
  COFD[2603] = 1.29246736E-02;
  COFD[2604] = -2.05737846E+01;
  COFD[2605] = 5.37634919E+00;
  COFD[2606] = -4.70693222E-01;
  COFD[2607] = 1.99144603E-02;
  COFD[2608] = -1.44852526E+01;
  COFD[2609] = 3.24450689E+00;
  COFD[2610] = -2.10570734E-01;
  COFD[2611] = 9.30026771E-03;
  COFD[2612] = -1.44631465E+01;
  COFD[2613] = 3.24450689E+00;
  COFD[2614] = -2.10570734E-01;
  COFD[2615] = 9.30026771E-03;
  COFD[2616] = -1.43687616E+01;
  COFD[2617] = 3.14480429E+00;
  COFD[2618] = -1.97906290E-01;
  COFD[2619] = 8.76325718E-03;
  COFD[2620] = -1.47365962E+01;
  COFD[2621] = 3.14480429E+00;
  COFD[2622] = -1.97906290E-01;
  COFD[2623] = 8.76325718E-03;
  COFD[2624] = -1.82276511E+01;
  COFD[2625] = 4.38314454E+00;
  COFD[2626] = -3.54844523E-01;
  COFD[2627] = 1.54154407E-02;
  COFD[2628] = -1.80379994E+01;
  COFD[2629] = 4.34871946E+00;
  COFD[2630] = -3.50542624E-01;
  COFD[2631] = 1.52355319E-02;
  COFD[2632] = -1.47456106E+01;
  COFD[2633] = 3.14480429E+00;
  COFD[2634] = -1.97906290E-01;
  COFD[2635] = 8.76325718E-03;
  COFD[2636] = -1.47456106E+01;
  COFD[2637] = 3.14480429E+00;
  COFD[2638] = -1.97906290E-01;
  COFD[2639] = 8.76325718E-03;
  COFD[2640] = -1.60422082E+01;
  COFD[2641] = 3.64795923E+00;
  COFD[2642] = -2.61984156E-01;
  COFD[2643] = 1.14893124E-02;
  COFD[2644] = -1.60343999E+01;
  COFD[2645] = 3.64795923E+00;
  COFD[2646] = -2.61984156E-01;
  COFD[2647] = 1.14893124E-02;
  COFD[2648] = -1.60343999E+01;
  COFD[2649] = 3.64795923E+00;
  COFD[2650] = -2.61984156E-01;
  COFD[2651] = 1.14893124E-02;
  COFD[2652] = -1.73797519E+01;
  COFD[2653] = 4.16026157E+00;
  COFD[2654] = -3.27449898E-01;
  COFD[2655] = 1.42897170E-02;
  COFD[2656] = -1.60262160E+01;
  COFD[2657] = 3.64795923E+00;
  COFD[2658] = -2.61984156E-01;
  COFD[2659] = 1.14893124E-02;
  COFD[2660] = -1.99506163E+01;
  COFD[2661] = 4.99575645E+00;
  COFD[2662] = -4.28498115E-01;
  COFD[2663] = 1.83727383E-02;
  COFD[2664] = -2.01567336E+01;
  COFD[2665] = 5.05633659E+00;
  COFD[2666] = -4.35651066E-01;
  COFD[2667] = 1.86548337E-02;
  COFD[2668] = -2.01567336E+01;
  COFD[2669] = 5.05633659E+00;
  COFD[2670] = -4.35651066E-01;
  COFD[2671] = 1.86548337E-02;
  COFD[2672] = -2.06622747E+01;
  COFD[2673] = 5.18031001E+00;
  COFD[2674] = -4.49045425E-01;
  COFD[2675] = 1.91266962E-02;
  COFD[2676] = -2.06650624E+01;
  COFD[2677] = 5.18031001E+00;
  COFD[2678] = -4.49045425E-01;
  COFD[2679] = 1.91266962E-02;
  COFD[2680] = -1.86270955E+01;
  COFD[2681] = 4.53681554E+00;
  COFD[2682] = -3.73517224E-01;
  COFD[2683] = 1.61730724E-02;
  COFD[2684] = -1.94906126E+01;
  COFD[2685] = 4.84702690E+00;
  COFD[2686] = -4.10607260E-01;
  COFD[2687] = 1.76533032E-02;
  COFD[2688] = -1.55428457E+01;
  COFD[2689] = 3.47081601E+00;
  COFD[2690] = -2.39624117E-01;
  COFD[2691] = 1.05457294E-02;
  COFD[2692] = -1.79180488E+01;
  COFD[2693] = 4.86822204E+00;
  COFD[2694] = -4.13144774E-01;
  COFD[2695] = 1.77546968E-02;
  COFD[2696] = -1.91022631E+01;
  COFD[2697] = 5.43815165E+00;
  COFD[2698] = -4.75454575E-01;
  COFD[2699] = 1.99902814E-02;
  COFD[2700] = -2.16184963E+01;
  COFD[2701] = 5.60677111E+00;
  COFD[2702] = -4.91288933E-01;
  COFD[2703] = 2.04390126E-02;
  COFD[2704] = -1.79876002E+01;
  COFD[2705] = 4.55484692E+00;
  COFD[2706] = -3.75689296E-01;
  COFD[2707] = 1.62602794E-02;
  COFD[2708] = -2.13245778E+01;
  COFD[2709] = 5.58925245E+00;
  COFD[2710] = -4.90911390E-01;
  COFD[2711] = 2.04973113E-02;
  COFD[2712] = -2.05884857E+01;
  COFD[2713] = 5.40874658E+00;
  COFD[2714] = -4.73020995E-01;
  COFD[2715] = 1.99399523E-02;
  COFD[2716] = -1.45321011E+01;
  COFD[2717] = 3.24450689E+00;
  COFD[2718] = -2.10570734E-01;
  COFD[2719] = 9.30026771E-03;
  COFD[2720] = -2.11558116E+01;
  COFD[2721] = 5.11145017E+00;
  COFD[2722] = -3.94227161E-01;
  COFD[2723] = 1.49273632E-02;
  COFD[2724] = -2.17233988E+01;
  COFD[2725] = 5.50441375E+00;
  COFD[2726] = -4.63402274E-01;
  COFD[2727] = 1.86474406E-02;
  COFD[2728] = -1.66527682E+01;
  COFD[2729] = 3.90705478E+00;
  COFD[2730] = -2.95335365E-01;
  COFD[2731] = 1.29246736E-02;
  COFD[2732] = -2.05684585E+01;
  COFD[2733] = 5.37634919E+00;
  COFD[2734] = -4.70693222E-01;
  COFD[2735] = 1.99144603E-02;
  COFD[2736] = -1.44801377E+01;
  COFD[2737] = 3.24450689E+00;
  COFD[2738] = -2.10570734E-01;
  COFD[2739] = 9.30026771E-03;
  COFD[2740] = -1.44582517E+01;
  COFD[2741] = 3.24450689E+00;
  COFD[2742] = -2.10570734E-01;
  COFD[2743] = 9.30026771E-03;
  COFD[2744] = -1.43640965E+01;
  COFD[2745] = 3.14480429E+00;
  COFD[2746] = -1.97906290E-01;
  COFD[2747] = 8.76325718E-03;
  COFD[2748] = -1.47292885E+01;
  COFD[2749] = 3.14480429E+00;
  COFD[2750] = -1.97906290E-01;
  COFD[2751] = 8.76325718E-03;
  COFD[2752] = -1.82199600E+01;
  COFD[2753] = 4.38314454E+00;
  COFD[2754] = -3.54844523E-01;
  COFD[2755] = 1.54154407E-02;
  COFD[2756] = -1.80304320E+01;
  COFD[2757] = 4.34871946E+00;
  COFD[2758] = -3.50542624E-01;
  COFD[2759] = 1.52355319E-02;
  COFD[2760] = -1.47381710E+01;
  COFD[2761] = 3.14480429E+00;
  COFD[2762] = -1.97906290E-01;
  COFD[2763] = 8.76325718E-03;
  COFD[2764] = -1.47381710E+01;
  COFD[2765] = 3.14480429E+00;
  COFD[2766] = -1.97906290E-01;
  COFD[2767] = 8.76325718E-03;
  COFD[2768] = -1.60343999E+01;
  COFD[2769] = 3.64795923E+00;
  COFD[2770] = -2.61984156E-01;
  COFD[2771] = 1.14893124E-02;
  COFD[2772] = -1.60267117E+01;
  COFD[2773] = 3.64795923E+00;
  COFD[2774] = -2.61984156E-01;
  COFD[2775] = 1.14893124E-02;
  COFD[2776] = -1.60267117E+01;
  COFD[2777] = 3.64795923E+00;
  COFD[2778] = -2.61984156E-01;
  COFD[2779] = 1.14893124E-02;
  COFD[2780] = -1.73721876E+01;
  COFD[2781] = 4.16026157E+00;
  COFD[2782] = -3.27449898E-01;
  COFD[2783] = 1.42897170E-02;
  COFD[2784] = -1.60186516E+01;
  COFD[2785] = 3.64795923E+00;
  COFD[2786] = -2.61984156E-01;
  COFD[2787] = 1.14893124E-02;
  COFD[2788] = -1.99415377E+01;
  COFD[2789] = 4.99575645E+00;
  COFD[2790] = -4.28498115E-01;
  COFD[2791] = 1.83727383E-02;
  COFD[2792] = -2.01475736E+01;
  COFD[2793] = 5.05633659E+00;
  COFD[2794] = -4.35651066E-01;
  COFD[2795] = 1.86548337E-02;
  COFD[2796] = -2.01475736E+01;
  COFD[2797] = 5.05633659E+00;
  COFD[2798] = -4.35651066E-01;
  COFD[2799] = 1.86548337E-02;
  COFD[2800] = -2.06521098E+01;
  COFD[2801] = 5.18031001E+00;
  COFD[2802] = -4.49045425E-01;
  COFD[2803] = 1.91266962E-02;
  COFD[2804] = -2.06548413E+01;
  COFD[2805] = 5.18031001E+00;
  COFD[2806] = -4.49045425E-01;
  COFD[2807] = 1.91266962E-02;
  COFD[2808] = -1.86181839E+01;
  COFD[2809] = 4.53681554E+00;
  COFD[2810] = -3.73517224E-01;
  COFD[2811] = 1.61730724E-02;
  COFD[2812] = -1.94803915E+01;
  COFD[2813] = 4.84702690E+00;
  COFD[2814] = -4.10607260E-01;
  COFD[2815] = 1.76533032E-02;
  COFD[2816] = -1.55428457E+01;
  COFD[2817] = 3.47081601E+00;
  COFD[2818] = -2.39624117E-01;
  COFD[2819] = 1.05457294E-02;
  COFD[2820] = -1.79180488E+01;
  COFD[2821] = 4.86822204E+00;
  COFD[2822] = -4.13144774E-01;
  COFD[2823] = 1.77546968E-02;
  COFD[2824] = -1.91022631E+01;
  COFD[2825] = 5.43815165E+00;
  COFD[2826] = -4.75454575E-01;
  COFD[2827] = 1.99902814E-02;
  COFD[2828] = -2.16184963E+01;
  COFD[2829] = 5.60677111E+00;
  COFD[2830] = -4.91288933E-01;
  COFD[2831] = 2.04390126E-02;
  COFD[2832] = -1.79876002E+01;
  COFD[2833] = 4.55484692E+00;
  COFD[2834] = -3.75689296E-01;
  COFD[2835] = 1.62602794E-02;
  COFD[2836] = -2.13245778E+01;
  COFD[2837] = 5.58925245E+00;
  COFD[2838] = -4.90911390E-01;
  COFD[2839] = 2.04973113E-02;
  COFD[2840] = -2.05884857E+01;
  COFD[2841] = 5.40874658E+00;
  COFD[2842] = -4.73020995E-01;
  COFD[2843] = 1.99399523E-02;
  COFD[2844] = -1.45321011E+01;
  COFD[2845] = 3.24450689E+00;
  COFD[2846] = -2.10570734E-01;
  COFD[2847] = 9.30026771E-03;
  COFD[2848] = -2.11558116E+01;
  COFD[2849] = 5.11145017E+00;
  COFD[2850] = -3.94227161E-01;
  COFD[2851] = 1.49273632E-02;
  COFD[2852] = -2.17233988E+01;
  COFD[2853] = 5.50441375E+00;
  COFD[2854] = -4.63402274E-01;
  COFD[2855] = 1.86474406E-02;
  COFD[2856] = -1.66527682E+01;
  COFD[2857] = 3.90705478E+00;
  COFD[2858] = -2.95335365E-01;
  COFD[2859] = 1.29246736E-02;
  COFD[2860] = -2.05684585E+01;
  COFD[2861] = 5.37634919E+00;
  COFD[2862] = -4.70693222E-01;
  COFD[2863] = 1.99144603E-02;
  COFD[2864] = -1.44801377E+01;
  COFD[2865] = 3.24450689E+00;
  COFD[2866] = -2.10570734E-01;
  COFD[2867] = 9.30026771E-03;
  COFD[2868] = -1.44582517E+01;
  COFD[2869] = 3.24450689E+00;
  COFD[2870] = -2.10570734E-01;
  COFD[2871] = 9.30026771E-03;
  COFD[2872] = -1.43640965E+01;
  COFD[2873] = 3.14480429E+00;
  COFD[2874] = -1.97906290E-01;
  COFD[2875] = 8.76325718E-03;
  COFD[2876] = -1.47292885E+01;
  COFD[2877] = 3.14480429E+00;
  COFD[2878] = -1.97906290E-01;
  COFD[2879] = 8.76325718E-03;
  COFD[2880] = -1.82199600E+01;
  COFD[2881] = 4.38314454E+00;
  COFD[2882] = -3.54844523E-01;
  COFD[2883] = 1.54154407E-02;
  COFD[2884] = -1.80304320E+01;
  COFD[2885] = 4.34871946E+00;
  COFD[2886] = -3.50542624E-01;
  COFD[2887] = 1.52355319E-02;
  COFD[2888] = -1.47381710E+01;
  COFD[2889] = 3.14480429E+00;
  COFD[2890] = -1.97906290E-01;
  COFD[2891] = 8.76325718E-03;
  COFD[2892] = -1.47381710E+01;
  COFD[2893] = 3.14480429E+00;
  COFD[2894] = -1.97906290E-01;
  COFD[2895] = 8.76325718E-03;
  COFD[2896] = -1.60343999E+01;
  COFD[2897] = 3.64795923E+00;
  COFD[2898] = -2.61984156E-01;
  COFD[2899] = 1.14893124E-02;
  COFD[2900] = -1.60267117E+01;
  COFD[2901] = 3.64795923E+00;
  COFD[2902] = -2.61984156E-01;
  COFD[2903] = 1.14893124E-02;
  COFD[2904] = -1.60267117E+01;
  COFD[2905] = 3.64795923E+00;
  COFD[2906] = -2.61984156E-01;
  COFD[2907] = 1.14893124E-02;
  COFD[2908] = -1.73721876E+01;
  COFD[2909] = 4.16026157E+00;
  COFD[2910] = -3.27449898E-01;
  COFD[2911] = 1.42897170E-02;
  COFD[2912] = -1.60186516E+01;
  COFD[2913] = 3.64795923E+00;
  COFD[2914] = -2.61984156E-01;
  COFD[2915] = 1.14893124E-02;
  COFD[2916] = -1.99415377E+01;
  COFD[2917] = 4.99575645E+00;
  COFD[2918] = -4.28498115E-01;
  COFD[2919] = 1.83727383E-02;
  COFD[2920] = -2.01475736E+01;
  COFD[2921] = 5.05633659E+00;
  COFD[2922] = -4.35651066E-01;
  COFD[2923] = 1.86548337E-02;
  COFD[2924] = -2.01475736E+01;
  COFD[2925] = 5.05633659E+00;
  COFD[2926] = -4.35651066E-01;
  COFD[2927] = 1.86548337E-02;
  COFD[2928] = -2.06521098E+01;
  COFD[2929] = 5.18031001E+00;
  COFD[2930] = -4.49045425E-01;
  COFD[2931] = 1.91266962E-02;
  COFD[2932] = -2.06548413E+01;
  COFD[2933] = 5.18031001E+00;
  COFD[2934] = -4.49045425E-01;
  COFD[2935] = 1.91266962E-02;
  COFD[2936] = -1.86181839E+01;
  COFD[2937] = 4.53681554E+00;
  COFD[2938] = -3.73517224E-01;
  COFD[2939] = 1.61730724E-02;
  COFD[2940] = -1.94803915E+01;
  COFD[2941] = 4.84702690E+00;
  COFD[2942] = -4.10607260E-01;
  COFD[2943] = 1.76533032E-02;
  COFD[2944] = -1.72609666E+01;
  COFD[2945] = 4.11679556E+00;
  COFD[2946] = -3.22136421E-01;
  COFD[2947] = 1.40724121E-02;
  COFD[2948] = -1.95646519E+01;
  COFD[2949] = 5.40971367E+00;
  COFD[2950] = -4.73092854E-01;
  COFD[2951] = 1.99409245E-02;
  COFD[2952] = -1.97126657E+01;
  COFD[2953] = 5.45075121E+00;
  COFD[2954] = -4.52661157E-01;
  COFD[2955] = 1.80316428E-02;
  COFD[2956] = -2.16054974E+01;
  COFD[2957] = 5.43604561E+00;
  COFD[2958] = -4.50009634E-01;
  COFD[2959] = 1.78869955E-02;
  COFD[2960] = -1.96888066E+01;
  COFD[2961] = 5.15040427E+00;
  COFD[2962] = -4.46135208E-01;
  COFD[2963] = 1.90402178E-02;
  COFD[2964] = -2.00750663E+01;
  COFD[2965] = 4.64038028E+00;
  COFD[2966] = -3.14580773E-01;
  COFD[2967] = 1.07964156E-02;
  COFD[2968] = -2.03443489E+01;
  COFD[2969] = 4.81068429E+00;
  COFD[2970] = -3.37632532E-01;
  COFD[2971] = 1.18371950E-02;
  COFD[2972] = -1.55911543E+01;
  COFD[2973] = 3.64713354E+00;
  COFD[2974] = -2.61891633E-01;
  COFD[2975] = 1.14859287E-02;
  COFD[2976] = -1.76131784E+01;
  COFD[2977] = 3.39164172E+00;
  COFD[2978] = -1.32270402E-01;
  COFD[2979] = 2.10177451E-03;
  COFD[2980] = -1.87197962E+01;
  COFD[2981] = 3.87187813E+00;
  COFD[2982] = -1.98647530E-01;
  COFD[2983] = 5.15002338E-03;
  COFD[2984] = -1.80567655E+01;
  COFD[2985] = 4.43168662E+00;
  COFD[2986] = -3.61195217E-01;
  COFD[2987] = 1.56957124E-02;
  COFD[2988] = -2.09713622E+01;
  COFD[2989] = 5.18381370E+00;
  COFD[2990] = -4.05378034E-01;
  COFD[2991] = 1.55112814E-02;
  COFD[2992] = -1.72302363E+01;
  COFD[2993] = 4.26072514E+00;
  COFD[2994] = -3.39859252E-01;
  COFD[2995] = 1.48025872E-02;
  COFD[2996] = -1.55174229E+01;
  COFD[2997] = 3.64713354E+00;
  COFD[2998] = -2.61891633E-01;
  COFD[2999] = 1.14859287E-02;
  COFD[3000] = -1.53918267E+01;
  COFD[3001] = 3.53589065E+00;
  COFD[3002] = -2.47899115E-01;
  COFD[3003] = 1.08975333E-02;
  COFD[3004] = -1.57555364E+01;
  COFD[3005] = 3.53589065E+00;
  COFD[3006] = -2.47899115E-01;
  COFD[3007] = 1.08975333E-02;
  COFD[3008] = -2.00531585E+01;
  COFD[3009] = 5.03246680E+00;
  COFD[3010] = -4.32834135E-01;
  COFD[3011] = 1.85437527E-02;
  COFD[3012] = -1.93302833E+01;
  COFD[3013] = 4.81773195E+00;
  COFD[3014] = -4.07272994E-01;
  COFD[3015] = 1.75276965E-02;
  COFD[3016] = -1.57642825E+01;
  COFD[3017] = 3.53589065E+00;
  COFD[3018] = -2.47899115E-01;
  COFD[3019] = 1.08975333E-02;
  COFD[3020] = -1.57642825E+01;
  COFD[3021] = 3.53589065E+00;
  COFD[3022] = -2.47899115E-01;
  COFD[3023] = 1.08975333E-02;
  COFD[3024] = -1.73797519E+01;
  COFD[3025] = 4.16026157E+00;
  COFD[3026] = -3.27449898E-01;
  COFD[3027] = 1.42897170E-02;
  COFD[3028] = -1.73721876E+01;
  COFD[3029] = 4.16026157E+00;
  COFD[3030] = -3.27449898E-01;
  COFD[3031] = 1.42897170E-02;
  COFD[3032] = -1.73721876E+01;
  COFD[3033] = 4.16026157E+00;
  COFD[3034] = -3.27449898E-01;
  COFD[3035] = 1.42897170E-02;
  COFD[3036] = -2.18599471E+01;
  COFD[3037] = 5.63431669E+00;
  COFD[3038] = -4.87569499E-01;
  COFD[3039] = 2.00096348E-02;
  COFD[3040] = -1.73642554E+01;
  COFD[3041] = 4.16026157E+00;
  COFD[3042] = -3.27449898E-01;
  COFD[3043] = 1.42897170E-02;
  COFD[3044] = -2.09143133E+01;
  COFD[3045] = 5.29325574E+00;
  COFD[3046] = -4.57589151E-01;
  COFD[3047] = 1.92518692E-02;
  COFD[3048] = -2.14234864E+01;
  COFD[3049] = 5.32704354E+00;
  COFD[3050] = -4.44390565E-01;
  COFD[3051] = 1.79887805E-02;
  COFD[3052] = -2.14234864E+01;
  COFD[3053] = 5.32704354E+00;
  COFD[3054] = -4.44390565E-01;
  COFD[3055] = 1.79887805E-02;
  COFD[3056] = -2.16312294E+01;
  COFD[3057] = 5.48150367E+00;
  COFD[3058] = -4.78807136E-01;
  COFD[3059] = 2.00451304E-02;
  COFD[3060] = -2.16339034E+01;
  COFD[3061] = 5.48150367E+00;
  COFD[3062] = -4.78807136E-01;
  COFD[3063] = 2.00451304E-02;
  COFD[3064] = -1.99560249E+01;
  COFD[3065] = 5.01554582E+00;
  COFD[3066] = -4.30861205E-01;
  COFD[3067] = 1.84671151E-02;
  COFD[3068] = -2.07865517E+01;
  COFD[3069] = 5.30165984E+00;
  COFD[3070] = -4.63349733E-01;
  COFD[3071] = 1.96902989E-02;
  COFD[3072] = -1.55353197E+01;
  COFD[3073] = 3.47081601E+00;
  COFD[3074] = -2.39624117E-01;
  COFD[3075] = 1.05457294E-02;
  COFD[3076] = -1.79170873E+01;
  COFD[3077] = 4.86822204E+00;
  COFD[3078] = -4.13144774E-01;
  COFD[3079] = 1.77546968E-02;
  COFD[3080] = -1.91017674E+01;
  COFD[3081] = 5.43815165E+00;
  COFD[3082] = -4.75454575E-01;
  COFD[3083] = 1.99902814E-02;
  COFD[3084] = -2.16104393E+01;
  COFD[3085] = 5.60677111E+00;
  COFD[3086] = -4.91288933E-01;
  COFD[3087] = 2.04390126E-02;
  COFD[3088] = -1.79822151E+01;
  COFD[3089] = 4.55484692E+00;
  COFD[3090] = -3.75689296E-01;
  COFD[3091] = 1.62602794E-02;
  COFD[3092] = -2.13187609E+01;
  COFD[3093] = 5.58925245E+00;
  COFD[3094] = -4.90911390E-01;
  COFD[3095] = 2.04973113E-02;
  COFD[3096] = -2.05828802E+01;
  COFD[3097] = 5.40874658E+00;
  COFD[3098] = -4.73020995E-01;
  COFD[3099] = 1.99399523E-02;
  COFD[3100] = -1.45264956E+01;
  COFD[3101] = 3.24450689E+00;
  COFD[3102] = -2.10570734E-01;
  COFD[3103] = 9.30026771E-03;
  COFD[3104] = -2.11475104E+01;
  COFD[3105] = 5.11145017E+00;
  COFD[3106] = -3.94227161E-01;
  COFD[3107] = 1.49273632E-02;
  COFD[3108] = -2.17152178E+01;
  COFD[3109] = 5.50441375E+00;
  COFD[3110] = -4.63402274E-01;
  COFD[3111] = 1.86474406E-02;
  COFD[3112] = -1.66449681E+01;
  COFD[3113] = 3.90705478E+00;
  COFD[3114] = -2.95335365E-01;
  COFD[3115] = 1.29246736E-02;
  COFD[3116] = -2.05628479E+01;
  COFD[3117] = 5.37634919E+00;
  COFD[3118] = -4.70693222E-01;
  COFD[3119] = 1.99144603E-02;
  COFD[3120] = -1.44747472E+01;
  COFD[3121] = 3.24450689E+00;
  COFD[3122] = -2.10570734E-01;
  COFD[3123] = 9.30026771E-03;
  COFD[3124] = -1.44530909E+01;
  COFD[3125] = 3.24450689E+00;
  COFD[3126] = -2.10570734E-01;
  COFD[3127] = 9.30026771E-03;
  COFD[3128] = -1.43591756E+01;
  COFD[3129] = 3.14480429E+00;
  COFD[3130] = -1.97906290E-01;
  COFD[3131] = 8.76325718E-03;
  COFD[3132] = -1.47216216E+01;
  COFD[3133] = 3.14480429E+00;
  COFD[3134] = -1.97906290E-01;
  COFD[3135] = 8.76325718E-03;
  COFD[3136] = -1.82118969E+01;
  COFD[3137] = 4.38314454E+00;
  COFD[3138] = -3.54844523E-01;
  COFD[3139] = 1.54154407E-02;
  COFD[3140] = -1.80224967E+01;
  COFD[3141] = 4.34871946E+00;
  COFD[3142] = -3.50542624E-01;
  COFD[3143] = 1.52355319E-02;
  COFD[3144] = -1.47303677E+01;
  COFD[3145] = 3.14480429E+00;
  COFD[3146] = -1.97906290E-01;
  COFD[3147] = 8.76325718E-03;
  COFD[3148] = -1.47303677E+01;
  COFD[3149] = 3.14480429E+00;
  COFD[3150] = -1.97906290E-01;
  COFD[3151] = 8.76325718E-03;
  COFD[3152] = -1.60262160E+01;
  COFD[3153] = 3.64795923E+00;
  COFD[3154] = -2.61984156E-01;
  COFD[3155] = 1.14893124E-02;
  COFD[3156] = -1.60186516E+01;
  COFD[3157] = 3.64795923E+00;
  COFD[3158] = -2.61984156E-01;
  COFD[3159] = 1.14893124E-02;
  COFD[3160] = -1.60186516E+01;
  COFD[3161] = 3.64795923E+00;
  COFD[3162] = -2.61984156E-01;
  COFD[3163] = 1.14893124E-02;
  COFD[3164] = -1.73642554E+01;
  COFD[3165] = 4.16026157E+00;
  COFD[3166] = -3.27449898E-01;
  COFD[3167] = 1.42897170E-02;
  COFD[3168] = -1.60107195E+01;
  COFD[3169] = 3.64795923E+00;
  COFD[3170] = -2.61984156E-01;
  COFD[3171] = 1.14893124E-02;
  COFD[3172] = -1.99320468E+01;
  COFD[3173] = 4.99575645E+00;
  COFD[3174] = -4.28498115E-01;
  COFD[3175] = 1.83727383E-02;
  COFD[3176] = -2.01379993E+01;
  COFD[3177] = 5.05633659E+00;
  COFD[3178] = -4.35651066E-01;
  COFD[3179] = 1.86548337E-02;
  COFD[3180] = -2.01379993E+01;
  COFD[3181] = 5.05633659E+00;
  COFD[3182] = -4.35651066E-01;
  COFD[3183] = 1.86548337E-02;
  COFD[3184] = -2.06415068E+01;
  COFD[3185] = 5.18031001E+00;
  COFD[3186] = -4.49045425E-01;
  COFD[3187] = 1.91266962E-02;
  COFD[3188] = -2.06441807E+01;
  COFD[3189] = 5.18031001E+00;
  COFD[3190] = -4.49045425E-01;
  COFD[3191] = 1.91266962E-02;
  COFD[3192] = -1.86088645E+01;
  COFD[3193] = 4.53681554E+00;
  COFD[3194] = -3.73517224E-01;
  COFD[3195] = 1.61730724E-02;
  COFD[3196] = -1.94697310E+01;
  COFD[3197] = 4.84702690E+00;
  COFD[3198] = -4.10607260E-01;
  COFD[3199] = 1.76533032E-02;
  COFD[3200] = -1.93077421E+01;
  COFD[3201] = 4.77801306E+00;
  COFD[3202] = -4.02643154E-01;
  COFD[3203] = 1.73480828E-02;
  COFD[3204] = -2.05515005E+01;
  COFD[3205] = 5.57465970E+00;
  COFD[3206] = -4.77055796E-01;
  COFD[3207] = 1.94209533E-02;
  COFD[3208] = -1.87566542E+01;
  COFD[3209] = 4.81544245E+00;
  COFD[3210] = -3.47122867E-01;
  COFD[3211] = 1.25413729E-02;
  COFD[3212] = -1.97269572E+01;
  COFD[3213] = 4.29876651E+00;
  COFD[3214] = -2.66236508E-01;
  COFD[3215] = 8.49501029E-03;
  COFD[3216] = -2.13990803E+01;
  COFD[3217] = 5.60659816E+00;
  COFD[3218] = -4.91281714E-01;
  COFD[3219] = 2.04392914E-02;
  COFD[3220] = -1.95495195E+01;
  COFD[3221] = 4.34590349E+00;
  COFD[3222] = -2.75588676E-01;
  COFD[3223] = 9.03180802E-03;
  COFD[3224] = -2.02886365E+01;
  COFD[3225] = 4.79949855E+00;
  COFD[3226] = -3.47210364E-01;
  COFD[3227] = 1.26338207E-02;
  COFD[3228] = -1.81524396E+01;
  COFD[3229] = 4.51574627E+00;
  COFD[3230] = -3.70945448E-01;
  COFD[3231] = 1.60681888E-02;
  COFD[3232] = -1.39881224E+01;
  COFD[3233] = 1.60191468E+00;
  COFD[3234] = 1.31736721E-01;
  COFD[3235] = -1.05589739E-02;
  COFD[3236] = -1.70662616E+01;
  COFD[3237] = 3.02985738E+00;
  COFD[3238] = -7.72084703E-02;
  COFD[3239] = -6.24121266E-04;
  COFD[3240] = -2.03723754E+01;
  COFD[3241] = 5.15202220E+00;
  COFD[3242] = -4.45189907E-01;
  COFD[3243] = 1.89513141E-02;
  COFD[3244] = -2.07276341E+01;
  COFD[3245] = 4.97149561E+00;
  COFD[3246] = -3.74136752E-01;
  COFD[3247] = 1.39812994E-02;
  COFD[3248] = -1.81563854E+01;
  COFD[3249] = 4.53548642E+00;
  COFD[3250] = -3.73358387E-01;
  COFD[3251] = 1.61667533E-02;
  COFD[3252] = -1.80756881E+01;
  COFD[3253] = 4.51574627E+00;
  COFD[3254] = -3.70945448E-01;
  COFD[3255] = 1.60681888E-02;
  COFD[3256] = -1.78490726E+01;
  COFD[3257] = 4.37690225E+00;
  COFD[3258] = -3.54062330E-01;
  COFD[3259] = 1.53826315E-02;
  COFD[3260] = -1.82368559E+01;
  COFD[3261] = 4.37690225E+00;
  COFD[3262] = -3.54062330E-01;
  COFD[3263] = 1.53826315E-02;
  COFD[3264] = -2.18246724E+01;
  COFD[3265] = 5.53135282E+00;
  COFD[3266] = -4.85575141E-01;
  COFD[3267] = 2.03514395E-02;
  COFD[3268] = -2.16389833E+01;
  COFD[3269] = 5.50267156E+00;
  COFD[3270] = -4.82603324E-01;
  COFD[3271] = 2.02521765E-02;
  COFD[3272] = -1.82472544E+01;
  COFD[3273] = 4.37690225E+00;
  COFD[3274] = -3.54062330E-01;
  COFD[3275] = 1.53826315E-02;
  COFD[3276] = -1.82472544E+01;
  COFD[3277] = 4.37690225E+00;
  COFD[3278] = -3.54062330E-01;
  COFD[3279] = 1.53826315E-02;
  COFD[3280] = -1.99506163E+01;
  COFD[3281] = 4.99575645E+00;
  COFD[3282] = -4.28498115E-01;
  COFD[3283] = 1.83727383E-02;
  COFD[3284] = -1.99415377E+01;
  COFD[3285] = 4.99575645E+00;
  COFD[3286] = -4.28498115E-01;
  COFD[3287] = 1.83727383E-02;
  COFD[3288] = -1.99415377E+01;
  COFD[3289] = 4.99575645E+00;
  COFD[3290] = -4.28498115E-01;
  COFD[3291] = 1.83727383E-02;
  COFD[3292] = -2.09143133E+01;
  COFD[3293] = 5.29325574E+00;
  COFD[3294] = -4.57589151E-01;
  COFD[3295] = 1.92518692E-02;
  COFD[3296] = -1.99320468E+01;
  COFD[3297] = 4.99575645E+00;
  COFD[3298] = -4.28498115E-01;
  COFD[3299] = 1.83727383E-02;
  COFD[3300] = -2.21564646E+01;
  COFD[3301] = 5.49065009E+00;
  COFD[3302] = -4.61961141E-01;
  COFD[3303] = 1.85988878E-02;
  COFD[3304] = -2.20467692E+01;
  COFD[3305] = 5.40951140E+00;
  COFD[3306] = -4.48462236E-01;
  COFD[3307] = 1.78963114E-02;
  COFD[3308] = -2.20467692E+01;
  COFD[3309] = 5.40951140E+00;
  COFD[3310] = -4.48462236E-01;
  COFD[3311] = 1.78963114E-02;
  COFD[3312] = -2.21511630E+01;
  COFD[3313] = 5.34704322E+00;
  COFD[3314] = -4.34416730E-01;
  COFD[3315] = 1.70503304E-02;
  COFD[3316] = -2.21545815E+01;
  COFD[3317] = 5.34704322E+00;
  COFD[3318] = -4.34416730E-01;
  COFD[3319] = 1.70503304E-02;
  COFD[3320] = -2.20789431E+01;
  COFD[3321] = 5.60267051E+00;
  COFD[3322] = -4.91340000E-01;
  COFD[3323] = 2.04642297E-02;
  COFD[3324] = -2.22556826E+01;
  COFD[3325] = 5.58292044E+00;
  COFD[3326] = -4.78997102E-01;
  COFD[3327] = 1.95397808E-02;
  COFD[3328] = -1.97200980E+01;
  COFD[3329] = 4.90903202E+00;
  COFD[3330] = -4.18167746E-01;
  COFD[3331] = 1.79617398E-02;
  COFD[3332] = -2.05206699E+01;
  COFD[3333] = 5.49998925E+00;
  COFD[3334] = -4.62058835E-01;
  COFD[3335] = 1.85587918E-02;
  COFD[3336] = -1.80489386E+01;
  COFD[3337] = 4.42404849E+00;
  COFD[3338] = -2.85460331E-01;
  COFD[3339] = 9.44380914E-03;
  COFD[3340] = -1.92222964E+01;
  COFD[3341] = 4.03815166E+00;
  COFD[3342] = -2.26763817E-01;
  COFD[3343] = 6.56359846E-03;
  COFD[3344] = -2.14861882E+01;
  COFD[3345] = 5.59242407E+00;
  COFD[3346] = -4.85816565E-01;
  COFD[3347] = 2.00583066E-02;
  COFD[3348] = -1.78468632E+01;
  COFD[3349] = 3.51693547E+00;
  COFD[3350] = -1.51127699E-01;
  COFD[3351] = 3.01551347E-03;
  COFD[3352] = -1.85974012E+01;
  COFD[3353] = 3.93750121E+00;
  COFD[3354] = -2.14043595E-01;
  COFD[3355] = 6.06266776E-03;
  COFD[3356] = -1.83662079E+01;
  COFD[3357] = 4.58057560E+00;
  COFD[3358] = -3.78845026E-01;
  COFD[3359] = 1.63895472E-02;
  COFD[3360] = -1.30125435E+01;
  COFD[3361] = 1.16207110E+00;
  COFD[3362] = 1.92945290E-01;
  COFD[3363] = -1.33237721E-02;
  COFD[3364] = -1.53843020E+01;
  COFD[3365] = 2.24850320E+00;
  COFD[3366] = 3.58951681E-02;
  COFD[3367] = -5.92602427E-03;
  COFD[3368] = -2.04864468E+01;
  COFD[3369] = 5.16915371E+00;
  COFD[3370] = -4.45770645E-01;
  COFD[3371] = 1.89098733E-02;
  COFD[3372] = -1.94494309E+01;
  COFD[3373] = 4.32914628E+00;
  COFD[3374] = -2.75851330E-01;
  COFD[3375] = 9.15485311E-03;
  COFD[3376] = -1.90944956E+01;
  COFD[3377] = 4.84648833E+00;
  COFD[3378] = -4.10549293E-01;
  COFD[3379] = 1.76512818E-02;
  COFD[3380] = -1.82896493E+01;
  COFD[3381] = 4.58057560E+00;
  COFD[3382] = -3.78845026E-01;
  COFD[3383] = 1.63895472E-02;
  COFD[3384] = -1.80541153E+01;
  COFD[3385] = 4.44018708E+00;
  COFD[3386] = -3.61866079E-01;
  COFD[3387] = 1.57042940E-02;
  COFD[3388] = -1.84417861E+01;
  COFD[3389] = 4.44018708E+00;
  COFD[3390] = -3.61866079E-01;
  COFD[3391] = 1.57042940E-02;
  COFD[3392] = -2.21141548E+01;
  COFD[3393] = 5.60109280E+00;
  COFD[3394] = -4.91529485E-01;
  COFD[3395] = 2.04880803E-02;
  COFD[3396] = -2.18166749E+01;
  COFD[3397] = 5.54815127E+00;
  COFD[3398] = -4.87248851E-01;
  COFD[3399] = 2.04040308E-02;
  COFD[3400] = -1.84522725E+01;
  COFD[3401] = 4.44018708E+00;
  COFD[3402] = -3.61866079E-01;
  COFD[3403] = 1.57042940E-02;
  COFD[3404] = -1.84522725E+01;
  COFD[3405] = 4.44018708E+00;
  COFD[3406] = -3.61866079E-01;
  COFD[3407] = 1.57042940E-02;
  COFD[3408] = -2.01567336E+01;
  COFD[3409] = 5.05633659E+00;
  COFD[3410] = -4.35651066E-01;
  COFD[3411] = 1.86548337E-02;
  COFD[3412] = -2.01475736E+01;
  COFD[3413] = 5.05633659E+00;
  COFD[3414] = -4.35651066E-01;
  COFD[3415] = 1.86548337E-02;
  COFD[3416] = -2.01475736E+01;
  COFD[3417] = 5.05633659E+00;
  COFD[3418] = -4.35651066E-01;
  COFD[3419] = 1.86548337E-02;
  COFD[3420] = -2.14234864E+01;
  COFD[3421] = 5.32704354E+00;
  COFD[3422] = -4.44390565E-01;
  COFD[3423] = 1.79887805E-02;
  COFD[3424] = -2.01379993E+01;
  COFD[3425] = 5.05633659E+00;
  COFD[3426] = -4.35651066E-01;
  COFD[3427] = 1.86548337E-02;
  COFD[3428] = -2.20467692E+01;
  COFD[3429] = 5.40951140E+00;
  COFD[3430] = -4.48462236E-01;
  COFD[3431] = 1.78963114E-02;
  COFD[3432] = -2.13361650E+01;
  COFD[3433] = 5.02299397E+00;
  COFD[3434] = -3.87032015E-01;
  COFD[3435] = 1.47947092E-02;
  COFD[3436] = -2.13361650E+01;
  COFD[3437] = 5.02299397E+00;
  COFD[3438] = -3.87032015E-01;
  COFD[3439] = 1.47947092E-02;
  COFD[3440] = -2.20113947E+01;
  COFD[3441] = 5.25563036E+00;
  COFD[3442] = -4.19720043E-01;
  COFD[3443] = 1.63005851E-02;
  COFD[3444] = -2.20148560E+01;
  COFD[3445] = 5.25563036E+00;
  COFD[3446] = -4.19720043E-01;
  COFD[3447] = 1.63005851E-02;
  COFD[3448] = -2.21715233E+01;
  COFD[3449] = 5.61221127E+00;
  COFD[3450] = -4.91042501E-01;
  COFD[3451] = 2.03911567E-02;
  COFD[3452] = -2.22606294E+01;
  COFD[3453] = 5.55229151E+00;
  COFD[3454] = -4.72821678E-01;
  COFD[3455] = 1.91840047E-02;
  COFD[3456] = -1.97200980E+01;
  COFD[3457] = 4.90903202E+00;
  COFD[3458] = -4.18167746E-01;
  COFD[3459] = 1.79617398E-02;
  COFD[3460] = -2.05206699E+01;
  COFD[3461] = 5.49998925E+00;
  COFD[3462] = -4.62058835E-01;
  COFD[3463] = 1.85587918E-02;
  COFD[3464] = -1.80489386E+01;
  COFD[3465] = 4.42404849E+00;
  COFD[3466] = -2.85460331E-01;
  COFD[3467] = 9.44380914E-03;
  COFD[3468] = -1.92222964E+01;
  COFD[3469] = 4.03815166E+00;
  COFD[3470] = -2.26763817E-01;
  COFD[3471] = 6.56359846E-03;
  COFD[3472] = -2.14861882E+01;
  COFD[3473] = 5.59242407E+00;
  COFD[3474] = -4.85816565E-01;
  COFD[3475] = 2.00583066E-02;
  COFD[3476] = -1.78468632E+01;
  COFD[3477] = 3.51693547E+00;
  COFD[3478] = -1.51127699E-01;
  COFD[3479] = 3.01551347E-03;
  COFD[3480] = -1.85974012E+01;
  COFD[3481] = 3.93750121E+00;
  COFD[3482] = -2.14043595E-01;
  COFD[3483] = 6.06266776E-03;
  COFD[3484] = -1.83662079E+01;
  COFD[3485] = 4.58057560E+00;
  COFD[3486] = -3.78845026E-01;
  COFD[3487] = 1.63895472E-02;
  COFD[3488] = -1.30125435E+01;
  COFD[3489] = 1.16207110E+00;
  COFD[3490] = 1.92945290E-01;
  COFD[3491] = -1.33237721E-02;
  COFD[3492] = -1.53843020E+01;
  COFD[3493] = 2.24850320E+00;
  COFD[3494] = 3.58951681E-02;
  COFD[3495] = -5.92602427E-03;
  COFD[3496] = -2.04864468E+01;
  COFD[3497] = 5.16915371E+00;
  COFD[3498] = -4.45770645E-01;
  COFD[3499] = 1.89098733E-02;
  COFD[3500] = -1.94494309E+01;
  COFD[3501] = 4.32914628E+00;
  COFD[3502] = -2.75851330E-01;
  COFD[3503] = 9.15485311E-03;
  COFD[3504] = -1.90944956E+01;
  COFD[3505] = 4.84648833E+00;
  COFD[3506] = -4.10549293E-01;
  COFD[3507] = 1.76512818E-02;
  COFD[3508] = -1.82896493E+01;
  COFD[3509] = 4.58057560E+00;
  COFD[3510] = -3.78845026E-01;
  COFD[3511] = 1.63895472E-02;
  COFD[3512] = -1.80541153E+01;
  COFD[3513] = 4.44018708E+00;
  COFD[3514] = -3.61866079E-01;
  COFD[3515] = 1.57042940E-02;
  COFD[3516] = -1.84417861E+01;
  COFD[3517] = 4.44018708E+00;
  COFD[3518] = -3.61866079E-01;
  COFD[3519] = 1.57042940E-02;
  COFD[3520] = -2.21141548E+01;
  COFD[3521] = 5.60109280E+00;
  COFD[3522] = -4.91529485E-01;
  COFD[3523] = 2.04880803E-02;
  COFD[3524] = -2.18166749E+01;
  COFD[3525] = 5.54815127E+00;
  COFD[3526] = -4.87248851E-01;
  COFD[3527] = 2.04040308E-02;
  COFD[3528] = -1.84522725E+01;
  COFD[3529] = 4.44018708E+00;
  COFD[3530] = -3.61866079E-01;
  COFD[3531] = 1.57042940E-02;
  COFD[3532] = -1.84522725E+01;
  COFD[3533] = 4.44018708E+00;
  COFD[3534] = -3.61866079E-01;
  COFD[3535] = 1.57042940E-02;
  COFD[3536] = -2.01567336E+01;
  COFD[3537] = 5.05633659E+00;
  COFD[3538] = -4.35651066E-01;
  COFD[3539] = 1.86548337E-02;
  COFD[3540] = -2.01475736E+01;
  COFD[3541] = 5.05633659E+00;
  COFD[3542] = -4.35651066E-01;
  COFD[3543] = 1.86548337E-02;
  COFD[3544] = -2.01475736E+01;
  COFD[3545] = 5.05633659E+00;
  COFD[3546] = -4.35651066E-01;
  COFD[3547] = 1.86548337E-02;
  COFD[3548] = -2.14234864E+01;
  COFD[3549] = 5.32704354E+00;
  COFD[3550] = -4.44390565E-01;
  COFD[3551] = 1.79887805E-02;
  COFD[3552] = -2.01379993E+01;
  COFD[3553] = 5.05633659E+00;
  COFD[3554] = -4.35651066E-01;
  COFD[3555] = 1.86548337E-02;
  COFD[3556] = -2.20467692E+01;
  COFD[3557] = 5.40951140E+00;
  COFD[3558] = -4.48462236E-01;
  COFD[3559] = 1.78963114E-02;
  COFD[3560] = -2.13361650E+01;
  COFD[3561] = 5.02299397E+00;
  COFD[3562] = -3.87032015E-01;
  COFD[3563] = 1.47947092E-02;
  COFD[3564] = -2.13361650E+01;
  COFD[3565] = 5.02299397E+00;
  COFD[3566] = -3.87032015E-01;
  COFD[3567] = 1.47947092E-02;
  COFD[3568] = -2.20113947E+01;
  COFD[3569] = 5.25563036E+00;
  COFD[3570] = -4.19720043E-01;
  COFD[3571] = 1.63005851E-02;
  COFD[3572] = -2.20148560E+01;
  COFD[3573] = 5.25563036E+00;
  COFD[3574] = -4.19720043E-01;
  COFD[3575] = 1.63005851E-02;
  COFD[3576] = -2.21715233E+01;
  COFD[3577] = 5.61221127E+00;
  COFD[3578] = -4.91042501E-01;
  COFD[3579] = 2.03911567E-02;
  COFD[3580] = -2.22606294E+01;
  COFD[3581] = 5.55229151E+00;
  COFD[3582] = -4.72821678E-01;
  COFD[3583] = 1.91840047E-02;
  COFD[3584] = -2.00986902E+01;
  COFD[3585] = 5.00386762E+00;
  COFD[3586] = -4.29467805E-01;
  COFD[3587] = 1.84115182E-02;
  COFD[3588] = -2.05393116E+01;
  COFD[3589] = 5.44829711E+00;
  COFD[3590] = -4.52216958E-01;
  COFD[3591] = 1.80073594E-02;
  COFD[3592] = -1.81150380E+01;
  COFD[3593] = 4.41675195E+00;
  COFD[3594] = -2.84338396E-01;
  COFD[3595] = 9.38830631E-03;
  COFD[3596] = -1.87457687E+01;
  COFD[3597] = 3.74596774E+00;
  COFD[3598] = -1.82224018E-01;
  COFD[3599] = 4.37931907E-03;
  COFD[3600] = -2.16477423E+01;
  COFD[3601] = 5.58486392E+00;
  COFD[3602] = -4.81519993E-01;
  COFD[3603] = 1.97390473E-02;
  COFD[3604] = -1.87281672E+01;
  COFD[3605] = 3.86810823E+00;
  COFD[3606] = -2.01913650E-01;
  COFD[3607] = 5.38131185E-03;
  COFD[3608] = -1.99077361E+01;
  COFD[3609] = 4.50725879E+00;
  COFD[3610] = -2.99428108E-01;
  COFD[3611] = 1.01747630E-02;
  COFD[3612] = -1.89496299E+01;
  COFD[3613] = 4.74919572E+00;
  COFD[3614] = -3.99211884E-01;
  COFD[3615] = 1.72117130E-02;
  COFD[3616] = -1.22927026E+01;
  COFD[3617] = 7.67727880E-01;
  COFD[3618] = 2.51786955E-01;
  COFD[3619] = -1.61836355E-02;
  COFD[3620] = -1.57324108E+01;
  COFD[3621] = 2.33252912E+00;
  COFD[3622] = 2.62440377E-02;
  COFD[3623] = -5.60304878E-03;
  COFD[3624] = -2.11602357E+01;
  COFD[3625] = 5.36566969E+00;
  COFD[3626] = -4.69448702E-01;
  COFD[3627] = 1.98660968E-02;
  COFD[3628] = -2.03052399E+01;
  COFD[3629] = 4.66192924E+00;
  COFD[3630] = -3.23696484E-01;
  COFD[3631] = 1.13894894E-02;
  COFD[3632] = -1.89068168E+01;
  COFD[3633] = 4.75253200E+00;
  COFD[3634] = -3.99612781E-01;
  COFD[3635] = 1.72278125E-02;
  COFD[3636] = -1.88711237E+01;
  COFD[3637] = 4.74919572E+00;
  COFD[3638] = -3.99211884E-01;
  COFD[3639] = 1.72117130E-02;
  COFD[3640] = -1.86339637E+01;
  COFD[3641] = 4.61260432E+00;
  COFD[3642] = -3.82854484E-01;
  COFD[3643] = 1.65575163E-02;
  COFD[3644] = -1.90371890E+01;
  COFD[3645] = 4.61260432E+00;
  COFD[3646] = -3.82854484E-01;
  COFD[3647] = 1.65575163E-02;
  COFD[3648] = -2.23027265E+01;
  COFD[3649] = 5.61195798E+00;
  COFD[3650] = -4.90701162E-01;
  COFD[3651] = 2.03641901E-02;
  COFD[3652] = -2.21886223E+01;
  COFD[3653] = 5.61086039E+00;
  COFD[3654] = -4.91417738E-01;
  COFD[3655] = 2.04290046E-02;
  COFD[3656] = -1.90487540E+01;
  COFD[3657] = 4.61260432E+00;
  COFD[3658] = -3.82854484E-01;
  COFD[3659] = 1.65575163E-02;
  COFD[3660] = -1.90487540E+01;
  COFD[3661] = 4.61260432E+00;
  COFD[3662] = -3.82854484E-01;
  COFD[3663] = 1.65575163E-02;
  COFD[3664] = -2.06622747E+01;
  COFD[3665] = 5.18031001E+00;
  COFD[3666] = -4.49045425E-01;
  COFD[3667] = 1.91266962E-02;
  COFD[3668] = -2.06521098E+01;
  COFD[3669] = 5.18031001E+00;
  COFD[3670] = -4.49045425E-01;
  COFD[3671] = 1.91266962E-02;
  COFD[3672] = -2.06521098E+01;
  COFD[3673] = 5.18031001E+00;
  COFD[3674] = -4.49045425E-01;
  COFD[3675] = 1.91266962E-02;
  COFD[3676] = -2.16312294E+01;
  COFD[3677] = 5.48150367E+00;
  COFD[3678] = -4.78807136E-01;
  COFD[3679] = 2.00451304E-02;
  COFD[3680] = -2.06415068E+01;
  COFD[3681] = 5.18031001E+00;
  COFD[3682] = -4.49045425E-01;
  COFD[3683] = 1.91266962E-02;
  COFD[3684] = -2.21511630E+01;
  COFD[3685] = 5.34704322E+00;
  COFD[3686] = -4.34416730E-01;
  COFD[3687] = 1.70503304E-02;
  COFD[3688] = -2.20113947E+01;
  COFD[3689] = 5.25563036E+00;
  COFD[3690] = -4.19720043E-01;
  COFD[3691] = 1.63005851E-02;
  COFD[3692] = -2.20113947E+01;
  COFD[3693] = 5.25563036E+00;
  COFD[3694] = -4.19720043E-01;
  COFD[3695] = 1.63005851E-02;
  COFD[3696] = -2.18977118E+01;
  COFD[3697] = 5.09390611E+00;
  COFD[3698] = -3.91485745E-01;
  COFD[3699] = 1.47900083E-02;
  COFD[3700] = -2.19017271E+01;
  COFD[3701] = 5.09390611E+00;
  COFD[3702] = -3.91485745E-01;
  COFD[3703] = 1.47900083E-02;
  COFD[3704] = -2.23526481E+01;
  COFD[3705] = 5.58477190E+00;
  COFD[3706] = -4.82079203E-01;
  COFD[3707] = 1.97860181E-02;
  COFD[3708] = -2.23201250E+01;
  COFD[3709] = 5.46415254E+00;
  COFD[3710] = -4.55114520E-01;
  COFD[3711] = 1.81665083E-02;
  COFD[3712] = -2.01011855E+01;
  COFD[3713] = 5.00386762E+00;
  COFD[3714] = -4.29467805E-01;
  COFD[3715] = 1.84115182E-02;
  COFD[3716] = -2.05395636E+01;
  COFD[3717] = 5.44829711E+00;
  COFD[3718] = -4.52216958E-01;
  COFD[3719] = 1.80073594E-02;
  COFD[3720] = -1.81151660E+01;
  COFD[3721] = 4.41675195E+00;
  COFD[3722] = -2.84338396E-01;
  COFD[3723] = 9.38830631E-03;
  COFD[3724] = -1.87484988E+01;
  COFD[3725] = 3.74596774E+00;
  COFD[3726] = -1.82224018E-01;
  COFD[3727] = 4.37931907E-03;
  COFD[3728] = -2.16493856E+01;
  COFD[3729] = 5.58486392E+00;
  COFD[3730] = -4.81519993E-01;
  COFD[3731] = 1.97390473E-02;
  COFD[3732] = -1.87299712E+01;
  COFD[3733] = 3.86810823E+00;
  COFD[3734] = -2.01913650E-01;
  COFD[3735] = 5.38131185E-03;
  COFD[3736] = -1.99094607E+01;
  COFD[3737] = 4.50725879E+00;
  COFD[3738] = -2.99428108E-01;
  COFD[3739] = 1.01747630E-02;
  COFD[3740] = -1.89513545E+01;
  COFD[3741] = 4.74919572E+00;
  COFD[3742] = -3.99211884E-01;
  COFD[3743] = 1.72117130E-02;
  COFD[3744] = -1.22955441E+01;
  COFD[3745] = 7.67727880E-01;
  COFD[3746] = 2.51786955E-01;
  COFD[3747] = -1.61836355E-02;
  COFD[3748] = -1.57351972E+01;
  COFD[3749] = 2.33252912E+00;
  COFD[3750] = 2.62440377E-02;
  COFD[3751] = -5.60304878E-03;
  COFD[3752] = -2.11628509E+01;
  COFD[3753] = 5.36566969E+00;
  COFD[3754] = -4.69448702E-01;
  COFD[3755] = 1.98660968E-02;
  COFD[3756] = -2.03069665E+01;
  COFD[3757] = 4.66192924E+00;
  COFD[3758] = -3.23696484E-01;
  COFD[3759] = 1.13894894E-02;
  COFD[3760] = -1.89084620E+01;
  COFD[3761] = 4.75253200E+00;
  COFD[3762] = -3.99612781E-01;
  COFD[3763] = 1.72278125E-02;
  COFD[3764] = -1.88726854E+01;
  COFD[3765] = 4.74919572E+00;
  COFD[3766] = -3.99211884E-01;
  COFD[3767] = 1.72117130E-02;
  COFD[3768] = -1.86354398E+01;
  COFD[3769] = 4.61260432E+00;
  COFD[3770] = -3.82854484E-01;
  COFD[3771] = 1.65575163E-02;
  COFD[3772] = -1.90397457E+01;
  COFD[3773] = 4.61260432E+00;
  COFD[3774] = -3.82854484E-01;
  COFD[3775] = 1.65575163E-02;
  COFD[3776] = -2.23054593E+01;
  COFD[3777] = 5.61195798E+00;
  COFD[3778] = -4.90701162E-01;
  COFD[3779] = 2.03641901E-02;
  COFD[3780] = -2.21912977E+01;
  COFD[3781] = 5.61086039E+00;
  COFD[3782] = -4.91417738E-01;
  COFD[3783] = 2.04290046E-02;
  COFD[3784] = -1.90513706E+01;
  COFD[3785] = 4.61260432E+00;
  COFD[3786] = -3.82854484E-01;
  COFD[3787] = 1.65575163E-02;
  COFD[3788] = -1.90513706E+01;
  COFD[3789] = 4.61260432E+00;
  COFD[3790] = -3.82854484E-01;
  COFD[3791] = 1.65575163E-02;
  COFD[3792] = -2.06650624E+01;
  COFD[3793] = 5.18031001E+00;
  COFD[3794] = -4.49045425E-01;
  COFD[3795] = 1.91266962E-02;
  COFD[3796] = -2.06548413E+01;
  COFD[3797] = 5.18031001E+00;
  COFD[3798] = -4.49045425E-01;
  COFD[3799] = 1.91266962E-02;
  COFD[3800] = -2.06548413E+01;
  COFD[3801] = 5.18031001E+00;
  COFD[3802] = -4.49045425E-01;
  COFD[3803] = 1.91266962E-02;
  COFD[3804] = -2.16339034E+01;
  COFD[3805] = 5.48150367E+00;
  COFD[3806] = -4.78807136E-01;
  COFD[3807] = 2.00451304E-02;
  COFD[3808] = -2.06441807E+01;
  COFD[3809] = 5.18031001E+00;
  COFD[3810] = -4.49045425E-01;
  COFD[3811] = 1.91266962E-02;
  COFD[3812] = -2.21545815E+01;
  COFD[3813] = 5.34704322E+00;
  COFD[3814] = -4.34416730E-01;
  COFD[3815] = 1.70503304E-02;
  COFD[3816] = -2.20148560E+01;
  COFD[3817] = 5.25563036E+00;
  COFD[3818] = -4.19720043E-01;
  COFD[3819] = 1.63005851E-02;
  COFD[3820] = -2.20148560E+01;
  COFD[3821] = 5.25563036E+00;
  COFD[3822] = -4.19720043E-01;
  COFD[3823] = 1.63005851E-02;
  COFD[3824] = -2.19017271E+01;
  COFD[3825] = 5.09390611E+00;
  COFD[3826] = -3.91485745E-01;
  COFD[3827] = 1.47900083E-02;
  COFD[3828] = -2.19057749E+01;
  COFD[3829] = 5.09390611E+00;
  COFD[3830] = -3.91485745E-01;
  COFD[3831] = 1.47900083E-02;
  COFD[3832] = -2.23559798E+01;
  COFD[3833] = 5.58477190E+00;
  COFD[3834] = -4.82079203E-01;
  COFD[3835] = 1.97860181E-02;
  COFD[3836] = -2.23241728E+01;
  COFD[3837] = 5.46415254E+00;
  COFD[3838] = -4.55114520E-01;
  COFD[3839] = 1.81665083E-02;
  COFD[3840] = -1.79857204E+01;
  COFD[3841] = 4.31284688E+00;
  COFD[3842] = -3.46076308E-01;
  COFD[3843] = 1.50495278E-02;
  COFD[3844] = -2.01802645E+01;
  COFD[3845] = 5.55720056E+00;
  COFD[3846] = -4.88107412E-01;
  COFD[3847] = 2.04288041E-02;
  COFD[3848] = -1.98005984E+01;
  COFD[3849] = 5.41649600E+00;
  COFD[3850] = -4.46472802E-01;
  COFD[3851] = 1.76938976E-02;
  COFD[3852] = -2.13132083E+01;
  COFD[3853] = 5.12972504E+00;
  COFD[3854] = -3.97225519E-01;
  COFD[3855] = 1.50822018E-02;
  COFD[3856] = -2.05169488E+01;
  COFD[3857] = 5.36450176E+00;
  COFD[3858] = -4.69860384E-01;
  COFD[3859] = 1.99069280E-02;
  COFD[3860] = -2.12465891E+01;
  COFD[3861] = 5.22087939E+00;
  COFD[3862] = -4.12455967E-01;
  COFD[3863] = 1.58768385E-02;
  COFD[3864] = -2.14908514E+01;
  COFD[3865] = 5.46771640E+00;
  COFD[3866] = -4.55757452E-01;
  COFD[3867] = 1.82016160E-02;
  COFD[3868] = -1.69512232E+01;
  COFD[3869] = 4.09077642E+00;
  COFD[3870] = -3.18894990E-01;
  COFD[3871] = 1.39371445E-02;
  COFD[3872] = -1.74543070E+01;
  COFD[3873] = 3.19129118E+00;
  COFD[3874] = -9.94113729E-02;
  COFD[3875] = 3.78067789E-04;
  COFD[3876] = -1.97980818E+01;
  COFD[3877] = 4.32886122E+00;
  COFD[3878] = -2.70836956E-01;
  COFD[3879] = 8.72135260E-03;
  COFD[3880] = -1.91981829E+01;
  COFD[3881] = 4.76392621E+00;
  COFD[3882] = -4.00981139E-01;
  COFD[3883] = 1.72827297E-02;
  COFD[3884] = -2.16211139E+01;
  COFD[3885] = 5.50657794E+00;
  COFD[3886] = -4.63927523E-01;
  COFD[3887] = 1.86800112E-02;
  COFD[3888] = -1.68989140E+01;
  COFD[3889] = 4.09077642E+00;
  COFD[3890] = -3.18894990E-01;
  COFD[3891] = 1.39371445E-02;
  COFD[3892] = -1.68748925E+01;
  COFD[3893] = 4.09077642E+00;
  COFD[3894] = -3.18894990E-01;
  COFD[3895] = 1.39371445E-02;
  COFD[3896] = -1.66315381E+01;
  COFD[3897] = 3.93849401E+00;
  COFD[3898] = -2.99416642E-01;
  COFD[3899] = 1.31020815E-02;
  COFD[3900] = -1.70163379E+01;
  COFD[3901] = 3.93849401E+00;
  COFD[3902] = -2.99416642E-01;
  COFD[3903] = 1.31020815E-02;
  COFD[3904] = -2.07567853E+01;
  COFD[3905] = 5.20655416E+00;
  COFD[3906] = -4.52109025E-01;
  COFD[3907] = 1.92460992E-02;
  COFD[3908] = -2.05721233E+01;
  COFD[3909] = 5.17526774E+00;
  COFD[3910] = -4.48472252E-01;
  COFD[3911] = 1.91050891E-02;
  COFD[3912] = -1.70265556E+01;
  COFD[3913] = 3.93849401E+00;
  COFD[3914] = -2.99416642E-01;
  COFD[3915] = 1.31020815E-02;
  COFD[3916] = -1.70265556E+01;
  COFD[3917] = 3.93849401E+00;
  COFD[3918] = -2.99416642E-01;
  COFD[3919] = 1.31020815E-02;
  COFD[3920] = -1.86270955E+01;
  COFD[3921] = 4.53681554E+00;
  COFD[3922] = -3.73517224E-01;
  COFD[3923] = 1.61730724E-02;
  COFD[3924] = -1.86181839E+01;
  COFD[3925] = 4.53681554E+00;
  COFD[3926] = -3.73517224E-01;
  COFD[3927] = 1.61730724E-02;
  COFD[3928] = -1.86181839E+01;
  COFD[3929] = 4.53681554E+00;
  COFD[3930] = -3.73517224E-01;
  COFD[3931] = 1.61730724E-02;
  COFD[3932] = -1.99560249E+01;
  COFD[3933] = 5.01554582E+00;
  COFD[3934] = -4.30861205E-01;
  COFD[3935] = 1.84671151E-02;
  COFD[3936] = -1.86088645E+01;
  COFD[3937] = 4.53681554E+00;
  COFD[3938] = -3.73517224E-01;
  COFD[3939] = 1.61730724E-02;
  COFD[3940] = -2.20789431E+01;
  COFD[3941] = 5.60267051E+00;
  COFD[3942] = -4.91340000E-01;
  COFD[3943] = 2.04642297E-02;
  COFD[3944] = -2.21715233E+01;
  COFD[3945] = 5.61221127E+00;
  COFD[3946] = -4.91042501E-01;
  COFD[3947] = 2.03911567E-02;
  COFD[3948] = -2.21715233E+01;
  COFD[3949] = 5.61221127E+00;
  COFD[3950] = -4.91042501E-01;
  COFD[3951] = 2.03911567E-02;
  COFD[3952] = -2.23526481E+01;
  COFD[3953] = 5.58477190E+00;
  COFD[3954] = -4.82079203E-01;
  COFD[3955] = 1.97860181E-02;
  COFD[3956] = -2.23559798E+01;
  COFD[3957] = 5.58477190E+00;
  COFD[3958] = -4.82079203E-01;
  COFD[3959] = 1.97860181E-02;
  COFD[3960] = -2.11909780E+01;
  COFD[3961] = 5.35817304E+00;
  COFD[3962] = -4.69455306E-01;
  COFD[3963] = 1.99063292E-02;
  COFD[3964] = -2.18304099E+01;
  COFD[3965] = 5.54455172E+00;
  COFD[3966] = -4.86886991E-01;
  COFD[3967] = 2.03924829E-02;
  COFD[3968] = -1.89040245E+01;
  COFD[3969] = 4.65334848E+00;
  COFD[3970] = -3.87925507E-01;
  COFD[3971] = 1.67689894E-02;
  COFD[3972] = -2.03566504E+01;
  COFD[3973] = 5.58361281E+00;
  COFD[3974] = -4.82576419E-01;
  COFD[3975] = 1.98333272E-02;
  COFD[3976] = -1.91069838E+01;
  COFD[3977] = 5.06843304E+00;
  COFD[3978] = -3.87250051E-01;
  COFD[3979] = 1.45695775E-02;
  COFD[3980] = -2.02571924E+01;
  COFD[3981] = 4.58750049E+00;
  COFD[3982] = -3.10877633E-01;
  COFD[3983] = 1.07093007E-02;
  COFD[3984] = -2.11106642E+01;
  COFD[3985] = 5.55621659E+00;
  COFD[3986] = -4.88022203E-01;
  COFD[3987] = 2.04267906E-02;
  COFD[3988] = -2.02571119E+01;
  COFD[3989] = 4.71715472E+00;
  COFD[3990] = -3.31462651E-01;
  COFD[3991] = 1.17487656E-02;
  COFD[3992] = -2.09486770E+01;
  COFD[3993] = 5.15823358E+00;
  COFD[3994] = -4.01965723E-01;
  COFD[3995] = 1.53287643E-02;
  COFD[3996] = -1.77199091E+01;
  COFD[3997] = 4.38770680E+00;
  COFD[3998] = -3.55417486E-01;
  COFD[3999] = 1.54395368E-02;
  COFD[4000] = -1.51399205E+01;
  COFD[4001] = 2.13221216E+00;
  COFD[4002] = 5.61932887E-02;
  COFD[4003] = -7.04769618E-03;
  COFD[4004] = -1.81066148E+01;
  COFD[4005] = 3.52185917E+00;
  COFD[4006] = -1.48506723E-01;
  COFD[4007] = 2.73999922E-03;
  COFD[4008] = -2.00915012E+01;
  COFD[4009] = 5.08397108E+00;
  COFD[4010] = -4.38894241E-01;
  COFD[4011] = 1.87819650E-02;
  COFD[4012] = -2.12081959E+01;
  COFD[4013] = 5.25015888E+00;
  COFD[4014] = -4.17586588E-01;
  COFD[4015] = 1.61516138E-02;
  COFD[4016] = -1.76640371E+01;
  COFD[4017] = 4.38770680E+00;
  COFD[4018] = -3.55417486E-01;
  COFD[4019] = 1.54395368E-02;
  COFD[4020] = -1.76379673E+01;
  COFD[4021] = 4.38770680E+00;
  COFD[4022] = -3.55417486E-01;
  COFD[4023] = 1.54395368E-02;
  COFD[4024] = -1.74289175E+01;
  COFD[4025] = 4.25122035E+00;
  COFD[4026] = -3.38698235E-01;
  COFD[4027] = 1.47551928E-02;
  COFD[4028] = -1.78460568E+01;
  COFD[4029] = 4.25122035E+00;
  COFD[4030] = -3.38698235E-01;
  COFD[4031] = 1.47551928E-02;
  COFD[4032] = -2.14329323E+01;
  COFD[4033] = 5.41700226E+00;
  COFD[4034] = -4.73390866E-01;
  COFD[4035] = 1.99277147E-02;
  COFD[4036] = -2.12952306E+01;
  COFD[4037] = 5.40830928E+00;
  COFD[4038] = -4.72988519E-01;
  COFD[4039] = 1.99395140E-02;
  COFD[4040] = -1.78576817E+01;
  COFD[4041] = 4.25122035E+00;
  COFD[4042] = -3.38698235E-01;
  COFD[4043] = 1.47551928E-02;
  COFD[4044] = -1.78576817E+01;
  COFD[4045] = 4.25122035E+00;
  COFD[4046] = -3.38698235E-01;
  COFD[4047] = 1.47551928E-02;
  COFD[4048] = -1.94906126E+01;
  COFD[4049] = 4.84702690E+00;
  COFD[4050] = -4.10607260E-01;
  COFD[4051] = 1.76533032E-02;
  COFD[4052] = -1.94803915E+01;
  COFD[4053] = 4.84702690E+00;
  COFD[4054] = -4.10607260E-01;
  COFD[4055] = 1.76533032E-02;
  COFD[4056] = -1.94803915E+01;
  COFD[4057] = 4.84702690E+00;
  COFD[4058] = -4.10607260E-01;
  COFD[4059] = 1.76533032E-02;
  COFD[4060] = -2.07865517E+01;
  COFD[4061] = 5.30165984E+00;
  COFD[4062] = -4.63349733E-01;
  COFD[4063] = 1.96902989E-02;
  COFD[4064] = -1.94697310E+01;
  COFD[4065] = 4.84702690E+00;
  COFD[4066] = -4.10607260E-01;
  COFD[4067] = 1.76533032E-02;
  COFD[4068] = -2.22556826E+01;
  COFD[4069] = 5.58292044E+00;
  COFD[4070] = -4.78997102E-01;
  COFD[4071] = 1.95397808E-02;
  COFD[4072] = -2.22606294E+01;
  COFD[4073] = 5.55229151E+00;
  COFD[4074] = -4.72821678E-01;
  COFD[4075] = 1.91840047E-02;
  COFD[4076] = -2.22606294E+01;
  COFD[4077] = 5.55229151E+00;
  COFD[4078] = -4.72821678E-01;
  COFD[4079] = 1.91840047E-02;
  COFD[4080] = -2.23201250E+01;
  COFD[4081] = 5.46415254E+00;
  COFD[4082] = -4.55114520E-01;
  COFD[4083] = 1.81665083E-02;
  COFD[4084] = -2.23241728E+01;
  COFD[4085] = 5.46415254E+00;
  COFD[4086] = -4.55114520E-01;
  COFD[4087] = 1.81665083E-02;
  COFD[4088] = -2.18304099E+01;
  COFD[4089] = 5.54455172E+00;
  COFD[4090] = -4.86886991E-01;
  COFD[4091] = 2.03924829E-02;
  COFD[4092] = -2.21426702E+01;
  COFD[4093] = 5.58193688E+00;
  COFD[4094] = -4.82971193E-01;
  COFD[4095] = 1.98750221E-02;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 1;
  KTDIF[1] = 2;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 1.88864009E-02;
  COFTD[1] = 7.35479615E-04;
  COFTD[2] = -3.71438567E-07;
  COFTD[3] = 5.96471148E-11;
  COFTD[4] = 0.00000000E+00;
  COFTD[5] = 0.00000000E+00;
  COFTD[6] = 0.00000000E+00;
  COFTD[7] = 0.00000000E+00;
  COFTD[8] = 8.60765722E-02;
  COFTD[9] = -2.79132663E-04;
  COFTD[10] = 1.04838946E-07;
  COFTD[11] = -1.38711095E-11;
  COFTD[12] = -2.28409020E-01;
  COFTD[13] = 6.68441183E-04;
  COFTD[14] = -2.30285976E-07;
  COFTD[15] = 2.83705350E-11;
  COFTD[16] = -1.33206394E-01;
  COFTD[17] = 7.52037459E-04;
  COFTD[18] = -3.38886727E-07;
  COFTD[19] = 5.07609298E-11;
  COFTD[20] = -2.04557464E-01;
  COFTD[21] = 5.72587053E-04;
  COFTD[22] = -1.87494807E-07;
  COFTD[23] = 2.20308852E-11;
  COFTD[24] = -2.04859402E-01;
  COFTD[25] = 6.18538944E-04;
  COFTD[26] = -2.19624588E-07;
  COFTD[27] = 2.77736668E-11;
  COFTD[28] = 5.81361353E-02;
  COFTD[29] = 6.24881466E-04;
  COFTD[30] = -3.22791115E-07;
  COFTD[31] = 5.25738519E-11;
  COFTD[32] = -1.58008445E-01;
  COFTD[33] = 3.10107121E-04;
  COFTD[34] = -1.84231369E-08;
  COFTD[35] = -7.27898596E-12;
  COFTD[36] = -1.96508019E-01;
  COFTD[37] = 4.57052497E-04;
  COFTD[38] = -1.01378055E-07;
  COFTD[39] = 6.40496457E-12;
  COFTD[40] = -5.68333110E-02;
  COFTD[41] = 8.09094017E-04;
  COFTD[42] = -3.91747207E-07;
  COFTD[43] = 6.13056024E-11;
  COFTD[44] = -2.03578044E-01;
  COFTD[45] = 6.59990245E-04;
  COFTD[46] = -2.47838125E-07;
  COFTD[47] = 3.27864279E-11;
  COFTD[48] = 5.72831948E-02;
  COFTD[49] = 6.15713559E-04;
  COFTD[50] = -3.18055306E-07;
  COFTD[51] = 5.18025181E-11;
  COFTD[52] = 5.63072551E-02;
  COFTD[53] = 6.05223583E-04;
  COFTD[54] = -3.12636565E-07;
  COFTD[55] = 5.09199532E-11;
  COFTD[56] = 7.75346683E-02;
  COFTD[57] = 5.66781876E-04;
  COFTD[58] = -2.96471034E-07;
  COFTD[59] = 4.86755713E-11;
  COFTD[60] = 9.01469209E-02;
  COFTD[61] = 6.58978004E-04;
  COFTD[62] = -3.44696785E-07;
  COFTD[63] = 5.65934307E-11;
  COFTD[64] = -1.28990583E-01;
  COFTD[65] = 8.51808336E-04;
  COFTD[66] = -3.91927032E-07;
  COFTD[67] = 5.94623062E-11;
  COFTD[68] = -1.24299247E-01;
  COFTD[69] = 8.47288698E-04;
  COFTD[70] = -3.91228619E-07;
  COFTD[71] = 5.94847436E-11;
  COFTD[72] = 9.05702693E-02;
  COFTD[73] = 6.62072699E-04;
  COFTD[74] = -3.46315551E-07;
  COFTD[75] = 5.68592050E-11;
  COFTD[76] = 9.05702693E-02;
  COFTD[77] = 6.62072699E-04;
  COFTD[78] = -3.46315551E-07;
  COFTD[79] = 5.68592050E-11;
  COFTD[80] = -1.96397134E-02;
  COFTD[81] = 7.88833931E-04;
  COFTD[82] = -3.90332161E-07;
  COFTD[83] = 6.18983880E-11;
  COFTD[84] = -1.95641008E-02;
  COFTD[85] = 7.85796931E-04;
  COFTD[86] = -3.88829387E-07;
  COFTD[87] = 6.16600801E-11;
  COFTD[88] = -1.95641008E-02;
  COFTD[89] = 7.85796931E-04;
  COFTD[90] = -3.88829387E-07;
  COFTD[91] = 6.16600801E-11;
  COFTD[92] = -1.22128986E-01;
  COFTD[93] = 8.46604772E-04;
  COFTD[94] = -3.91615269E-07;
  COFTD[95] = 5.96088166E-11;
  COFTD[96] = -1.94838731E-02;
  COFTD[97] = 7.82574566E-04;
  COFTD[98] = -3.87234891E-07;
  COFTD[99] = 6.14072268E-11;
  COFTD[100] = -2.04185193E-01;
  COFTD[101] = 8.65478087E-04;
  COFTD[102] = -3.66820651E-07;
  COFTD[103] = 5.28522251E-11;
  COFTD[104] = -2.15823118E-01;
  COFTD[105] = 8.50930861E-04;
  COFTD[106] = -3.52233945E-07;
  COFTD[107] = 4.99641830E-11;
  COFTD[108] = -2.15823118E-01;
  COFTD[109] = 8.50930861E-04;
  COFTD[110] = -3.52233945E-07;
  COFTD[111] = 4.99641830E-11;
  COFTD[112] = -2.25820889E-01;
  COFTD[113] = 8.57568555E-04;
  COFTD[114] = -3.49946625E-07;
  COFTD[115] = 4.91626284E-11;
  COFTD[116] = -2.26056166E-01;
  COFTD[117] = 8.58462036E-04;
  COFTD[118] = -3.50311227E-07;
  COFTD[119] = 4.92138498E-11;
  COFTD[120] = -1.54366987E-01;
  COFTD[121] = 8.84046509E-04;
  COFTD[122] = -3.99238060E-07;
  COFTD[123] = 5.98809673E-11;
  COFTD[124] = -1.95910677E-01;
  COFTD[125] = 8.97925665E-04;
  COFTD[126] = -3.88626808E-07;
  COFTD[127] = 5.67557339E-11;
  COFTD[128] = -1.05514987E-01;
  COFTD[129] = 8.88233540E-04;
  COFTD[130] = -4.18113306E-07;
  COFTD[131] = 6.43224020E-11;
  COFTD[132] = -8.60765722E-02;
  COFTD[133] = 2.79132663E-04;
  COFTD[134] = -1.04838946E-07;
  COFTD[135] = 1.38711095E-11;
  COFTD[136] = 0.00000000E+00;
  COFTD[137] = 0.00000000E+00;
  COFTD[138] = 0.00000000E+00;
  COFTD[139] = 0.00000000E+00;
  COFTD[140] = -1.98554149E-01;
  COFTD[141] = 4.43297489E-04;
  COFTD[142] = -8.37689521E-08;
  COFTD[143] = 2.84906180E-12;
  COFTD[144] = -2.15711825E-01;
  COFTD[145] = 7.98335552E-04;
  COFTD[146] = -3.22280520E-07;
  COFTD[147] = 4.49416973E-11;
  COFTD[148] = -1.52256259E-01;
  COFTD[149] = 2.89445979E-04;
  COFTD[150] = -6.14163554E-09;
  COFTD[151] = -9.34354314E-12;
  COFTD[152] = -1.73079212E-01;
  COFTD[153] = 3.63020614E-04;
  COFTD[154] = -4.76254688E-08;
  COFTD[155] = -2.50879345E-12;
  COFTD[156] = -6.13891573E-02;
  COFTD[157] = 8.24630113E-04;
  COFTD[158] = -3.98385776E-07;
  COFTD[159] = 6.22606860E-11;
  COFTD[160] = -1.14385455E-02;
  COFTD[161] = -1.04727734E-04;
  COFTD[162] = 2.05785426E-07;
  COFTD[163] = -4.35049239E-11;
  COFTD[164] = -7.22110194E-02;
  COFTD[165] = 4.81338517E-05;
  COFTD[166] = 1.28660333E-07;
  COFTD[167] = -3.14366936E-11;
  COFTD[168] = -1.69094245E-01;
  COFTD[169] = 9.05159193E-04;
  COFTD[170] = -4.04374348E-07;
  COFTD[171] = 6.02461761E-11;
  COFTD[172] = -2.01903905E-01;
  COFTD[173] = 4.79625925E-04;
  COFTD[174] = -1.13800717E-07;
  COFTD[175] = 8.43533438E-12;
  COFTD[176] = -6.09422224E-02;
  COFTD[177] = 8.18626511E-04;
  COFTD[178] = -3.95485386E-07;
  COFTD[179] = 6.18074061E-11;
  COFTD[180] = -6.04274679E-02;
  COFTD[181] = 8.11711901E-04;
  COFTD[182] = -3.92144879E-07;
  COFTD[183] = 6.12853437E-11;
  COFTD[184] = -3.67938428E-02;
  COFTD[185] = 7.86527146E-04;
  COFTD[186] = -3.85308964E-07;
  COFTD[187] = 6.07291672E-11;
  COFTD[188] = -3.96470002E-02;
  COFTD[189] = 8.47517942E-04;
  COFTD[190] = -4.15187526E-07;
  COFTD[191] = 6.54383756E-11;
  COFTD[192] = -2.17973095E-01;
  COFTD[193] = 8.75469845E-04;
  COFTD[194] = -3.64755153E-07;
  COFTD[195] = 5.19653242E-11;
  COFTD[196] = -2.15097337E-01;
  COFTD[197] = 8.77383140E-04;
  COFTD[198] = -3.67449387E-07;
  COFTD[199] = 5.25291077E-11;
  COFTD[200] = -3.97396603E-02;
  COFTD[201] = 8.49498699E-04;
  COFTD[202] = -4.16157872E-07;
  COFTD[203] = 6.55913134E-11;
  COFTD[204] = -3.97396603E-02;
  COFTD[205] = 8.49498699E-04;
  COFTD[206] = -4.16157872E-07;
  COFTD[207] = 6.55913134E-11;
  COFTD[208] = -1.39779229E-01;
  COFTD[209] = 9.09418082E-04;
  COFTD[210] = -4.17711297E-07;
  COFTD[211] = 6.33072649E-11;
  COFTD[212] = -1.39510672E-01;
  COFTD[213] = 9.07670822E-04;
  COFTD[214] = -4.16908750E-07;
  COFTD[215] = 6.31856330E-11;
  COFTD[216] = -1.39510672E-01;
  COFTD[217] = 9.07670822E-04;
  COFTD[218] = -4.16908750E-07;
  COFTD[219] = 6.31856330E-11;
  COFTD[220] = -2.25631627E-01;
  COFTD[221] = 8.58042131E-04;
  COFTD[222] = -3.50335408E-07;
  COFTD[223] = 4.92359873E-11;
  COFTD[224] = -1.39225207E-01;
  COFTD[225] = 9.05813560E-04;
  COFTD[226] = -4.16055678E-07;
  COFTD[227] = 6.30563435E-11;
  COFTD[228] = -2.48762882E-01;
  COFTD[229] = 7.69774540E-04;
  COFTD[230] = -2.79162545E-07;
  COFTD[231] = 3.59263356E-11;
  COFTD[232] = -2.47084907E-01;
  COFTD[233] = 7.07410862E-04;
  COFTD[234] = -2.37986897E-07;
  COFTD[235] = 2.86927545E-11;
  COFTD[236] = -2.47084907E-01;
  COFTD[237] = 7.07410862E-04;
  COFTD[238] = -2.37986897E-07;
  COFTD[239] = 2.86927545E-11;
  COFTD[240] = -2.49587949E-01;
  COFTD[241] = 7.13785992E-04;
  COFTD[242] = -2.39828517E-07;
  COFTD[243] = 2.88808543E-11;
  COFTD[244] = -2.49717834E-01;
  COFTD[245] = 7.14157443E-04;
  COFTD[246] = -2.39953323E-07;
  COFTD[247] = 2.88958838E-11;
  COFTD[248] = -2.32706626E-01;
  COFTD[249] = 8.68019350E-04;
  COFTD[250] = -3.51596126E-07;
  COFTD[251] = 4.91441108E-11;
  COFTD[252] = -2.49667193E-01;
  COFTD[253] = 8.15708690E-04;
  COFTD[254] = -3.07917642E-07;
  COFTD[255] = 4.08975986E-11;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[32];
  amrex::Real SIG[32];
  amrex::Real wt[32];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: N2
  // Imported from NIST
  Tci[0] = 126.192000;
  ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] /
          (28.013400 * 28.013400 * 33.958000);
  bi[0] = 0.08664 * Rcst * Tci[0] / (28.013400 * 33.958000);
  acentric_i[0] = 0.037200;

  // species 1: H2
  // Imported from NIST
  Tci[1] = 33.145000;
  ai[1] = 1e6 * 0.42748 * Rcst * Rcst * Tci[1] * Tci[1] /
          (2.015880 * 2.015880 * 12.964000);
  bi[1] = 0.08664 * Rcst * Tci[1] / (2.015880 * 12.964000);
  acentric_i[1] = -0.219000;

  // species 2: H
  Tci[2] = 1.316 * EPS[2];
  ai[2] = (5.55 * avogadro * avogadro * EPS[2] * boltzmann * 1e-24 * SIG[2] *
           SIG[2] * SIG[2]) /
          (wt[2] * wt[2]);
  bi[2] = 0.855 * avogadro * 1e-24 * SIG[2] * SIG[2] * SIG[2] / (wt[2]);
  acentric_i[2] = 0.0;

  // species 3: O2
  // Imported from NIST
  Tci[3] = 154.581000;
  ai[3] = 1e6 * 0.42748 * Rcst * Rcst * Tci[3] * Tci[3] /
          (31.998800 * 31.998800 * 50.430466);
  bi[3] = 0.08664 * Rcst * Tci[3] / (31.998800 * 50.430466);
  acentric_i[3] = 0.022200;

  // species 4: O
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann * 1e-24 * SIG[4] *
           SIG[4] * SIG[4]) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * 1e-24 * SIG[4] * SIG[4] * SIG[4] / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: H2O
  // Imported from NIST
  Tci[5] = 647.096000;
  ai[5] = 1e6 * 0.42748 * Rcst * Rcst * Tci[5] * Tci[5] /
          (18.015340 * 18.015340 * 220.640000);
  bi[5] = 0.08664 * Rcst * Tci[5] / (18.015340 * 220.640000);
  acentric_i[5] = 0.344300;

  // species 6: OH
  Tci[6] = 1.316 * EPS[6];
  ai[6] = (5.55 * avogadro * avogadro * EPS[6] * boltzmann * 1e-24 * SIG[6] *
           SIG[6] * SIG[6]) /
          (wt[6] * wt[6]);
  bi[6] = 0.855 * avogadro * 1e-24 * SIG[6] * SIG[6] * SIG[6] / (wt[6]);
  acentric_i[6] = 0.0;

  // species 7: OHV
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann * 1e-24 * SIG[7] *
           SIG[7] * SIG[7]) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: H2O2
  Tci[8] = 1.316 * EPS[8];
  ai[8] = (5.55 * avogadro * avogadro * EPS[8] * boltzmann * 1e-24 * SIG[8] *
           SIG[8] * SIG[8]) /
          (wt[8] * wt[8]);
  bi[8] = 0.855 * avogadro * 1e-24 * SIG[8] * SIG[8] * SIG[8] / (wt[8]);
  acentric_i[8] = 0.0;

  // species 9: HO2
  Tci[9] = 1.316 * EPS[9];
  ai[9] = (5.55 * avogadro * avogadro * EPS[9] * boltzmann * 1e-24 * SIG[9] *
           SIG[9] * SIG[9]) /
          (wt[9] * wt[9]);
  bi[9] = 0.855 * avogadro * 1e-24 * SIG[9] * SIG[9] * SIG[9] / (wt[9]);
  acentric_i[9] = 0.0;

  // species 10: NO
  // Imported from NIST
  Tci[10] = 180.000000;
  ai[10] = 1e6 * 0.42748 * Rcst * Rcst * Tci[10] * Tci[10] /
           (30.006000 * 30.006000 * 64.800000);
  bi[10] = 0.08664 * Rcst * Tci[10] / (30.006000 * 64.800000);
  acentric_i[10] = 0.582000;

  // species 11: NH3
  Tci[11] = 1.316 * EPS[11];
  ai[11] = (5.55 * avogadro * avogadro * EPS[11] * boltzmann * 1e-24 * SIG[11] *
            SIG[11] * SIG[11]) /
           (wt[11] * wt[11]);
  bi[11] = 0.855 * avogadro * 1e-24 * SIG[11] * SIG[11] * SIG[11] / (wt[11]);
  acentric_i[11] = 0.0;

  // species 12: NH2
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann * 1e-24 * SIG[12] *
            SIG[12] * SIG[12]) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: NH
  Tci[13] = 1.316 * EPS[13];
  ai[13] = (5.55 * avogadro * avogadro * EPS[13] * boltzmann * 1e-24 * SIG[13] *
            SIG[13] * SIG[13]) /
           (wt[13] * wt[13]);
  bi[13] = 0.855 * avogadro * 1e-24 * SIG[13] * SIG[13] * SIG[13] / (wt[13]);
  acentric_i[13] = 0.0;

  // species 14: N
  Tci[14] = 1.316 * EPS[14];
  ai[14] = (5.55 * avogadro * avogadro * EPS[14] * boltzmann * 1e-24 * SIG[14] *
            SIG[14] * SIG[14]) /
           (wt[14] * wt[14]);
  bi[14] = 0.855 * avogadro * 1e-24 * SIG[14] * SIG[14] * SIG[14] / (wt[14]);
  acentric_i[14] = 0.0;

  // species 15: NNH
  Tci[15] = 1.316 * EPS[15];
  ai[15] = (5.55 * avogadro * avogadro * EPS[15] * boltzmann * 1e-24 * SIG[15] *
            SIG[15] * SIG[15]) /
           (wt[15] * wt[15]);
  bi[15] = 0.855 * avogadro * 1e-24 * SIG[15] * SIG[15] * SIG[15] / (wt[15]);
  acentric_i[15] = 0.0;

  // species 16: N2H4
  Tci[16] = 1.316 * EPS[16];
  ai[16] = (5.55 * avogadro * avogadro * EPS[16] * boltzmann * 1e-24 * SIG[16] *
            SIG[16] * SIG[16]) /
           (wt[16] * wt[16]);
  bi[16] = 0.855 * avogadro * 1e-24 * SIG[16] * SIG[16] * SIG[16] / (wt[16]);
  acentric_i[16] = 0.0;

  // species 17: N2H3
  Tci[17] = 1.316 * EPS[17];
  ai[17] = (5.55 * avogadro * avogadro * EPS[17] * boltzmann * 1e-24 * SIG[17] *
            SIG[17] * SIG[17]) /
           (wt[17] * wt[17]);
  bi[17] = 0.855 * avogadro * 1e-24 * SIG[17] * SIG[17] * SIG[17] / (wt[17]);
  acentric_i[17] = 0.0;

  // species 18: N2H2
  Tci[18] = 1.316 * EPS[18];
  ai[18] = (5.55 * avogadro * avogadro * EPS[18] * boltzmann * 1e-24 * SIG[18] *
            SIG[18] * SIG[18]) /
           (wt[18] * wt[18]);
  bi[18] = 0.855 * avogadro * 1e-24 * SIG[18] * SIG[18] * SIG[18] / (wt[18]);
  acentric_i[18] = 0.0;

  // species 19: H2NN
  Tci[19] = 1.316 * EPS[19];
  ai[19] = (5.55 * avogadro * avogadro * EPS[19] * boltzmann * 1e-24 * SIG[19] *
            SIG[19] * SIG[19]) /
           (wt[19] * wt[19]);
  bi[19] = 0.855 * avogadro * 1e-24 * SIG[19] * SIG[19] * SIG[19] / (wt[19]);
  acentric_i[19] = 0.0;

  // species 20: NH2OH
  Tci[20] = 1.316 * EPS[20];
  ai[20] = (5.55 * avogadro * avogadro * EPS[20] * boltzmann * 1e-24 * SIG[20] *
            SIG[20] * SIG[20]) /
           (wt[20] * wt[20]);
  bi[20] = 0.855 * avogadro * 1e-24 * SIG[20] * SIG[20] * SIG[20] / (wt[20]);
  acentric_i[20] = 0.0;

  // species 21: H2NO
  Tci[21] = 1.316 * EPS[21];
  ai[21] = (5.55 * avogadro * avogadro * EPS[21] * boltzmann * 1e-24 * SIG[21] *
            SIG[21] * SIG[21]) /
           (wt[21] * wt[21]);
  bi[21] = 0.855 * avogadro * 1e-24 * SIG[21] * SIG[21] * SIG[21] / (wt[21]);
  acentric_i[21] = 0.0;

  // species 22: HNOH
  Tci[22] = 1.316 * EPS[22];
  ai[22] = (5.55 * avogadro * avogadro * EPS[22] * boltzmann * 1e-24 * SIG[22] *
            SIG[22] * SIG[22]) /
           (wt[22] * wt[22]);
  bi[22] = 0.855 * avogadro * 1e-24 * SIG[22] * SIG[22] * SIG[22] / (wt[22]);
  acentric_i[22] = 0.0;

  // species 23: HNO
  Tci[23] = 1.316 * EPS[23];
  ai[23] = (5.55 * avogadro * avogadro * EPS[23] * boltzmann * 1e-24 * SIG[23] *
            SIG[23] * SIG[23]) /
           (wt[23] * wt[23]);
  bi[23] = 0.855 * avogadro * 1e-24 * SIG[23] * SIG[23] * SIG[23] / (wt[23]);
  acentric_i[23] = 0.0;

  // species 24: HON
  Tci[24] = 1.316 * EPS[24];
  ai[24] = (5.55 * avogadro * avogadro * EPS[24] * boltzmann * 1e-24 * SIG[24] *
            SIG[24] * SIG[24]) /
           (wt[24] * wt[24]);
  bi[24] = 0.855 * avogadro * 1e-24 * SIG[24] * SIG[24] * SIG[24] / (wt[24]);
  acentric_i[24] = 0.0;

  // species 25: NO2
  Tci[25] = 1.316 * EPS[25];
  ai[25] = (5.55 * avogadro * avogadro * EPS[25] * boltzmann * 1e-24 * SIG[25] *
            SIG[25] * SIG[25]) /
           (wt[25] * wt[25]);
  bi[25] = 0.855 * avogadro * 1e-24 * SIG[25] * SIG[25] * SIG[25] / (wt[25]);
  acentric_i[25] = 0.0;

  // species 26: HONO
  Tci[26] = 1.316 * EPS[26];
  ai[26] = (5.55 * avogadro * avogadro * EPS[26] * boltzmann * 1e-24 * SIG[26] *
            SIG[26] * SIG[26]) /
           (wt[26] * wt[26]);
  bi[26] = 0.855 * avogadro * 1e-24 * SIG[26] * SIG[26] * SIG[26] / (wt[26]);
  acentric_i[26] = 0.0;

  // species 27: HNO2
  Tci[27] = 1.316 * EPS[27];
  ai[27] = (5.55 * avogadro * avogadro * EPS[27] * boltzmann * 1e-24 * SIG[27] *
            SIG[27] * SIG[27]) /
           (wt[27] * wt[27]);
  bi[27] = 0.855 * avogadro * 1e-24 * SIG[27] * SIG[27] * SIG[27] / (wt[27]);
  acentric_i[27] = 0.0;

  // species 28: NO3
  Tci[28] = 1.316 * EPS[28];
  ai[28] = (5.55 * avogadro * avogadro * EPS[28] * boltzmann * 1e-24 * SIG[28] *
            SIG[28] * SIG[28]) /
           (wt[28] * wt[28]);
  bi[28] = 0.855 * avogadro * 1e-24 * SIG[28] * SIG[28] * SIG[28] / (wt[28]);
  acentric_i[28] = 0.0;

  // species 29: HONO2
  Tci[29] = 1.316 * EPS[29];
  ai[29] = (5.55 * avogadro * avogadro * EPS[29] * boltzmann * 1e-24 * SIG[29] *
            SIG[29] * SIG[29]) /
           (wt[29] * wt[29]);
  bi[29] = 0.855 * avogadro * 1e-24 * SIG[29] * SIG[29] * SIG[29] / (wt[29]);
  acentric_i[29] = 0.0;

  // species 30: N2O
  // Imported from NIST
  Tci[30] = 309.600000;
  ai[30] = 1e6 * 0.42748 * Rcst * Rcst * Tci[30] * Tci[30] /
           (44.013000 * 44.013000 * 72.550000);
  bi[30] = 0.08664 * Rcst * Tci[30] / (44.013000 * 72.550000);
  acentric_i[30] = 0.162000;

  // species 31: HNO3
  Tci[31] = 1.316 * EPS[31];
  ai[31] = (5.55 * avogadro * avogadro * EPS[31] * boltzmann * 1e-24 * SIG[31] *
            SIG[31] * SIG[31]) /
           (wt[31] * wt[31]);
  bi[31] = 0.855 * avogadro * 1e-24 * SIG[31] * SIG[31] * SIG[31] / (wt[31]);
  acentric_i[31] = 0.0;
}

// compute the critical parameter quantities for each species for SRK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS_SRK(
  amrex::Real* sqrtOneOverTc,
  amrex::Real* sqrtAsti,
  amrex::Real* Bi,
  amrex::Real* Fomega)
{

  // species 0: N2
  // Imported from NIST
  sqrtOneOverTc[0] = 8.9019282240563e-02;
  sqrtAsti[0] = 4.2022983929562e+04;
  Bi[0] = 9.5560052221563e-01;
  Fomega[0] = 5.4259343186608e-01;

  // species 1: H2
  // Imported from NIST
  sqrtOneOverTc[1] = 1.7369646834812e-01;
  sqrtAsti[1] = 2.4824229305911e+05;
  Bi[1] = 9.1362254169923e+00;
  Fomega[1] = 1.3798618890700e-01;

  // species 2: H
  // Computed from Lennard-Jones
  sqrtOneOverTc[2] = 3.7454487770053e-02;
  sqrtAsti[2] = 7.2842381465495e+05;
  Bi[2] = 1.8294934803582e+00;
  Fomega[2] = 4.8508000000000e-01;

  // species 3: O2
  // Imported from NIST
  sqrtOneOverTc[3] = 8.0430717653241e-02;
  sqrtAsti[3] = 3.6980081924740e+04;
  Bi[3] = 6.9005216444999e-01;
  Fomega[3] = 5.1945301904908e-01;

  // species 4: O
  // Computed from Lennard-Jones
  sqrtOneOverTc[4] = 5.6781277914508e-02;
  sqrtAsti[4] = 6.2661815353346e+04;
  Bi[4] = 4.9385953894053e-01;
  Fomega[4] = 4.8508000000000e-01;

  // species 5: H2O
  // Imported from NIST
  sqrtOneOverTc[5] = 3.9311140369715e-02;
  sqrtAsti[5] = 1.3145468419592e+05;
  Bi[5] = 1.1727204136223e+00;
  Fomega[5] = 1.0013577274636e+00;

  // species 6: OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[6] = 3.8427135199886e-02;
  sqrtAsti[6] = 9.2252898596269e+04;
  Bi[6] = 5.2114443901905e-01;
  Fomega[6] = 4.8508000000000e-01;

  // species 7: OHV
  // Computed from Lennard-Jones
  sqrtOneOverTc[7] = 9.7460146948181e-02;
  sqrtAsti[7] = 3.9981183985545e+04;
  Bi[7] = 6.2963299076575e-01;
  Fomega[7] = 4.8508000000000e-01;

  // species 8: H2O2
  // Computed from Lennard-Jones
  sqrtOneOverTc[8] = 2.3627587527962e-02;
  sqrtAsti[8] = 1.0248730842960e+05;
  Bi[8] = 4.8632991229711e-01;
  Fomega[8] = 4.8508000000000e-01;

  // species 9: HO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[9] = 2.8090420170143e-02;
  sqrtAsti[9] = 8.6749823103574e+04;
  Bi[9] = 4.7790425792845e-01;
  Fomega[9] = 4.8508000000000e-01;

  // species 10: NO
  // Imported from NIST
  sqrtOneOverTc[10] = 7.4535599249993e-02;
  sqrtAsti[10] = 4.0510614916903e+04;
  Bi[10] = 6.6687106751983e-01;
  Fomega[10] = 1.3368144381880e+00;

  // species 11: NH3
  // Computed from Lennard-Jones
  sqrtOneOverTc[11] = 3.9746557257596e-02;
  sqrtAsti[11] = 1.0711394012187e+05;
  Bi[11] = 7.5270623103672e-01;
  Fomega[11] = 4.8508000000000e-01;

  // species 12: NH2
  // Computed from Lennard-Jones
  sqrtOneOverTc[12] = 9.7460146948181e-02;
  sqrtAsti[12] = 4.0142951449185e+04;
  Bi[12] = 5.9801337160150e-01;
  Fomega[12] = 4.8508000000000e-01;

  // species 13: NH
  // Computed from Lennard-Jones
  sqrtOneOverTc[13] = 9.7460146948181e-02;
  sqrtAsti[13] = 4.2837862875144e+04;
  Bi[13] = 6.3815972382091e-01;
  Fomega[13] = 4.8508000000000e-01;

  // species 14: N
  // Computed from Lennard-Jones
  sqrtOneOverTc[14] = 1.0316275924140e-01;
  sqrtAsti[14] = 6.0230890290396e+04;
  Bi[14] = 1.3186329724611e+00;
  Fomega[14] = 4.8508000000000e-01;

  // species 15: NNH
  // Computed from Lennard-Jones
  sqrtOneOverTc[15] = 1.0316275924140e-01;
  sqrtAsti[15] = 3.5924732016994e+04;
  Bi[15] = 9.7197400314873e-01;
  Fomega[15] = 4.8508000000000e-01;

  // species 16: N2H4
  // Computed from Lennard-Jones
  sqrtOneOverTc[16] = 6.0882871132455e-02;
  sqrtAsti[16] = 6.4796713909941e+04;
  Bi[16] = 1.2160862543432e+00;
  Fomega[16] = 4.8508000000000e-01;

  // species 17: N2H3
  // Computed from Lennard-Jones
  sqrtOneOverTc[17] = 6.1639209090192e-02;
  sqrtAsti[17] = 5.8500221172854e+04;
  Bi[17] = 9.8405007346676e-01;
  Fomega[17] = 4.8508000000000e-01;

  // species 18: N2H2
  // Computed from Lennard-Jones
  sqrtOneOverTc[18] = 1.0316275924140e-01;
  sqrtAsti[18] = 3.4718866886354e+04;
  Bi[18] = 9.3934830234373e-01;
  Fomega[18] = 4.8508000000000e-01;

  // species 19: H2NN
  // Computed from Lennard-Jones
  sqrtOneOverTc[19] = 1.0316275924140e-01;
  sqrtAsti[19] = 3.4718866886354e+04;
  Bi[19] = 9.3934830234373e-01;
  Fomega[19] = 4.8508000000000e-01;

  // species 20: NH2OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[20] = 8.0693142212399e-02;
  sqrtAsti[20] = 3.5577672688948e+04;
  Bi[20] = 6.6379081274838e-01;
  Fomega[20] = 4.8508000000000e-01;

  // species 21: H2NO
  // Computed from Lennard-Jones
  sqrtOneOverTc[21] = 8.0693142212399e-02;
  sqrtAsti[21] = 3.6697599429016e+04;
  Bi[21] = 6.8468585800634e-01;
  Fomega[21] = 4.8508000000000e-01;

  // species 22: HNOH
  // Computed from Lennard-Jones
  sqrtOneOverTc[22] = 8.0693142212399e-02;
  sqrtAsti[22] = 3.6697599429016e+04;
  Bi[22] = 6.8468585800634e-01;
  Fomega[22] = 4.8508000000000e-01;

  // species 23: HNO
  // Computed from Lennard-Jones
  sqrtOneOverTc[23] = 6.6857109237576e-02;
  sqrtAsti[23] = 4.4519183095672e+04;
  Bi[23] = 6.6994890773223e-01;
  Fomega[23] = 4.8508000000000e-01;

  // species 24: HON
  // Computed from Lennard-Jones
  sqrtOneOverTc[24] = 8.0693142212399e-02;
  sqrtAsti[24] = 3.7890324657121e+04;
  Bi[24] = 7.0693914184172e-01;
  Fomega[24] = 4.8508000000000e-01;

  // species 25: NO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[25] = 4.7727154637225e-02;
  sqrtAsti[25] = 5.0034575873633e+04;
  Bi[25] = 6.3969198037883e-01;
  Fomega[25] = 4.8508000000000e-01;

  // species 26: HONO
  // Computed from Lennard-Jones
  sqrtOneOverTc[26] = 4.6594862360960e-02;
  sqrtAsti[26] = 5.2077608058913e+04;
  Bi[26] = 6.7497925819441e-01;
  Fomega[26] = 4.8508000000000e-01;

  // species 27: HNO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[27] = 4.6594862360960e-02;
  sqrtAsti[27] = 5.2077608058913e+04;
  Bi[27] = 6.7497925819441e-01;
  Fomega[27] = 4.8508000000000e-01;

  // species 28: NO3
  // Computed from Lennard-Jones
  sqrtOneOverTc[28] = 4.3585502734650e-02;
  sqrtAsti[28] = 4.6283218529771e+04;
  Bi[28] = 6.1524100004940e-01;
  Fomega[28] = 4.8508000000000e-01;

  // species 29: HONO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[29] = 4.3585502734650e-02;
  sqrtAsti[29] = 4.5542828060051e+04;
  Bi[29] = 6.0539901871172e-01;
  Fomega[29] = 4.8508000000000e-01;

  // species 30: N2O
  // Imported from NIST
  sqrtOneOverTc[30] = 5.6832861622539e-02;
  sqrtAsti[30] = 4.4894507333531e+04;
  Bi[30] = 6.9844955486412e-01;
  Fomega[30] = 7.3247646842800e-01;

  // species 31: HNO3
  // Computed from Lennard-Jones
  sqrtOneOverTc[31] = 5.0328203473231e-02;
  sqrtAsti[31] = 3.0003972448998e+04;
  Bi[31] = 3.5034665434706e-01;
  Fomega[31] = 4.8508000000000e-01;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
